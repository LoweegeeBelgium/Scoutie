[
    {
        "link": "https://raw.githubusercontent.com/vinta/awesome-python/master/sort.py",
        "vector": "['def', 'sort_blocks():', 'with', \"open('README.md',\", \"'r')\", 'as', 'read_me_file:', 'read_me', '=', 'read_me_file.read()', 'table_of_contents', '=', \"''.join(read_me.split('-\", '-', \"-')[0])\", 'blocks', '=', \"''.join(read_me.split('-\", '-', \"-')[1]).split('\\\\n\", 'for', 'i', 'in', 'range(len(blocks)):', 'if', 'i', '==', '0:', 'blocks[i]', '=', 'blocks[i]', '+', \"'\\\\n'\", 'else:', 'blocks[i]', '=', \"'\", 'inner_blocks', '=', \"sorted(blocks[0].split('\", 'for', 'i', 'in', 'range(1,', 'len(inner_blocks)):', 'if', 'inner_blocks[i][0]', '!=', \"'\", 'inner_blocks[i]', '=', \"'\", 'inner_blocks', '=', \"''.join(inner_blocks)\", 'blocks[0]', '=', 'inner_blocks', 'final_README', '=', 'table_of_contents', '+', \"'-\", '-', \"-'\", '+', \"''.join(blocks)\", 'with', \"open('README.md',\", \"'w+')\", 'as', 'sorted_file:', 'sorted_file.write(final_README)', 'def', 'main():', 'with', \"open('README.md',\", \"'r')\", 'as', 'read_me_file:', 'read_me', '=', 'read_me_file.readlines()', 'blocks', '=', '[]', 'last_indent', '=', 'None', 'for', 'line', 'in', 'read_me:', 's_line', '=', 'line.lstrip()', 'indent', '=', 'len(line)', '-', 'len(s_line)', 'if', 'any([s_line.startswith(s)', 'for', 's', 'in', \"['*\", \"[',\", \"'-\", \"[']]):\", 'if', 'indent', '==', 'last_indent:', 'blocks[-1].append(line)', 'else:', 'blocks.append([line])', 'last_indent', '=', 'indent', 'else:', 'blocks.append([line])', 'last_indent', '=', 'None', 'with', \"open('README.md',\", \"'w+')\", 'as', 'sorted_file:', 'blocks', '=', '[', \"''.join(sorted(block,\", 'key=str.lower))', 'for', 'block', 'in', 'blocks', ']', \"sorted_file.write(''.join(blocks))\", 'sort_blocks()', 'if', '__name__', '==', '\"__main__\":', 'main()']"
    },
    {
        "link": "https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/object_oriented_design/call_center/__init__.py",
        "vector": "[]"
    },
    {
        "link": "https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/object_oriented_design/call_center/call_center.py",
        "vector": "['from', 'abc', 'import', 'ABCMeta,', 'abstractmethod', 'from', 'collections', 'import', 'deque', 'from', 'enum', 'import', 'Enum', 'class', 'Rank(Enum):', 'OPERATOR', '=', '0', 'SUPERVISOR', '=', '1', 'DIRECTOR', '=', '2', 'class', 'Employee(metaclass=ABCMeta):', 'def', '__init__(self,', 'employee_id,', 'name,', 'rank,', 'call_center):', 'self.employee_id', '=', 'employee_id', 'self.name', '=', 'name', 'self.rank', '=', 'rank', 'self.call', '=', 'None', 'self.call_center', '=', 'call_center', 'def', 'take_call(self,', 'call):', 'self.call', '=', 'call', 'self.call.employee', '=', 'self', 'self.call.state', '=', 'CallState.IN_PROGRESS', 'def', 'complete_call(self):', 'self.call.state', '=', 'CallState.COMPLETE', 'self.call_center.notify_call_completed(self.call)', '@abstractmethod', 'def', 'escalate_call(self):', 'pass', 'def', '_escalate_call(self):', 'self.call.state', '=', 'CallState.READY', 'call', '=', 'self.call', 'self.call', '=', 'None', 'self.call_center.notify_call_escalated(call)', 'class', 'Operator(Employee):', 'def', '__init__(self,', 'employee_id,', 'name):', 'super(Operator,', 'self).__init__(employee_id,', 'name,', 'Rank.OPERATOR)', 'def', 'escalate_call(self):', 'self.call.level', '=', 'Rank.SUPERVISOR', 'self._escalate_call()', 'class', 'Supervisor(Employee):', 'def', '__init__(self,', 'employee_id,', 'name):', 'super(Operator,', 'self).__init__(employee_id,', 'name,', 'Rank.SUPERVISOR)', 'def', 'escalate_call(self):', 'self.call.level', '=', 'Rank.DIRECTOR', 'self._escalate_call()', 'class', 'Director(Employee):', 'def', '__init__(self,', 'employee_id,', 'name):', 'super(Operator,', 'self).__init__(employee_id,', 'name,', 'Rank.DIRECTOR)', 'def', 'escalate_call(self):', 'raise', \"NotImplementedError('Directors\", 'must', 'be', 'able', 'to', 'handle', 'any', \"call')\", 'class', 'CallState(Enum):', 'READY', '=', '0', 'IN_PROGRESS', '=', '1', 'COMPLETE', '=', '2', 'class', 'Call(object):', 'def', '__init__(self,', 'rank):', 'self.state', '=', 'CallState.READY', 'self.rank', '=', 'rank', 'self.employee', '=', 'None', 'class', 'CallCenter(object):', 'def', '__init__(self,', 'operators,', 'supervisors,', 'directors):', 'self.operators', '=', 'operators', 'self.supervisors', '=', 'supervisors', 'self.directors', '=', 'directors', 'self.queued_calls', '=', 'deque()', 'def', 'dispatch_call(self,', 'call):', 'if', 'call.rank', 'not', 'in', '(Rank.OPERATOR,', 'Rank.SUPERVISOR,', 'Rank.DIRECTOR):', 'raise', \"ValueError('Invalid\", 'call', 'rank:', \"{}'.format(call.rank))\", 'employee', '=', 'None', 'if', 'call.rank', '==', 'Rank.OPERATOR:', 'employee', '=', 'self._dispatch_call(call,', 'self.operators)', 'if', 'call.rank', '==', 'Rank.SUPERVISOR', 'or', 'employee', 'is', 'None:', 'employee', '=', 'self._dispatch_call(call,', 'self.supervisors)', 'if', 'call.rank', '==', 'Rank.DIRECTOR', 'or', 'employee', 'is', 'None:', 'employee', '=', 'self._dispatch_call(call,', 'self.directors)', 'if', 'employee', 'is', 'None:', 'self.queued_calls.append(call)', 'def', '_dispatch_call(self,', 'call,', 'employees):', 'for', 'employee', 'in', 'employees:', 'if', 'employee.call', 'is', 'None:', 'employee.take_call(call)', 'return', 'employee', 'return', 'None', 'def', 'notify_call_escalated(self,', 'call):', 'pass', 'def', 'notify_call_completed(self,', 'call):', 'pass', 'def', 'dispatch_queued_call_to_newly_freed_employee(self,', 'call,', 'employee):', 'pass']"
    },
    {
        "link": "https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/object_oriented_design/deck_of_cards/__init__.py",
        "vector": "[]"
    },
    {
        "link": "https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/object_oriented_design/deck_of_cards/deck_of_cards.py",
        "vector": "['from', 'abc', 'import', 'ABCMeta,', 'abstractmethod', 'from', 'enum', 'import', 'Enum', 'import', 'sys', 'class', 'Suit(Enum):', 'HEART', '=', '0', 'DIAMOND', '=', '1', 'CLUBS', '=', '2', 'SPADE', '=', '3', 'class', 'Card(metaclass=ABCMeta):', 'def', '__init__(self,', 'value,', 'suit):', 'self.value', '=', 'value', 'self.suit', '=', 'suit', 'self.is_available', '=', 'True', '@property', '@abstractmethod', 'def', 'value(self):', 'pass', '@value.setter', '@abstractmethod', 'def', 'value(self,', 'other):', 'pass', 'class', 'BlackJackCard(Card):', 'def', '__init__(self,', 'value,', 'suit):', 'super(BlackJackCard,', 'self).__init__(value,', 'suit)', 'def', 'is_ace(self):', 'return', 'True', 'if', 'self._value', '==', '1', 'else', 'False', 'def', 'is_face_card(self):', 'return', 'True', 'if', '10', '<', 'self._value', '<=', '13', 'else', 'False', '@property', 'def', 'value(self):', 'if', 'self.is_ace()', '==', '1:', 'return', '1', 'elif', 'self.is_face_card():', 'return', '10', 'else:', 'return', 'self._value', '@value.setter', 'def', 'value(self,', 'new_value):', 'if', '1', '<=', 'new_value', '<=', '13:', 'self._value', '=', 'new_value', 'else:', 'raise', \"ValueError('Invalid\", 'card', 'value:', \"{}'.format(new_value))\", 'class', 'Hand(object):', 'def', '__init__(self,', 'cards):', 'self.cards', '=', 'cards', 'def', 'add_card(self,', 'card):', 'self.cards.append(card)', 'def', 'score(self):', 'total_value', '=', '0', 'for', 'card', 'in', 'self.cards:', 'total_value', '+=', 'card.value', 'return', 'total_value', 'class', 'BlackJackHand(Hand):', 'BLACKJACK', '=', '21', 'def', '__init__(self,', 'cards):', 'super(BlackJackHand,', 'self).__init__(cards)', 'def', 'score(self):', 'min_over', '=', 'sys.MAXSIZE', 'max_under', '=', '-sys.MAXSIZE', 'for', 'score', 'in', 'self.possible_scores():', 'if', 'self.BLACKJACK', '<', 'score', '<', 'min_over:', 'min_over', '=', 'score', 'elif', 'max_under', '<', 'score', '<=', 'self.BLACKJACK:', 'max_under', '=', 'score', 'return', 'max_under', 'if', 'max_under', '!=', '-sys.MAXSIZE', 'else', 'min_over', 'def', 'possible_scores(self):', 'pass', 'class', 'Deck(object):', 'def', '__init__(self,', 'cards):', 'self.cards', '=', 'cards', 'self.deal_index', '=', '0', 'def', 'remaining_cards(self):', 'return', 'len(self.cards)', '-', 'self.deal_index', 'def', 'deal_card(self):', 'try:', 'card', '=', 'self.cards[self.deal_index]', 'card.is_available', '=', 'False', 'self.deal_index', '+=', '1', 'except', 'IndexError:', 'return', 'None', 'return', 'card', 'def', 'shuffle(self):', 'pass']"
    },
    {
        "link": "https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/object_oriented_design/hash_table/__init__.py",
        "vector": "[]"
    },
    {
        "link": "https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/object_oriented_design/hash_table/hash_map.py",
        "vector": "['class', 'Item(object):', 'def', '__init__(self,', 'key,', 'value):', 'self.key', '=', 'key', 'self.value', '=', 'value', 'class', 'HashTable(object):', 'def', '__init__(self,', 'size):', 'self.size', '=', 'size', 'self.table', '=', '[[]', 'for', '_', 'in', 'range(self.size)]', 'def', '_hash_function(self,', 'key):', 'return', 'key', '%', 'self.size', 'def', 'set(self,', 'key,', 'value):', 'hash_index', '=', 'self._hash_function(key)', 'for', 'item', 'in', 'self.table[hash_index]:', 'if', 'item.key', '==', 'key:', 'item.value', '=', 'value', 'return', 'self.table[hash_index].append(Item(key,', 'value))', 'def', 'get(self,', 'key):', 'hash_index', '=', 'self._hash_function(key)', 'for', 'item', 'in', 'self.table[hash_index]:', 'if', 'item.key', '==', 'key:', 'return', 'item.value', 'raise', \"KeyError('Key\", 'not', \"found')\", 'def', 'remove(self,', 'key):', 'hash_index', '=', 'self._hash_function(key)', 'for', 'index,', 'item', 'in', 'enumerate(self.table[hash_index]):', 'if', 'item.key', '==', 'key:', 'del', 'self.table[hash_index][index]', 'return', 'raise', \"KeyError('Key\", 'not', \"found')\"]"
    },
    {
        "link": "https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/object_oriented_design/lru_cache/__init__.py",
        "vector": "[]"
    },
    {
        "link": "https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/object_oriented_design/lru_cache/lru_cache.py",
        "vector": "['class', 'Node(object):', 'def', '__init__(self,', 'results):', 'self.results', '=', 'results', 'self.next', '=', 'next', 'class', 'LinkedList(object):', 'def', '__init__(self):', 'self.head', '=', 'None', 'self.tail', '=', 'None', 'def', 'move_to_front(self,', 'node):', 'pass', 'def', 'append_to_front(self,', 'node):', 'pass', 'def', 'remove_from_tail(self):', 'pass', 'class', 'Cache(object):', 'def', '__init__(self,', 'MAX_SIZE):', 'self.MAX_SIZE', '=', 'MAX_SIZE', 'self.size', '=', '0', 'self.lookup', '=', '{}', 'self.linked_list', '=', 'LinkedList()', 'def', 'get(self,', 'query):', 'node', '=', 'self.lookup.get(query)', 'if', 'node', 'is', 'None:', 'return', 'None', 'self.linked_list.move_to_front(node)', 'return', 'node.results', 'def', 'set(self,', 'results,', 'query):', 'node', '=', 'self.lookup.get(query)', 'if', 'node', 'is', 'not', 'None:', 'node.results', '=', 'results', 'self.linked_list.move_to_front(node)', 'else:', 'if', 'self.size', '==', 'self.MAX_SIZE:', 'self.lookup.pop(self.linked_list.tail.query,', 'None)', 'self.linked_list.remove_from_tail()', 'else:', 'self.size', '+=', '1', 'new_node', '=', 'Node(results)', 'self.linked_list.append_to_front(new_node)', 'self.lookup[query]', '=', 'new_node']"
    },
    {
        "link": "https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/object_oriented_design/online_chat/__init__.py",
        "vector": "[]"
    },
    {
        "link": "https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/object_oriented_design/online_chat/online_chat.py",
        "vector": "['from', 'abc', 'import', 'ABCMeta', 'from', 'enum', 'import', 'Enum', 'class', 'UserService(object):', 'def', '__init__(self):', 'self.users_by_id', '=', '{}', 'def', 'add_user(self,', 'user_id,', 'name,', 'pass_hash):', 'pass', 'def', 'remove_user(self,', 'user_id):', 'pass', 'def', 'add_friend_request(self,', 'from_user_id,', 'to_user_id):', 'pass', 'def', 'approve_friend_request(self,', 'from_user_id,', 'to_user_id):', 'pass', 'def', 'reject_friend_request(self,', 'from_user_id,', 'to_user_id):', 'pass', 'class', 'User(object):', 'def', '__init__(self,', 'user_id,', 'name,', 'pass_hash):', 'self.user_id', '=', 'user_id', 'self.name', '=', 'name', 'self.pass_hash', '=', 'pass_hash', 'self.friends_by_id', '=', '{}', 'self.friend_ids_to_private_chats', '=', '{}', 'self.group_chats_by_id', '=', '{}', 'self.received_friend_requests_by_friend_id', '=', '{}', 'self.sent_friend_requests_by_friend_id', '=', '{}', 'def', 'message_user(self,', 'friend_id,', 'message):', 'pass', 'def', 'message_group(self,', 'group_id,', 'message):', 'pass', 'def', 'send_friend_request(self,', 'friend_id):', 'pass', 'def', 'receive_friend_request(self,', 'friend_id):', 'pass', 'def', 'approve_friend_request(self,', 'friend_id):', 'pass', 'def', 'reject_friend_request(self,', 'friend_id):', 'pass', 'class', 'Chat(metaclass=ABCMeta):', 'def', '__init__(self,', 'chat_id):', 'self.chat_id', '=', 'chat_id', 'self.users', '=', '[]', 'self.messages', '=', '[]', 'class', 'PrivateChat(Chat):', 'def', '__init__(self,', 'first_user,', 'second_user):', 'super(PrivateChat,', 'self).__init__()', 'self.users.append(first_user)', 'self.users.append(second_user)', 'class', 'GroupChat(Chat):', 'def', 'add_user(self,', 'user):', 'pass', 'def', 'remove_user(self,', 'user):', 'pass', 'class', 'Message(object):', 'def', '__init__(self,', 'message_id,', 'message,', 'timestamp):', 'self.message_id', '=', 'message_id', 'self.message', '=', 'message', 'self.timestamp', '=', 'timestamp', 'class', 'AddRequest(object):', 'def', '__init__(self,', 'from_user_id,', 'to_user_id,', 'request_status,', 'timestamp):', 'self.from_user_id', '=', 'from_user_id', 'self.to_user_id', '=', 'to_user_id', 'self.request_status', '=', 'request_status', 'self.timestamp', '=', 'timestamp', 'class', 'RequestStatus(Enum):', 'UNREAD', '=', '0', 'READ', '=', '1', 'ACCEPTED', '=', '2', 'REJECTED', '=', '3']"
    },
    {
        "link": "https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/object_oriented_design/parking_lot/__init__.py",
        "vector": "[]"
    },
    {
        "link": "https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/object_oriented_design/parking_lot/parking_lot.py",
        "vector": "['from', 'abc', 'import', 'ABCMeta,', 'abstractmethod', 'from', 'enum', 'import', 'Enum', 'class', 'VehicleSize(Enum):', 'MOTORCYCLE', '=', '0', 'COMPACT', '=', '1', 'LARGE', '=', '2', 'class', 'Vehicle(metaclass=ABCMeta):', 'def', '__init__(self,', 'vehicle_size,', 'license_plate,', 'spot_size):', 'self.vehicle_size', '=', 'vehicle_size', 'self.license_plate', '=', 'license_plate', 'self.spot_size', 'self.spots_taken', '=', '[]', 'def', 'clear_spots(self):', 'for', 'spot', 'in', 'self.spots_taken:', 'spot.remove_vehicle(self)', 'self.spots_taken', '=', '[]', 'def', 'take_spot(self,', 'spot):', 'self.spots_taken.append(spot)', '@abstractmethod', 'def', 'can_fit_in_spot(self,', 'spot):', 'pass', 'class', 'Motorcycle(Vehicle):', 'def', '__init__(self,', 'license_plate):', 'super(Motorcycle,', 'self).__init__(VehicleSize.MOTORCYCLE,', 'license_plate,', 'spot_size=1)', 'def', 'can_fit_in_spot(self,', 'spot):', 'return', 'True', 'class', 'Car(Vehicle):', 'def', '__init__(self,', 'license_plate):', 'super(Car,', 'self).__init__(VehicleSize.COMPACT,', 'license_plate,', 'spot_size=1)', 'def', 'can_fit_in_spot(self,', 'spot):', 'return', 'spot.size', 'in', '(VehicleSize.LARGE,', 'VehicleSize.COMPACT)', 'class', 'Bus(Vehicle):', 'def', '__init__(self,', 'license_plate):', 'super(Bus,', 'self).__init__(VehicleSize.LARGE,', 'license_plate,', 'spot_size=5)', 'def', 'can_fit_in_spot(self,', 'spot):', 'return', 'spot.size', '==', 'VehicleSize.LARGE', 'class', 'ParkingLot(object):', 'def', '__init__(self,', 'num_levels):', 'self.num_levels', '=', 'num_levels', 'self.levels', '=', '[]', 'def', 'park_vehicle(self,', 'vehicle):', 'for', 'level', 'in', 'self.levels:', 'if', 'level.park_vehicle(vehicle):', 'return', 'True', 'return', 'False', 'class', 'Level(object):', 'SPOTS_PER_ROW', '=', '10', 'def', '__init__(self,', 'floor,', 'total_spots):', 'self.floor', '=', 'floor', 'self.num_spots', '=', 'total_spots', 'self.available_spots', '=', '0', 'self.spots', '=', '[]', 'def', 'spot_freed(self):', 'self.available_spots', '+=', '1', 'def', 'park_vehicle(self,', 'vehicle):', 'spot', '=', 'self._find_available_spot(vehicle)', 'if', 'spot', 'is', 'None:', 'return', 'None', 'else:', 'spot.park_vehicle(vehicle)', 'return', 'spot', 'def', '_find_available_spot(self,', 'vehicle):', 'pass', 'def', '_park_starting_at_spot(self,', 'spot,', 'vehicle):', 'pass', 'class', 'ParkingSpot(object):', 'def', '__init__(self,', 'level,', 'row,', 'spot_number,', 'spot_size,', 'vehicle_size):', 'self.level', '=', 'level', 'self.row', '=', 'row', 'self.spot_number', '=', 'spot_number', 'self.spot_size', '=', 'spot_size', 'self.vehicle_size', '=', 'vehicle_size', 'self.vehicle', '=', 'None', 'def', 'is_available(self):', 'return', 'True', 'if', 'self.vehicle', 'is', 'None', 'else', 'False', 'def', 'can_fit_vehicle(self,', 'vehicle):', 'if', 'self.vehicle', 'is', 'not', 'None:', 'return', 'False', 'return', 'vehicle.can_fit_in_spot(self)', 'def', 'park_vehicle(self,', 'vehicle):', 'pass', 'def', 'remove_vehicle(self):', 'pass']"
    },
    {
        "link": "https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/mint/__init__.py",
        "vector": "[]"
    },
    {
        "link": "https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/mint/mint_mapreduce.py",
        "vector": "['from', 'mrjob.job', 'import', 'MRJob', 'class', 'SpendingByCategory(MRJob):', 'def', '__init__(self,', 'categorizer):', 'self.categorizer', '=', 'categorizer', '...', 'def', 'current_year_month(self):', '...', 'def', 'extract_year_month(self,', 'timestamp):', '...', 'def', 'handle_budget_notifications(self,', 'key,', 'total):', '...', 'def', 'mapper(self,', '_,', 'line):', 'timestamp,', 'category,', 'amount', '=', \"line.split('\\\\t')\", 'period', '=', 'self.', 'extract_year_month(timestamp)', 'if', 'period', '==', 'self.current_year_month():', 'yield', '(period,', 'category),', 'amount', 'def', 'reducer(self,', 'key,', 'values):', 'total', '=', 'sum(values)', 'self.handle_budget_notifications(key,', 'total)', 'yield', 'key,', 'sum(values)', 'def', 'steps(self):', 'return', '[', 'self.mr(mapper=self.mapper,', 'reducer=self.reducer)', ']', 'if', '__name__', '==', \"'__main__':\", 'SpendingByCategory.run()']"
    },
    {
        "link": "https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/mint/mint_snippets.py",
        "vector": "['from', 'enum', 'import', 'Enum', 'class', 'DefaultCategories(Enum):', 'HOUSING', '=', '0', 'FOOD', '=', '1', 'GAS', '=', '2', 'SHOPPING', '=', '3', 'seller_category_map', '=', '{}', \"seller_category_map['Exxon']\", '=', 'DefaultCategories.GAS', \"seller_category_map['Target']\", '=', 'DefaultCategories.SHOPPING', 'class', 'Categorizer(object):', 'def', '__init__(self,', 'seller_category_map,', 'seller_category_overrides_map):', 'self.seller_category_map', '=', 'seller_category_map', 'self.seller_category_overrides_map', '=', 'seller_category_overrides_map', 'def', 'categorize(self,', 'transaction):', 'if', 'transaction.seller', 'in', 'self.seller_category_map:', 'return', 'self.seller_category_map[transaction.seller]', 'if', 'transaction.seller', 'in', 'self.seller_category_overrides_map:', 'seller_category_map[transaction.seller]', '=', '\\\\', 'self.manual_overrides[transaction.seller].peek_min()', 'return', 'self.seller_category_map[transaction.seller]', 'return', 'None', 'class', 'Transaction(object):', 'def', '__init__(self,', 'timestamp,', 'seller,', 'amount):', 'self.timestamp', '=', 'timestamp', 'self.seller', '=', 'seller', 'self.amount', '=', 'amount', 'class', 'Budget(object):', 'def', '__init__(self,', 'template_categories_to_budget_map):', 'self.categories_to_budget_map', '=', 'template_categories_to_budget_map', 'def', 'override_category_budget(self,', 'category,', 'amount):', 'self.categories_to_budget_map[category]', '=', 'amount']"
    },
    {
        "link": "https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/pastebin/__init__.py",
        "vector": "[]"
    },
    {
        "link": "https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/pastebin/pastebin.py",
        "vector": "['from', 'mrjob.job', 'import', 'MRJob', 'class', 'HitCounts(MRJob):', 'def', 'extract_url(self,', 'line):', 'pass', 'def', 'extract_year_month(self,', 'line):', 'pass', 'def', 'mapper(self,', '_,', 'line):', 'url', '=', 'self.extract_url(line)', 'period', '=', 'self.extract_year_month(line)', 'yield', '(period,', 'url),', '1', 'def', 'reducer(self,', 'key,', 'values):', 'yield', 'key,', 'sum(values)', 'def', 'steps(self):', 'return', '[', 'self.mr(mapper=self.mapper,', 'reducer=self.reducer)', ']', 'if', '__name__', '==', \"'__main__':\", 'HitCounts.run()']"
    },
    {
        "link": "https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/query_cache/__init__.py",
        "vector": "[]"
    },
    {
        "link": "https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/query_cache/query_cache_snippets.py",
        "vector": "['class', 'QueryApi(object):', 'def', '__init__(self,', 'memory_cache,', 'reverse_index_cluster):', 'self.memory_cache', '=', 'memory_cache', 'self.reverse_index_cluster', '=', 'reverse_index_cluster', 'def', 'parse_query(self,', 'query):', '...', 'def', 'process_query(self,', 'query):', 'query', '=', 'self.parse_query(query)', 'results', '=', 'self.memory_cache.get(query)', 'if', 'results', 'is', 'None:', 'results', '=', 'self.reverse_index_cluster.process_search(query)', 'self.memory_cache.set(query,', 'results)', 'return', 'results', 'class', 'Node(object):', 'def', '__init__(self,', 'query,', 'results):', 'self.query', '=', 'query', 'self.results', '=', 'results', 'class', 'LinkedList(object):', 'def', '__init__(self):', 'self.head', '=', 'None', 'self.tail', '=', 'None', 'def', 'move_to_front(self,', 'node):', '...', 'def', 'append_to_front(self,', 'node):', '...', 'def', 'remove_from_tail(self):', '...', 'class', 'Cache(object):', 'def', '__init__(self,', 'MAX_SIZE):', 'self.MAX_SIZE', '=', 'MAX_SIZE', 'self.size', '=', '0', 'self.lookup', '=', '{}', 'self.linked_list', '=', 'LinkedList()', 'def', 'get(self,', 'query):', 'node', '=', 'self.lookup[query]', 'if', 'node', 'is', 'None:', 'return', 'None', 'self.linked_list.move_to_front(node)', 'return', 'node.results', 'def', 'set(self,', 'results,', 'query):', 'node', '=', 'self.map[query]', 'if', 'node', 'is', 'not', 'None:', 'node.results', '=', 'results', 'self.linked_list.move_to_front(node)', 'else:', 'if', 'self.size', '==', 'self.MAX_SIZE:', 'self.lookup.pop(self.linked_list.tail.query,', 'None)', 'self.linked_list.remove_from_tail()', 'else:', 'self.size', '+=', '1', 'new_node', '=', 'Node(query,', 'results)', 'self.linked_list.append_to_front(new_node)', 'self.lookup[query]', '=', 'new_node']"
    },
    {
        "link": "https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/sales_rank/__init__.py",
        "vector": "[]"
    },
    {
        "link": "https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/sales_rank/sales_rank_mapreduce.py",
        "vector": "['from', 'mrjob.job', 'import', 'MRJob', 'class', 'SalesRanker(MRJob):', 'def', 'within_past_week(self,', 'timestamp):', '...', 'def', 'mapper(self,', '_,', 'line):', 'timestamp,', 'product_id,', 'category,', 'quantity', '=', \"line.split('\\\\t')\", 'if', 'self.within_past_week(timestamp):', 'yield', '(category,', 'product_id),', 'quantity', 'def', 'reducer(self,', 'key,', 'values):', 'yield', 'key,', 'sum(values)', 'def', 'mapper_sort(self,', 'key,', 'value):', 'category,', 'product_id', '=', 'key', 'quantity', '=', 'value', 'yield', '(category,', 'quantity),', 'product_id', 'def', 'reducer_identity(self,', 'key,', 'value):', 'yield', 'key,', 'value', 'def', 'steps(self):', 'return', '[', 'self.mr(mapper=self.mapper,', 'reducer=self.reducer),', 'self.mr(mapper=self.mapper_sort,', 'reducer=self.reducer_identity),', ']', 'if', '__name__', '==', \"'__main__':\", 'SalesRanker.run()']"
    },
    {
        "link": "https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/social_graph/__init__.py",
        "vector": "[]"
    },
    {
        "link": "https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/social_graph/social_graph_snippets.py",
        "vector": "['from', 'collections', 'import', 'deque', 'from', 'enum', 'import', 'Enum', 'class', 'State(Enum):', 'unvisited', '=', '0', 'visited', '=', '1', 'class', 'Graph(object):', 'def', 'bfs(self,', 'source,', 'dest):', 'if', 'source', 'is', 'None:', 'return', 'False', 'queue', '=', 'deque()', 'queue.append(source)', 'source.visit_state', '=', 'State.visited', 'while', 'queue:', 'node', '=', 'queue.popleft()', 'print(node)', 'if', 'dest', 'is', 'node:', 'return', 'True', 'for', 'adjacent_node', 'in', 'node.adj_nodes.values():', 'if', 'adjacent_node.visit_state', '==', 'State.unvisited:', 'queue.append(adjacent_node)', 'adjacent_node.visit_state', '=', 'State.visited', 'return', 'False', 'class', 'Person(object):', 'def', '__init__(self,', 'id,', 'name):', 'self.id', '=', 'id', 'self.name', '=', 'name', 'self.friend_ids', '=', '[]', 'class', 'LookupService(object):', 'def', '__init__(self):', 'self.lookup', '=', '{}', 'def', 'get_person(self,', 'person_id):', 'person_server', '=', 'self.lookup[person_id]', 'return', 'person_server.people[person_id]', 'class', 'PersonServer(object):', 'def', '__init__(self):', 'self.people', '=', '{}', 'def', 'get_people(self,', 'ids):', 'results', '=', '[]', 'for', 'id', 'in', 'ids:', 'if', 'id', 'in', 'self.people:', 'results.append(self.people[id])', 'return', 'results', 'class', 'UserGraphService(object):', 'def', '__init__(self,', 'person_ids,', 'lookup):', 'self.lookup', '=', 'lookup', 'self.person_ids', '=', 'person_ids', 'self.visited_ids', '=', 'set()', 'def', 'bfs(self,', 'source,', 'dest):', 'pass']"
    },
    {
        "link": "https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/web_crawler/__init__.py",
        "vector": "[]"
    },
    {
        "link": "https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/web_crawler/web_crawler_mapreduce.py",
        "vector": "['from', 'mrjob.job', 'import', 'MRJob', 'class', 'RemoveDuplicateUrls(MRJob):', 'def', 'mapper(self,', '_,', 'line):', 'yield', 'line,', '1', 'def', 'reducer(self,', 'key,', 'values):', 'total', '=', 'sum(values)', 'if', 'total', '==', '1:', 'yield', 'key,', 'total', 'def', 'steps(self):', 'return', '[', 'self.mr(mapper=self.mapper,', 'reducer=self.reducer)', ']', 'if', '__name__', '==', \"'__main__':\", 'RemoveDuplicateUrls.run()']"
    },
    {
        "link": "https://raw.githubusercontent.com/donnemartin/system-design-primer/master/solutions/system_design/web_crawler/web_crawler_snippets.py",
        "vector": "['class', 'PagesDataStore(object):', 'def', '__init__(self,', 'db):', 'self.db', '=', 'db', 'pass', 'def', 'add_link_to_crawl(self,', 'url):', 'pass', 'def', 'remove_link_to_crawl(self,', 'url):', 'pass', 'def', 'reduce_priority_link_to_crawl(self,', 'url):', 'pass', 'def', 'extract_max_priority_page(self):', 'pass', 'def', 'insert_crawled_link(self,', 'url,', 'signature):', 'pass', 'def', 'crawled_similar(self,', 'signature):', 'pass', 'class', 'Page(object):', 'def', '__init__(self,', 'url,', 'contents,', 'child_urls):', 'self.url', '=', 'url', 'self.contents', '=', 'contents', 'self.child_urls', '=', 'child_urls', 'self.signature', '=', 'self.create_signature()', 'def', 'create_signature(self):', 'pass', 'class', 'Crawler(object):', 'def', '__init__(self,', 'pages,', 'data_store,', 'reverse_index_queue,', 'doc_index_queue):', 'self.pages', '=', 'pages', 'self.data_store', '=', 'data_store', 'self.reverse_index_queue', '=', 'reverse_index_queue', 'self.doc_index_queue', '=', 'doc_index_queue', 'def', 'crawl_page(self,', 'page):', 'for', 'url', 'in', 'page.child_urls:', 'self.data_store.add_link_to_crawl(url)', 'self.reverse_index_queue.generate(page)', 'self.doc_index_queue.generate(page)', 'self.data_store.remove_link_to_crawl(page.url)', 'self.data_store.insert_crawled_link(page.url,', 'page.signature)', 'def', 'crawl(self):', 'while', 'True:', 'page', '=', 'self.data_store.extract_max_priority_page()', 'if', 'page', 'is', 'None:', 'break', 'if', 'self.data_store.crawled_similar(page.signature):', 'self.data_store.reduce_priority_link_to_crawl(page.url)', 'else:', 'self.crawl_page(page)', 'page', '=', 'self.data_store.extract_max_priority_page()']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/demos/blog/blog.py",
        "vector": "['import', 'aiopg', 'import', 'asyncio', 'import', 'bcrypt', 'import', 'markdown', 'import', 'os.path', 'import', 'psycopg2', 'import', 're', 'import', 'tornado', 'import', 'unicodedata', 'from', 'tornado.options', 'import', 'define,', 'options', 'define(\"port\",', 'default=8888,', 'help=\"run', 'on', 'the', 'given', 'port\",', 'type=int)', 'define(\"db_host\",', 'default=\"127.0.0.1\",', 'help=\"blog', 'database', 'host\")', 'define(\"db_port\",', 'default=5432,', 'help=\"blog', 'database', 'port\")', 'define(\"db_database\",', 'default=\"blog\",', 'help=\"blog', 'database', 'name\")', 'define(\"db_user\",', 'default=\"blog\",', 'help=\"blog', 'database', 'user\")', 'define(\"db_password\",', 'default=\"blog\",', 'help=\"blog', 'database', 'password\")', 'class', 'NoResultError(Exception):', 'pass', 'async', 'def', 'maybe_create_tables(db):', 'try:', 'with', '(await', 'db.cursor())', 'as', 'cur:', 'await', 'cur.execute(\"SELECT', 'COUNT(*)', 'FROM', 'entries', 'LIMIT', '1\")', 'await', 'cur.fetchone()', 'except', 'psycopg2.ProgrammingError:', 'with', 'open(\"schema.sql\")', 'as', 'f:', 'schema', '=', 'f.read()', 'with', '(await', 'db.cursor())', 'as', 'cur:', 'await', 'cur.execute(schema)', 'class', 'Application(tornado.web.Application):', 'def', '__init__(self,', 'db):', 'self.db', '=', 'db', 'handlers', '=', '[', '(r\"/\",', 'HomeHandler),', '(r\"/archive\",', 'ArchiveHandler),', '(r\"/feed\",', 'FeedHandler),', '(r\"/entry/([^/]+)\",', 'EntryHandler),', '(r\"/compose\",', 'ComposeHandler),', '(r\"/auth/create\",', 'AuthCreateHandler),', '(r\"/auth/login\",', 'AuthLoginHandler),', '(r\"/auth/logout\",', 'AuthLogoutHandler),', ']', 'settings', '=', 'dict(', 'blog_title=\"Tornado', 'Blog\",', 'template_path=os.path.join(os.path.dirname(__file__),', '\"templates\"),', 'static_path=os.path.join(os.path.dirname(__file__),', '\"static\"),', 'ui_modules={\"Entry\":', 'EntryModule},', 'xsrf_cookies=True,', 'cookie_secret=\"__TODO:_GENERATE_YOUR_OWN_RANDOM_VALUE_HERE__\",', 'login_url=\"/auth/login\",', 'debug=True,', ')', 'super().__init__(handlers,', '**settings)', 'class', 'BaseHandler(tornado.web.RequestHandler):', 'def', 'row_to_obj(self,', 'row,', 'cur):', 'obj', '=', 'tornado.util.ObjectDict()', 'for', 'val,', 'desc', 'in', 'zip(row,', 'cur.description):', 'obj[desc.name]', '=', 'val', 'return', 'obj', 'async', 'def', 'execute(self,', 'stmt,', '*args):', 'with', '(await', 'self.application.db.cursor())', 'as', 'cur:', 'await', 'cur.execute(stmt,', 'args)', 'async', 'def', 'query(self,', 'stmt,', '*args):', 'with', '(await', 'self.application.db.cursor())', 'as', 'cur:', 'await', 'cur.execute(stmt,', 'args)', 'return', '[self.row_to_obj(row,', 'cur)', 'for', 'row', 'in', 'await', 'cur.fetchall()]', 'async', 'def', 'queryone(self,', 'stmt,', '*args):', 'results', '=', 'await', 'self.query(stmt,', '*args)', 'if', 'len(results)', '==', '0:', 'raise', 'NoResultError()', 'elif', 'len(results)', '>', '1:', 'raise', 'ValueError(\"Expected', '1', 'result,', 'got', '%d\"', '%', 'len(results))', 'return', 'results[0]', 'async', 'def', 'prepare(self):', 'user_id', '=', 'self.get_signed_cookie(\"blogdemo_user\")', 'if', 'user_id:', 'self.current_user', '=', 'await', 'self.queryone(', '\"SELECT', '*', 'FROM', 'authors', 'WHERE', 'id', '=', '%s\",', 'int(user_id)', ')', 'async', 'def', 'any_author_exists(self):', 'return', 'bool(await', 'self.query(\"SELECT', '*', 'FROM', 'authors', 'LIMIT', '1\"))', 'class', 'HomeHandler(BaseHandler):', 'async', 'def', 'get(self):', 'entries', '=', 'await', 'self.query(', '\"SELECT', '*', 'FROM', 'entries', 'ORDER', 'BY', 'published', 'DESC', 'LIMIT', '5\"', ')', 'if', 'not', 'entries:', 'self.redirect(\"/compose\")', 'return', 'self.render(\"home.html\",', 'entries=entries)', 'class', 'EntryHandler(BaseHandler):', 'async', 'def', 'get(self,', 'slug):', 'entry', '=', 'await', 'self.queryone(\"SELECT', '*', 'FROM', 'entries', 'WHERE', 'slug', '=', '%s\",', 'slug)', 'if', 'not', 'entry:', 'raise', 'tornado.web.HTTPError(404)', 'self.render(\"entry.html\",', 'entry=entry)', 'class', 'ArchiveHandler(BaseHandler):', 'async', 'def', 'get(self):', 'entries', '=', 'await', 'self.query(\"SELECT', '*', 'FROM', 'entries', 'ORDER', 'BY', 'published', 'DESC\")', 'self.render(\"archive.html\",', 'entries=entries)', 'class', 'FeedHandler(BaseHandler):', 'async', 'def', 'get(self):', 'entries', '=', 'await', 'self.query(', '\"SELECT', '*', 'FROM', 'entries', 'ORDER', 'BY', 'published', 'DESC', 'LIMIT', '10\"', ')', 'self.set_header(\"Content-Type\",', '\"application/atom+xml\")', 'self.render(\"feed.xml\",', 'entries=entries)', 'class', 'ComposeHandler(BaseHandler):', '@tornado.web.authenticated', 'async', 'def', 'get(self):', 'id', '=', 'self.get_argument(\"id\",', 'None)', 'entry', '=', 'None', 'if', 'id:', 'entry', '=', 'await', 'self.queryone(\"SELECT', '*', 'FROM', 'entries', 'WHERE', 'id', '=', '%s\",', 'int(id))', 'self.render(\"compose.html\",', 'entry=entry)', '@tornado.web.authenticated', 'async', 'def', 'post(self):', 'id', '=', 'self.get_argument(\"id\",', 'None)', 'title', '=', 'self.get_argument(\"title\")', 'text', '=', 'self.get_argument(\"markdown\")', 'html', '=', 'markdown.markdown(text)', 'if', 'id:', 'try:', 'entry', '=', 'await', 'self.queryone(', '\"SELECT', '*', 'FROM', 'entries', 'WHERE', 'id', '=', '%s\",', 'int(id)', ')', 'except', 'NoResultError:', 'raise', 'tornado.web.HTTPError(404)', 'slug', '=', 'entry.slug', 'await', 'self.execute(', '\"UPDATE', 'entries', 'SET', 'title', '=', '%s,', 'markdown', '=', '%s,', 'html', '=', '%s', '\"', '\"WHERE', 'id', '=', '%s\",', 'title,', 'text,', 'html,', 'int(id),', ')', 'else:', 'slug', '=', 'unicodedata.normalize(\"NFKD\",', 'title)', 'slug', '=', 're.sub(r\"[^\\\\w]+\",', '\"', '\",', 'slug)', 'slug', '=', '\"-\".join(slug.lower().strip().split())', 'slug', '=', 'slug.encode(\"ascii\",', '\"ignore\").decode(\"ascii\")', 'if', 'not', 'slug:', 'slug', '=', '\"entry\"', 'while', 'True:', 'e', '=', 'await', 'self.query(\"SELECT', '*', 'FROM', 'entries', 'WHERE', 'slug', '=', '%s\",', 'slug)', 'if', 'not', 'e:', 'break', 'slug', '+=', '\"-2\"', 'await', 'self.execute(', '\"INSERT', 'INTO', 'entries', '(author_id,title,slug,markdown,html,published,updated)\"', '\"VALUES', '(%s,%s,%s,%s,%s,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP)\",', 'self.current_user.id,', 'title,', 'slug,', 'text,', 'html,', ')', 'self.redirect(\"/entry/\"', '+', 'slug)', 'class', 'AuthCreateHandler(BaseHandler):', 'def', 'get(self):', 'self.render(\"create_author.html\")', 'async', 'def', 'post(self):', 'if', 'await', 'self.any_author_exists():', 'raise', 'tornado.web.HTTPError(400,', '\"author', 'already', 'created\")', 'hashed_password', '=', 'await', 'tornado.ioloop.IOLoop.current().run_in_executor(', 'None,', 'bcrypt.hashpw,', 'tornado.escape.utf8(self.get_argument(\"password\")),', 'bcrypt.gensalt(),', ')', 'author', '=', 'await', 'self.queryone(', '\"INSERT', 'INTO', 'authors', '(email,', 'name,', 'hashed_password)', '\"', '\"VALUES', '(%s,', '%s,', '%s)', 'RETURNING', 'id\",', 'self.get_argument(\"email\"),', 'self.get_argument(\"name\"),', 'tornado.escape.to_unicode(hashed_password),', ')', 'self.set_signed_cookie(\"blogdemo_user\",', 'str(author.id))', 'self.redirect(self.get_argument(\"next\",', '\"/\"))', 'class', 'AuthLoginHandler(BaseHandler):', 'async', 'def', 'get(self):', 'if', 'not', 'await', 'self.any_author_exists():', 'self.redirect(\"/auth/create\")', 'else:', 'self.render(\"login.html\",', 'error=None)', 'async', 'def', 'post(self):', 'try:', 'author', '=', 'await', 'self.queryone(', '\"SELECT', '*', 'FROM', 'authors', 'WHERE', 'email', '=', '%s\",', 'self.get_argument(\"email\")', ')', 'except', 'NoResultError:', 'self.render(\"login.html\",', 'error=\"email', 'not', 'found\")', 'return', 'password_equal', '=', 'await', 'tornado.ioloop.IOLoop.current().run_in_executor(', 'None,', 'bcrypt.checkpw,', 'tornado.escape.utf8(self.get_argument(\"password\")),', 'tornado.escape.utf8(author.hashed_password),', ')', 'if', 'password_equal:', 'self.set_signed_cookie(\"blogdemo_user\",', 'str(author.id))', 'self.redirect(self.get_argument(\"next\",', '\"/\"))', 'else:', 'self.render(\"login.html\",', 'error=\"incorrect', 'password\")', 'class', 'AuthLogoutHandler(BaseHandler):', 'def', 'get(self):', 'self.clear_cookie(\"blogdemo_user\")', 'self.redirect(self.get_argument(\"next\",', '\"/\"))', 'class', 'EntryModule(tornado.web.UIModule):', 'def', 'render(self,', 'entry):', 'return', 'self.render_string(\"modules/entry.html\",', 'entry=entry)', 'async', 'def', 'main():', 'tornado.options.parse_command_line()', 'async', 'with', 'aiopg.create_pool(', 'host=options.db_host,', 'port=options.db_port,', 'user=options.db_user,', 'password=options.db_password,', 'dbname=options.db_database,', ')', 'as', 'db:', 'await', 'maybe_create_tables(db)', 'app', '=', 'Application(db)', 'app.listen(options.port)', 'shutdown_event', '=', 'tornado.locks.Event()', 'await', 'shutdown_event.wait()', 'if', '__name__', '==', '\"__main__\":', 'asyncio.run(main())']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/demos/chat/chatdemo.py",
        "vector": "['import', 'asyncio', 'import', 'tornado', 'import', 'os.path', 'import', 'uuid', 'from', 'tornado.options', 'import', 'define,', 'options,', 'parse_command_line', 'define(\"port\",', 'default=8888,', 'help=\"run', 'on', 'the', 'given', 'port\",', 'type=int)', 'define(\"debug\",', 'default=True,', 'help=\"run', 'in', 'debug', 'mode\")', 'class', 'MessageBuffer(object):', 'def', '__init__(self):', 'self.cond', '=', 'tornado.locks.Condition()', 'self.cache', '=', '[]', 'self.cache_size', '=', '200', 'def', 'get_messages_since(self,', 'cursor):', 'results', '=', '[]', 'for', 'msg', 'in', 'reversed(self.cache):', 'if', 'msg[\"id\"]', '==', 'cursor:', 'break', 'results.append(msg)', 'results.reverse()', 'return', 'results', 'def', 'add_message(self,', 'message):', 'self.cache.append(message)', 'if', 'len(self.cache)', '>', 'self.cache_size:', 'self.cache', '=', 'self.cache[-self.cache_size', ':]', 'self.cond.notify_all()', 'global_message_buffer', '=', 'MessageBuffer()', 'class', 'MainHandler(tornado.web.RequestHandler):', 'def', 'get(self):', 'self.render(\"index.html\",', 'messages=global_message_buffer.cache)', 'class', 'MessageNewHandler(tornado.web.RequestHandler):', 'def', 'post(self):', 'message', '=', '{\"id\":', 'str(uuid.uuid4()),', '\"body\":', 'self.get_argument(\"body\")}', 'message[\"html\"]', '=', 'tornado.escape.to_unicode(', 'self.render_string(\"message.html\",', 'message=message)', ')', 'if', 'self.get_argument(\"next\",', 'None):', 'self.redirect(self.get_argument(\"next\"))', 'else:', 'self.write(message)', 'global_message_buffer.add_message(message)', 'class', 'MessageUpdatesHandler(tornado.web.RequestHandler):', 'async', 'def', 'post(self):', 'cursor', '=', 'self.get_argument(\"cursor\",', 'None)', 'messages', '=', 'global_message_buffer.get_messages_since(cursor)', 'while', 'not', 'messages:', 'self.wait_future', '=', 'global_message_buffer.cond.wait()', 'try:', 'await', 'self.wait_future', 'except', 'asyncio.CancelledError:', 'return', 'messages', '=', 'global_message_buffer.get_messages_since(cursor)', 'if', 'self.request.connection.stream.closed():', 'return', 'self.write(dict(messages=messages))', 'def', 'on_connection_close(self):', 'self.wait_future.cancel()', 'async', 'def', 'main():', 'parse_command_line()', 'app', '=', 'tornado.web.Application(', '[', '(r\"/\",', 'MainHandler),', '(r\"/a/message/new\",', 'MessageNewHandler),', '(r\"/a/message/updates\",', 'MessageUpdatesHandler),', '],', 'cookie_secret=\"__TODO:_GENERATE_YOUR_OWN_RANDOM_VALUE_HERE__\",', 'template_path=os.path.join(os.path.dirname(__file__),', '\"templates\"),', 'static_path=os.path.join(os.path.dirname(__file__),', '\"static\"),', 'xsrf_cookies=True,', 'debug=options.debug,', ')', 'app.listen(options.port)', 'await', 'asyncio.Event().wait()', 'if', '__name__', '==', '\"__main__\":', 'asyncio.run(main())']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/demos/facebook/facebook.py",
        "vector": "['import', 'asyncio', 'import', 'os.path', 'import', 'tornado', 'from', 'tornado.options', 'import', 'define,', 'options', 'define(\"port\",', 'default=8888,', 'help=\"run', 'on', 'the', 'given', 'port\",', 'type=int)', 'define(\"facebook_api_key\",', 'help=\"your', 'Facebook', 'application', 'API', 'key\",', 'type=str)', 'define(\"facebook_secret\",', 'help=\"your', 'Facebook', 'application', 'secret\",', 'type=str)', 'class', 'Application(tornado.web.Application):', 'def', '__init__(self):', 'handlers', '=', '[', '(r\"/\",', 'MainHandler),', '(r\"/auth/login\",', 'AuthLoginHandler),', '(r\"/auth/logout\",', 'AuthLogoutHandler),', ']', 'settings', '=', 'dict(', 'cookie_secret=\"__TODO:_GENERATE_YOUR_OWN_RANDOM_VALUE_HERE__\",', 'login_url=\"/auth/login\",', 'template_path=os.path.join(os.path.dirname(__file__),', '\"templates\"),', 'static_path=os.path.join(os.path.dirname(__file__),', '\"static\"),', 'xsrf_cookies=True,', 'facebook_api_key=options.facebook_api_key,', 'facebook_secret=options.facebook_secret,', 'ui_modules={\"Post\":', 'PostModule},', 'debug=True,', 'autoescape=None,', ')', 'tornado.web.Application.__init__(self,', 'handlers,', '**settings)', 'class', 'BaseHandler(tornado.web.RequestHandler):', 'def', 'get_current_user(self):', 'user_json', '=', 'self.get_signed_cookie(\"fbdemo_user\")', 'if', 'not', 'user_json:', 'return', 'None', 'return', 'tornado.escape.json_decode(user_json)', 'class', 'MainHandler(BaseHandler,', 'tornado.auth.FacebookGraphMixin):', '@tornado.web.authenticated', 'async', 'def', 'get(self):', 'stream', '=', 'await', 'self.facebook_request(', '\"/me/home\",', 'self._on_stream,', 'access_token=self.current_user[\"access_token\"]', ')', 'if', 'stream', 'is', 'None:', 'self.redirect(\"/auth/login\")', 'return', 'self.render(\"stream.html\",', 'stream=stream)', 'class', 'AuthLoginHandler(BaseHandler,', 'tornado.auth.FacebookGraphMixin):', 'async', 'def', 'get(self):', 'my_url', '=', '(', 'self.request.protocol', '+', '\"://\"', '+', 'self.request.host', '+', '\"/auth/login?next=\"', '+', 'tornado.escape.url_escape(self.get_argument(\"next\",', '\"/\"))', ')', 'if', 'self.get_argument(\"code\",', 'False):', 'user', '=', 'await', 'self.get_authenticated_user(', 'redirect_uri=my_url,', 'client_id=self.settings[\"facebook_api_key\"],', 'client_secret=self.settings[\"facebook_secret\"],', 'code=self.get_argument(\"code\"),', ')', 'self.set_signed_cookie(\"fbdemo_user\",', 'tornado.escape.json_encode(user))', 'self.redirect(self.get_argument(\"next\",', '\"/\"))', 'return', 'self.authorize_redirect(', 'redirect_uri=my_url,', 'client_id=self.settings[\"facebook_api_key\"],', 'extra_params={\"scope\":', '\"user_posts\"},', ')', 'class', 'AuthLogoutHandler(BaseHandler,', 'tornado.auth.FacebookGraphMixin):', 'def', 'get(self):', 'self.clear_cookie(\"fbdemo_user\")', 'self.redirect(self.get_argument(\"next\",', '\"/\"))', 'class', 'PostModule(tornado.web.UIModule):', 'def', 'render(self,', 'post):', 'return', 'self.render_string(\"modules/post.html\",', 'post=post)', 'async', 'def', 'main():', 'tornado.options.parse_command_line()', 'if', 'not', '(options.facebook_api_key', 'and', 'options.facebook_secret):', 'print(\"--facebook_api_key', 'and', '--facebook_secret', 'must', 'be', 'set\")', 'return', 'http_server', '=', 'tornado.httpserver.HTTPServer(Application())', 'http_server.listen(options.port)', 'await', 'asyncio.Event().wait()', 'if', '__name__', '==', '\"__main__\":', 'asyncio.run(main())']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/demos/file_upload/file_receiver.py",
        "vector": "['import', 'asyncio', 'import', 'logging', 'from', 'urllib.parse', 'import', 'unquote', 'import', 'tornado', 'from', 'tornado', 'import', 'options', 'class', 'POSTHandler(tornado.web.RequestHandler):', 'def', 'post(self):', 'for', 'field_name,', 'files', 'in', 'self.request.files.items():', 'for', 'info', 'in', 'files:', 'filename,', 'content_type', '=', 'info[\"filename\"],', 'info[\"content_type\"]', 'body', '=', 'info[\"body\"]', 'logging.info(', \"'POST\", '\"%s\"', '\"%s\"', '%d', \"bytes',\", 'filename,', 'content_type,', 'len(body)', ')', 'self.write(\"OK\")', '@tornado.web.stream_request_body', 'class', 'PUTHandler(tornado.web.RequestHandler):', 'def', 'initialize(self):', 'self.bytes_read', '=', '0', 'def', 'data_received(self,', 'chunk):', 'self.bytes_read', '+=', 'len(chunk)', 'def', 'put(self,', 'filename):', 'filename', '=', 'unquote(filename)', 'mtype', '=', 'self.request.headers.get(\"Content-Type\")', \"logging.info('PUT\", '\"%s\"', '\"%s\"', '%d', \"bytes',\", 'filename,', 'mtype,', 'self.bytes_read)', 'self.write(\"OK\")', 'def', 'make_app():', 'return', 'tornado.web.Application([(r\"/post\",', 'POSTHandler),', '(r\"/(.*)\",', 'PUTHandler)])', 'async', 'def', 'main():', 'options.parse_command_line()', 'app', '=', 'make_app()', 'app.listen(8888)', 'await', 'asyncio.Event().wait()', 'if', '__name__', '==', '\"__main__\":', 'asyncio.run(main())']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/demos/file_upload/file_uploader.py",
        "vector": "['import', 'asyncio', 'import', 'mimetypes', 'import', 'os', 'import', 'sys', 'from', 'functools', 'import', 'partial', 'from', 'urllib.parse', 'import', 'quote', 'from', 'uuid', 'import', 'uuid4', 'from', 'tornado', 'import', 'gen,', 'httpclient', 'from', 'tornado.options', 'import', 'define,', 'options', '@gen.coroutine', 'def', 'multipart_producer(boundary,', 'filenames,', 'write):', 'boundary_bytes', '=', 'boundary.encode()', 'for', 'filename', 'in', 'filenames:', 'filename_bytes', '=', 'filename.encode()', 'mtype', '=', 'mimetypes.guess_type(filename)[0]', 'or', '\"application/octet-stream\"', 'buf', '=', '(', '(b\"--%s\\\\r\\\\n\"', '%', 'boundary_bytes)', '+', '(', \"b'Content-Disposition:\", 'form-data;', 'name=\"%s\";', 'filename=\"%s\"\\\\r\\\\n\\'', '%', '(filename_bytes,', 'filename_bytes)', ')', '+', '(b\"Content-Type:', '%s\\\\r\\\\n\"', '%', 'mtype.encode())', '+', 'b\"\\\\r\\\\n\"', ')', 'yield', 'write(buf)', 'with', 'open(filename,', '\"rb\")', 'as', 'f:', 'while', 'True:', 'chunk', '=', 'f.read(16', '*', '1024)', 'if', 'not', 'chunk:', 'break', 'yield', 'write(chunk)', 'yield', 'write(b\"\\\\r\\\\n\")', 'yield', 'write(b\"--%s--\\\\r\\\\n\"', '%', '(boundary_bytes,))', '@gen.coroutine', 'def', 'post(filenames):', 'client', '=', 'httpclient.AsyncHTTPClient()', 'boundary', '=', 'uuid4().hex', 'headers', '=', '{\"Content-Type\":', '\"multipart/form-data;', 'boundary=%s\"', '%', 'boundary}', 'producer', '=', 'partial(multipart_producer,', 'boundary,', 'filenames)', 'response', '=', 'yield', 'client.fetch(', '\"http://localhost:8888/post\",', 'method=\"POST\",', 'headers=headers,', 'body_producer=producer,', ')', 'print(response)', '@gen.coroutine', 'def', 'raw_producer(filename,', 'write):', 'with', 'open(filename,', '\"rb\")', 'as', 'f:', 'while', 'True:', 'chunk', '=', 'f.read(16', '*', '1024)', 'if', 'not', 'chunk:', 'break', 'yield', 'write(chunk)', '@gen.coroutine', 'def', 'put(filenames):', 'client', '=', 'httpclient.AsyncHTTPClient()', 'for', 'filename', 'in', 'filenames:', 'mtype', '=', 'mimetypes.guess_type(filename)[0]', 'or', '\"application/octet-stream\"', 'headers', '=', '{\"Content-Type\":', 'mtype}', 'producer', '=', 'partial(raw_producer,', 'filename)', 'url_path', '=', 'quote(os.path.basename(filename))', 'response', '=', 'yield', 'client.fetch(', '\"http://localhost:8888/%s\"', '%', 'url_path,', 'method=\"PUT\",', 'headers=headers,', 'body_producer=producer,', ')', 'print(response)', 'if', '__name__', '==', '\"__main__\":', 'define(\"put\",', 'type=bool,', 'help=\"Use', 'PUT', 'instead', 'of', 'POST\",', 'group=\"file', 'uploader\")', 'filenames', '=', 'options.parse_command_line()', 'if', 'not', 'filenames:', 'print(\"Provide', 'a', 'list', 'of', 'filenames', 'to', 'upload.\",', 'file=sys.stderr)', 'sys.exit(1)', 'method', '=', 'put', 'if', 'options.put', 'else', 'post', 'asyncio.run(method(filenames))']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/demos/google_auth/main.py",
        "vector": "['import', 'asyncio', 'import', 'json', 'import', 'tornado', 'import', 'urllib.parse', 'from', 'tornado.options', 'import', 'define,', 'options', 'from', 'tornado.web', 'import', 'url', 'define(\"port\",', 'default=8888,', 'help=\"run', 'on', 'the', 'given', 'port\",', 'type=int)', 'define(\"google_oauth_key\",', 'help=\"Google', 'OAuth', 'Key\")', 'define(\"google_oauth_secret\",', 'help=\"Google', 'OAuth', 'Secret\")', 'define(', '\"config_file\",', 'help=\"tornado', 'config', 'file\",', 'callback=lambda', 'path:', 'tornado.options.parse_config_file(path,', 'final=False),', ')', 'class', 'BaseHandler(tornado.web.RequestHandler):', 'def', 'get_current_user(self):', 'user_cookie', '=', 'self.get_signed_cookie(\"googledemo_user\")', 'if', 'user_cookie:', 'return', 'json.loads(user_cookie)', 'return', 'None', 'class', 'IndexHandler(BaseHandler,', 'tornado.auth.GoogleOAuth2Mixin):', '@tornado.web.authenticated', 'async', 'def', 'get(self):', 'try:', 'user_info', '=', 'await', 'self.oauth2_request(', '\"https://www.googleapis.com/oauth2/v1/userinfo\",', 'access_token=self.current_user[\"access_token\"],', ')', 'except', 'tornado.httpclient.HTTPClientError', 'as', 'e:', 'print(e.response.body)', 'raise', 'self.write(f\"Hello', '{user_info[\\'name\\']}\")', 'class', 'LoginHandler(BaseHandler,', 'tornado.auth.GoogleOAuth2Mixin):', 'async', 'def', 'get(self):', 'redirect_uri', '=', 'urllib.parse.urljoin(', 'self.application.settings[\"redirect_base_uri\"],', 'self.reverse_url(\"google_oauth\"),', ')', 'if', 'self.get_argument(\"code\",', 'False):', 'access', '=', 'await', 'self.get_authenticated_user(', 'redirect_uri=redirect_uri,', 'code=self.get_argument(\"code\")', ')', 'user', '=', 'await', 'self.oauth2_request(', '\"https://www.googleapis.com/oauth2/v1/userinfo\",', 'access_token=access[\"access_token\"],', ')', 'user_cookie', '=', 'dict(id=user[\"id\"],', 'access_token=access[\"access_token\"])', 'self.set_signed_cookie(\"googledemo_user\",', 'json.dumps(user_cookie))', 'self.redirect(\"/\")', 'else:', 'self.authorize_redirect(', 'redirect_uri=redirect_uri,', 'client_id=self.get_google_oauth_settings()[\"key\"],', 'scope=[\"profile\",', '\"email\"],', 'response_type=\"code\",', 'extra_params={\"approval_prompt\":', '\"auto\"},', ')', 'class', 'LogoutHandler(BaseHandler):', 'def', 'get(self):', 'self.clear_cookie(\"user\")', 'self.redirect(\"/\")', 'async', 'def', 'main():', 'tornado.options.parse_command_line()', 'app', '=', 'tornado.web.Application(', '[', 'url(r\"/\",', 'IndexHandler),', 'url(r\"/auth/google\",', 'LoginHandler,', 'name=\"google_oauth\"),', 'url(r\"/logout\",', 'LogoutHandler),', '],', 'redirect_base_uri=f\"http://localhost:{options.port}\",', 'google_oauth=dict(', 'key=options.google_oauth_key,', 'secret=options.google_oauth_secret', '),', 'debug=True,', 'cookie_secret=\"__TODO:_GENERATE_YOUR_OWN_RANDOM_VALUE_HERE__\",', 'login_url=\"/auth/google\",', ')', 'app.listen(options.port)', 'shutdown_event', '=', 'asyncio.Event()', 'await', 'shutdown_event.wait()', 'if', '__name__', '==', '\"__main__\":', 'asyncio.run(main())']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/demos/helloworld/helloworld.py",
        "vector": "['import', 'asyncio', 'import', 'tornado', 'from', 'tornado.options', 'import', 'define,', 'options', 'define(\"port\",', 'default=8888,', 'help=\"run', 'on', 'the', 'given', 'port\",', 'type=int)', 'class', 'MainHandler(tornado.web.RequestHandler):', 'def', 'get(self):', 'self.write(\"Hello,', 'world\")', 'async', 'def', 'main():', 'tornado.options.parse_command_line()', 'application', '=', 'tornado.web.Application([(r\"/\",', 'MainHandler)])', 'http_server', '=', 'tornado.httpserver.HTTPServer(application)', 'http_server.listen(options.port)', 'await', 'asyncio.Event().wait()', 'if', '__name__', '==', '\"__main__\":', 'asyncio.run(main())']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/demos/s3server/s3server.py",
        "vector": "['import', 'asyncio', 'import', 'bisect', 'import', 'datetime', 'import', 'hashlib', 'import', 'os', 'import', 'os.path', 'import', 'urllib', 'from', 'tornado', 'import', 'escape', 'from', 'tornado', 'import', 'httpserver', 'from', 'tornado', 'import', 'web', 'from', 'tornado.util', 'import', 'unicode_type', 'from', 'tornado.options', 'import', 'options,', 'define', 'try:', 'long', 'except', 'NameError:', 'long', '=', 'int', 'define(\"port\",', 'default=9888,', 'help=\"TCP', 'port', 'to', 'listen', 'on\")', 'define(\"root_directory\",', 'default=\"/tmp/s3\",', 'help=\"Root', 'storage', 'directory\")', 'define(\"bucket_depth\",', 'default=0,', 'help=\"Bucket', 'file', 'system', 'depth', 'limit\")', 'async', 'def', 'start(port,', 'root_directory,', 'bucket_depth):', 'application', '=', 'S3Application(root_directory,', 'bucket_depth)', 'http_server', '=', 'httpserver.HTTPServer(application)', 'http_server.listen(port)', 'await', 'asyncio.Event().wait()', 'class', 'S3Application(web.Application):', 'def', '__init__(self,', 'root_directory,', 'bucket_depth=0):', 'web.Application.__init__(', 'self,', '[', '(r\"/\",', 'RootHandler),', '(r\"/([^/]+)/(.+)\",', 'ObjectHandler),', '(r\"/([^/]+)/\",', 'BucketHandler),', '],', ')', 'self.directory', '=', 'os.path.abspath(root_directory)', 'if', 'not', 'os.path.exists(self.directory):', 'os.makedirs(self.directory)', 'self.bucket_depth', '=', 'bucket_depth', 'class', 'BaseRequestHandler(web.RequestHandler):', 'SUPPORTED_METHODS', '=', '(\"PUT\",', '\"GET\",', '\"DELETE\")', 'def', 'render_xml(self,', 'value):', 'assert', 'isinstance(value,', 'dict)', 'and', 'len(value)', '==', '1', 'self.set_header(\"Content-Type\",', '\"application/xml;', 'charset=UTF-8\")', 'name', '=', 'list(value.keys())[0]', 'parts', '=', '[]', 'parts.append(\"<\"', '+', 'name', '+', \"'\", 'xmlns=\"http://doc.s3.amazonaws.com/2006-03-01\">\\')', 'self._render_parts(value[name],', 'parts)', 'parts.append(\"</\"', '+', 'name', '+', '\">\")', \"self.finish('<?xml\", 'version=\"1.0\"', 'encoding=\"UTF-8\"?>\\\\n\\'', '+', '\"\".join(parts))', 'def', '_render_parts(self,', 'value,', 'parts=[]):', 'if', 'isinstance(value,', '(unicode_type,', 'bytes)):', 'parts.append(escape.xhtml_escape(value))', 'elif', 'isinstance(value,', '(int,', 'long)):', 'parts.append(str(value))', 'elif', 'isinstance(value,', 'datetime.datetime):', 'parts.append(value.strftime(\"%Y-%m-%dT%H:%M:%S.000Z\"))', 'elif', 'isinstance(value,', 'dict):', 'for', 'name,', 'subvalue', 'in', 'value.items():', 'if', 'not', 'isinstance(subvalue,', 'list):', 'subvalue', '=', '[subvalue]', 'for', 'subsubvalue', 'in', 'subvalue:', 'parts.append(\"<\"', '+', 'name', '+', '\">\")', 'self._render_parts(subsubvalue,', 'parts)', 'parts.append(\"</\"', '+', 'name', '+', '\">\")', 'else:', 'raise', 'Exception(\"Unknown', 'S3', 'value', 'type', '%r\",', 'value)', 'def', '_object_path(self,', 'bucket,', 'object_name):', 'if', 'self.application.bucket_depth', '<', '1:', 'return', 'os.path.abspath(', 'os.path.join(self.application.directory,', 'bucket,', 'object_name)', ')', 'hash', '=', 'hashlib.md5(object_name).hexdigest()', 'path', '=', 'os.path.abspath(os.path.join(self.application.directory,', 'bucket))', 'for', 'i', 'in', 'range(self.application.bucket_depth):', 'path', '=', 'os.path.join(path,', 'hash[:', '2', '*', '(i', '+', '1)])', 'return', 'os.path.join(path,', 'object_name)', 'class', 'RootHandler(BaseRequestHandler):', 'def', 'get(self):', 'names', '=', 'os.listdir(self.application.directory)', 'buckets', '=', '[]', 'for', 'name', 'in', 'names:', 'path', '=', 'os.path.join(self.application.directory,', 'name)', 'info', '=', 'os.stat(path)', 'buckets.append(', '{', '\"Name\":', 'name,', '\"CreationDate\":', 'datetime.datetime.fromtimestamp(', 'info.st_ctime,', 'datetime.timezone.utc', '),', '}', ')', 'self.render_xml({\"ListAllMyBucketsResult\":', '{\"Buckets\":', '{\"Bucket\":', 'buckets}}})', 'class', 'BucketHandler(BaseRequestHandler):', 'def', 'get(self,', 'bucket_name):', 'prefix', '=', 'self.get_argument(\"prefix\",', '\"\")', 'marker', '=', 'self.get_argument(\"marker\",', '\"\")', 'max_keys', '=', 'int(self.get_argument(\"max-keys\",', '50000))', 'path', '=', 'os.path.abspath(os.path.join(self.application.directory,', 'bucket_name))', 'terse', '=', 'int(self.get_argument(\"terse\",', '0))', 'if', 'not', 'path.startswith(self.application.directory)', 'or', 'not', 'os.path.isdir(path):', 'raise', 'web.HTTPError(404)', 'object_names', '=', '[]', 'for', 'root,', 'dirs,', 'files', 'in', 'os.walk(path):', 'for', 'file_name', 'in', 'files:', 'object_names.append(os.path.join(root,', 'file_name))', 'skip', '=', 'len(path)', '+', '1', 'for', 'i', 'in', 'range(self.application.bucket_depth):', 'skip', '+=', '2', '*', '(i', '+', '1)', '+', '1', 'object_names', '=', '[n[skip:]', 'for', 'n', 'in', 'object_names]', 'object_names.sort()', 'contents', '=', '[]', 'start_pos', '=', '0', 'if', 'marker:', 'start_pos', '=', 'bisect.bisect_right(object_names,', 'marker,', 'start_pos)', 'if', 'prefix:', 'start_pos', '=', 'bisect.bisect_left(object_names,', 'prefix,', 'start_pos)', 'truncated', '=', 'False', 'for', 'object_name', 'in', 'object_names[start_pos:]:', 'if', 'not', 'object_name.startswith(prefix):', 'break', 'if', 'len(contents)', '>=', 'max_keys:', 'truncated', '=', 'True', 'break', 'object_path', '=', 'self._object_path(bucket_name,', 'object_name)', 'c', '=', '{\"Key\":', 'object_name}', 'if', 'not', 'terse:', 'info', '=', 'os.stat(object_path)', 'c.update(', '{', '\"LastModified\":', 'datetime.datetime.utcfromtimestamp(', 'info.st_mtime', '),', '\"Size\":', 'info.st_size,', '}', ')', 'contents.append(c)', 'marker', '=', 'object_name', 'self.render_xml(', '{', '\"ListBucketResult\":', '{', '\"Name\":', 'bucket_name,', '\"Prefix\":', 'prefix,', '\"Marker\":', 'marker,', '\"MaxKeys\":', 'max_keys,', '\"IsTruncated\":', 'truncated,', '\"Contents\":', 'contents,', '}', '}', ')', 'def', 'put(self,', 'bucket_name):', 'path', '=', 'os.path.abspath(os.path.join(self.application.directory,', 'bucket_name))', 'if', 'not', 'path.startswith(self.application.directory)', 'or', 'os.path.exists(path):', 'raise', 'web.HTTPError(403)', 'os.makedirs(path)', 'self.finish()', 'def', 'delete(self,', 'bucket_name):', 'path', '=', 'os.path.abspath(os.path.join(self.application.directory,', 'bucket_name))', 'if', 'not', 'path.startswith(self.application.directory)', 'or', 'not', 'os.path.isdir(path):', 'raise', 'web.HTTPError(404)', 'if', 'len(os.listdir(path))', '>', '0:', 'raise', 'web.HTTPError(403)', 'os.rmdir(path)', 'self.set_status(204)', 'self.finish()', 'class', 'ObjectHandler(BaseRequestHandler):', 'def', 'get(self,', 'bucket,', 'object_name):', 'object_name', '=', 'urllib.unquote(object_name)', 'path', '=', 'self._object_path(bucket,', 'object_name)', 'if', 'not', 'path.startswith(self.application.directory)', 'or', 'not', 'os.path.isfile(path):', 'raise', 'web.HTTPError(404)', 'info', '=', 'os.stat(path)', 'self.set_header(\"Content-Type\",', '\"application/unknown\")', 'self.set_header(', '\"Last-Modified\",', 'datetime.datetime.utcfromtimestamp(info.st_mtime)', ')', 'with', 'open(path,', '\"rb\")', 'as', 'object_file:', 'self.finish(object_file.read())', 'def', 'put(self,', 'bucket,', 'object_name):', 'object_name', '=', 'urllib.unquote(object_name)', 'bucket_dir', '=', 'os.path.abspath(os.path.join(self.application.directory,', 'bucket))', 'if', 'not', 'bucket_dir.startswith(self.application.directory)', 'or', 'not', 'os.path.isdir(', 'bucket_dir', '):', 'raise', 'web.HTTPError(404)', 'path', '=', 'self._object_path(bucket,', 'object_name)', 'if', 'not', 'path.startswith(bucket_dir)', 'or', 'os.path.isdir(path):', 'raise', 'web.HTTPError(403)', 'directory', '=', 'os.path.dirname(path)', 'if', 'not', 'os.path.exists(directory):', 'os.makedirs(directory)', 'with', 'open(path,', '\"w\")', 'as', 'object_file:', 'object_file.write(self.request.body)', 'self.finish()', 'def', 'delete(self,', 'bucket,', 'object_name):', 'object_name', '=', 'urllib.unquote(object_name)', 'path', '=', 'self._object_path(bucket,', 'object_name)', 'if', 'not', 'path.startswith(self.application.directory)', 'or', 'not', 'os.path.isfile(path):', 'raise', 'web.HTTPError(404)', 'os.unlink(path)', 'self.set_status(204)', 'self.finish()', 'if', '__name__', '==', '\"__main__\":', 'options.parse_command_line()', 'asyncio.run(start(options.port,', 'options.root_directory,', 'options.bucket_depth))']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/demos/tcpecho/client.py",
        "vector": "['import', 'asyncio', 'from', 'tornado.tcpclient', 'import', 'TCPClient', 'from', 'tornado.options', 'import', 'options,', 'define', 'define(\"host\",', 'default=\"localhost\",', 'help=\"TCP', 'server', 'host\")', 'define(\"port\",', 'default=9888,', 'help=\"TCP', 'port', 'to', 'connect', 'to\")', 'define(\"message\",', 'default=\"ping\",', 'help=\"Message', 'to', 'send\")', 'async', 'def', 'send_message():', 'stream', '=', 'await', 'TCPClient().connect(options.host,', 'options.port)', 'await', 'stream.write((options.message', '+', '\"\\\\n\").encode())', 'print(\"Sent', 'to', 'server:\",', 'options.message)', 'reply', '=', 'await', 'stream.read_until(b\"\\\\n\")', 'print(\"Response', 'from', 'server:\",', 'reply.decode().strip())', 'if', '__name__', '==', '\"__main__\":', 'options.parse_command_line()', 'asyncio.run(send_message())']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/demos/tcpecho/server.py",
        "vector": "['import', 'asyncio', 'import', 'logging', 'from', 'tornado', 'import', 'gen', 'from', 'tornado.iostream', 'import', 'StreamClosedError', 'from', 'tornado.tcpserver', 'import', 'TCPServer', 'from', 'tornado.options', 'import', 'options,', 'define', 'define(\"port\",', 'default=9888,', 'help=\"TCP', 'port', 'to', 'listen', 'on\")', 'logger', '=', 'logging.getLogger(__name__)', 'class', 'EchoServer(TCPServer):', '@gen.coroutine', 'def', 'handle_stream(self,', 'stream,', 'address):', 'while', 'True:', 'try:', 'data', '=', 'yield', 'stream.read_until(b\"\\\\n\")', 'logger.info(\"Received', 'bytes:', '%s\",', 'data)', 'if', 'not', 'data.endswith(b\"\\\\n\"):', 'data', '=', 'data', '+', 'b\"\\\\n\"', 'yield', 'stream.write(data)', 'except', 'StreamClosedError:', 'logger.warning(\"Lost', 'client', 'at', 'host', '%s\",', 'address[0])', 'break', 'except', 'Exception', 'as', 'e:', 'print(e)', 'async', 'def', 'main():', 'options.parse_command_line()', 'logger.info(\"Listening', 'on', 'TCP', 'port', '%d\",', 'options.port)', 'server', '=', 'EchoServer()', 'server.listen(options.port)', 'await', 'asyncio.Event().wait()', 'if', '__name__', '==', '\"__main__\":', 'asyncio.run(main())']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/demos/websocket/chatdemo.py",
        "vector": "['import', 'asyncio', 'import', 'logging', 'import', 'tornado', 'import', 'os.path', 'import', 'uuid', 'from', 'tornado.options', 'import', 'define,', 'options', 'define(\"port\",', 'default=8888,', 'help=\"run', 'on', 'the', 'given', 'port\",', 'type=int)', 'class', 'Application(tornado.web.Application):', 'def', '__init__(self):', 'handlers', '=', '[(r\"/\",', 'MainHandler),', '(r\"/chatsocket\",', 'ChatSocketHandler)]', 'settings', '=', 'dict(', 'cookie_secret=\"__TODO:_GENERATE_YOUR_OWN_RANDOM_VALUE_HERE__\",', 'template_path=os.path.join(os.path.dirname(__file__),', '\"templates\"),', 'static_path=os.path.join(os.path.dirname(__file__),', '\"static\"),', 'xsrf_cookies=True,', ')', 'super().__init__(handlers,', '**settings)', 'class', 'MainHandler(tornado.web.RequestHandler):', 'def', 'get(self):', 'self.render(\"index.html\",', 'messages=ChatSocketHandler.cache)', 'class', 'ChatSocketHandler(tornado.websocket.WebSocketHandler):', 'waiters', '=', 'set()', 'cache', '=', '[]', 'cache_size', '=', '200', 'def', 'get_compression_options(self):', 'return', '{}', 'def', 'open(self):', 'ChatSocketHandler.waiters.add(self)', 'def', 'on_close(self):', 'ChatSocketHandler.waiters.remove(self)', '@classmethod', 'def', 'update_cache(cls,', 'chat):', 'cls.cache.append(chat)', 'if', 'len(cls.cache)', '>', 'cls.cache_size:', 'cls.cache', '=', 'cls.cache[-cls.cache_size', ':]', '@classmethod', 'def', 'send_updates(cls,', 'chat):', 'logging.info(\"sending', 'message', 'to', '%d', 'waiters\",', 'len(cls.waiters))', 'for', 'waiter', 'in', 'cls.waiters:', 'try:', 'waiter.write_message(chat)', 'except:', 'logging.error(\"Error', 'sending', 'message\",', 'exc_info=True)', 'def', 'on_message(self,', 'message):', 'logging.info(\"got', 'message', '%r\",', 'message)', 'parsed', '=', 'tornado.escape.json_decode(message)', 'chat', '=', '{\"id\":', 'str(uuid.uuid4()),', '\"body\":', 'parsed[\"body\"]}', 'chat[\"html\"]', '=', 'tornado.escape.to_basestring(', 'self.render_string(\"message.html\",', 'message=chat)', ')', 'ChatSocketHandler.update_cache(chat)', 'ChatSocketHandler.send_updates(chat)', 'async', 'def', 'main():', 'tornado.options.parse_command_line()', 'app', '=', 'Application()', 'app.listen(options.port)', 'await', 'asyncio.Event().wait()', 'if', '__name__', '==', '\"__main__\":', 'asyncio.run(main())']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/demos/webspider/webspider.py",
        "vector": "['import', 'asyncio', 'import', 'time', 'from', 'datetime', 'import', 'timedelta', 'from', 'html.parser', 'import', 'HTMLParser', 'from', 'urllib.parse', 'import', 'urljoin,', 'urldefrag', 'from', 'tornado', 'import', 'gen,', 'httpclient,', 'queues', 'base_url', '=', '\"http://www.tornadoweb.org/en/stable/\"', 'concurrency', '=', '10', 'async', 'def', 'get_links_from_url(url):', 'response', '=', 'await', 'httpclient.AsyncHTTPClient().fetch(url)', 'print(\"fetched', '%s\"', '%', 'url)', 'html', '=', 'response.body.decode(errors=\"ignore\")', 'return', '[urljoin(url,', 'remove_fragment(new_url))', 'for', 'new_url', 'in', 'get_links(html)]', 'def', 'remove_fragment(url):', 'pure_url,', 'frag', '=', 'urldefrag(url)', 'return', 'pure_url', 'def', 'get_links(html):', 'class', 'URLSeeker(HTMLParser):', 'def', '__init__(self):', 'HTMLParser.__init__(self)', 'self.urls', '=', '[]', 'def', 'handle_starttag(self,', 'tag,', 'attrs):', 'href', '=', 'dict(attrs).get(\"href\")', 'if', 'href', 'and', 'tag', '==', '\"a\":', 'self.urls.append(href)', 'url_seeker', '=', 'URLSeeker()', 'url_seeker.feed(html)', 'return', 'url_seeker.urls', 'async', 'def', 'main():', 'q', '=', 'queues.Queue()', 'start', '=', 'time.time()', 'fetching,', 'fetched,', 'dead', '=', 'set(),', 'set(),', 'set()', 'async', 'def', 'fetch_url(current_url):', 'if', 'current_url', 'in', 'fetching:', 'return', 'print(\"fetching', '%s\"', '%', 'current_url)', 'fetching.add(current_url)', 'urls', '=', 'await', 'get_links_from_url(current_url)', 'fetched.add(current_url)', 'for', 'new_url', 'in', 'urls:', 'if', 'new_url.startswith(base_url):', 'await', 'q.put(new_url)', 'async', 'def', 'worker():', 'async', 'for', 'url', 'in', 'q:', 'if', 'url', 'is', 'None:', 'return', 'try:', 'await', 'fetch_url(url)', 'except', 'Exception', 'as', 'e:', 'print(\"Exception:', '%s', '%s\"', '%', '(e,', 'url))', 'dead.add(url)', 'finally:', 'q.task_done()', 'await', 'q.put(base_url)', 'workers', '=', 'gen.multi([worker()', 'for', '_', 'in', 'range(concurrency)])', 'await', 'q.join(timeout=timedelta(seconds=300))', 'assert', 'fetching', '==', '(fetched', '|', 'dead)', 'print(\"Done', 'in', '%d', 'seconds,', 'fetched', '%s', 'URLs.\"', '%', '(time.time()', '-', 'start,', 'len(fetched)))', 'print(\"Unable', 'to', 'fetch', '%s', 'URLs.\"', '%', 'len(dead))', 'for', '_', 'in', 'range(concurrency):', 'await', 'q.put(None)', 'await', 'workers', 'if', '__name__', '==', '\"__main__\":', 'asyncio.run(main())']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/docs/conf.py",
        "vector": "['import', 'os', 'import', 'sphinx.errors', 'import', 'sys', 'import', 'sphinx_rtd_theme', 'sys.path.insert(0,', 'os.path.abspath(\"..\"))', 'import', 'tornado', 'master_doc', '=', '\"index\"', 'project', '=', '\"Tornado\"', 'copyright', '=', '\"The', 'Tornado', 'Authors\"', 'version', '=', 'release', '=', 'tornado.version', 'extensions', '=', '[', '\"sphinx.ext.autodoc\",', '\"sphinx.ext.coverage\",', '\"sphinx.ext.doctest\",', '\"sphinx.ext.intersphinx\",', '\"sphinx.ext.viewcode\",', '\"sphinxcontrib.asyncio\",', ']', 'primary_domain', '=', '\"py\"', 'default_role', '=', '\"py:obj\"', 'autodoc_member_order', '=', '\"bysource\"', 'autoclass_content', '=', '\"both\"', 'autodoc_inherit_docstrings', '=', 'False', 'autodoc_docstring_signature', '=', 'False', 'coverage_skip_undoc_in_source', '=', 'True', 'coverage_ignore_modules', '=', '[', '\"tornado.platform.asyncio\",', '\"tornado.platform.caresresolver\",', '\"tornado.platform.twisted\",', '\"tornado.simple_httpclient\",', ']', 'coverage_ignore_classes', '=', '[', '\"Runner\",', '\"ChunkedTransferEncoding\",', '\"GZipContentEncoding\",', '\"OutputTransform\",', '\"TemplateModule\",', '\"url\",', '\"WebSocketProtocol\",', '\"WebSocketProtocol13\",', '\"WebSocketProtocol76\",', ']', 'coverage_ignore_functions', '=', '[', '\"doctests\",', '\"main\",', '\"parse_qs_bytes\",', '\"Multi\",', ']', 'html_favicon', '=', '\"favicon.ico\"', 'latex_documents', '=', '[', '(', '\"index\",', '\"tornado.tex\",', '\"Tornado', 'Documentation\",', '\"The', 'Tornado', 'Authors\",', '\"manual\",', 'False,', ')', ']', 'intersphinx_mapping', '=', '{\"python\":', '(\"https://docs.python.org/3/\",', 'None)}', 'html_theme', '=', '\"sphinx_rtd_theme\"', 'html_theme_path', '=', '[sphinx_rtd_theme.get_html_theme_path()]', 'missing_references', '=', '{', '\"_IOStreamType\",', '\"_S\",', '\"_T\",', '\"_asyncio.Future\",', '\"_io.BytesIO\",', '\"asyncio.AbstractEventLoop.run_forever\",', '\"asyncio.events.AbstractEventLoop\",', '\"concurrent.futures._base.Executor\",', '\"concurrent.futures._base.Future\",', '\"futures.Future\",', '\"socket.socket\",', '\"TextIO\",', '\"Future\",', '\"httputil.HTTPServerConnectionDelegate\",', '\"httputil.HTTPServerRequest\",', '\"OutputTransform\",', '\"Pattern\",', '\"RAISE\",', '\"Rule\",', '\"socket.AddressFamily\",', '\"tornado.concurrent._T\",', '\"tornado.gen._T\",', '\"tornado.ioloop._S\",', '\"tornado.ioloop._T\",', '\"tornado.ioloop._Selectable\",', '\"tornado.iostream._IOStreamType\",', '\"tornado.locks._ReleasingContextManager\",', '\"tornado.queues._T\",', '\"tornado.options._Mockable\",', '\"tornado.web._ArgDefaultMarker\",', '\"tornado.web._HandlerDelegate\",', '\"tornado.web._RequestHandlerType\",', '\"_RequestHandlerType\",', '\"traceback\",', '\"WSGIAppType\",', '\"Yieldable\",', '}', 'def', 'missing_reference_handler(app,', 'env,', 'node,', 'contnode):', 'if', 'node[\"reftarget\"]', 'in', 'missing_references:', 'raise', 'sphinx.errors.NoUri', 'def', 'setup(app):', 'app.connect(\"missing-reference\",', 'missing_reference_handler)']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/maint/benchmark/benchmark.py",
        "vector": "['from', 'tornado.options', 'import', 'define,', 'options,', 'parse_command_line', 'from', 'tornado.web', 'import', 'RequestHandler,', 'Application', 'import', 'asyncio', 'import', 'random', 'define(\"min_port\",', 'type=int,', 'default=8000)', 'define(\"max_port\",', 'type=int,', 'default=9000)', 'define(\"n\",', 'type=int,', 'default=15000)', 'define(\"c\",', 'type=int,', 'default=25)', 'define(\"keepalive\",', 'type=bool,', 'default=False)', 'define(\"quiet\",', 'type=bool,', 'default=False)', 'define(\"num_runs\",', 'type=int,', 'default=1)', 'class', 'RootHandler(RequestHandler):', 'def', 'get(self):', 'self.write(\"Hello,', 'world\")', 'def', '_log(self):', 'pass', 'def', 'main():', 'parse_command_line()', 'for', 'i', 'in', 'range(options.num_runs):', 'asyncio.run(run())', 'async', 'def', 'run():', 'app', '=', 'Application([(\"/\",', 'RootHandler)])', 'port', '=', 'random.randrange(options.min_port,', 'options.max_port)', 'app.listen(port,', 'address=\"127.0.0.1\")', 'args', '=', '[\"ab\"]', 'args.extend([\"-n\",', 'str(options.n)])', 'args.extend([\"-c\",', 'str(options.c)])', 'if', 'options.keepalive:', 'args.append(\"-k\")', 'if', 'options.quiet:', 'args.append(\"-q\")', 'args.append(\"http://127.0.0.1:%d/\"', '%', 'port)', 'proc', '=', 'await', 'asyncio.create_subprocess_exec(*args)', 'await', 'proc.wait()', 'if', '__name__', '==', '\"__main__\":', 'main()']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/maint/benchmark/chunk_benchmark.py",
        "vector": "['import', 'logging', 'from', 'tornado.curl_httpclient', 'import', 'CurlAsyncHTTPClient', 'from', 'tornado.simple_httpclient', 'import', 'SimpleAsyncHTTPClient', 'from', 'tornado.ioloop', 'import', 'IOLoop', 'from', 'tornado.options', 'import', 'define,', 'options,', 'parse_command_line', 'from', 'tornado.web', 'import', 'RequestHandler,', 'Application', 'try:', 'xrange', 'except', 'NameError:', 'xrange', '=', 'range', \"define('port',\", 'default=8888)', \"define('num_chunks',\", 'default=1000)', \"define('chunk_size',\", 'default=2048)', 'class', 'ChunkHandler(RequestHandler):', 'def', 'get(self):', 'for', 'i', 'in', 'xrange(options.num_chunks):', \"self.write('A'\", '*', 'options.chunk_size)', 'self.flush()', 'self.finish()', 'def', 'main():', 'parse_command_line()', 'app', '=', \"Application([('/',\", 'ChunkHandler)])', 'app.listen(options.port,', \"address='127.0.0.1')\", 'def', 'callback(response):', 'response.rethrow()', 'assert', 'len(response.body)', '==', '(options.num_chunks', '*', 'options.chunk_size)', 'logging.warning(\"fetch', 'completed', 'in', '%s', 'seconds\",', 'response.request_time)', 'IOLoop.current().stop()', 'logging.warning(\"Starting', 'fetch', 'with', 'curl', 'client\")', 'curl_client', '=', 'CurlAsyncHTTPClient()', \"curl_client.fetch('http://localhost:%d/'\", '%', 'options.port,', 'callback=callback)', 'IOLoop.current().start()', 'logging.warning(\"Starting', 'fetch', 'with', 'simple', 'client\")', 'simple_client', '=', 'SimpleAsyncHTTPClient()', \"simple_client.fetch('http://localhost:%d/'\", '%', 'options.port,', 'callback=callback)', 'IOLoop.current().start()', 'if', '__name__', '==', \"'__main__':\", 'main()']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/maint/benchmark/gen_benchmark.py",
        "vector": "['from', 'timeit', 'import', 'Timer', 'from', 'tornado', 'import', 'gen', 'from', 'tornado.options', 'import', 'options,', 'define,', 'parse_command_line', \"define('num',\", 'default=10000,', \"help='number\", 'of', \"iterations')\", '@gen.engine', 'def', 'e2(callback):', 'callback()', '@gen.engine', 'def', 'e1():', 'for', 'i', 'in', 'range(10):', 'yield', 'gen.Task(e2)', '@gen.coroutine', 'def', 'c2():', 'pass', '@gen.coroutine', 'def', 'c1():', 'for', 'i', 'in', 'range(10):', 'yield', 'c2()', 'def', 'main():', 'parse_command_line()', 't', '=', 'Timer(e1)', 'results', '=', 't.timeit(options.num)', '/', 'options.num', \"print('engine:\", '%0.3f', 'ms', 'per', \"iteration'\", '%', '(results', '*', '1000))', 't', '=', 'Timer(c1)', 'results', '=', 't.timeit(options.num)', '/', 'options.num', \"print('coroutine:\", '%0.3f', 'ms', 'per', \"iteration'\", '%', '(results', '*', '1000))', 'if', '__name__', '==', \"'__main__':\", 'main()']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/maint/benchmark/parsing_benchmark.py",
        "vector": "['import', 're', 'import', 'timeit', 'from', 'enum', 'import', 'Enum', 'from', 'typing', 'import', 'Callable', 'from', 'tornado.httputil', 'import', 'HTTPHeaders', 'from', 'tornado.options', 'import', 'define,', 'options,', 'parse_command_line', 'define(\"benchmark\",', 'type=str)', 'define(\"num_runs\",', 'type=int,', 'default=1)', '_CRLF_RE', '=', 're.compile(r\"\\\\r?\\\\n\")', '_TEST_HEADERS', '=', '(', '\"Accept:', 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,\"', '\"image/apng,*/*;q=0.8,application/signed-exchange;v=b3\\\\r\\\\n\"', '\"Accept-Encoding:', 'gzip,', 'deflate,', 'br\\\\r\\\\n\"', '\"Accept-Language:', 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7\\\\r\\\\n\"', '\"Cache-Control:', 'max-age=0\\\\r\\\\n\"', '\"Connection:', 'keep-alive\\\\r\\\\n\"', '\"Host:', 'example.com\\\\r\\\\n\"', '\"Upgrade-Insecure-Requests:', '1\\\\r\\\\n\"', '\"User-Agent:', 'Mozilla/5.0', '(Windows', 'NT', '10.0;', 'Win64;', 'x64)', 'AppleWebKit/537.36', '\"', '\"(KHTML,', 'like', 'Gecko)', 'Chrome/73.0.3683.103', 'Safari/537.36\\\\r\\\\n\"', ')', 'def', 'headers_split_re(headers:', 'str)', '->', 'None:', 'for', 'line', 'in', '_CRLF_RE.split(headers):', 'pass', 'def', 'headers_split_simple(headers:', 'str)', '->', 'None:', 'for', 'line', 'in', 'headers.split(\"\\\\n\"):', 'if', 'line.endswith(\"\\\\r\"):', 'line', '=', 'line[:-1]', 'def', 'headers_parse_re(headers:', 'str)', '->', 'HTTPHeaders:', 'h', '=', 'HTTPHeaders()', 'for', 'line', 'in', '_CRLF_RE.split(headers):', 'if', 'line:', 'h.parse_line(line)', 'return', 'h', 'def', 'headers_parse_simple(headers:', 'str)', '->', 'HTTPHeaders:', 'h', '=', 'HTTPHeaders()', 'for', 'line', 'in', 'headers.split(\"\\\\n\"):', 'if', 'line.endswith(\"\\\\r\"):', 'line', '=', 'line[:-1]', 'if', 'line:', 'h.parse_line(line)', 'return', 'h', 'def', 'run_headers_split():', 'regex_time', '=', 'timeit.timeit(lambda:', 'headers_split_re(_TEST_HEADERS),', 'number=100000)', 'print(\"regex\",', 'regex_time)', 'simple_time', '=', 'timeit.timeit(', 'lambda:', 'headers_split_simple(_TEST_HEADERS),', 'number=100000', ')', 'print(\"str.split\",', 'simple_time)', 'print(\"speedup\",', 'regex_time', '/', 'simple_time)', 'def', 'run_headers_full():', 'regex_time', '=', 'timeit.timeit(lambda:', 'headers_parse_re(_TEST_HEADERS),', 'number=10000)', 'print(\"regex\",', 'regex_time)', 'simple_time', '=', 'timeit.timeit(', 'lambda:', 'headers_parse_simple(_TEST_HEADERS),', 'number=10000', ')', 'print(\"str.split\",', 'simple_time)', 'print(\"speedup\",', 'regex_time', '/', 'simple_time)', 'class', 'Benchmark(Enum):', 'def', '__new__(cls,', 'arg_value:', 'str,', 'func:', 'Callable[[],', 'None]):', 'member', '=', 'object.__new__(cls)', 'member._value_', '=', 'arg_value', 'member.func', '=', 'func', 'return', 'member', 'HEADERS_SPLIT', '=', '(\"headers-split\",', 'run_headers_split)', 'HEADERS_FULL', '=', '(\"headers-full\",', 'run_headers_full)', 'def', 'main():', 'parse_command_line()', 'try:', 'func', '=', 'Benchmark(options.benchmark).func', 'except', 'ValueError:', 'known_benchmarks', '=', '[benchmark.value', 'for', 'benchmark', 'in', 'Benchmark]', 'print(', '\"Unknown', 'benchmark:', \"'{}',\", 'supported', 'values', 'are:', '{}\"', '.format(options.benchmark,', '\",', '\".join(known_benchmarks))', ')', 'return', 'for', '_', 'in', 'range(options.num_runs):', 'func()', 'if', '__name__', '==', \"'__main__':\", 'main()']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/maint/benchmark/template_benchmark.py",
        "vector": "['import', 'sys', 'from', 'timeit', 'import', 'Timer', 'from', 'tornado.options', 'import', 'options,', 'define,', 'parse_command_line', 'from', 'tornado.template', 'import', 'Template', \"define('num',\", 'default=100,', \"help='number\", 'of', \"iterations')\", \"define('dump',\", 'default=False,', \"help='print\", 'template', 'generated', 'code', 'and', \"exit')\", 'context', '=', '{', \"'page_title':\", \"'mitsuhiko\\\\'s\", \"benchmark',\", \"'table':\", '[dict(a=1,', 'b=2,', 'c=3,', 'd=4,', 'e=5,', 'f=6,', 'g=7,', 'h=8,', 'i=9,', 'j=10)', 'for', 'x', 'in', 'range(1000)]', '}', 'tmpl', '=', 'Template()', 'def', 'render():', 'tmpl.generate(**context)', 'def', 'main():', 'parse_command_line()', 'if', 'options.dump:', 'print(tmpl.code)', 'sys.exit(0)', 't', '=', 'Timer(render)', 'results', '=', 't.timeit(options.num)', '/', 'options.num', \"print('%0.3f\", 'ms', 'per', \"iteration'\", '%', '(results', '*', '1000))', 'if', '__name__', '==', \"'__main__':\", 'main()']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/maint/scripts/custom_fixers/__init__.py",
        "vector": "[]"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/maint/scripts/custom_fixers/fix_future_imports.py",
        "vector": "['from', 'lib2to3', 'import', 'fixer_base', 'from', 'lib2to3', 'import', 'pytree', 'from', 'lib2to3.pgen2', 'import', 'token', 'from', 'lib2to3.fixer_util', 'import', 'FromImport,', 'Name,', 'Comma,', 'Newline', 'def', 'is_docstring(stmt):', 'return', 'isinstance(stmt,', 'pytree.Node)', 'and', 'stmt.children[0].type', '==', 'token.STRING', 'class', 'FixFutureImports(fixer_base.BaseFix):', 'BM_compatible', '=', 'True', 'PATTERN', '=', 'def', 'start_tree(self,', 'tree,', 'filename):', 'self.found_future_import', '=', 'False', 'def', 'new_future_import(self,', 'old):', 'new', '=', 'FromImport(\"__future__\",', '[Name(\"absolute_import\",', 'prefix=\"', '\"),', 'Comma(),', 'Name(\"division\",', 'prefix=\"', '\"),', 'Comma(),', 'Name(\"print_function\",', 'prefix=\"', '\")])', 'if', 'old', 'is', 'not', 'None:', 'new.prefix', '=', 'old.prefix', 'return', 'new', 'def', 'transform(self,', 'node,', 'results):', 'self.found_future_import', '=', 'True', 'return', 'self.new_future_import(node)', 'def', 'finish_tree(self,', 'tree,', 'filename):', 'if', 'self.found_future_import:', 'return', 'if', 'not', 'isinstance(tree,', 'pytree.Node):', 'return', 'first_stmt', '=', 'tree.children[0]', 'if', 'is_docstring(first_stmt):', 'tree.insert_child(1,', 'Newline())', 'pos', '=', '2', 'elif', 'first_stmt.prefix:', 'newline', '=', 'Newline()', 'newline.prefix', '=', 'first_stmt.prefix', 'first_stmt.prefix', '=', '\"\"', 'tree.insert_child(0,', 'newline)', 'pos', '=', '1', 'else:', 'pos', '=', '0', 'tree.insert_child(pos,', 'self.new_future_import(None))', 'tree.insert_child(pos', '+', '1,', 'Newline())']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/maint/scripts/custom_fixers/fix_unicode_literal.py",
        "vector": "['from', 'lib2to3', 'import', 'fixer_base', 'from', 'lib2to3.fixer_util', 'import', 'String', 'class', 'FixUnicodeLiteral(fixer_base.BaseFix):', 'BM_compatible', '=', 'True', 'PATTERN', '=', 'def', 'transform(self,', 'node,', 'results):', 'arg', '=', 'results[\"arg\"]', \"node.replace(String('u'\", '+', 'arg.value,', 'prefix=node.prefix))']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/maint/scripts/run_fixers.py",
        "vector": "['import', 'sys', 'from', 'lib2to3.main', 'import', 'main', 'sys.exit(main(\"custom_fixers\"))']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/maint/scripts/test_resolvers.py",
        "vector": "['import', 'pprint', 'import', 'socket', 'from', 'tornado', 'import', 'gen', 'from', 'tornado.ioloop', 'import', 'IOLoop', 'from', 'tornado.netutil', 'import', 'Resolver,', 'ThreadedResolver,', 'DefaultExecutorResolver', 'from', 'tornado.options', 'import', 'parse_command_line,', 'define,', 'options', 'try:', 'import', 'twisted', 'except', 'ImportError:', 'twisted', '=', 'None', 'try:', 'import', 'pycares', 'except', 'ImportError:', 'pycares', '=', 'None', \"define('family',\", \"default='unspec',\", \"help='Address\", 'family', 'to', 'query:', 'unspec,', 'inet,', 'or', \"inet6')\", '@gen.coroutine', 'def', 'main():', 'args', '=', 'parse_command_line()', 'if', 'not', 'args:', 'args', '=', \"['localhost',\", \"'www.google.com',\", \"'www.facebook.com',\", \"'www.dropbox.com']\", 'resolvers', '=', '[Resolver(),', 'ThreadedResolver(),', 'DefaultExecutorResolver()]', 'if', 'twisted', 'is', 'not', 'None:', 'from', 'tornado.platform.twisted', 'import', 'TwistedResolver', 'resolvers.append(TwistedResolver())', 'if', 'pycares', 'is', 'not', 'None:', 'from', 'tornado.platform.caresresolver', 'import', 'CaresResolver', 'resolvers.append(CaresResolver())', 'family', '=', '{', \"'unspec':\", 'socket.AF_UNSPEC,', \"'inet':\", 'socket.AF_INET,', \"'inet6':\", 'socket.AF_INET6,', '}[options.family]', 'for', 'host', 'in', 'args:', \"print('Resolving\", \"%s'\", '%', 'host)', 'for', 'resolver', 'in', 'resolvers:', 'addrinfo', '=', 'yield', 'resolver.resolve(host,', '80,', 'family)', \"print('%s:\", \"%s'\", '%', '(resolver.__class__.__name__,', 'pprint.pformat(addrinfo)))', 'print()', 'if', '__name__', '==', \"'__main__':\", 'IOLoop.instance().run_sync(main)']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/maint/test/cython/cythonapp_test.py",
        "vector": "['from', 'tornado.testing', 'import', 'AsyncTestCase,', 'gen_test', 'from', 'tornado.util', 'import', 'ArgReplacer', 'import', 'unittest', 'import', 'cythonapp', 'class', 'CythonCoroutineTest(AsyncTestCase):', '@gen_test', 'def', 'test_native_coroutine(self):', 'x', '=', 'yield', 'cythonapp.native_coroutine()', 'self.assertEqual(x,', '\"goodbye\")', '@gen_test', 'def', 'test_decorated_coroutine(self):', 'x', '=', 'yield', 'cythonapp.decorated_coroutine()', 'self.assertEqual(x,', '\"goodbye\")', 'class', 'CythonArgReplacerTest(unittest.TestCase):', 'def', 'test_arg_replacer_function(self):', 'replacer', '=', 'ArgReplacer(cythonapp.function_with_args,', \"'two')\", 'args', '=', '(1,', \"'old',\", '3)', 'kwargs', '=', '{}', 'self.assertEqual(replacer.get_old_value(args,', 'kwargs),', \"'old')\", \"self.assertEqual(replacer.replace('new',\", 'args,', 'kwargs),', \"('old',\", '[1,', \"'new',\", '3],', '{}))', 'def', 'test_arg_replacer_method(self):', 'replacer', '=', 'ArgReplacer(cythonapp.AClass().method_with_args,', \"'two')\", 'args', '=', '(1,', \"'old',\", '3)', 'kwargs', '=', '{}', 'self.assertEqual(replacer.get_old_value(args,', 'kwargs),', \"'old')\", \"self.assertEqual(replacer.replace('new',\", 'args,', 'kwargs),', \"('old',\", '[1,', \"'new',\", '3],', '{}))']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/maint/test/cython/pythonmodule.py",
        "vector": "['from', 'tornado', 'import', 'gen', '@gen.coroutine', 'def', 'hello():', 'yield', 'gen.sleep(0.001)', 'raise', 'gen.Return(\"hello\")']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/maint/test/cython/setup.py",
        "vector": "['from', 'setuptools', 'import', 'setup', 'try:', 'import', 'Cython.Build', 'except:', 'Cython', '=', 'None', 'if', 'Cython', 'is', 'None:', 'ext_modules', '=', 'None', 'else:', 'ext_modules', '=', \"Cython.Build.cythonize('cythonapp.pyx')\", 'setup(', \"name='cythonapp',\", \"py_modules=['cythonapp_test',\", \"'pythonmodule'],\", 'ext_modules=ext_modules,', \"setup_requires='Cython>=0.23.1',\", ')']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/maint/test/mypy/bad.py",
        "vector": "['from', 'tornado.web', 'import', 'RequestHandler', 'class', 'MyHandler(RequestHandler):', 'def', 'get(self)', '->', 'str:', 'return', '\"foo\"']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/maint/test/mypy/good.py",
        "vector": "['from', 'tornado', 'import', 'gen', 'from', 'tornado.web', 'import', 'RequestHandler', 'class', 'MyHandler(RequestHandler):', 'def', 'get(self)', '->', 'None:', 'self.write(\"foo\")', 'async', 'def', 'post(self)', '->', 'None:', 'await', 'gen.sleep(1)', 'self.write(\"foo\")']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/maint/test/mypy/setup.py",
        "vector": "['from', 'setuptools', 'import', 'setup', 'setup()']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/maint/test/redbot/red_test.py",
        "vector": "['import', 'logging', 'from', 'redbot.resource', 'import', 'HttpResource', 'import', 'redbot.speak', 'as', 'rs', 'import', 'thor', 'import', 'threading', 'from', 'tornado', 'import', 'gen', 'from', 'tornado.options', 'import', 'parse_command_line', 'from', 'tornado.testing', 'import', 'AsyncHTTPTestCase', 'from', 'tornado.web', 'import', 'RequestHandler,', 'Application,', 'asynchronous', 'import', 'unittest', 'class', 'HelloHandler(RequestHandler):', 'def', 'get(self):', 'self.write(\"Hello', 'world\")', 'class', 'RedirectHandler(RequestHandler):', 'def', 'get(self,', 'path):', 'self.redirect(path,', \"status=int(self.get_argument('status',\", \"'302')))\", 'class', 'PostHandler(RequestHandler):', 'def', 'post(self):', 'assert', \"self.get_argument('foo')\", '==', \"'bar'\", \"self.redirect('/hello',\", 'status=303)', 'class', 'ChunkedHandler(RequestHandler):', '@asynchronous', '@gen.engine', 'def', 'get(self):', \"self.write('hello\", \"')\", 'yield', 'gen.Task(self.flush)', \"self.write('world')\", 'yield', 'gen.Task(self.flush)', 'self.finish()', 'class', 'CacheHandler(RequestHandler):', 'def', 'get(self,', 'computed_etag):', 'self.write(computed_etag)', 'def', 'compute_etag(self):', 'return', 'self._write_buffer[0]', 'class', 'TestMixin(object):', 'def', 'get_handlers(self):', 'return', '[', \"('/hello',\", 'HelloHandler),', \"('/redirect(/.*)',\", 'RedirectHandler),', \"('/post',\", 'PostHandler),', \"('/chunked',\", 'ChunkedHandler),', \"('/cache/(.*)',\", 'CacheHandler),', ']', 'def', 'get_app_kwargs(self):', 'return', \"dict(static_path='.')\", 'def', 'get_allowed_warnings(self):', 'return', '[', 'rs.FRESHNESS_HEURISTIC,', 'rs.CONNEG_GZIP_BAD,', ']', 'def', 'get_allowed_errors(self):', 'return', '[]', 'def', 'check_url(self,', 'path,', \"method='GET',\", 'body=None,', 'headers=None,', 'expected_status=200,', 'allowed_warnings=None,', 'allowed_errors=None):', 'url', '=', 'self.get_url(path)', 'red', '=', 'self.run_redbot(url,', 'method,', 'body,', 'headers)', 'if', 'not', 'red.response.complete:', 'if', 'isinstance(red.response.http_error,', 'Exception):', 'logging.warning((red.response.http_error.desc,', 'vars(red.response.http_error),', 'url))', 'raise', 'red.response.http_error.res_error', 'else:', 'raise', 'Exception(\"unknown', 'error;', 'incomplete', 'response\")', 'self.assertEqual(int(red.response.status_code),', 'expected_status)', 'allowed_warnings', '=', '(allowed_warnings', 'or', '[])', '+', 'self.get_allowed_warnings()', 'allowed_errors', '=', '(allowed_errors', 'or', '[])', '+', 'self.get_allowed_errors()', 'errors', '=', '[]', 'warnings', '=', '[]', 'for', 'msg', 'in', 'red.response.notes:', 'if', 'msg.level', '==', \"'bad':\", 'logger', '=', 'logging.error', 'if', 'not', 'isinstance(msg,', 'tuple(allowed_errors)):', 'errors.append(msg)', 'elif', 'msg.level', '==', \"'warning':\", 'logger', '=', 'logging.warning', 'if', 'not', 'isinstance(msg,', 'tuple(allowed_warnings)):', 'warnings.append(msg)', 'elif', 'msg.level', 'in', \"('good',\", \"'info',\", \"'uri'):\", 'logger', '=', 'logging.info', 'else:', 'raise', \"Exception('unknown\", \"level'\", '+', 'msg.level)', \"logger('%s:\", '%s', \"(%s)',\", 'msg.category,', \"msg.show_summary('en'),\", 'msg.__class__.__name__)', \"logger(msg.show_text('en'))\", 'self.assertEqual(len(warnings)', '+', 'len(errors),', '0,', \"'Had\", '%d', 'unexpected', 'warnings', 'and', '%d', \"errors'\", '%', '(len(warnings),', 'len(errors)))', 'def', 'run_redbot(self,', 'url,', 'method,', 'body,', 'headers):', 'red', '=', 'HttpResource(url,', 'method=method,', 'req_body=body,', 'req_hdrs=headers)', 'def', 'work():', 'red.run(thor.stop)', 'thor.run()', 'self.io_loop.add_callback(self.stop)', 'thread', '=', 'threading.Thread(target=work)', 'thread.start()', 'self.wait()', 'thread.join()', 'return', 'red', 'def', 'test_hello(self):', \"self.check_url('/hello')\", 'def', 'test_static(self):', \"self.check_url('/static/red_test.py',\", 'allowed_warnings=[rs.MISSING_HDRS_304])', 'def', 'test_static_versioned_url(self):', \"self.check_url('/static/red_test.py?v=1234',\", 'allowed_warnings=[rs.MISSING_HDRS_304])', 'def', 'test_redirect(self):', \"self.check_url('/redirect/hello',\", 'expected_status=302)', 'def', 'test_permanent_redirect(self):', \"self.check_url('/redirect/hello?status=301',\", 'expected_status=301)', 'def', 'test_404(self):', \"self.check_url('/404',\", 'expected_status=404)', 'def', 'test_post(self):', 'body', '=', \"'foo=bar'\", 'self.check_url(', \"'/post',\", \"method='POST',\", 'body=body,', \"headers=[('Content-Length',\", 'str(len(body))),', \"('Content-Type',\", \"'application/x-www-form-urlencoded')],\", 'expected_status=303)', 'def', 'test_chunked(self):', \"self.check_url('/chunked')\", 'def', 'test_strong_etag_match(self):', 'computed_etag', '=', '\\'\"xyzzy\"\\'', 'etags', '=', '\\'\"xyzzy\"\\'', 'self.check_url(', \"'/cache/'\", '+', 'computed_etag,', \"method='GET',\", \"headers=[('If-None-Match',\", 'etags)],', 'expected_status=304)', 'def', 'test_multiple_strong_etag_match(self):', 'computed_etag', '=', '\\'\"xyzzy1\"\\'', 'etags', '=', '\\'\"xyzzy1\",', '\"xyzzy2\"\\'', 'self.check_url(', \"'/cache/'\", '+', 'computed_etag,', \"method='GET',\", \"headers=[('If-None-Match',\", 'etags)],', 'expected_status=304)', 'def', 'test_strong_etag_not_match(self):', 'computed_etag', '=', '\\'\"xyzzy\"\\'', 'etags', '=', '\\'\"xyzzy1\"\\'', 'self.check_url(', \"'/cache/'\", '+', 'computed_etag,', \"method='GET',\", \"headers=[('If-None-Match',\", 'etags)],', 'expected_status=200)', 'def', 'test_multiple_strong_etag_not_match(self):', 'computed_etag', '=', '\\'\"xyzzy\"\\'', 'etags', '=', '\\'\"xyzzy1\",', '\"xyzzy2\"\\'', 'self.check_url(', \"'/cache/'\", '+', 'computed_etag,', \"method='GET',\", \"headers=[('If-None-Match',\", 'etags)],', 'expected_status=200)', 'def', 'test_wildcard_etag(self):', 'computed_etag', '=', '\\'\"xyzzy\"\\'', 'etags', '=', \"'*'\", 'self.check_url(', \"'/cache/'\", '+', 'computed_etag,', \"method='GET',\", \"headers=[('If-None-Match',\", 'etags)],', 'expected_status=304,', 'allowed_warnings=[rs.MISSING_HDRS_304])', 'def', 'test_weak_etag_match(self):', 'computed_etag', '=', '\\'\"xyzzy1\"\\'', 'etags', '=', '\\'W/\"xyzzy1\"\\'', 'self.check_url(', \"'/cache/'\", '+', 'computed_etag,', \"method='GET',\", \"headers=[('If-None-Match',\", 'etags)],', 'expected_status=304)', 'def', 'test_multiple_weak_etag_match(self):', 'computed_etag', '=', '\\'\"xyzzy2\"\\'', 'etags', '=', '\\'W/\"xyzzy1\",', 'W/\"xyzzy2\"\\'', 'self.check_url(', \"'/cache/'\", '+', 'computed_etag,', \"method='GET',\", \"headers=[('If-None-Match',\", 'etags)],', 'expected_status=304)', 'def', 'test_weak_etag_not_match(self):', 'computed_etag', '=', '\\'\"xyzzy2\"\\'', 'etags', '=', '\\'W/\"xyzzy1\"\\'', 'self.check_url(', \"'/cache/'\", '+', 'computed_etag,', \"method='GET',\", \"headers=[('If-None-Match',\", 'etags)],', 'expected_status=200)', 'def', 'test_multiple_weak_etag_not_match(self):', 'computed_etag', '=', '\\'\"xyzzy3\"\\'', 'etags', '=', '\\'W/\"xyzzy1\",', 'W/\"xyzzy2\"\\'', 'self.check_url(', \"'/cache/'\", '+', 'computed_etag,', \"method='GET',\", \"headers=[('If-None-Match',\", 'etags)],', 'expected_status=200)', 'class', 'DefaultHTTPTest(AsyncHTTPTestCase,', 'TestMixin):', 'def', 'get_app(self):', 'return', 'Application(self.get_handlers(),', '**self.get_app_kwargs())', 'class', 'GzipHTTPTest(AsyncHTTPTestCase,', 'TestMixin):', 'def', 'get_app(self):', 'return', 'Application(self.get_handlers(),', 'gzip=True,', '**self.get_app_kwargs())', 'def', 'get_allowed_errors(self):', 'return', 'super().get_allowed_errors()', '+', '[', 'rs.VARY_ETAG_DOESNT_CHANGE,', ']', 'if', '__name__', '==', \"'__main__':\", 'parse_command_line()', 'unittest.main()']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/maint/test/websocket/client.py",
        "vector": "['import', 'logging', 'from', 'tornado', 'import', 'gen', 'from', 'tornado.ioloop', 'import', 'IOLoop', 'from', 'tornado.options', 'import', 'define,', 'options,', 'parse_command_line', 'from', 'tornado.websocket', 'import', 'websocket_connect', \"define('url',\", \"default='ws://localhost:9001')\", \"define('name',\", \"default='Tornado')\", '@gen.engine', 'def', 'run_tests():', 'url', '=', 'options.url', '+', \"'/getCaseCount'\", 'control_ws', '=', 'yield', 'websocket_connect(url,', 'None)', 'num_tests', '=', 'int((yield', 'control_ws.read_message()))', \"logging.info('running\", '%d', \"cases',\", 'num_tests)', 'msg', '=', 'yield', 'control_ws.read_message()', 'assert', 'msg', 'is', 'None', 'for', 'i', 'in', 'range(1,', 'num_tests', '+', '1):', \"logging.info('running\", 'test', 'case', \"%d',\", 'i)', 'url', '=', 'options.url', '+', \"'/runCase?case=%d&agent=%s'\", '%', '(i,', 'options.name)', 'test_ws', '=', 'yield', 'websocket_connect(url,', 'None,', 'compression_options={})', 'while', 'True:', 'message', '=', 'yield', 'test_ws.read_message()', 'if', 'message', 'is', 'None:', 'break', 'test_ws.write_message(message,', 'binary=isinstance(message,', 'bytes))', 'url', '=', 'options.url', '+', \"'/updateReports?agent=%s'\", '%', 'options.name', 'update_ws', '=', 'yield', 'websocket_connect(url,', 'None)', 'msg', '=', 'yield', 'update_ws.read_message()', 'assert', 'msg', 'is', 'None', 'IOLoop.instance().stop()', 'def', 'main():', 'parse_command_line()', 'IOLoop.instance().add_callback(run_tests)', 'IOLoop.instance().start()', 'if', '__name__', '==', \"'__main__':\", 'main()']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/maint/test/websocket/server.py",
        "vector": "['from', 'tornado.ioloop', 'import', 'IOLoop', 'from', 'tornado.options', 'import', 'define,', 'options,', 'parse_command_line', 'from', 'tornado.websocket', 'import', 'WebSocketHandler', 'from', 'tornado.web', 'import', 'Application', \"define('port',\", 'default=9000)', 'class', 'EchoHandler(WebSocketHandler):', 'def', 'on_message(self,', 'message):', 'self.write_message(message,', 'binary=isinstance(message,', 'bytes))', 'def', 'get_compression_options(self):', 'return', '{}', 'if', '__name__', '==', \"'__main__':\", 'parse_command_line()', 'app', '=', 'Application([', \"('/',\", 'EchoHandler),', '])', 'app.listen(options.port,', \"address='127.0.0.1')\", 'IOLoop.instance().start()']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/maint/vm/windows/bootstrap.py",
        "vector": "['r', 'import', 'os', 'import', 'subprocess', 'import', 'sys', 'import', 'urllib', 'TMPDIR', '=', \"r'c:\\\\tornado_bootstrap'\", 'PYTHON_VERSIONS', '=', '[', \"(r'c:\\\\python27\\\\python.exe',\", \"'http://www.python.org/ftp/python/2.7.3/python-2.7.3.msi'),\", \"(r'c:\\\\python36\\\\python.exe',\", \"'http://www.python.org/ftp/python/3.6.0/python-3.6.0.msi'),\", ']', 'SCRIPTS_DIR', '=', \"r'c:\\\\python27\\\\scripts'\", 'EASY_INSTALL', '=', 'os.path.join(SCRIPTS_DIR,', \"'easy_install.exe')\", 'PY_PACKAGES', '=', \"['tox',\", \"'virtualenv',\", \"'pip']\", 'def', 'download_to_cache(url,', 'local_name=None):', 'if', 'local_name', 'is', 'None:', 'local_name', '=', \"url.split('/')[-1]\", 'filename', '=', 'os.path.join(TMPDIR,', 'local_name)', 'if', 'not', 'os.path.exists(filename):', 'data', '=', 'urllib.urlopen(url).read()', 'with', 'open(filename,', \"'wb')\", 'as', 'f:', 'f.write(data)', 'return', 'filename', 'def', 'main():', 'if', 'not', 'os.path.exists(TMPDIR):', 'os.mkdir(TMPDIR)', 'os.chdir(TMPDIR)', 'for', 'exe,', 'url', 'in', 'PYTHON_VERSIONS:', 'if', 'os.path.exists(exe):', 'print(\"%s', 'already', 'exists,', 'skipping\"', '%', 'exe)', 'continue', 'print(\"Installing', '%s\"', '%', 'url)', 'filename', '=', 'download_to_cache(url)', \"subprocess.check_call(['msiexec',\", \"'/i',\", 'filename,', \"'ALLUSERS=1',\", \"'/passive'])\", 'if', 'not', 'os.path.exists(EASY_INSTALL):', 'filename', '=', \"download_to_cache('http://python-distribute.org/distribute_setup.py')\", 'subprocess.check_call([sys.executable,', 'filename])', 'subprocess.check_call([EASY_INSTALL]', '+', 'PY_PACKAGES)', 'if', '__name__', '==', \"'__main__':\", 'main()']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/setup.py",
        "vector": "['import', 'os', 'import', 'platform', 'import', 'setuptools', 'try:', 'import', 'wheel.bdist_wheel', 'except', 'ImportError:', 'wheel', '=', 'None', 'kwargs', '=', '{}', 'with', 'open(\"tornado/__init__.py\")', 'as', 'f:', 'ns', '=', '{}', 'exec(f.read(),', 'ns)', 'version', '=', 'ns[\"version\"]', 'with', 'open(\"README.rst\")', 'as', 'f:', 'kwargs[\"long_description\"]', '=', 'f.read()', 'kwargs[\"long_description_content_type\"]', '=', '\"text/x-rst\"', 'if', '(', 'platform.python_implementation()', '==', '\"CPython\"', 'and', 'os.environ.get(\"TORNADO_EXTENSION\")', '!=', '\"0\"', '):', 'kwargs[\"ext_modules\"]', '=', '[', 'setuptools.Extension(', '\"tornado.speedups\",', 'sources=[\"tornado/speedups.c\"],', 'optional=os.environ.get(\"TORNADO_EXTENSION\")', '!=', '\"1\",', 'py_limited_api=True,', 'define_macros=[(\"Py_LIMITED_API\",', '\"0x03080000\")],', ')', ']', 'if', 'wheel', 'is', 'not', 'None:', 'class', 'bdist_wheel_abi3(wheel.bdist_wheel.bdist_wheel):', 'def', 'get_tag(self):', 'python,', 'abi,', 'plat', '=', 'super().get_tag()', 'if', 'python.startswith(\"cp\"):', 'return', '\"cp38\",', '\"abi3\",', 'plat', 'return', 'python,', 'abi,', 'plat', 'kwargs[\"cmdclass\"]', '=', '{\"bdist_wheel\":', 'bdist_wheel_abi3}', 'setuptools.setup(', 'name=\"tornado\",', 'version=version,', 'python_requires=\">=', '3.8\",', 'packages=[\"tornado\",', '\"tornado.test\",', '\"tornado.platform\"],', 'package_data={', '\"tornado\":', '[\"py.typed\"],', '\"tornado.test\":', '[', '\"README\",', '\"csv_translations/fr_FR.csv\",', '\"gettext_translations/fr_FR/LC_MESSAGES/tornado_test.mo\",', '\"gettext_translations/fr_FR/LC_MESSAGES/tornado_test.po\",', '\"options_test.cfg\",', '\"options_test_types.cfg\",', '\"options_test_types_str.cfg\",', '\"static/robots.txt\",', '\"static/sample.xml\",', '\"static/sample.xml.gz\",', '\"static/sample.xml.bz2\",', '\"static/dir/index.html\",', '\"static_foo.txt\",', '\"templates/utf8.html\",', '\"test.crt\",', '\"test.key\",', '],', '},', 'author=\"Facebook\",', 'author_email=\"python-tornado@googlegroups.com\",', 'url=\"http://www.tornadoweb.org/\",', 'project_urls={', '\"Source\":', '\"https://github.com/tornadoweb/tornado\",', '},', 'license=\"Apache-2.0\",', 'description=(', '\"Tornado', 'is', 'a', 'Python', 'web', 'framework', 'and', 'asynchronous', 'networking', 'library,\"', '\"', 'originally', 'developed', 'at', 'FriendFeed.\"', '),', 'classifiers=[', '\"License', '::', 'OSI', 'Approved', '::', 'Apache', 'Software', 'License\",', '\"Programming', 'Language', '::', 'Python', '::', '3\",', '\"Programming', 'Language', '::', 'Python', '::', '3.8\",', '\"Programming', 'Language', '::', 'Python', '::', '3.9\",', '\"Programming', 'Language', '::', 'Python', '::', '3.10\",', '\"Programming', 'Language', '::', 'Python', '::', '3.11\",', '\"Programming', 'Language', '::', 'Python', '::', 'Implementation', '::', 'CPython\",', '\"Programming', 'Language', '::', 'Python', '::', 'Implementation', '::', 'PyPy\",', '],', '**kwargs', ')']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/__init__.py",
        "vector": "['version', '=', '\"6.4\"', 'version_info', '=', '(6,', '4,', '0,', '0)', 'import', 'importlib', 'import', 'typing', '__all__', '=', '[', '\"auth\",', '\"autoreload\",', '\"concurrent\",', '\"curl_httpclient\",', '\"escape\",', '\"gen\",', '\"http1connection\",', '\"httpclient\",', '\"httpserver\",', '\"httputil\",', '\"ioloop\",', '\"iostream\",', '\"locale\",', '\"locks\",', '\"log\",', '\"netutil\",', '\"options\",', '\"platform\",', '\"process\",', '\"queues\",', '\"routing\",', '\"simple_httpclient\",', '\"tcpclient\",', '\"tcpserver\",', '\"template\",', '\"testing\",', '\"util\",', '\"web\",', ']', 'def', '__getattr__(name:', 'str)', '->', 'typing.Any:', 'if', 'name', 'in', '__all__:', 'return', 'importlib.import_module(\".\"', '+', 'name,', '__name__)', 'raise', 'AttributeError(f\"module', '{__name__!r}', 'has', 'no', 'attribute', '{name!r}\")']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/_locale_data.py",
        "vector": "['LOCALE_NAMES', '=', '{', '\"af_ZA\":', '{\"name_en\":', '\"Afrikaans\",', '\"name\":', '\"Afrikaans\"},', '\"am_ET\":', '{\"name_en\":', '\"Amharic\",', '\"name\":', '\"\u12a0\u121b\u122d\u129b\"},', '\"ar_AR\":', '{\"name_en\":', '\"Arabic\",', '\"name\":', '\"\u0627\u0644\u0639\u0631\u0628\u064a\u0629\"},', '\"bg_BG\":', '{\"name_en\":', '\"Bulgarian\",', '\"name\":', '\"\u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438\"},', '\"bn_IN\":', '{\"name_en\":', '\"Bengali\",', '\"name\":', '\"\u09ac\u09be\u0982\u09b2\u09be\"},', '\"bs_BA\":', '{\"name_en\":', '\"Bosnian\",', '\"name\":', '\"Bosanski\"},', '\"ca_ES\":', '{\"name_en\":', '\"Catalan\",', '\"name\":', '\"Catal\u00e0\"},', '\"cs_CZ\":', '{\"name_en\":', '\"Czech\",', '\"name\":', '\"\u010ce\u0161tina\"},', '\"cy_GB\":', '{\"name_en\":', '\"Welsh\",', '\"name\":', '\"Cymraeg\"},', '\"da_DK\":', '{\"name_en\":', '\"Danish\",', '\"name\":', '\"Dansk\"},', '\"de_DE\":', '{\"name_en\":', '\"German\",', '\"name\":', '\"Deutsch\"},', '\"el_GR\":', '{\"name_en\":', '\"Greek\",', '\"name\":', '\"\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\"},', '\"en_GB\":', '{\"name_en\":', '\"English', '(UK)\",', '\"name\":', '\"English', '(UK)\"},', '\"en_US\":', '{\"name_en\":', '\"English', '(US)\",', '\"name\":', '\"English', '(US)\"},', '\"es_ES\":', '{\"name_en\":', '\"Spanish', '(Spain)\",', '\"name\":', '\"Espa\u00f1ol', '(Espa\u00f1a)\"},', '\"es_LA\":', '{\"name_en\":', '\"Spanish\",', '\"name\":', '\"Espa\u00f1ol\"},', '\"et_EE\":', '{\"name_en\":', '\"Estonian\",', '\"name\":', '\"Eesti\"},', '\"eu_ES\":', '{\"name_en\":', '\"Basque\",', '\"name\":', '\"Euskara\"},', '\"fa_IR\":', '{\"name_en\":', '\"Persian\",', '\"name\":', '\"\u0641\u0627\u0631\u0633\u06cc\"},', '\"fi_FI\":', '{\"name_en\":', '\"Finnish\",', '\"name\":', '\"Suomi\"},', '\"fr_CA\":', '{\"name_en\":', '\"French', '(Canada)\",', '\"name\":', '\"Fran\u00e7ais', '(Canada)\"},', '\"fr_FR\":', '{\"name_en\":', '\"French\",', '\"name\":', '\"Fran\u00e7ais\"},', '\"ga_IE\":', '{\"name_en\":', '\"Irish\",', '\"name\":', '\"Gaeilge\"},', '\"gl_ES\":', '{\"name_en\":', '\"Galician\",', '\"name\":', '\"Galego\"},', '\"he_IL\":', '{\"name_en\":', '\"Hebrew\",', '\"name\":', '\"\u05e2\u05d1\u05e8\u05d9\u05ea\"},', '\"hi_IN\":', '{\"name_en\":', '\"Hindi\",', '\"name\":', '\"\u0939\u093f\u0928\u094d\u0926\u0940\"},', '\"hr_HR\":', '{\"name_en\":', '\"Croatian\",', '\"name\":', '\"Hrvatski\"},', '\"hu_HU\":', '{\"name_en\":', '\"Hungarian\",', '\"name\":', '\"Magyar\"},', '\"id_ID\":', '{\"name_en\":', '\"Indonesian\",', '\"name\":', '\"Bahasa', 'Indonesia\"},', '\"is_IS\":', '{\"name_en\":', '\"Icelandic\",', '\"name\":', '\"\u00cdslenska\"},', '\"it_IT\":', '{\"name_en\":', '\"Italian\",', '\"name\":', '\"Italiano\"},', '\"ja_JP\":', '{\"name_en\":', '\"Japanese\",', '\"name\":', '\"\u65e5\u672c\u8a9e\"},', '\"ko_KR\":', '{\"name_en\":', '\"Korean\",', '\"name\":', '\"\ud55c\uad6d\uc5b4\"},', '\"lt_LT\":', '{\"name_en\":', '\"Lithuanian\",', '\"name\":', '\"Lietuvi\u0173\"},', '\"lv_LV\":', '{\"name_en\":', '\"Latvian\",', '\"name\":', '\"Latvie\u0161u\"},', '\"mk_MK\":', '{\"name_en\":', '\"Macedonian\",', '\"name\":', '\"\u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438\"},', '\"ml_IN\":', '{\"name_en\":', '\"Malayalam\",', '\"name\":', '\"\u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02\"},', '\"ms_MY\":', '{\"name_en\":', '\"Malay\",', '\"name\":', '\"Bahasa', 'Melayu\"},', '\"nb_NO\":', '{\"name_en\":', '\"Norwegian', '(bokmal)\",', '\"name\":', '\"Norsk', '(bokm\u00e5l)\"},', '\"nl_NL\":', '{\"name_en\":', '\"Dutch\",', '\"name\":', '\"Nederlands\"},', '\"nn_NO\":', '{\"name_en\":', '\"Norwegian', '(nynorsk)\",', '\"name\":', '\"Norsk', '(nynorsk)\"},', '\"pa_IN\":', '{\"name_en\":', '\"Punjabi\",', '\"name\":', '\"\u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40\"},', '\"pl_PL\":', '{\"name_en\":', '\"Polish\",', '\"name\":', '\"Polski\"},', '\"pt_BR\":', '{\"name_en\":', '\"Portuguese', '(Brazil)\",', '\"name\":', '\"Portugu\u00eas', '(Brasil)\"},', '\"pt_PT\":', '{\"name_en\":', '\"Portuguese', '(Portugal)\",', '\"name\":', '\"Portugu\u00eas', '(Portugal)\"},', '\"ro_RO\":', '{\"name_en\":', '\"Romanian\",', '\"name\":', '\"Rom\u00e2n\u0103\"},', '\"ru_RU\":', '{\"name_en\":', '\"Russian\",', '\"name\":', '\"\u0420\u0443\u0441\u0441\u043a\u0438\u0439\"},', '\"sk_SK\":', '{\"name_en\":', '\"Slovak\",', '\"name\":', '\"Sloven\u010dina\"},', '\"sl_SI\":', '{\"name_en\":', '\"Slovenian\",', '\"name\":', '\"Sloven\u0161\u010dina\"},', '\"sq_AL\":', '{\"name_en\":', '\"Albanian\",', '\"name\":', '\"Shqip\"},', '\"sr_RS\":', '{\"name_en\":', '\"Serbian\",', '\"name\":', '\"\u0421\u0440\u043f\u0441\u043a\u0438\"},', '\"sv_SE\":', '{\"name_en\":', '\"Swedish\",', '\"name\":', '\"Svenska\"},', '\"sw_KE\":', '{\"name_en\":', '\"Swahili\",', '\"name\":', '\"Kiswahili\"},', '\"ta_IN\":', '{\"name_en\":', '\"Tamil\",', '\"name\":', '\"\u0ba4\u0bae\u0bbf\u0bb4\u0bcd\"},', '\"te_IN\":', '{\"name_en\":', '\"Telugu\",', '\"name\":', '\"\u0c24\u0c46\u0c32\u0c41\u0c17\u0c41\"},', '\"th_TH\":', '{\"name_en\":', '\"Thai\",', '\"name\":', '\"\u0e20\u0e32\u0e29\u0e32\u0e44\u0e17\u0e22\"},', '\"tl_PH\":', '{\"name_en\":', '\"Filipino\",', '\"name\":', '\"Filipino\"},', '\"tr_TR\":', '{\"name_en\":', '\"Turkish\",', '\"name\":', '\"T\u00fcrk\u00e7e\"},', '\"uk_UA\":', '{\"name_en\":', '\"Ukraini', '\",', '\"name\":', '\"\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\"},', '\"vi_VN\":', '{\"name_en\":', '\"Vietnamese\",', '\"name\":', '\"Ti\u1ebfng', 'Vi\u1ec7t\"},', '\"zh_CN\":', '{\"name_en\":', '\"Chinese', '(Simplified)\",', '\"name\":', '\"\u4e2d\u6587(\u7b80\u4f53)\"},', '\"zh_TW\":', '{\"name_en\":', '\"Chinese', '(Traditional)\",', '\"name\":', '\"\u4e2d\u6587(\u7e41\u9ad4)\"},', '}']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/auth.py",
        "vector": "['import', 'base64', 'import', 'binascii', 'import', 'hashlib', 'import', 'hmac', 'import', 'time', 'import', 'urllib.parse', 'import', 'uuid', 'import', 'warnings', 'from', 'tornado', 'import', 'httpclient', 'from', 'tornado', 'import', 'escape', 'from', 'tornado.httputil', 'import', 'url_concat', 'from', 'tornado.util', 'import', 'unicode_type', 'from', 'tornado.web', 'import', 'RequestHandler', 'from', 'typing', 'import', 'List,', 'Any,', 'Dict,', 'cast,', 'Iterable,', 'Union,', 'Optional', 'class', 'AuthError(Exception):', 'pass', 'class', 'OpenIdMixin(object):', 'def', 'authenticate_redirect(', 'self,', 'callback_uri:', 'Optional[str]', '=', 'None,', 'ax_attrs:', 'List[str]', '=', '[\"name\",', '\"email\",', '\"language\",', '\"username\"],', ')', '->', 'None:', 'handler', '=', 'cast(RequestHandler,', 'self)', 'callback_uri', '=', 'callback_uri', 'or', 'handler.request.uri', 'assert', 'callback_uri', 'is', 'not', 'None', 'args', '=', 'self._openid_args(callback_uri,', 'ax_attrs=ax_attrs)', 'endpoint', '=', 'self._OPENID_ENDPOINT', 'handler.redirect(endpoint', '+', '\"?\"', '+', 'urllib.parse.urlencode(args))', 'async', 'def', 'get_authenticated_user(', 'self,', 'http_client:', 'Optional[httpclient.AsyncHTTPClient]', '=', 'None', ')', '->', 'Dict[str,', 'Any]:', 'handler', '=', 'cast(RequestHandler,', 'self)', 'args', '=', 'dict(', '(k,', 'v[-1])', 'for', 'k,', 'v', 'in', 'handler.request.arguments.items()', ')', 'args[\"openid.mode\"]', '=', '\"check_authentication\"', 'url', '=', 'self._OPENID_ENDPOINT', 'if', 'http_client', 'is', 'None:', 'http_client', '=', 'self.get_auth_http_client()', 'resp', '=', 'await', 'http_client.fetch(', 'url,', 'method=\"POST\",', 'body=urllib.parse.urlencode(args)', ')', 'return', 'self._on_authentication_verified(resp)', 'def', '_openid_args(', 'self,', 'callback_uri:', 'str,', 'ax_attrs:', 'Iterable[str]', '=', '[],', 'oauth_scope:', 'Optional[str]', '=', 'None,', ')', '->', 'Dict[str,', 'str]:', 'handler', '=', 'cast(RequestHandler,', 'self)', 'url', '=', 'urllib.parse.urljoin(handler.request.full_url(),', 'callback_uri)', 'args', '=', '{', '\"openid.ns\":', '\"http://specs.openid.net/auth/2.0\",', '\"openid.claimed_id\":', '\"http://specs.openid.net/auth/2.0/identifier_select\",', '\"openid.identity\":', '\"http://specs.openid.net/auth/2.0/identifier_select\",', '\"openid.return_to\":', 'url,', '\"openid.realm\":', 'urllib.parse.urljoin(url,', '\"/\"),', '\"openid.mode\":', '\"checkid_setup\",', '}', 'if', 'ax_attrs:', 'args.update(', '{', '\"openid.ns.ax\":', '\"http://openid.net/srv/ax/1.0\",', '\"openid.ax.mode\":', '\"fetch_request\",', '}', ')', 'ax_attrs', '=', 'set(ax_attrs)', 'required', '=', '[]', 'if', '\"name\"', 'in', 'ax_attrs:', 'ax_attrs', '-=', 'set([\"name\",', '\"firstname\",', '\"fullname\",', '\"lastname\"])', 'required', '+=', '[\"firstname\",', '\"fullname\",', '\"lastname\"]', 'args.update(', '{', '\"openid.ax.type.firstname\":', '\"http://axschema.org/namePerson/first\",', '\"openid.ax.type.fullname\":', '\"http://axschema.org/namePerson\",', '\"openid.ax.type.lastname\":', '\"http://axschema.org/namePerson/last\",', '}', ')', 'known_attrs', '=', '{', '\"email\":', '\"http://axschema.org/contact/email\",', '\"language\":', '\"http://axschema.org/pref/language\",', '\"username\":', '\"http://axschema.org/namePerson/friendly\",', '}', 'for', 'name', 'in', 'ax_attrs:', 'args[\"openid.ax.type.\"', '+', 'name]', '=', 'known_attrs[name]', 'required.append(name)', 'args[\"openid.ax.required\"]', '=', '\",\".join(required)', 'if', 'oauth_scope:', 'args.update(', '{', '\"openid.ns.oauth\":', '\"http://specs.openid.net/extensions/oauth/1.0\",', '\"openid.oauth.consumer\":', 'handler.request.host.split(\":\")[0],', '\"openid.oauth.scope\":', 'oauth_scope,', '}', ')', 'return', 'args', 'def', '_on_authentication_verified(', 'self,', 'response:', 'httpclient.HTTPResponse', ')', '->', 'Dict[str,', 'Any]:', 'handler', '=', 'cast(RequestHandler,', 'self)', 'if', 'b\"is_valid:true\"', 'not', 'in', 'response.body:', 'raise', 'AuthError(\"Invalid', 'OpenID', 'response:', '%r\"', '%', 'response.body)', 'ax_ns', '=', 'None', 'for', 'key', 'in', 'handler.request.arguments:', 'if', '(', 'key.startswith(\"openid.ns.\")', 'and', 'handler.get_argument(key)', '==', '\"http://openid.net/srv/ax/1.0\"', '):', 'ax_ns', '=', 'key[10:]', 'break', 'def', 'get_ax_arg(uri:', 'str)', '->', 'str:', 'if', 'not', 'ax_ns:', 'return', '\"\"', 'prefix', '=', '\"openid.\"', '+', 'ax_ns', '+', '\".type.\"', 'ax_name', '=', 'None', 'for', 'name', 'in', 'handler.request.arguments.keys():', 'if', 'handler.get_argument(name)', '==', 'uri', 'and', 'name.startswith(prefix):', 'part', '=', 'name[len(prefix)', ':]', 'ax_name', '=', '\"openid.\"', '+', 'ax_ns', '+', '\".value.\"', '+', 'part', 'break', 'if', 'not', 'ax_name:', 'return', '\"\"', 'return', 'handler.get_argument(ax_name,', '\"\")', 'email', '=', 'get_ax_arg(\"http://axschema.org/contact/email\")', 'name', '=', 'get_ax_arg(\"http://axschema.org/namePerson\")', 'first_name', '=', 'get_ax_arg(\"http://axschema.org/namePerson/first\")', 'last_name', '=', 'get_ax_arg(\"http://axschema.org/namePerson/last\")', 'username', '=', 'get_ax_arg(\"http://axschema.org/namePerson/friendly\")', 'locale', '=', 'get_ax_arg(\"http://axschema.org/pref/language\").lower()', 'user', '=', 'dict()', 'name_parts', '=', '[]', 'if', 'first_name:', 'user[\"first_name\"]', '=', 'first_name', 'name_parts.append(first_name)', 'if', 'last_name:', 'user[\"last_name\"]', '=', 'last_name', 'name_parts.append(last_name)', 'if', 'name:', 'user[\"name\"]', '=', 'name', 'elif', 'name_parts:', 'user[\"name\"]', '=', '\"', '\".join(name_parts)', 'elif', 'email:', 'user[\"name\"]', '=', 'email.split(\"@\")[0]', 'if', 'email:', 'user[\"email\"]', '=', 'email', 'if', 'locale:', 'user[\"locale\"]', '=', 'locale', 'if', 'username:', 'user[\"username\"]', '=', 'username', 'claimed_id', '=', 'handler.get_argument(\"openid.claimed_id\",', 'None)', 'if', 'claimed_id:', 'user[\"claimed_id\"]', '=', 'claimed_id', 'return', 'user', 'def', 'get_auth_http_client(self)', '->', 'httpclient.AsyncHTTPClient:', 'return', 'httpclient.AsyncHTTPClient()', 'class', 'OAuthMixin(object):', 'async', 'def', 'authorize_redirect(', 'self,', 'callback_uri:', 'Optional[str]', '=', 'None,', 'extra_params:', 'Optional[Dict[str,', 'Any]]', '=', 'None,', 'http_client:', 'Optional[httpclient.AsyncHTTPClient]', '=', 'None,', ')', '->', 'None:', 'if', 'callback_uri', 'and', 'getattr(self,', '\"_OAUTH_NO_CALLBACKS\",', 'False):', 'raise', 'Exception(\"This', 'service', 'does', 'not', 'support', 'oauth_callback\")', 'if', 'http_client', 'is', 'None:', 'http_client', '=', 'self.get_auth_http_client()', 'assert', 'http_client', 'is', 'not', 'None', 'if', 'getattr(self,', '\"_OAUTH_VERSION\",', '\"1.0a\")', '==', '\"1.0a\":', 'response', '=', 'await', 'http_client.fetch(', 'self._oauth_request_token_url(', 'callback_uri=callback_uri,', 'extra_params=extra_params', ')', ')', 'else:', 'response', '=', 'await', 'http_client.fetch(self._oauth_request_token_url())', 'url', '=', 'self._OAUTH_AUTHORIZE_URL', 'self._on_request_token(url,', 'callback_uri,', 'response)', 'async', 'def', 'get_authenticated_user(', 'self,', 'http_client:', 'Optional[httpclient.AsyncHTTPClient]', '=', 'None', ')', '->', 'Dict[str,', 'Any]:', 'handler', '=', 'cast(RequestHandler,', 'self)', 'request_key', '=', 'escape.utf8(handler.get_argument(\"oauth_token\"))', 'oauth_verifier', '=', 'handler.get_argument(\"oauth_verifier\",', 'None)', 'request_cookie', '=', 'handler.get_cookie(\"_oauth_request_token\")', 'if', 'not', 'request_cookie:', 'raise', 'AuthError(\"Missing', 'OAuth', 'request', 'token', 'cookie\")', 'handler.clear_cookie(\"_oauth_request_token\")', 'cookie_key,', 'cookie_secret', '=', '[', 'base64.b64decode(escape.utf8(i))', 'for', 'i', 'in', 'request_cookie.split(\"|\")', ']', 'if', 'cookie_key', '!=', 'request_key:', 'raise', 'AuthError(\"Request', 'token', 'does', 'not', 'match', 'cookie\")', 'token', '=', 'dict(', 'key=cookie_key,', 'secret=cookie_secret', ')', 'if', 'oauth_verifier:', 'token[\"verifier\"]', '=', 'oauth_verifier', 'if', 'http_client', 'is', 'None:', 'http_client', '=', 'self.get_auth_http_client()', 'assert', 'http_client', 'is', 'not', 'None', 'response', '=', 'await', 'http_client.fetch(self._oauth_access_token_url(token))', 'access_token', '=', '_oauth_parse_response(response.body)', 'user', '=', 'await', 'self._oauth_get_user_future(access_token)', 'if', 'not', 'user:', 'raise', 'AuthError(\"Error', 'getting', 'user\")', 'user[\"access_token\"]', '=', 'access_token', 'return', 'user', 'def', '_oauth_request_token_url(', 'self,', 'callback_uri:', 'Optional[str]', '=', 'None,', 'extra_params:', 'Optional[Dict[str,', 'Any]]', '=', 'None,', ')', '->', 'str:', 'handler', '=', 'cast(RequestHandler,', 'self)', 'consumer_token', '=', 'self._oauth_consumer_token()', 'url', '=', 'self._OAUTH_REQUEST_TOKEN_URL', 'args', '=', 'dict(', 'oauth_consumer_key=escape.to_basestring(consumer_token[\"key\"]),', 'oauth_signature_method=\"HMAC-SHA1\",', 'oauth_timestamp=str(int(time.time())),', 'oauth_nonce=escape.to_basestring(binascii.b2a_hex(uuid.uuid4().bytes)),', 'oauth_version=\"1.0\",', ')', 'if', 'getattr(self,', '\"_OAUTH_VERSION\",', '\"1.0a\")', '==', '\"1.0a\":', 'if', 'callback_uri', '==', '\"oob\":', 'args[\"oauth_callback\"]', '=', '\"oob\"', 'elif', 'callback_uri:', 'args[\"oauth_callback\"]', '=', 'urllib.parse.urljoin(', 'handler.request.full_url(),', 'callback_uri', ')', 'if', 'extra_params:', 'args.update(extra_params)', 'signature', '=', '_oauth10a_signature(consumer_token,', '\"GET\",', 'url,', 'args)', 'else:', 'signature', '=', '_oauth_signature(consumer_token,', '\"GET\",', 'url,', 'args)', 'args[\"oauth_signature\"]', '=', 'signature', 'return', 'url', '+', '\"?\"', '+', 'urllib.parse.urlencode(args)', 'def', '_on_request_token(', 'self,', 'authorize_url:', 'str,', 'callback_uri:', 'Optional[str],', 'response:', 'httpclient.HTTPResponse,', ')', '->', 'None:', 'handler', '=', 'cast(RequestHandler,', 'self)', 'request_token', '=', '_oauth_parse_response(response.body)', 'data', '=', '(', 'base64.b64encode(escape.utf8(request_token[\"key\"]))', '+', 'b\"|\"', '+', 'base64.b64encode(escape.utf8(request_token[\"secret\"]))', ')', 'handler.set_cookie(\"_oauth_request_token\",', 'data)', 'args', '=', 'dict(oauth_token=request_token[\"key\"])', 'if', 'callback_uri', '==', '\"oob\":', 'handler.finish(authorize_url', '+', '\"?\"', '+', 'urllib.parse.urlencode(args))', 'return', 'elif', 'callback_uri:', 'args[\"oauth_callback\"]', '=', 'urllib.parse.urljoin(', 'handler.request.full_url(),', 'callback_uri', ')', 'handler.redirect(authorize_url', '+', '\"?\"', '+', 'urllib.parse.urlencode(args))', 'def', '_oauth_access_token_url(self,', 'request_token:', 'Dict[str,', 'Any])', '->', 'str:', 'consumer_token', '=', 'self._oauth_consumer_token()', 'url', '=', 'self._OAUTH_ACCESS_TOKEN_URL', 'args', '=', 'dict(', 'oauth_consumer_key=escape.to_basestring(consumer_token[\"key\"]),', 'oauth_token=escape.to_basestring(request_token[\"key\"]),', 'oauth_signature_method=\"HMAC-SHA1\",', 'oauth_timestamp=str(int(time.time())),', 'oauth_nonce=escape.to_basestring(binascii.b2a_hex(uuid.uuid4().bytes)),', 'oauth_version=\"1.0\",', ')', 'if', '\"verifier\"', 'in', 'request_token:', 'args[\"oauth_verifier\"]', '=', 'request_token[\"verifier\"]', 'if', 'getattr(self,', '\"_OAUTH_VERSION\",', '\"1.0a\")', '==', '\"1.0a\":', 'signature', '=', '_oauth10a_signature(', 'consumer_token,', '\"GET\",', 'url,', 'args,', 'request_token', ')', 'else:', 'signature', '=', '_oauth_signature(', 'consumer_token,', '\"GET\",', 'url,', 'args,', 'request_token', ')', 'args[\"oauth_signature\"]', '=', 'signature', 'return', 'url', '+', '\"?\"', '+', 'urllib.parse.urlencode(args)', 'def', '_oauth_consumer_token(self)', '->', 'Dict[str,', 'Any]:', 'raise', 'NotImplementedError()', 'async', 'def', '_oauth_get_user_future(', 'self,', 'access_token:', 'Dict[str,', 'Any]', ')', '->', 'Dict[str,', 'Any]:', 'raise', 'NotImplementedError()', 'def', '_oauth_request_parameters(', 'self,', 'url:', 'str,', 'access_token:', 'Dict[str,', 'Any],', 'parameters:', 'Dict[str,', 'Any]', '=', '{},', 'method:', 'str', '=', '\"GET\",', ')', '->', 'Dict[str,', 'Any]:', 'consumer_token', '=', 'self._oauth_consumer_token()', 'base_args', '=', 'dict(', 'oauth_consumer_key=escape.to_basestring(consumer_token[\"key\"]),', 'oauth_token=escape.to_basestring(access_token[\"key\"]),', 'oauth_signature_method=\"HMAC-SHA1\",', 'oauth_timestamp=str(int(time.time())),', 'oauth_nonce=escape.to_basestring(binascii.b2a_hex(uuid.uuid4().bytes)),', 'oauth_version=\"1.0\",', ')', 'args', '=', '{}', 'args.update(base_args)', 'args.update(parameters)', 'if', 'getattr(self,', '\"_OAUTH_VERSION\",', '\"1.0a\")', '==', '\"1.0a\":', 'signature', '=', '_oauth10a_signature(', 'consumer_token,', 'method,', 'url,', 'args,', 'access_token', ')', 'else:', 'signature', '=', '_oauth_signature(', 'consumer_token,', 'method,', 'url,', 'args,', 'access_token', ')', 'base_args[\"oauth_signature\"]', '=', 'escape.to_basestring(signature)', 'return', 'base_args', 'def', 'get_auth_http_client(self)', '->', 'httpclient.AsyncHTTPClient:', 'return', 'httpclient.AsyncHTTPClient()', 'class', 'OAuth2Mixin(object):', 'def', 'authorize_redirect(', 'self,', 'redirect_uri:', 'Optional[str]', '=', 'None,', 'client_id:', 'Optional[str]', '=', 'None,', 'client_secret:', 'Optional[str]', '=', 'None,', 'extra_params:', 'Optional[Dict[str,', 'Any]]', '=', 'None,', 'scope:', 'Optional[List[str]]', '=', 'None,', 'response_type:', 'str', '=', '\"code\",', ')', '->', 'None:', 'if', 'client_secret', 'is', 'not', 'None:', 'warnings.warn(\"client_secret', 'argument', 'is', 'deprecated\",', 'DeprecationWarning)', 'handler', '=', 'cast(RequestHandler,', 'self)', 'args', '=', '{\"response_type\":', 'response_type}', 'if', 'redirect_uri', 'is', 'not', 'None:', 'args[\"redirect_uri\"]', '=', 'redirect_uri', 'if', 'client_id', 'is', 'not', 'None:', 'args[\"client_id\"]', '=', 'client_id', 'if', 'extra_params:', 'args.update(extra_params)', 'if', 'scope:', 'args[\"scope\"]', '=', '\"', '\".join(scope)', 'url', '=', 'self._OAUTH_AUTHORIZE_URL', 'handler.redirect(url_concat(url,', 'args))', 'def', '_oauth_request_token_url(', 'self,', 'redirect_uri:', 'Optional[str]', '=', 'None,', 'client_id:', 'Optional[str]', '=', 'None,', 'client_secret:', 'Optional[str]', '=', 'None,', 'code:', 'Optional[str]', '=', 'None,', 'extra_params:', 'Optional[Dict[str,', 'Any]]', '=', 'None,', ')', '->', 'str:', 'url', '=', 'self._OAUTH_ACCESS_TOKEN_URL', 'args', '=', '{}', 'if', 'redirect_uri', 'is', 'not', 'None:', 'args[\"redirect_uri\"]', '=', 'redirect_uri', 'if', 'code', 'is', 'not', 'None:', 'args[\"code\"]', '=', 'code', 'if', 'client_id', 'is', 'not', 'None:', 'args[\"client_id\"]', '=', 'client_id', 'if', 'client_secret', 'is', 'not', 'None:', 'args[\"client_secret\"]', '=', 'client_secret', 'if', 'extra_params:', 'args.update(extra_params)', 'return', 'url_concat(url,', 'args)', 'async', 'def', 'oauth2_request(', 'self,', 'url:', 'str,', 'access_token:', 'Optional[str]', '=', 'None,', 'post_args:', 'Optional[Dict[str,', 'Any]]', '=', 'None,', '**args:', 'Any', ')', '->', 'Any:', 'all_args', '=', '{}', 'if', 'access_token:', 'all_args[\"access_token\"]', '=', 'access_token', 'all_args.update(args)', 'if', 'all_args:', 'url', '+=', '\"?\"', '+', 'urllib.parse.urlencode(all_args)', 'http', '=', 'self.get_auth_http_client()', 'if', 'post_args', 'is', 'not', 'None:', 'response', '=', 'await', 'http.fetch(', 'url,', 'method=\"POST\",', 'body=urllib.parse.urlencode(post_args)', ')', 'else:', 'response', '=', 'await', 'http.fetch(url)', 'return', 'escape.json_decode(response.body)', 'def', 'get_auth_http_client(self)', '->', 'httpclient.AsyncHTTPClient:', 'return', 'httpclient.AsyncHTTPClient()', 'class', 'TwitterMixin(OAuthMixin):', '_OAUTH_REQUEST_TOKEN_URL', '=', '\"https://api.twitter.com/oauth/request_token\"', '_OAUTH_ACCESS_TOKEN_URL', '=', '\"https://api.twitter.com/oauth/access_token\"', '_OAUTH_AUTHORIZE_URL', '=', '\"https://api.twitter.com/oauth/authorize\"', '_OAUTH_AUTHENTICATE_URL', '=', '\"https://api.twitter.com/oauth/authenticate\"', '_OAUTH_NO_CALLBACKS', '=', 'False', '_TWITTER_BASE_URL', '=', '\"https://api.twitter.com/1.1\"', 'async', 'def', 'authenticate_redirect(self,', 'callback_uri:', 'Optional[str]', '=', 'None)', '->', 'None:', 'http', '=', 'self.get_auth_http_client()', 'response', '=', 'await', 'http.fetch(', 'self._oauth_request_token_url(callback_uri=callback_uri)', ')', 'self._on_request_token(self._OAUTH_AUTHENTICATE_URL,', 'None,', 'response)', 'async', 'def', 'twitter_request(', 'self,', 'path:', 'str,', 'access_token:', 'Dict[str,', 'Any],', 'post_args:', 'Optional[Dict[str,', 'Any]]', '=', 'None,', '**args:', 'Any', ')', '->', 'Any:', 'if', 'path.startswith(\"http:\")', 'or', 'path.startswith(\"https:\"):', 'url', '=', 'path', 'else:', 'url', '=', 'self._TWITTER_BASE_URL', '+', 'path', '+', '\".json\"', 'if', 'access_token:', 'all_args', '=', '{}', 'all_args.update(args)', 'all_args.update(post_args', 'or', '{})', 'method', '=', '\"POST\"', 'if', 'post_args', 'is', 'not', 'None', 'else', '\"GET\"', 'oauth', '=', 'self._oauth_request_parameters(', 'url,', 'access_token,', 'all_args,', 'method=method', ')', 'args.update(oauth)', 'if', 'args:', 'url', '+=', '\"?\"', '+', 'urllib.parse.urlencode(args)', 'http', '=', 'self.get_auth_http_client()', 'if', 'post_args', 'is', 'not', 'None:', 'response', '=', 'await', 'http.fetch(', 'url,', 'method=\"POST\",', 'body=urllib.parse.urlencode(post_args)', ')', 'else:', 'response', '=', 'await', 'http.fetch(url)', 'return', 'escape.json_decode(response.body)', 'def', '_oauth_consumer_token(self)', '->', 'Dict[str,', 'Any]:', 'handler', '=', 'cast(RequestHandler,', 'self)', 'handler.require_setting(\"twitter_consumer_key\",', '\"Twitter', 'OAuth\")', 'handler.require_setting(\"twitter_consumer_secret\",', '\"Twitter', 'OAuth\")', 'return', 'dict(', 'key=handler.settings[\"twitter_consumer_key\"],', 'secret=handler.settings[\"twitter_consumer_secret\"],', ')', 'async', 'def', '_oauth_get_user_future(', 'self,', 'access_token:', 'Dict[str,', 'Any]', ')', '->', 'Dict[str,', 'Any]:', 'user', '=', 'await', 'self.twitter_request(', '\"/account/verify_credentials\",', 'access_token=access_token', ')', 'if', 'user:', 'user[\"username\"]', '=', 'user[\"screen_name\"]', 'return', 'user', 'class', 'GoogleOAuth2Mixin(OAuth2Mixin):', '_OAUTH_AUTHORIZE_URL', '=', '\"https://accounts.google.com/o/oauth2/v2/auth\"', '_OAUTH_ACCESS_TOKEN_URL', '=', '\"https://www.googleapis.com/oauth2/v4/token\"', '_OAUTH_USERINFO_URL', '=', '\"https://www.googleapis.com/oauth2/v1/userinfo\"', '_OAUTH_NO_CALLBACKS', '=', 'False', '_OAUTH_SETTINGS_KEY', '=', '\"google_oauth\"', 'def', 'get_google_oauth_settings(self)', '->', 'Dict[str,', 'str]:', 'handler', '=', 'cast(RequestHandler,', 'self)', 'return', 'handler.settings[self._OAUTH_SETTINGS_KEY]', 'async', 'def', 'get_authenticated_user(', 'self,', 'redirect_uri:', 'str,', 'code:', 'str,', 'client_id:', 'Optional[str]', '=', 'None,', 'client_secret:', 'Optional[str]', '=', 'None,', ')', '->', 'Dict[str,', 'Any]:', 'if', 'client_id', 'is', 'None', 'or', 'client_secret', 'is', 'None:', 'settings', '=', 'self.get_google_oauth_settings()', 'if', 'client_id', 'is', 'None:', 'client_id', '=', 'settings[\"key\"]', 'if', 'client_secret', 'is', 'None:', 'client_secret', '=', 'settings[\"secret\"]', 'http', '=', 'self.get_auth_http_client()', 'body', '=', 'urllib.parse.urlencode(', '{', '\"redirect_uri\":', 'redirect_uri,', '\"code\":', 'code,', '\"client_id\":', 'client_id,', '\"client_secret\":', 'client_secret,', '\"grant_type\":', '\"authorization_code\",', '}', ')', 'response', '=', 'await', 'http.fetch(', 'self._OAUTH_ACCESS_TOKEN_URL,', 'method=\"POST\",', 'headers={\"Content-Type\":', '\"application/x-www-form-urlencoded\"},', 'body=body,', ')', 'return', 'escape.json_decode(response.body)', 'class', 'FacebookGraphMixin(OAuth2Mixin):', '_OAUTH_ACCESS_TOKEN_URL', '=', '\"https://graph.facebook.com/oauth/access_token?\"', '_OAUTH_AUTHORIZE_URL', '=', '\"https://www.facebook.com/dialog/oauth?\"', '_OAUTH_NO_CALLBACKS', '=', 'False', '_FACEBOOK_BASE_URL', '=', '\"https://graph.facebook.com\"', 'async', 'def', 'get_authenticated_user(', 'self,', 'redirect_uri:', 'str,', 'client_id:', 'str,', 'client_secret:', 'str,', 'code:', 'str,', 'extra_fields:', 'Optional[Dict[str,', 'Any]]', '=', 'None,', ')', '->', 'Optional[Dict[str,', 'Any]]:', 'http', '=', 'self.get_auth_http_client()', 'args', '=', '{', '\"redirect_uri\":', 'redirect_uri,', '\"code\":', 'code,', '\"client_id\":', 'client_id,', '\"client_secret\":', 'client_secret,', '}', 'fields', '=', 'set(', '[\"id\",', '\"name\",', '\"first_name\",', '\"last_name\",', '\"locale\",', '\"picture\",', '\"link\"]', ')', 'if', 'extra_fields:', 'fields.update(extra_fields)', 'response', '=', 'await', 'http.fetch(', 'self._oauth_request_token_url(**args)', ')', 'args', '=', 'escape.json_decode(response.body)', 'session', '=', '{', '\"access_token\":', 'args.get(\"access_token\"),', '\"expires_in\":', 'args.get(\"expires_in\"),', '}', 'assert', 'session[\"access_token\"]', 'is', 'not', 'None', 'user', '=', 'await', 'self.facebook_request(', 'path=\"/me\",', 'access_token=session[\"access_token\"],', 'appsecret_proof=hmac.new(', 'key=client_secret.encode(\"utf8\"),', 'msg=session[\"access_token\"].encode(\"utf8\"),', 'digestmod=hashlib.sha256,', ').hexdigest(),', 'fields=\",\".join(fields),', ')', 'if', 'user', 'is', 'None:', 'return', 'None', 'fieldmap', '=', '{}', 'for', 'field', 'in', 'fields:', 'fieldmap[field]', '=', 'user.get(field)', 'fieldmap.update(', '{', '\"access_token\":', 'session[\"access_token\"],', '\"session_expires\":', 'str(session.get(\"expires_in\")),', '}', ')', 'return', 'fieldmap', 'async', 'def', 'facebook_request(', 'self,', 'path:', 'str,', 'access_token:', 'Optional[str]', '=', 'None,', 'post_args:', 'Optional[Dict[str,', 'Any]]', '=', 'None,', '**args:', 'Any', ')', '->', 'Any:', 'url', '=', 'self._FACEBOOK_BASE_URL', '+', 'path', 'return', 'await', 'self.oauth2_request(', 'url,', 'access_token=access_token,', 'post_args=post_args,', '**args', ')', 'def', '_oauth_signature(', 'consumer_token:', 'Dict[str,', 'Any],', 'method:', 'str,', 'url:', 'str,', 'parameters:', 'Dict[str,', 'Any]', '=', '{},', 'token:', 'Optional[Dict[str,', 'Any]]', '=', 'None,', ')', '->', 'bytes:', 'parts', '=', 'urllib.parse.urlparse(url)', 'scheme,', 'netloc,', 'path', '=', 'parts[:3]', 'normalized_url', '=', 'scheme.lower()', '+', '\"://\"', '+', 'netloc.lower()', '+', 'path', 'base_elems', '=', '[]', 'base_elems.append(method.upper())', 'base_elems.append(normalized_url)', 'base_elems.append(', '\"&\".join(', '\"%s=%s\"', '%', '(k,', '_oauth_escape(str(v)))', 'for', 'k,', 'v', 'in', 'sorted(parameters.items())', ')', ')', 'base_string', '=', '\"&\".join(_oauth_escape(e)', 'for', 'e', 'in', 'base_elems)', 'key_elems', '=', '[escape.utf8(consumer_token[\"secret\"])]', 'key_elems.append(escape.utf8(token[\"secret\"]', 'if', 'token', 'else', '\"\"))', 'key', '=', 'b\"&\".join(key_elems)', 'hash', '=', 'hmac.new(key,', 'escape.utf8(base_string),', 'hashlib.sha1)', 'return', 'binascii.b2a_base64(hash.digest())[:-1]', 'def', '_oauth10a_signature(', 'consumer_token:', 'Dict[str,', 'Any],', 'method:', 'str,', 'url:', 'str,', 'parameters:', 'Dict[str,', 'Any]', '=', '{},', 'token:', 'Optional[Dict[str,', 'Any]]', '=', 'None,', ')', '->', 'bytes:', 'parts', '=', 'urllib.parse.urlparse(url)', 'scheme,', 'netloc,', 'path', '=', 'parts[:3]', 'normalized_url', '=', 'scheme.lower()', '+', '\"://\"', '+', 'netloc.lower()', '+', 'path', 'base_elems', '=', '[]', 'base_elems.append(method.upper())', 'base_elems.append(normalized_url)', 'base_elems.append(', '\"&\".join(', '\"%s=%s\"', '%', '(k,', '_oauth_escape(str(v)))', 'for', 'k,', 'v', 'in', 'sorted(parameters.items())', ')', ')', 'base_string', '=', '\"&\".join(_oauth_escape(e)', 'for', 'e', 'in', 'base_elems)', 'key_elems', '=', '[escape.utf8(urllib.parse.quote(consumer_token[\"secret\"],', 'safe=\"~\"))]', 'key_elems.append(', 'escape.utf8(urllib.parse.quote(token[\"secret\"],', 'safe=\"~\")', 'if', 'token', 'else', '\"\")', ')', 'key', '=', 'b\"&\".join(key_elems)', 'hash', '=', 'hmac.new(key,', 'escape.utf8(base_string),', 'hashlib.sha1)', 'return', 'binascii.b2a_base64(hash.digest())[:-1]', 'def', '_oauth_escape(val:', 'Union[str,', 'bytes])', '->', 'str:', 'if', 'isinstance(val,', 'unicode_type):', 'val', '=', 'val.encode(\"utf-8\")', 'return', 'urllib.parse.quote(val,', 'safe=\"~\")', 'def', '_oauth_parse_response(body:', 'bytes)', '->', 'Dict[str,', 'Any]:', 'body_str', '=', 'escape.native_str(body)', 'p', '=', 'urllib.parse.parse_qs(body_str,', 'keep_blank_values=False)', 'token', '=', 'dict(key=p[\"oauth_token\"][0],', 'secret=p[\"oauth_token_secret\"][0])', 'special', '=', '(\"oauth_token\",', '\"oauth_token_secret\")', 'token.update((k,', 'p[k][0])', 'for', 'k', 'in', 'p', 'if', 'k', 'not', 'in', 'special)', 'return', 'token']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/autoreload.py",
        "vector": "['import', 'os', 'import', 'sys', 'if', '__name__', '==', '\"__main__\":', 'if', 'sys.path[0]', '==', 'os.path.dirname(__file__):', 'del', 'sys.path[0]', 'import', 'functools', 'import', 'importlib.abc', 'import', 'os', 'import', 'pkgutil', 'import', 'sys', 'import', 'traceback', 'import', 'types', 'import', 'subprocess', 'import', 'weakref', 'from', 'tornado', 'import', 'ioloop', 'from', 'tornado.log', 'import', 'gen_log', 'from', 'tornado', 'import', 'process', 'try:', 'import', 'signal', 'except', 'ImportError:', 'signal', '=', 'None', 'from', 'typing', 'import', 'Callable,', 'Dict,', 'Optional,', 'List,', 'Union', '_has_execv', '=', 'sys.platform', '!=', '\"win32\"', '_watched_files', '=', 'set()', '_reload_hooks', '=', '[]', '_reload_attempted', '=', 'False', '_io_loops:', '\"weakref.WeakKeyDictionary[ioloop.IOLoop,', 'bool]\"', '=', '(', 'weakref.WeakKeyDictionary()', ')', '_autoreload_is_main', '=', 'False', '_original_argv:', 'Optional[List[str]]', '=', 'None', '_original_spec', '=', 'None', 'def', 'start(check_time:', 'int', '=', '500)', '->', 'None:', 'io_loop', '=', 'ioloop.IOLoop.current()', 'if', 'io_loop', 'in', '_io_loops:', 'return', '_io_loops[io_loop]', '=', 'True', 'if', 'len(_io_loops)', '>', '1:', 'gen_log.warning(\"tornado.autoreload', 'started', 'more', 'than', 'once', 'in', 'the', 'same', 'process\")', 'modify_times:', 'Dict[str,', 'float]', '=', '{}', 'callback', '=', 'functools.partial(_reload_on_update,', 'modify_times)', 'scheduler', '=', 'ioloop.PeriodicCallback(callback,', 'check_time)', 'scheduler.start()', 'def', 'wait()', '->', 'None:', 'io_loop', '=', 'ioloop.IOLoop()', 'io_loop.add_callback(start)', 'io_loop.start()', 'def', 'watch(filename:', 'str)', '->', 'None:', '_watched_files.add(filename)', 'def', 'add_reload_hook(fn:', 'Callable[[],', 'None])', '->', 'None:', '_reload_hooks.append(fn)', 'def', '_reload_on_update(modify_times:', 'Dict[str,', 'float])', '->', 'None:', 'if', '_reload_attempted:', 'return', 'if', 'process.task_id()', 'is', 'not', 'None:', 'return', 'for', 'module', 'in', 'list(sys.modules.values()):', 'if', 'not', 'isinstance(module,', 'types.ModuleType):', 'continue', 'path', '=', 'getattr(module,', '\"__file__\",', 'None)', 'if', 'not', 'path:', 'continue', 'if', 'path.endswith(\".pyc\")', 'or', 'path.endswith(\".pyo\"):', 'path', '=', 'path[:-1]', '_check_file(modify_times,', 'path)', 'for', 'path', 'in', '_watched_files:', '_check_file(modify_times,', 'path)', 'def', '_check_file(modify_times:', 'Dict[str,', 'float],', 'path:', 'str)', '->', 'None:', 'try:', 'modified', '=', 'os.stat(path).st_mtime', 'except', 'Exception:', 'return', 'if', 'path', 'not', 'in', 'modify_times:', 'modify_times[path]', '=', 'modified', 'return', 'if', 'modify_times[path]', '!=', 'modified:', 'gen_log.info(\"%s', 'modified;', 'restarting', 'server\",', 'path)', '_reload()', 'def', '_reload()', '->', 'None:', 'global', '_reload_attempted', '_reload_attempted', '=', 'True', 'for', 'fn', 'in', '_reload_hooks:', 'fn()', 'if', 'sys.platform', '!=', '\"win32\":', 'signal.setitimer(signal.ITIMER_REAL,', '0,', '0)', 'if', '_autoreload_is_main:', 'assert', '_original_argv', 'is', 'not', 'None', 'spec', '=', '_original_spec', 'argv', '=', '_original_argv', 'else:', 'spec', '=', 'getattr(sys.modules[\"__main__\"],', '\"__spec__\",', 'None)', 'argv', '=', 'sys.argv', 'if', 'spec', 'and', 'spec.name', '!=', '\"__main__\":', 'argv', '=', '[\"-m\",', 'spec.name]', '+', 'argv[1:]', 'if', 'not', '_has_execv:', 'subprocess.Popen([sys.executable]', '+', 'argv)', 'os._exit(0)', 'else:', 'os.execv(sys.executable,', '[sys.executable]', '+', 'argv)', '_USAGE', '=', 'def', 'main()', '->', 'None:', 'import', 'optparse', 'import', 'tornado.autoreload', 'global', '_autoreload_is_main', 'global', '_original_argv,', '_original_spec', 'tornado.autoreload._autoreload_is_main', '=', '_autoreload_is_main', '=', 'True', 'original_argv', '=', 'sys.argv', 'tornado.autoreload._original_argv', '=', '_original_argv', '=', 'original_argv', 'original_spec', '=', 'getattr(sys.modules[\"__main__\"],', '\"__spec__\",', 'None)', 'tornado.autoreload._original_spec', '=', '_original_spec', '=', 'original_spec', 'parser', '=', 'optparse.OptionParser(', 'prog=\"python', '-m', 'tornado.autoreload\",', 'usage=_USAGE,', 'epilog=\"Either', '-m', 'or', 'a', 'path', 'must', 'be', 'specified,', 'but', 'not', 'both\",', ')', 'parser.disable_interspersed_args()', 'parser.add_option(\"-m\",', 'dest=\"module\",', 'metavar=\"module\",', 'help=\"module', 'to', 'run\")', 'parser.add_option(', '\"--until-success\",', 'action=\"store_true\",', 'help=\"stop', 'reloading', 'after', 'the', 'program', 'exist', 'successfully', '(status', 'code', '0)\",', ')', 'opts,', 'rest', '=', 'parser.parse_args()', 'if', 'opts.module', 'is', 'None:', 'if', 'not', 'rest:', 'print(\"Either', '-m', 'or', 'a', 'path', 'must', 'be', 'specified\",', 'file=sys.stderr)', 'sys.exit(1)', 'path', '=', 'rest[0]', 'sys.argv', '=', 'rest[:]', 'else:', 'path', '=', 'None', 'sys.argv', '=', '[sys.argv[0]]', '+', 'rest', 'exit_status:', 'Union[int,', 'str,', 'None]', '=', '1', 'try:', 'import', 'runpy', 'if', 'opts.module', 'is', 'not', 'None:', 'runpy.run_module(opts.module,', 'run_name=\"__main__\",', 'alter_sys=True)', 'else:', 'assert', 'path', 'is', 'not', 'None', 'runpy.run_path(path,', 'run_name=\"__main__\")', 'except', 'SystemExit', 'as', 'e:', 'exit_status', '=', 'e.code', 'gen_log.info(\"Script', 'exited', 'with', 'status', '%s\",', 'e.code)', 'except', 'Exception', 'as', 'e:', 'gen_log.warning(\"Script', 'exited', 'with', 'uncaught', 'exception\",', 'exc_info=True)', 'for', 'filename,', 'lineno,', 'name,', 'line', 'in', 'traceback.extract_tb(sys.exc_info()[2]):', 'watch(filename)', 'if', 'isinstance(e,', 'SyntaxError):', 'if', 'e.filename', 'is', 'not', 'None:', 'watch(e.filename)', 'else:', 'exit_status', '=', '0', 'gen_log.info(\"Script', 'exited', 'normally\")', 'sys.argv', '=', 'original_argv', 'if', 'opts.module', 'is', 'not', 'None:', 'assert', 'opts.module', 'is', 'not', 'None', 'loader', '=', 'pkgutil.get_loader(opts.module)', 'if', 'loader', 'is', 'not', 'None', 'and', 'isinstance(loader,', 'importlib.abc.FileLoader):', 'watch(loader.get_filename())', 'if', 'opts.until_success', 'and', 'not', 'exit_status:', 'return', 'wait()', 'if', '__name__', '==', '\"__main__\":', 'main()']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/concurrent.py",
        "vector": "['import', 'asyncio', 'from', 'concurrent', 'import', 'futures', 'import', 'functools', 'import', 'sys', 'import', 'types', 'from', 'tornado.log', 'import', 'app_log', 'import', 'typing', 'from', 'typing', 'import', 'Any,', 'Callable,', 'Optional,', 'Tuple,', 'Union', '_T', '=', 'typing.TypeVar(\"_T\")', 'class', 'ReturnValueIgnoredError(Exception):', 'pass', 'Future', '=', 'asyncio.Future', 'FUTURES', '=', '(futures.Future,', 'Future)', 'def', 'is_future(x:', 'Any)', '->', 'bool:', 'return', 'isinstance(x,', 'FUTURES)', 'class', 'DummyExecutor(futures.Executor):', 'def', 'submit(', 'self,', 'fn:', 'Callable[...,', '_T],', '*args:', 'Any,', '**kwargs:', 'Any', ')', '->', '\"futures.Future[_T]\":', 'future', '=', 'futures.Future()', 'try:', 'future_set_result_unless_cancelled(future,', 'fn(*args,', '**kwargs))', 'except', 'Exception:', 'future_set_exc_info(future,', 'sys.exc_info())', 'return', 'future', 'if', 'sys.version_info', '>=', '(3,', '9):', 'def', 'shutdown(self,', 'wait:', 'bool', '=', 'True,', 'cancel_futures:', 'bool', '=', 'False)', '->', 'None:', 'pass', 'else:', 'def', 'shutdown(self,', 'wait:', 'bool', '=', 'True)', '->', 'None:', 'pass', 'dummy_executor', '=', 'DummyExecutor()', 'def', 'run_on_executor(*args:', 'Any,', '**kwargs:', 'Any)', '->', 'Callable:', 'def', 'run_on_executor_decorator(fn:', 'Callable)', '->', 'Callable[...,', 'Future]:', 'executor', '=', 'kwargs.get(\"executor\",', '\"executor\")', '@functools.wraps(fn)', 'def', 'wrapper(self:', 'Any,', '*args:', 'Any,', '**kwargs:', 'Any)', '->', 'Future:', 'async_future', '=', 'Future()', 'conc_future', '=', 'getattr(self,', 'executor).submit(fn,', 'self,', '*args,', '**kwargs)', 'chain_future(conc_future,', 'async_future)', 'return', 'async_future', 'return', 'wrapper', 'if', 'args', 'and', 'kwargs:', 'raise', 'ValueError(\"cannot', 'combine', 'positional', 'and', 'keyword', 'args\")', 'if', 'len(args)', '==', '1:', 'return', 'run_on_executor_decorator(args[0])', 'elif', 'len(args)', '!=', '0:', 'raise', 'ValueError(\"expected', '1', 'argument,', 'got', '%d\",', 'len(args))', 'return', 'run_on_executor_decorator', '_NO_RESULT', '=', 'object()', 'def', 'chain_future(a:', '\"Future[_T]\",', 'b:', '\"Future[_T]\")', '->', 'None:', 'def', 'copy(a:', '\"Future[_T]\")', '->', 'None:', 'if', 'b.done():', 'return', 'if', 'hasattr(a,', '\"exc_info\")', 'and', 'a.exc_info()', 'is', 'not', 'None:', 'future_set_exc_info(b,', 'a.exc_info())', 'else:', 'a_exc', '=', 'a.exception()', 'if', 'a_exc', 'is', 'not', 'None:', 'b.set_exception(a_exc)', 'else:', 'b.set_result(a.result())', 'if', 'isinstance(a,', 'Future):', 'future_add_done_callback(a,', 'copy)', 'else:', 'from', 'tornado.ioloop', 'import', 'IOLoop', 'IOLoop.current().add_future(a,', 'copy)', 'def', 'future_set_result_unless_cancelled(', 'future:', '\"Union[futures.Future[_T],', 'Future[_T]]\",', 'value:', '_T', ')', '->', 'None:', 'if', 'not', 'future.cancelled():', 'future.set_result(value)', 'def', 'future_set_exception_unless_cancelled(', 'future:', '\"Union[futures.Future[_T],', 'Future[_T]]\",', 'exc:', 'BaseException', ')', '->', 'None:', 'if', 'not', 'future.cancelled():', 'future.set_exception(exc)', 'else:', 'app_log.error(\"Exception', 'after', 'Future', 'was', 'cancelled\",', 'exc_info=exc)', 'def', 'future_set_exc_info(', 'future:', '\"Union[futures.Future[_T],', 'Future[_T]]\",', 'exc_info:', 'Tuple[', 'Optional[type],', 'Optional[BaseException],', 'Optional[types.TracebackType]', '],', ')', '->', 'None:', 'if', 'exc_info[1]', 'is', 'None:', 'raise', 'Exception(\"future_set_exc_info', 'called', 'with', 'no', 'exception\")', 'future_set_exception_unless_cancelled(future,', 'exc_info[1])', '@typing.overload', 'def', 'future_add_done_callback(', 'future:', '\"futures.Future[_T]\",', 'callback:', 'Callable[[\"futures.Future[_T]\"],', 'None]', ')', '->', 'None:', 'pass', '@typing.overload', 'def', 'future_add_done_callback(', 'future:', '\"Future[_T]\",', 'callback:', 'Callable[[\"Future[_T]\"],', 'None]', ')', '->', 'None:', 'pass', 'def', 'future_add_done_callback(', 'future:', '\"Union[futures.Future[_T],', 'Future[_T]]\",', 'callback:', 'Callable[...,', 'None]', ')', '->', 'None:', 'if', 'future.done():', 'callback(future)', 'else:', 'future.add_done_callback(callback)']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/curl_httpclient.py",
        "vector": "['import', 'collections', 'import', 'functools', 'import', 'logging', 'import', 'pycurl', 'import', 'threading', 'import', 'time', 'from', 'io', 'import', 'BytesIO', 'from', 'tornado', 'import', 'httputil', 'from', 'tornado', 'import', 'ioloop', 'from', 'tornado.escape', 'import', 'utf8,', 'native_str', 'from', 'tornado.httpclient', 'import', '(', 'HTTPRequest,', 'HTTPResponse,', 'HTTPError,', 'AsyncHTTPClient,', 'main,', ')', 'from', 'tornado.log', 'import', 'app_log', 'from', 'typing', 'import', 'Dict,', 'Any,', 'Callable,', 'Union,', 'Optional', 'import', 'typing', 'if', 'typing.TYPE_CHECKING:', 'from', 'typing', 'import', 'Deque,', 'Tuple', 'curl_log', '=', 'logging.getLogger(\"tornado.curl_httpclient\")', 'class', 'CurlAsyncHTTPClient(AsyncHTTPClient):', 'def', 'initialize(', 'self,', 'max_clients:', 'int', '=', '10,', 'defaults:', 'Optional[Dict[str,', 'Any]]', '=', 'None', ')', '->', 'None:', 'super().initialize(defaults=defaults)', 'self._multi', '=', 'pycurl.CurlMulti()', 'self._multi.setopt(pycurl.M_TIMERFUNCTION,', 'self._set_timeout)', 'self._multi.setopt(pycurl.M_SOCKETFUNCTION,', 'self._handle_socket)', 'self._curls', '=', '[self._curl_create()', 'for', 'i', 'in', 'range(max_clients)]', 'self._free_list', '=', 'self._curls[:]', 'self._requests', '=', '(', 'collections.deque()', ')', 'self._fds', '=', '{}', 'self._timeout', '=', 'None', 'self._force_timeout_callback', '=', 'ioloop.PeriodicCallback(', 'self._handle_force_timeout,', '1000', ')', 'self._force_timeout_callback.start()', 'dummy_curl_handle', '=', 'pycurl.Curl()', 'self._multi.add_handle(dummy_curl_handle)', 'self._multi.remove_handle(dummy_curl_handle)', 'def', 'close(self)', '->', 'None:', 'self._force_timeout_callback.stop()', 'if', 'self._timeout', 'is', 'not', 'None:', 'self.io_loop.remove_timeout(self._timeout)', 'for', 'curl', 'in', 'self._curls:', 'curl.close()', 'self._multi.close()', 'super().close()', 'self._force_timeout_callback', '=', 'None', 'self._multi', '=', 'None', 'def', 'fetch_impl(', 'self,', 'request:', 'HTTPRequest,', 'callback:', 'Callable[[HTTPResponse],', 'None]', ')', '->', 'None:', 'self._requests.append((request,', 'callback,', 'self.io_loop.time()))', 'self._process_queue()', 'self._set_timeout(0)', 'def', '_handle_socket(self,', 'event:', 'int,', 'fd:', 'int,', 'multi:', 'Any,', 'data:', 'bytes)', '->', 'None:', 'event_map', '=', '{', 'pycurl.POLL_NONE:', 'ioloop.IOLoop.NONE,', 'pycurl.POLL_IN:', 'ioloop.IOLoop.READ,', 'pycurl.POLL_OUT:', 'ioloop.IOLoop.WRITE,', 'pycurl.POLL_INOUT:', 'ioloop.IOLoop.READ', '|', 'ioloop.IOLoop.WRITE,', '}', 'if', 'event', '==', 'pycurl.POLL_REMOVE:', 'if', 'fd', 'in', 'self._fds:', 'self.io_loop.remove_handler(fd)', 'del', 'self._fds[fd]', 'else:', 'ioloop_event', '=', 'event_map[event]', 'if', 'fd', 'in', 'self._fds:', 'self.io_loop.remove_handler(fd)', 'self.io_loop.add_handler(fd,', 'self._handle_events,', 'ioloop_event)', 'self._fds[fd]', '=', 'ioloop_event', 'def', '_set_timeout(self,', 'msecs:', 'int)', '->', 'None:', 'if', 'self._timeout', 'is', 'not', 'None:', 'self.io_loop.remove_timeout(self._timeout)', 'self._timeout', '=', 'self.io_loop.add_timeout(', 'self.io_loop.time()', '+', 'msecs', '/', '1000.0,', 'self._handle_timeout', ')', 'def', '_handle_events(self,', 'fd:', 'int,', 'events:', 'int)', '->', 'None:', 'action', '=', '0', 'if', 'events', '&', 'ioloop.IOLoop.READ:', 'action', '|=', 'pycurl.CSELECT_IN', 'if', 'events', '&', 'ioloop.IOLoop.WRITE:', 'action', '|=', 'pycurl.CSELECT_OUT', 'while', 'True:', 'try:', 'ret,', 'num_handles', '=', 'self._multi.socket_action(fd,', 'action)', 'except', 'pycurl.error', 'as', 'e:', 'ret', '=', 'e.args[0]', 'if', 'ret', '!=', 'pycurl.E_CALL_MULTI_PERFORM:', 'break', 'self._finish_pending_requests()', 'def', '_handle_timeout(self)', '->', 'None:', 'self._timeout', '=', 'None', 'while', 'True:', 'try:', 'ret,', 'num_handles', '=', 'self._multi.socket_action(pycurl.SOCKET_TIMEOUT,', '0)', 'except', 'pycurl.error', 'as', 'e:', 'ret', '=', 'e.args[0]', 'if', 'ret', '!=', 'pycurl.E_CALL_MULTI_PERFORM:', 'break', 'self._finish_pending_requests()', 'new_timeout', '=', 'self._multi.timeout()', 'if', 'new_timeout', '>=', '0:', 'self._set_timeout(new_timeout)', 'def', '_handle_force_timeout(self)', '->', 'None:', 'while', 'True:', 'try:', 'ret,', 'num_handles', '=', 'self._multi.socket_all()', 'except', 'pycurl.error', 'as', 'e:', 'ret', '=', 'e.args[0]', 'if', 'ret', '!=', 'pycurl.E_CALL_MULTI_PERFORM:', 'break', 'self._finish_pending_requests()', 'def', '_finish_pending_requests(self)', '->', 'None:', 'while', 'True:', 'num_q,', 'ok_list,', 'err_list', '=', 'self._multi.info_read()', 'for', 'curl', 'in', 'ok_list:', 'self._finish(curl)', 'for', 'curl,', 'errnum,', 'errmsg', 'in', 'err_list:', 'self._finish(curl,', 'errnum,', 'errmsg)', 'if', 'num_q', '==', '0:', 'break', 'self._process_queue()', 'def', '_process_queue(self)', '->', 'None:', 'while', 'True:', 'started', '=', '0', 'while', 'self._free_list', 'and', 'self._requests:', 'started', '+=', '1', 'curl', '=', 'self._free_list.pop()', '(request,', 'callback,', 'queue_start_time)', '=', 'self._requests.popleft()', 'curl.info', '=', '{', '\"headers\":', 'httputil.HTTPHeaders(),', '\"buffer\":', 'BytesIO(),', '\"request\":', 'request,', '\"callback\":', 'callback,', '\"queue_start_time\":', 'queue_start_time,', '\"curl_start_time\":', 'time.time(),', '\"curl_start_ioloop_time\":', 'self.io_loop.current().time(),', '}', 'try:', 'self._curl_setup_request(', 'curl,', 'request,', 'curl.info[\"buffer\"],', 'curl.info[\"headers\"],', ')', 'except', 'Exception', 'as', 'e:', 'self._free_list.append(curl)', 'callback(HTTPResponse(request=request,', 'code=599,', 'error=e))', 'else:', 'self._multi.add_handle(curl)', 'if', 'not', 'started:', 'break', 'def', '_finish(', 'self,', 'curl:', 'pycurl.Curl,', 'curl_error:', 'Optional[int]', '=', 'None,', 'curl_message:', 'Optional[str]', '=', 'None,', ')', '->', 'None:', 'info', '=', 'curl.info', 'curl.info', '=', 'None', 'self._multi.remove_handle(curl)', 'self._free_list.append(curl)', 'buffer', '=', 'info[\"buffer\"]', 'if', 'curl_error:', 'assert', 'curl_message', 'is', 'not', 'None', 'error', '=', 'CurlError(curl_error,', 'curl_message)', 'assert', 'error', 'is', 'not', 'None', 'code', '=', 'error.code', 'effective_url', '=', 'None', 'buffer.close()', 'buffer', '=', 'None', 'else:', 'error', '=', 'None', 'code', '=', 'curl.getinfo(pycurl.HTTP_CODE)', 'effective_url', '=', 'curl.getinfo(pycurl.EFFECTIVE_URL)', 'buffer.seek(0)', 'time_info', '=', 'dict(', 'queue=info[\"curl_start_ioloop_time\"]', '-', 'info[\"queue_start_time\"],', 'namelookup=curl.getinfo(pycurl.NAMELOOKUP_TIME),', 'connect=curl.getinfo(pycurl.CONNECT_TIME),', 'appconnect=curl.getinfo(pycurl.APPCONNECT_TIME),', 'pretransfer=curl.getinfo(pycurl.PRETRANSFER_TIME),', 'starttransfer=curl.getinfo(pycurl.STARTTRANSFER_TIME),', 'total=curl.getinfo(pycurl.TOTAL_TIME),', 'redirect=curl.getinfo(pycurl.REDIRECT_TIME),', ')', 'try:', 'info[\"callback\"](', 'HTTPResponse(', 'request=info[\"request\"],', 'code=code,', 'headers=info[\"headers\"],', 'buffer=buffer,', 'effective_url=effective_url,', 'error=error,', 'reason=info[\"headers\"].get(\"X-Http-Reason\",', 'None),', 'request_time=self.io_loop.time()', '-', 'info[\"curl_start_ioloop_time\"],', 'start_time=info[\"curl_start_time\"],', 'time_info=time_info,', ')', ')', 'except', 'Exception:', 'self.handle_callback_exception(info[\"callback\"])', 'def', 'handle_callback_exception(self,', 'callback:', 'Any)', '->', 'None:', 'app_log.error(\"Exception', 'in', 'callback', '%r\",', 'callback,', 'exc_info=True)', 'def', '_curl_create(self)', '->', 'pycurl.Curl:', 'curl', '=', 'pycurl.Curl()', 'if', 'curl_log.isEnabledFor(logging.DEBUG):', 'curl.setopt(pycurl.VERBOSE,', '1)', 'curl.setopt(pycurl.DEBUGFUNCTION,', 'self._curl_debug)', 'if', 'hasattr(', 'pycurl,', '\"PROTOCOLS\"', '):', 'curl.setopt(pycurl.PROTOCOLS,', 'pycurl.PROTO_HTTP', '|', 'pycurl.PROTO_HTTPS)', 'curl.setopt(pycurl.REDIR_PROTOCOLS,', 'pycurl.PROTO_HTTP', '|', 'pycurl.PROTO_HTTPS)', 'return', 'curl', 'def', '_curl_setup_request(', 'self,', 'curl:', 'pycurl.Curl,', 'request:', 'HTTPRequest,', 'buffer:', 'BytesIO,', 'headers:', 'httputil.HTTPHeaders,', ')', '->', 'None:', 'curl.setopt(pycurl.URL,', 'native_str(request.url))', 'if', '\"Expect\"', 'not', 'in', 'request.headers:', 'request.headers[\"Expect\"]', '=', '\"\"', 'if', '\"Pragma\"', 'not', 'in', 'request.headers:', 'request.headers[\"Pragma\"]', '=', '\"\"', 'curl.setopt(', 'pycurl.HTTPHEADER,', '[', 'b\"%s:', '%s\"', '%', '(native_str(k).encode(\"ASCII\"),', 'native_str(v).encode(\"ISO8859-1\"))', 'for', 'k,', 'v', 'in', 'request.headers.get_all()', '],', ')', 'curl.setopt(', 'pycurl.HEADERFUNCTION,', 'functools.partial(', 'self._curl_header_callback,', 'headers,', 'request.header_callback', '),', ')', 'if', 'request.streaming_callback:', 'def', 'write_function(b:', 'Union[bytes,', 'bytearray])', '->', 'int:', 'assert', 'request.streaming_callback', 'is', 'not', 'None', 'self.io_loop.add_callback(request.streaming_callback,', 'b)', 'return', 'len(b)', 'else:', 'write_function', '=', 'buffer.write', 'curl.setopt(pycurl.WRITEFUNCTION,', 'write_function)', 'curl.setopt(pycurl.FOLLOWLOCATION,', 'request.follow_redirects)', 'curl.setopt(pycurl.MAXREDIRS,', 'request.max_redirects)', 'assert', 'request.connect_timeout', 'is', 'not', 'None', 'curl.setopt(pycurl.CONNECTTIMEOUT_MS,', 'int(1000', '*', 'request.connect_timeout))', 'assert', 'request.request_timeout', 'is', 'not', 'None', 'curl.setopt(pycurl.TIMEOUT_MS,', 'int(1000', '*', 'request.request_timeout))', 'if', 'request.user_agent:', 'curl.setopt(pycurl.USERAGENT,', 'native_str(request.user_agent))', 'else:', 'curl.setopt(pycurl.USERAGENT,', '\"Mozilla/5.0', '(compatible;', 'pycurl)\")', 'if', 'request.network_interface:', 'curl.setopt(pycurl.INTERFACE,', 'request.network_interface)', 'if', 'request.decompress_response:', 'curl.setopt(pycurl.ENCODING,', '\"gzip,deflate\")', 'else:', 'curl.setopt(pycurl.ENCODING,', 'None)', 'if', 'request.proxy_host', 'and', 'request.proxy_port:', 'curl.setopt(pycurl.PROXY,', 'request.proxy_host)', 'curl.setopt(pycurl.PROXYPORT,', 'request.proxy_port)', 'if', 'request.proxy_username:', 'assert', 'request.proxy_password', 'is', 'not', 'None', 'credentials', '=', 'httputil.encode_username_password(', 'request.proxy_username,', 'request.proxy_password', ')', 'curl.setopt(pycurl.PROXYUSERPWD,', 'credentials)', 'if', 'request.proxy_auth_mode', 'is', 'None', 'or', 'request.proxy_auth_mode', '==', '\"basic\":', 'curl.setopt(pycurl.PROXYAUTH,', 'pycurl.HTTPAUTH_BASIC)', 'elif', 'request.proxy_auth_mode', '==', '\"digest\":', 'curl.setopt(pycurl.PROXYAUTH,', 'pycurl.HTTPAUTH_DIGEST)', 'else:', 'raise', 'ValueError(', '\"Unsupported', 'proxy_auth_mode', '%s\"', '%', 'request.proxy_auth_mode', ')', 'else:', 'try:', 'curl.unsetopt(pycurl.PROXY)', 'except', 'TypeError:', 'curl.setopt(pycurl.PROXY,', '\"\")', 'curl.unsetopt(pycurl.PROXYUSERPWD)', 'if', 'request.validate_cert:', 'curl.setopt(pycurl.SSL_VERIFYPEER,', '1)', 'curl.setopt(pycurl.SSL_VERIFYHOST,', '2)', 'else:', 'curl.setopt(pycurl.SSL_VERIFYPEER,', '0)', 'curl.setopt(pycurl.SSL_VERIFYHOST,', '0)', 'if', 'request.ca_certs', 'is', 'not', 'None:', 'curl.setopt(pycurl.CAINFO,', 'request.ca_certs)', 'else:', 'pass', 'if', 'request.allow_ipv6', 'is', 'False:', 'curl.setopt(pycurl.IPRESOLVE,', 'pycurl.IPRESOLVE_V4)', 'else:', 'curl.setopt(pycurl.IPRESOLVE,', 'pycurl.IPRESOLVE_WHATEVER)', 'curl_options', '=', '{', '\"GET\":', 'pycurl.HTTPGET,', '\"POST\":', 'pycurl.POST,', '\"PUT\":', 'pycurl.UPLOAD,', '\"HEAD\":', 'pycurl.NOBODY,', '}', 'custom_methods', '=', 'set([\"DELETE\",', '\"OPTIONS\",', '\"PATCH\"])', 'for', 'o', 'in', 'curl_options.values():', 'curl.setopt(o,', 'False)', 'if', 'request.method', 'in', 'curl_options:', 'curl.unsetopt(pycurl.CUSTOMREQUEST)', 'curl.setopt(curl_options[request.method],', 'True)', 'elif', 'request.allow_nonstandard_methods', 'or', 'request.method', 'in', 'custom_methods:', 'curl.setopt(pycurl.CUSTOMREQUEST,', 'request.method)', 'else:', 'raise', 'KeyError(\"unknown', 'method', '\"', '+', 'request.method)', 'body_expected', '=', 'request.method', 'in', '(\"POST\",', '\"PATCH\",', '\"PUT\")', 'body_present', '=', 'request.body', 'is', 'not', 'None', 'if', 'not', 'request.allow_nonstandard_methods:', 'if', '(body_expected', 'and', 'not', 'body_present)', 'or', '(', 'body_present', 'and', 'not', 'body_expected', '):', 'raise', 'ValueError(', '\"Body', 'must', '%sbe', 'None', 'for', 'method', '%s', '(unless', '\"', '\"allow_nonstandard_methods', 'is', 'true)\"', '%', '(\"not', '\"', 'if', 'body_expected', 'else', '\"\",', 'request.method)', ')', 'if', 'body_expected', 'or', 'body_present:', 'if', 'request.method', '==', '\"GET\":', 'raise', 'ValueError(\"Body', 'must', 'be', 'None', 'for', 'GET', 'request\")', 'request_buffer', '=', 'BytesIO(utf8(request.body', 'or', '\"\"))', 'def', 'ioctl(cmd:', 'int)', '->', 'None:', 'if', 'cmd', '==', 'curl.IOCMD_RESTARTREAD:', 'request_buffer.seek(0)', 'curl.setopt(pycurl.READFUNCTION,', 'request_buffer.read)', 'curl.setopt(pycurl.IOCTLFUNCTION,', 'ioctl)', 'if', 'request.method', '==', '\"POST\":', 'curl.setopt(pycurl.POSTFIELDSIZE,', 'len(request.body', 'or', '\"\"))', 'else:', 'curl.setopt(pycurl.UPLOAD,', 'True)', 'curl.setopt(pycurl.INFILESIZE,', 'len(request.body', 'or', '\"\"))', 'if', 'request.auth_username', 'is', 'not', 'None:', 'assert', 'request.auth_password', 'is', 'not', 'None', 'if', 'request.auth_mode', 'is', 'None', 'or', 'request.auth_mode', '==', '\"basic\":', 'curl.setopt(pycurl.HTTPAUTH,', 'pycurl.HTTPAUTH_BASIC)', 'elif', 'request.auth_mode', '==', '\"digest\":', 'curl.setopt(pycurl.HTTPAUTH,', 'pycurl.HTTPAUTH_DIGEST)', 'else:', 'raise', 'ValueError(\"Unsupported', 'auth_mode', '%s\"', '%', 'request.auth_mode)', 'userpwd', '=', 'httputil.encode_username_password(', 'request.auth_username,', 'request.auth_password', ')', 'curl.setopt(pycurl.USERPWD,', 'userpwd)', 'curl_log.debug(', '\"%s', '%s', '(username:', '%r)\",', 'request.method,', 'request.url,', 'request.auth_username,', ')', 'else:', 'curl.unsetopt(pycurl.USERPWD)', 'curl_log.debug(\"%s', '%s\",', 'request.method,', 'request.url)', 'if', 'request.client_cert', 'is', 'not', 'None:', 'curl.setopt(pycurl.SSLCERT,', 'request.client_cert)', 'if', 'request.client_key', 'is', 'not', 'None:', 'curl.setopt(pycurl.SSLKEY,', 'request.client_key)', 'if', 'request.ssl_options', 'is', 'not', 'None:', 'raise', 'ValueError(\"ssl_options', 'not', 'supported', 'in', 'curl_httpclient\")', 'if', 'threading.active_count()', '>', '1:', 'curl.setopt(pycurl.NOSIGNAL,', '1)', 'if', 'request.prepare_curl_callback', 'is', 'not', 'None:', 'request.prepare_curl_callback(curl)', 'def', '_curl_header_callback(', 'self,', 'headers:', 'httputil.HTTPHeaders,', 'header_callback:', 'Callable[[str],', 'None],', 'header_line_bytes:', 'bytes,', ')', '->', 'None:', 'header_line', '=', 'native_str(header_line_bytes.decode(\"latin1\"))', 'if', 'header_callback', 'is', 'not', 'None:', 'self.io_loop.add_callback(header_callback,', 'header_line)', 'header_line', '=', 'header_line.rstrip()', 'if', 'header_line.startswith(\"HTTP/\"):', 'headers.clear()', 'try:', '(__,', '__,', 'reason)', '=', 'httputil.parse_response_start_line(header_line)', 'header_line', '=', '\"X-Http-Reason:', '%s\"', '%', 'reason', 'except', 'httputil.HTTPInputError:', 'return', 'if', 'not', 'header_line:', 'return', 'headers.parse_line(header_line)', 'def', '_curl_debug(self,', 'debug_type:', 'int,', 'debug_msg:', 'str)', '->', 'None:', 'debug_types', '=', '(\"I\",', '\"<\",', '\">\",', '\"<\",', '\">\")', 'if', 'debug_type', '==', '0:', 'debug_msg', '=', 'native_str(debug_msg)', 'curl_log.debug(\"%s\",', 'debug_msg.strip())', 'elif', 'debug_type', 'in', '(1,', '2):', 'debug_msg', '=', 'native_str(debug_msg)', 'for', 'line', 'in', 'debug_msg.splitlines():', 'curl_log.debug(\"%s', '%s\",', 'debug_types[debug_type],', 'line)', 'elif', 'debug_type', '==', '4:', 'curl_log.debug(\"%s', '%r\",', 'debug_types[debug_type],', 'debug_msg)', 'class', 'CurlError(HTTPError):', 'def', '__init__(self,', 'errno:', 'int,', 'message:', 'str)', '->', 'None:', 'HTTPError.__init__(self,', '599,', 'message)', 'self.errno', '=', 'errno', 'if', '__name__', '==', '\"__main__\":', 'AsyncHTTPClient.configure(CurlAsyncHTTPClient)', 'main()']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/escape.py",
        "vector": "['import', 'html', 'import', 'json', 'import', 're', 'import', 'urllib.parse', 'from', 'tornado.util', 'import', 'unicode_type', 'import', 'typing', 'from', 'typing', 'import', 'Union,', 'Any,', 'Optional,', 'Dict,', 'List,', 'Callable', 'def', 'xhtml_escape(value:', 'Union[str,', 'bytes])', '->', 'str:', 'return', 'html.escape(to_unicode(value))', 'def', 'xhtml_unescape(value:', 'Union[str,', 'bytes])', '->', 'str:', 'return', 'html.unescape(to_unicode(value))', 'def', 'json_encode(value:', 'Any)', '->', 'str:', 'return', 'json.dumps(value).replace(\"</\",', '\"<\\\\\\\\/\")', 'def', 'json_decode(value:', 'Union[str,', 'bytes])', '->', 'Any:', 'return', 'json.loads(value)', 'def', 'squeeze(value:', 'str)', '->', 'str:', 'return', 're.sub(r\"[\\\\x00-\\\\x20]+\",', '\"', '\",', 'value).strip()', 'def', 'url_escape(value:', 'Union[str,', 'bytes],', 'plus:', 'bool', '=', 'True)', '->', 'str:', 'quote', '=', 'urllib.parse.quote_plus', 'if', 'plus', 'else', 'urllib.parse.quote', 'return', 'quote(value)', '@typing.overload', 'def', 'url_unescape(value:', 'Union[str,', 'bytes],', 'encoding:', 'None,', 'plus:', 'bool', '=', 'True)', '->', 'bytes:', 'pass', '@typing.overload', 'def', 'url_unescape(', 'value:', 'Union[str,', 'bytes],', 'encoding:', 'str', '=', '\"utf-8\",', 'plus:', 'bool', '=', 'True', ')', '->', 'str:', 'pass', 'def', 'url_unescape(', 'value:', 'Union[str,', 'bytes],', 'encoding:', 'Optional[str]', '=', '\"utf-8\",', 'plus:', 'bool', '=', 'True', ')', '->', 'Union[str,', 'bytes]:', 'if', 'encoding', 'is', 'None:', 'if', 'plus:', 'value', '=', 'to_basestring(value).replace(\"+\",', '\"', '\")', 'return', 'urllib.parse.unquote_to_bytes(value)', 'else:', 'unquote', '=', 'urllib.parse.unquote_plus', 'if', 'plus', 'else', 'urllib.parse.unquote', 'return', 'unquote(to_basestring(value),', 'encoding=encoding)', 'def', 'parse_qs_bytes(', 'qs:', 'Union[str,', 'bytes],', 'keep_blank_values:', 'bool', '=', 'False,', 'strict_parsing:', 'bool', '=', 'False', ')', '->', 'Dict[str,', 'List[bytes]]:', 'if', 'isinstance(qs,', 'bytes):', 'qs', '=', 'qs.decode(\"latin1\")', 'result', '=', 'urllib.parse.parse_qs(', 'qs,', 'keep_blank_values,', 'strict_parsing,', 'encoding=\"latin1\",', 'errors=\"strict\"', ')', 'encoded', '=', '{}', 'for', 'k,', 'v', 'in', 'result.items():', 'encoded[k]', '=', '[i.encode(\"latin1\")', 'for', 'i', 'in', 'v]', 'return', 'encoded', '_UTF8_TYPES', '=', '(bytes,', 'type(None))', '@typing.overload', 'def', 'utf8(value:', 'bytes)', '->', 'bytes:', 'pass', '@typing.overload', 'def', 'utf8(value:', 'str)', '->', 'bytes:', 'pass', '@typing.overload', 'def', 'utf8(value:', 'None)', '->', 'None:', 'pass', 'def', 'utf8(value:', 'Union[None,', 'str,', 'bytes])', '->', 'Optional[bytes]:', 'if', 'isinstance(value,', '_UTF8_TYPES):', 'return', 'value', 'if', 'not', 'isinstance(value,', 'unicode_type):', 'raise', 'TypeError(\"Expected', 'bytes,', 'unicode,', 'or', 'None;', 'got', '%r\"', '%', 'type(value))', 'return', 'value.encode(\"utf-8\")', '_TO_UNICODE_TYPES', '=', '(unicode_type,', 'type(None))', '@typing.overload', 'def', 'to_unicode(value:', 'str)', '->', 'str:', 'pass', '@typing.overload', 'def', 'to_unicode(value:', 'bytes)', '->', 'str:', 'pass', '@typing.overload', 'def', 'to_unicode(value:', 'None)', '->', 'None:', 'pass', 'def', 'to_unicode(value:', 'Union[None,', 'str,', 'bytes])', '->', 'Optional[str]:', 'if', 'isinstance(value,', '_TO_UNICODE_TYPES):', 'return', 'value', 'if', 'not', 'isinstance(value,', 'bytes):', 'raise', 'TypeError(\"Expected', 'bytes,', 'unicode,', 'or', 'None;', 'got', '%r\"', '%', 'type(value))', 'return', 'value.decode(\"utf-8\")', '_unicode', '=', 'to_unicode', 'native_str', '=', 'to_unicode', 'to_basestring', '=', 'to_unicode', 'def', 'recursive_unicode(obj:', 'Any)', '->', 'Any:', 'if', 'isinstance(obj,', 'dict):', 'return', 'dict(', '(recursive_unicode(k),', 'recursive_unicode(v))', 'for', '(k,', 'v)', 'in', 'obj.items()', ')', 'elif', 'isinstance(obj,', 'list):', 'return', 'list(recursive_unicode(i)', 'for', 'i', 'in', 'obj)', 'elif', 'isinstance(obj,', 'tuple):', 'return', 'tuple(recursive_unicode(i)', 'for', 'i', 'in', 'obj)', 'elif', 'isinstance(obj,', 'bytes):', 'return', 'to_unicode(obj)', 'else:', 'return', 'obj', '_URL_RE', '=', 're.compile(', 'to_unicode(', 'rConverts', 'plain', 'text', 'into', 'HTML', 'with', 'links.', 'For', 'example:', '``linkify(\"Hello', 'http://tornadoweb.org!\")``', 'would', 'return', '``Hello', '<a', 'href=\"http://tornadoweb.org\">http://tornadoweb.org</a>!``', 'Parameters:', '*', '``shorten``:', 'Long', 'urls', 'will', 'be', 'shortened', 'for', 'display.', '*', '``extra_params``:', 'Extra', 'text', 'to', 'include', 'in', 'the', 'link', 'tag,', 'or', 'a', 'callable', 'taking', 'the', 'link', 'as', 'an', 'argument', 'and', 'returning', 'the', 'extra', 'text', 'e.g.', '``linkify(text,', 'extra_params=\\'rel=\"nofollow\"', 'class=\"external\"\\')``,', 'or::', 'def', 'extra_params_cb(url):', 'if', 'url.startswith(\"http://example.com\"):', 'return', '\\'class=\"internal\"\\'', 'else:', 'return', '\\'class=\"external\"', 'rel=\"nofollow\"\\'', 'linkify(text,', 'extra_params=extra_params_cb)', '*', '``require_protocol``:', 'Only', 'linkify', 'urls', 'which', 'include', 'a', 'protocol.', 'If', 'this', 'is', 'False,', 'urls', 'such', 'as', 'www.facebook.com', 'will', 'also', 'be', 'linkified.', '*', '``permitted_protocols``:', 'List', '(or', 'set)', 'of', 'protocols', 'which', 'should', 'be', 'linkified,', 'e.g.', '``linkify(text,', 'permitted_protocols=[\"http\",', '\"ftp\",', '\"mailto\"])``.', 'It', 'is', 'very', 'unsafe', 'to', 'include', 'protocols', 'such', 'as', '``javascript``.', '\"\"\"', 'if', 'extra_params', 'and', 'not', 'callable(extra_params):', 'extra_params', '=', '\"', '\"', '+', 'extra_params.strip()', 'def', 'make_link(m:', 'typing.Match)', '->', 'str:', 'url', '=', 'm.group(1)', 'proto', '=', 'm.group(2)', 'if', 'require_protocol', 'and', 'not', 'proto:', 'return', 'url', 'if', 'proto', 'and', 'proto', 'not', 'in', 'permitted_protocols:', 'return', 'url', 'href', '=', 'm.group(1)', 'if', 'not', 'proto:', 'href', '=', '\"http://\"', '+', 'href', 'if', 'callable(extra_params):', 'params', '=', '\"', '\"', '+', 'extra_params(href).strip()', 'else:', 'params', '=', 'extra_params', 'max_len', '=', '30', 'if', 'shorten', 'and', 'len(url)', '>', 'max_len:', 'before_clip', '=', 'url', 'if', 'proto:', 'proto_len', '=', 'len(proto)', '+', '1', '+', 'len(m.group(3)', 'or', '\"\")', 'else:', 'proto_len', '=', '0', 'parts', '=', 'url[proto_len:].split(\"/\")', 'if', 'len(parts)', '>', '1:', 'url', '=', '(', 'url[:proto_len]', '+', 'parts[0]', '+', '\"/\"', '+', 'parts[1][:8].split(\"?\")[0].split(\".\")[0]', ')', 'if', 'len(url)', '>', 'max_len', '*', '1.5:', 'url', '=', 'url[:max_len]', 'if', 'url', '!=', 'before_clip:', 'amp', '=', 'url.rfind(\"&\")', 'if', 'amp', '>', 'max_len', '-', '5:', 'url', '=', 'url[:amp]', 'url', '+=', '\"...\"', 'if', 'len(url)', '>=', 'len(before_clip):', 'url', '=', 'before_clip', 'else:', 'params', '+=', \"'\", 'title=\"%s\"\\'', '%', 'href', 'return', \"'<a\", 'href=\"%s\"%s>%s</a>\\'', '%', '(href,', 'params,', 'url)', 'text', '=', '_unicode(xhtml_escape(text))', 'return', '_URL_RE.sub(make_link,', 'text)']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/gen.py",
        "vector": "['import', 'asyncio', 'import', 'builtins', 'import', 'collections', 'from', 'collections.abc', 'import', 'Generator', 'import', 'concurrent.futures', 'import', 'datetime', 'import', 'functools', 'from', 'functools', 'import', 'singledispatch', 'from', 'inspect', 'import', 'isawaitable', 'import', 'sys', 'import', 'types', 'from', 'tornado.concurrent', 'import', '(', 'Future,', 'is_future,', 'chain_future,', 'future_set_exc_info,', 'future_add_done_callback,', 'future_set_result_unless_cancelled,', ')', 'from', 'tornado.ioloop', 'import', 'IOLoop', 'from', 'tornado.log', 'import', 'app_log', 'from', 'tornado.util', 'import', 'TimeoutError', 'try:', 'import', 'contextvars', 'except', 'ImportError:', 'contextvars', '=', 'None', 'import', 'typing', 'from', 'typing', 'import', 'Union,', 'Any,', 'Callable,', 'List,', 'Type,', 'Tuple,', 'Awaitable,', 'Dict,', 'overload', 'if', 'typing.TYPE_CHECKING:', 'from', 'typing', 'import', 'Sequence,', 'Deque,', 'Optional,', 'Set,', 'Iterable', '_T', '=', 'typing.TypeVar(\"_T\")', '_Yieldable', '=', 'Union[', 'None,', 'Awaitable,', 'List[Awaitable],', 'Dict[Any,', 'Awaitable],', 'concurrent.futures.Future', ']', 'class', 'KeyReuseError(Exception):', 'pass', 'class', 'UnknownKeyError(Exception):', 'pass', 'class', 'LeakedCallbackError(Exception):', 'pass', 'class', 'BadYieldError(Exception):', 'pass', 'class', 'ReturnValueIgnoredError(Exception):', 'pass', 'def', '_value_from_stopiteration(e:', 'Union[StopIteration,', '\"Return\"])', '->', 'Any:', 'try:', 'return', 'e.value', 'except', 'AttributeError:', 'pass', 'try:', 'return', 'e.args[0]', 'except', '(AttributeError,', 'IndexError):', 'return', 'None', 'def', '_create_future()', '->', 'Future:', 'future', '=', 'Future()', 'source_traceback', '=', 'getattr(future,', '\"_source_traceback\",', '())', 'while', 'source_traceback:', 'filename', '=', 'source_traceback[-1][0]', 'if', 'filename', '==', '__file__:', 'del', 'source_traceback[-1]', 'else:', 'break', 'return', 'future', 'def', '_fake_ctx_run(f:', 'Callable[...,', '_T],', '*args:', 'Any,', '**kw:', 'Any)', '->', '_T:', 'return', 'f(*args,', '**kw)', '@overload', 'def', 'coroutine(', 'func:', 'Callable[...,', '\"Generator[Any,', 'Any,', '_T]\"]', ')', '->', 'Callable[...,', '\"Future[_T]\"]:', '...', '@overload', 'def', 'coroutine(func:', 'Callable[...,', '_T])', '->', 'Callable[...,', '\"Future[_T]\"]:', '...', 'def', 'coroutine(', 'func:', 'Union[Callable[...,', '\"Generator[Any,', 'Any,', '_T]\"],', 'Callable[...,', '_T]]', ')', '->', 'Callable[...,', '\"Future[_T]\"]:', '@functools.wraps(func)', 'def', 'wrapper(*args,', '**kwargs):', 'future', '=', '_create_future()', 'if', 'contextvars', 'is', 'not', 'None:', 'ctx_run', '=', 'contextvars.copy_context().run', 'else:', 'ctx_run', '=', '_fake_ctx_run', 'try:', 'result', '=', 'ctx_run(func,', '*args,', '**kwargs)', 'except', '(Return,', 'StopIteration)', 'as', 'e:', 'result', '=', '_value_from_stopiteration(e)', 'except', 'Exception:', 'future_set_exc_info(future,', 'sys.exc_info())', 'try:', 'return', 'future', 'finally:', 'future', '=', 'None', 'else:', 'if', 'isinstance(result,', 'Generator):', 'try:', 'yielded', '=', 'ctx_run(next,', 'result)', 'except', '(StopIteration,', 'Return)', 'as', 'e:', 'future_set_result_unless_cancelled(', 'future,', '_value_from_stopiteration(e)', ')', 'except', 'Exception:', 'future_set_exc_info(future,', 'sys.exc_info())', 'else:', 'runner', '=', 'Runner(ctx_run,', 'result,', 'future,', 'yielded)', 'future.add_done_callback(lambda', '_:', 'runner)', 'yielded', '=', 'None', 'try:', 'return', 'future', 'finally:', 'future', '=', 'None', 'future_set_result_unless_cancelled(future,', 'result)', 'return', 'future', 'wrapper.__wrapped__', '=', 'func', 'wrapper.__tornado_coroutine__', '=', 'True', 'return', 'wrapper', 'def', 'is_coroutine_function(func:', 'Any)', '->', 'bool:', 'return', 'getattr(func,', '\"__tornado_coroutine__\",', 'False)', 'class', 'Return(Exception):', 'def', '__init__(self,', 'value:', 'Any', '=', 'None)', '->', 'None:', 'super().__init__()', 'self.value', '=', 'value', 'self.args', '=', '(value,)', 'class', 'WaitIterator(object):', '_unfinished', '=', '{}', 'def', '__init__(self,', '*args:', 'Future,', '**kwargs:', 'Future)', '->', 'None:', 'if', 'args', 'and', 'kwargs:', 'raise', 'ValueError(\"You', 'must', 'provide', 'args', 'or', 'kwargs,', 'not', 'both\")', 'if', 'kwargs:', 'self._unfinished', '=', 'dict((f,', 'k)', 'for', '(k,', 'f)', 'in', 'kwargs.items())', 'futures', '=', 'list(kwargs.values())', 'else:', 'self._unfinished', '=', 'dict((f,', 'i)', 'for', '(i,', 'f)', 'in', 'enumerate(args))', 'futures', '=', 'args', 'self._finished', '=', 'collections.deque()', 'self.current_index', '=', 'None', 'self.current_future', '=', 'None', 'self._running_future', '=', 'None', 'for', 'future', 'in', 'futures:', 'future_add_done_callback(future,', 'self._done_callback)', 'def', 'done(self)', '->', 'bool:', 'if', 'self._finished', 'or', 'self._unfinished:', 'return', 'False', 'self.current_index', '=', 'self.current_future', '=', 'None', 'return', 'True', 'def', 'next(self)', '->', 'Future:', 'self._running_future', '=', 'Future()', 'if', 'self._finished:', 'return', 'self._return_result(self._finished.popleft())', 'return', 'self._running_future', 'def', '_done_callback(self,', 'done:', 'Future)', '->', 'None:', 'if', 'self._running_future', 'and', 'not', 'self._running_future.done():', 'self._return_result(done)', 'else:', 'self._finished.append(done)', 'def', '_return_result(self,', 'done:', 'Future)', '->', 'Future:', 'if', 'self._running_future', 'is', 'None:', 'raise', 'Exception(\"no', 'future', 'is', 'running\")', 'chain_future(done,', 'self._running_future)', 'res', '=', 'self._running_future', 'self._running_future', '=', 'None', 'self.current_future', '=', 'done', 'self.current_index', '=', 'self._unfinished.pop(done)', 'return', 'res', 'def', '__aiter__(self)', '->', 'typing.AsyncIterator:', 'return', 'self', 'def', '__anext__(self)', '->', 'Future:', 'if', 'self.done():', 'raise', 'getattr(builtins,', '\"StopAsyncIteration\")()', 'return', 'self.next()', 'def', 'multi(', 'children:', 'Union[List[_Yieldable],', 'Dict[Any,', '_Yieldable]],', 'quiet_exceptions:', '\"Union[Type[Exception],', 'Tuple[Type[Exception],', '...]]\"', '=', '(),', ')', '->', '\"Union[Future[List],', 'Future[Dict]]\":', 'return', 'multi_future(children,', 'quiet_exceptions=quiet_exceptions)', 'Multi', '=', 'multi', 'def', 'multi_future(', 'children:', 'Union[List[_Yieldable],', 'Dict[Any,', '_Yieldable]],', 'quiet_exceptions:', '\"Union[Type[Exception],', 'Tuple[Type[Exception],', '...]]\"', '=', '(),', ')', '->', '\"Union[Future[List],', 'Future[Dict]]\":', 'if', 'isinstance(children,', 'dict):', 'keys', '=', 'list(children.keys())', 'children_seq', '=', 'children.values()', 'else:', 'keys', '=', 'None', 'children_seq', '=', 'children', 'children_futs', '=', 'list(map(convert_yielded,', 'children_seq))', 'assert', 'all(is_future(i)', 'or', 'isinstance(i,', '_NullFuture)', 'for', 'i', 'in', 'children_futs)', 'unfinished_children', '=', 'set(children_futs)', 'future', '=', '_create_future()', 'if', 'not', 'children_futs:', 'future_set_result_unless_cancelled(future,', '{}', 'if', 'keys', 'is', 'not', 'None', 'else', '[])', 'def', 'callback(fut:', 'Future)', '->', 'None:', 'unfinished_children.remove(fut)', 'if', 'not', 'unfinished_children:', 'result_list', '=', '[]', 'for', 'f', 'in', 'children_futs:', 'try:', 'result_list.append(f.result())', 'except', 'Exception', 'as', 'e:', 'if', 'future.done():', 'if', 'not', 'isinstance(e,', 'quiet_exceptions):', 'app_log.error(', '\"Multiple', 'exceptions', 'in', 'yield', 'list\",', 'exc_info=True', ')', 'else:', 'future_set_exc_info(future,', 'sys.exc_info())', 'if', 'not', 'future.done():', 'if', 'keys', 'is', 'not', 'None:', 'future_set_result_unless_cancelled(', 'future,', 'dict(zip(keys,', 'result_list))', ')', 'else:', 'future_set_result_unless_cancelled(future,', 'result_list)', 'listening', '=', 'set()', 'for', 'f', 'in', 'children_futs:', 'if', 'f', 'not', 'in', 'listening:', 'listening.add(f)', 'future_add_done_callback(f,', 'callback)', 'return', 'future', 'def', 'maybe_future(x:', 'Any)', '->', 'Future:', 'if', 'is_future(x):', 'return', 'x', 'else:', 'fut', '=', '_create_future()', 'fut.set_result(x)', 'return', 'fut', 'def', 'with_timeout(', 'timeout:', 'Union[float,', 'datetime.timedelta],', 'future:', '_Yieldable,', 'quiet_exceptions:', '\"Union[Type[Exception],', 'Tuple[Type[Exception],', '...]]\"', '=', '(),', ')', '->', 'Future:', 'future_converted', '=', 'convert_yielded(future)', 'result', '=', '_create_future()', 'chain_future(future_converted,', 'result)', 'io_loop', '=', 'IOLoop.current()', 'def', 'error_callback(future:', 'Future)', '->', 'None:', 'try:', 'future.result()', 'except', 'asyncio.CancelledError:', 'pass', 'except', 'Exception', 'as', 'e:', 'if', 'not', 'isinstance(e,', 'quiet_exceptions):', 'app_log.error(', '\"Exception', 'in', 'Future', '%r', 'after', 'timeout\",', 'future,', 'exc_info=True', ')', 'def', 'timeout_callback()', '->', 'None:', 'if', 'not', 'result.done():', 'result.set_exception(TimeoutError(\"Timeout\"))', 'future_add_done_callback(future_converted,', 'error_callback)', 'timeout_handle', '=', 'io_loop.add_timeout(timeout,', 'timeout_callback)', 'if', 'isinstance(future_converted,', 'Future):', 'future_add_done_callback(', 'future_converted,', 'lambda', 'future:', 'io_loop.remove_timeout(timeout_handle)', ')', 'else:', 'io_loop.add_future(', 'future_converted,', 'lambda', 'future:', 'io_loop.remove_timeout(timeout_handle)', ')', 'return', 'result', 'def', 'sleep(duration:', 'float)', '->', '\"Future[None]\":', 'f', '=', '_create_future()', 'IOLoop.current().call_later(', 'duration,', 'lambda:', 'future_set_result_unless_cancelled(f,', 'None)', ')', 'return', 'f', 'class', '_NullFuture(object):', 'def', 'result(self)', '->', 'None:', 'return', 'None', 'def', 'done(self)', '->', 'bool:', 'return', 'True', '_null_future', '=', 'typing.cast(Future,', '_NullFuture())', 'moment', '=', 'typing.cast(Future,', '_NullFuture())', 'moment.__doc__', '=', 'class', 'Runner(object):', 'def', '__init__(', 'self,', 'ctx_run:', 'Callable,', 'gen:', '\"Generator[_Yieldable,', 'Any,', '_T]\",', 'result_future:', '\"Future[_T]\",', 'first_yielded:', '_Yieldable,', ')', '->', 'None:', 'self.ctx_run', '=', 'ctx_run', 'self.gen', '=', 'gen', 'self.result_future', '=', 'result_future', 'self.future', '=', '_null_future', 'self.running', '=', 'False', 'self.finished', '=', 'False', 'self.io_loop', '=', 'IOLoop.current()', 'if', 'self.ctx_run(self.handle_yield,', 'first_yielded):', 'gen', '=', 'result_future', '=', 'first_yielded', '=', 'None', 'self.ctx_run(self.run)', 'def', 'run(self)', '->', 'None:', 'if', 'self.running', 'or', 'self.finished:', 'return', 'try:', 'self.running', '=', 'True', 'while', 'True:', 'future', '=', 'self.future', 'if', 'future', 'is', 'None:', 'raise', 'Exception(\"No', 'pending', 'future\")', 'if', 'not', 'future.done():', 'return', 'self.future', '=', 'None', 'try:', 'try:', 'value', '=', 'future.result()', 'except', 'Exception', 'as', 'e:', 'exc:', 'Optional[Exception]', '=', 'e', 'else:', 'exc', '=', 'None', 'finally:', 'future', '=', 'None', 'if', 'exc', 'is', 'not', 'None:', 'try:', 'yielded', '=', 'self.gen.throw(exc)', 'finally:', 'del', 'exc', 'else:', 'yielded', '=', 'self.gen.send(value)', 'except', '(StopIteration,', 'Return)', 'as', 'e:', 'self.finished', '=', 'True', 'self.future', '=', '_null_future', 'future_set_result_unless_cancelled(', 'self.result_future,', '_value_from_stopiteration(e)', ')', 'self.result_future', '=', 'None', 'return', 'except', 'Exception:', 'self.finished', '=', 'True', 'self.future', '=', '_null_future', 'future_set_exc_info(self.result_future,', 'sys.exc_info())', 'self.result_future', '=', 'None', 'return', 'if', 'not', 'self.handle_yield(yielded):', 'return', 'yielded', '=', 'None', 'finally:', 'self.running', '=', 'False', 'def', 'handle_yield(self,', 'yielded:', '_Yieldable)', '->', 'bool:', 'try:', 'self.future', '=', 'convert_yielded(yielded)', 'except', 'BadYieldError:', 'self.future', '=', 'Future()', 'future_set_exc_info(self.future,', 'sys.exc_info())', 'if', 'self.future', 'is', 'moment:', 'self.io_loop.add_callback(self.ctx_run,', 'self.run)', 'return', 'False', 'elif', 'self.future', 'is', 'None:', 'raise', 'Exception(\"no', 'pending', 'future\")', 'elif', 'not', 'self.future.done():', 'def', 'inner(f:', 'Any)', '->', 'None:', 'f', '=', 'None', 'self.ctx_run(self.run)', 'self.io_loop.add_future(self.future,', 'inner)', 'return', 'False', 'return', 'True', 'def', 'handle_exception(', 'self,', 'typ:', 'Type[Exception],', 'value:', 'Exception,', 'tb:', 'types.TracebackType', ')', '->', 'bool:', 'if', 'not', 'self.running', 'and', 'not', 'self.finished:', 'self.future', '=', 'Future()', 'future_set_exc_info(self.future,', '(typ,', 'value,', 'tb))', 'self.ctx_run(self.run)', 'return', 'True', 'else:', 'return', 'False', 'def', '_wrap_awaitable(awaitable:', 'Awaitable)', '->', 'Future:', 'fut', '=', 'asyncio.ensure_future(awaitable)', 'loop', '=', 'IOLoop.current()', 'loop._register_task(fut)', 'fut.add_done_callback(lambda', 'f:', 'loop._unregister_task(f))', 'return', 'fut', 'def', 'convert_yielded(yielded:', '_Yieldable)', '->', 'Future:', 'if', 'yielded', 'is', 'None', 'or', 'yielded', 'is', 'moment:', 'return', 'moment', 'elif', 'yielded', 'is', '_null_future:', 'return', '_null_future', 'elif', 'isinstance(yielded,', '(list,', 'dict)):', 'return', 'multi(yielded)', 'elif', 'is_future(yielded):', 'return', 'typing.cast(Future,', 'yielded)', 'elif', 'isawaitable(yielded):', 'return', '_wrap_awaitable(yielded)', 'else:', 'raise', 'BadYieldError(\"yielded', 'unknown', 'object', '%r\"', '%', '(yielded,))', 'convert_yielded', '=', 'singledispatch(convert_yielded)']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/http1connection.py",
        "vector": "['import', 'asyncio', 'import', 'logging', 'import', 're', 'import', 'types', 'from', 'tornado.concurrent', 'import', '(', 'Future,', 'future_add_done_callback,', 'future_set_result_unless_cancelled,', ')', 'from', 'tornado.escape', 'import', 'native_str,', 'utf8', 'from', 'tornado', 'import', 'gen', 'from', 'tornado', 'import', 'httputil', 'from', 'tornado', 'import', 'iostream', 'from', 'tornado.log', 'import', 'gen_log,', 'app_log', 'from', 'tornado.util', 'import', 'GzipDecompressor', 'from', 'typing', 'import', 'cast,', 'Optional,', 'Type,', 'Awaitable,', 'Callable,', 'Union,', 'Tuple', 'class', '_QuietException(Exception):', 'def', '__init__(self)', '->', 'None:', 'pass', 'class', '_ExceptionLoggingContext(object):', 'def', '__init__(self,', 'logger:', 'logging.Logger)', '->', 'None:', 'self.logger', '=', 'logger', 'def', '__enter__(self)', '->', 'None:', 'pass', 'def', '__exit__(', 'self,', 'typ:', '\"Optional[Type[BaseException]]\",', 'value:', 'Optional[BaseException],', 'tb:', 'types.TracebackType,', ')', '->', 'None:', 'if', 'value', 'is', 'not', 'None:', 'assert', 'typ', 'is', 'not', 'None', 'self.logger.error(\"Uncaught', 'exception\",', 'exc_info=(typ,', 'value,', 'tb))', 'raise', '_QuietException', 'class', 'HTTP1ConnectionParameters(object):', 'def', '__init__(', 'self,', 'no_keep_alive:', 'bool', '=', 'False,', 'chunk_size:', 'Optional[int]', '=', 'None,', 'max_header_size:', 'Optional[int]', '=', 'None,', 'header_timeout:', 'Optional[float]', '=', 'None,', 'max_body_size:', 'Optional[int]', '=', 'None,', 'body_timeout:', 'Optional[float]', '=', 'None,', 'decompress:', 'bool', '=', 'False,', ')', '->', 'None:', 'self.no_keep_alive', '=', 'no_keep_alive', 'self.chunk_size', '=', 'chunk_size', 'or', '65536', 'self.max_header_size', '=', 'max_header_size', 'or', '65536', 'self.header_timeout', '=', 'header_timeout', 'self.max_body_size', '=', 'max_body_size', 'self.body_timeout', '=', 'body_timeout', 'self.decompress', '=', 'decompress', 'class', 'HTTP1Connection(httputil.HTTPConnection):', 'def', '__init__(', 'self,', 'stream:', 'iostream.IOStream,', 'is_client:', 'bool,', 'params:', 'Optional[HTTP1ConnectionParameters]', '=', 'None,', 'context:', 'Optional[object]', '=', 'None,', ')', '->', 'None:', 'self.is_client', '=', 'is_client', 'self.stream', '=', 'stream', 'if', 'params', 'is', 'None:', 'params', '=', 'HTTP1ConnectionParameters()', 'self.params', '=', 'params', 'self.context', '=', 'context', 'self.no_keep_alive', '=', 'params.no_keep_alive', 'self._max_body_size', '=', '(', 'self.params.max_body_size', 'if', 'self.params.max_body_size', 'is', 'not', 'None', 'else', 'self.stream.max_buffer_size', ')', 'self._body_timeout', '=', 'self.params.body_timeout', 'self._write_finished', '=', 'False', 'self._read_finished', '=', 'False', 'self._finish_future', '=', 'Future()', 'self._disconnect_on_finish', '=', 'False', 'self._clear_callbacks()', 'self._request_start_line', '=', 'None', 'self._response_start_line', '=', 'None', 'self._request_headers', '=', 'None', 'self._chunking_output', '=', 'False', 'self._expected_content_remaining', '=', 'None', 'self._pending_write', '=', 'None', 'def', 'read_response(self,', 'delegate:', 'httputil.HTTPMessageDelegate)', '->', 'Awaitable[bool]:', 'if', 'self.params.decompress:', 'delegate', '=', '_GzipMessageDelegate(delegate,', 'self.params.chunk_size)', 'return', 'self._read_message(delegate)', 'async', 'def', '_read_message(self,', 'delegate:', 'httputil.HTTPMessageDelegate)', '->', 'bool:', 'need_delegate_close', '=', 'False', 'try:', 'header_future', '=', 'self.stream.read_until_regex(', 'b\"\\\\r?\\\\n\\\\r?\\\\n\",', 'max_bytes=self.params.max_header_size', ')', 'if', 'self.params.header_timeout', 'is', 'None:', 'header_data', '=', 'await', 'header_future', 'else:', 'try:', 'header_data', '=', 'await', 'gen.with_timeout(', 'self.stream.io_loop.time()', '+', 'self.params.header_timeout,', 'header_future,', 'quiet_exceptions=iostream.StreamClosedError,', ')', 'except', 'gen.TimeoutError:', 'self.close()', 'return', 'False', 'start_line_str,', 'headers', '=', 'self._parse_headers(header_data)', 'if', 'self.is_client:', 'resp_start_line', '=', 'httputil.parse_response_start_line(start_line_str)', 'self._response_start_line', '=', 'resp_start_line', 'start_line', '=', '(', 'resp_start_line', ')', 'self._disconnect_on_finish', '=', 'False', 'else:', 'req_start_line', '=', 'httputil.parse_request_start_line(start_line_str)', 'self._request_start_line', '=', 'req_start_line', 'self._request_headers', '=', 'headers', 'start_line', '=', 'req_start_line', 'self._disconnect_on_finish', '=', 'not', 'self._can_keep_alive(', 'req_start_line,', 'headers', ')', 'need_delegate_close', '=', 'True', 'with', '_ExceptionLoggingContext(app_log):', 'header_recv_future', '=', 'delegate.headers_received(start_line,', 'headers)', 'if', 'header_recv_future', 'is', 'not', 'None:', 'await', 'header_recv_future', 'if', 'self.stream', 'is', 'None:', 'need_delegate_close', '=', 'False', 'return', 'False', 'skip_body', '=', 'False', 'if', 'self.is_client:', 'assert', 'isinstance(start_line,', 'httputil.ResponseStartLine)', 'if', '(', 'self._request_start_line', 'is', 'not', 'None', 'and', 'self._request_start_line.method', '==', '\"HEAD\"', '):', 'skip_body', '=', 'True', 'code', '=', 'start_line.code', 'if', 'code', '==', '304:', 'skip_body', '=', 'True', 'if', '100', '<=', 'code', '<', '200:', 'if', '\"Content-Length\"', 'in', 'headers', 'or', '\"Transfer-Encoding\"', 'in', 'headers:', 'raise', 'httputil.HTTPInputError(', '\"Response', 'code', '%d', 'cannot', 'have', 'body\"', '%', 'code', ')', 'await', 'self._read_message(delegate)', 'else:', 'if', 'headers.get(\"Expect\")', '==', '\"100-continue\"', 'and', 'not', 'self._write_finished:', 'self.stream.write(b\"HTTP/1.1', '100', '(Continue)\\\\r\\\\n\\\\r\\\\n\")', 'if', 'not', 'skip_body:', 'body_future', '=', 'self._read_body(', 'resp_start_line.code', 'if', 'self.is_client', 'else', '0,', 'headers,', 'delegate', ')', 'if', 'body_future', 'is', 'not', 'None:', 'if', 'self._body_timeout', 'is', 'None:', 'await', 'body_future', 'else:', 'try:', 'await', 'gen.with_timeout(', 'self.stream.io_loop.time()', '+', 'self._body_timeout,', 'body_future,', 'quiet_exceptions=iostream.StreamClosedError,', ')', 'except', 'gen.TimeoutError:', 'gen_log.info(\"Timeout', 'reading', 'body', 'from', '%s\",', 'self.context)', 'self.stream.close()', 'return', 'False', 'self._read_finished', '=', 'True', 'if', 'not', 'self._write_finished', 'or', 'self.is_client:', 'need_delegate_close', '=', 'False', 'with', '_ExceptionLoggingContext(app_log):', 'delegate.finish()', 'if', '(', 'not', 'self._finish_future.done()', 'and', 'self.stream', 'is', 'not', 'None', 'and', 'not', 'self.stream.closed()', '):', 'self.stream.set_close_callback(self._on_connection_close)', 'await', 'self._finish_future', 'if', 'self.is_client', 'and', 'self._disconnect_on_finish:', 'self.close()', 'if', 'self.stream', 'is', 'None:', 'return', 'False', 'except', 'httputil.HTTPInputError', 'as', 'e:', 'gen_log.info(\"Malformed', 'HTTP', 'message', 'from', '%s:', '%s\",', 'self.context,', 'e)', 'if', 'not', 'self.is_client:', 'await', 'self.stream.write(b\"HTTP/1.1', '400', 'Bad', 'Request\\\\r\\\\n\\\\r\\\\n\")', 'self.close()', 'return', 'False', 'finally:', 'if', 'need_delegate_close:', 'with', '_ExceptionLoggingContext(app_log):', 'delegate.on_connection_close()', 'header_future', '=', 'None', 'self._clear_callbacks()', 'return', 'True', 'def', '_clear_callbacks(self)', '->', 'None:', 'self._write_callback', '=', 'None', 'self._write_future', '=', 'None', 'self._close_callback', '=', 'None', 'if', 'self.stream', 'is', 'not', 'None:', 'self.stream.set_close_callback(None)', 'def', 'set_close_callback(self,', 'callback:', 'Optional[Callable[[],', 'None]])', '->', 'None:', 'self._close_callback', '=', 'callback', 'def', '_on_connection_close(self)', '->', 'None:', 'if', 'self._close_callback', 'is', 'not', 'None:', 'callback', '=', 'self._close_callback', 'self._close_callback', '=', 'None', 'callback()', 'if', 'not', 'self._finish_future.done():', 'future_set_result_unless_cancelled(self._finish_future,', 'None)', 'self._clear_callbacks()', 'def', 'close(self)', '->', 'None:', 'if', 'self.stream', 'is', 'not', 'None:', 'self.stream.close()', 'self._clear_callbacks()', 'if', 'not', 'self._finish_future.done():', 'future_set_result_unless_cancelled(self._finish_future,', 'None)', 'def', 'detach(self)', '->', 'iostream.IOStream:', 'self._clear_callbacks()', 'stream', '=', 'self.stream', 'self.stream', '=', 'None', 'if', 'not', 'self._finish_future.done():', 'future_set_result_unless_cancelled(self._finish_future,', 'None)', 'return', 'stream', 'def', 'set_body_timeout(self,', 'timeout:', 'float)', '->', 'None:', 'self._body_timeout', '=', 'timeout', 'def', 'set_max_body_size(self,', 'max_body_size:', 'int)', '->', 'None:', 'self._max_body_size', '=', 'max_body_size', 'def', 'write_headers(', 'self,', 'start_line:', 'Union[httputil.RequestStartLine,', 'httputil.ResponseStartLine],', 'headers:', 'httputil.HTTPHeaders,', 'chunk:', 'Optional[bytes]', '=', 'None,', ')', '->', '\"Future[None]\":', 'lines', '=', '[]', 'if', 'self.is_client:', 'assert', 'isinstance(start_line,', 'httputil.RequestStartLine)', 'self._request_start_line', '=', 'start_line', 'lines.append(utf8(\"%s', '%s', 'HTTP/1.1\"', '%', '(start_line[0],', 'start_line[1])))', 'self._chunking_output', '=', '(', 'start_line.method', 'in', '(\"POST\",', '\"PUT\",', '\"PATCH\")', 'and', '\"Content-Length\"', 'not', 'in', 'headers', 'and', '(', '\"Transfer-Encoding\"', 'not', 'in', 'headers', 'or', 'headers[\"Transfer-Encoding\"]', '==', '\"chunked\"', ')', ')', 'else:', 'assert', 'isinstance(start_line,', 'httputil.ResponseStartLine)', 'assert', 'self._request_start_line', 'is', 'not', 'None', 'assert', 'self._request_headers', 'is', 'not', 'None', 'self._response_start_line', '=', 'start_line', 'lines.append(utf8(\"HTTP/1.1', '%d', '%s\"', '%', '(start_line[1],', 'start_line[2])))', 'self._chunking_output', '=', '(', 'self._request_start_line.version', '==', '\"HTTP/1.1\"', 'and', 'self._request_start_line.method', '!=', '\"HEAD\"', 'and', 'start_line.code', 'not', 'in', '(204,', '304)', 'and', '(start_line.code', '<', '100', 'or', 'start_line.code', '>=', '200)', 'and', '\"Content-Length\"', 'not', 'in', 'headers', 'and', '\"Transfer-Encoding\"', 'not', 'in', 'headers', ')', 'if', '(', 'self._request_start_line.version', '==', '\"HTTP/1.1\"', 'and', 'self._disconnect_on_finish', '):', 'headers[\"Connection\"]', '=', '\"close\"', 'if', '(', 'self._request_start_line.version', '==', '\"HTTP/1.0\"', 'and', 'self._request_headers.get(\"Connection\",', '\"\").lower()', '==', '\"keep-alive\"', '):', 'headers[\"Connection\"]', '=', '\"Keep-Alive\"', 'if', 'self._chunking_output:', 'headers[\"Transfer-Encoding\"]', '=', '\"chunked\"', 'if', 'not', 'self.is_client', 'and', '(', 'self._request_start_line.method', '==', '\"HEAD\"', 'or', 'cast(httputil.ResponseStartLine,', 'start_line).code', '==', '304', '):', 'self._expected_content_remaining', '=', '0', 'elif', '\"Content-Length\"', 'in', 'headers:', 'self._expected_content_remaining', '=', 'parse_int(headers[\"Content-Length\"])', 'else:', 'self._expected_content_remaining', '=', 'None', 'header_lines', '=', '(', 'native_str(n)', '+', '\":', '\"', '+', 'native_str(v)', 'for', 'n,', 'v', 'in', 'headers.get_all()', ')', 'lines.extend(line.encode(\"latin1\")', 'for', 'line', 'in', 'header_lines)', 'for', 'line', 'in', 'lines:', 'if', 'b\"\\\\n\"', 'in', 'line:', 'raise', 'ValueError(\"Newline', 'in', 'header:', '\"', '+', 'repr(line))', 'future', '=', 'None', 'if', 'self.stream.closed():', 'future', '=', 'self._write_future', '=', 'Future()', 'future.set_exception(iostream.StreamClosedError())', 'future.exception()', 'else:', 'future', '=', 'self._write_future', '=', 'Future()', 'data', '=', 'b\"\\\\r\\\\n\".join(lines)', '+', 'b\"\\\\r\\\\n\\\\r\\\\n\"', 'if', 'chunk:', 'data', '+=', 'self._format_chunk(chunk)', 'self._pending_write', '=', 'self.stream.write(data)', 'future_add_done_callback(self._pending_write,', 'self._on_write_complete)', 'return', 'future', 'def', '_format_chunk(self,', 'chunk:', 'bytes)', '->', 'bytes:', 'if', 'self._expected_content_remaining', 'is', 'not', 'None:', 'self._expected_content_remaining', '-=', 'len(chunk)', 'if', 'self._expected_content_remaining', '<', '0:', 'self.stream.close()', 'raise', 'httputil.HTTPOutputError(', '\"Tried', 'to', 'write', 'more', 'data', 'than', 'Content-Length\"', ')', 'if', 'self._chunking_output', 'and', 'chunk:', 'return', 'utf8(\"%x\"', '%', 'len(chunk))', '+', 'b\"\\\\r\\\\n\"', '+', 'chunk', '+', 'b\"\\\\r\\\\n\"', 'else:', 'return', 'chunk', 'def', 'write(self,', 'chunk:', 'bytes)', '->', '\"Future[None]\":', 'future', '=', 'None', 'if', 'self.stream.closed():', 'future', '=', 'self._write_future', '=', 'Future()', 'self._write_future.set_exception(iostream.StreamClosedError())', 'self._write_future.exception()', 'else:', 'future', '=', 'self._write_future', '=', 'Future()', 'self._pending_write', '=', 'self.stream.write(self._format_chunk(chunk))', 'future_add_done_callback(self._pending_write,', 'self._on_write_complete)', 'return', 'future', 'def', 'finish(self)', '->', 'None:', 'if', '(', 'self._expected_content_remaining', 'is', 'not', 'None', 'and', 'self._expected_content_remaining', '!=', '0', 'and', 'not', 'self.stream.closed()', '):', 'self.stream.close()', 'raise', 'httputil.HTTPOutputError(', '\"Tried', 'to', 'write', '%d', 'bytes', 'less', 'than', 'Content-Length\"', '%', 'self._expected_content_remaining', ')', 'if', 'self._chunking_output:', 'if', 'not', 'self.stream.closed():', 'self._pending_write', '=', 'self.stream.write(b\"0\\\\r\\\\n\\\\r\\\\n\")', 'self._pending_write.add_done_callback(self._on_write_complete)', 'self._write_finished', '=', 'True', 'if', 'not', 'self._read_finished:', 'self._disconnect_on_finish', '=', 'True', 'self.stream.set_nodelay(True)', 'if', 'self._pending_write', 'is', 'None:', 'self._finish_request(None)', 'else:', 'future_add_done_callback(self._pending_write,', 'self._finish_request)', 'def', '_on_write_complete(self,', 'future:', '\"Future[None]\")', '->', 'None:', 'exc', '=', 'future.exception()', 'if', 'exc', 'is', 'not', 'None', 'and', 'not', 'isinstance(exc,', 'iostream.StreamClosedError):', 'future.result()', 'if', 'self._write_callback', 'is', 'not', 'None:', 'callback', '=', 'self._write_callback', 'self._write_callback', '=', 'None', 'self.stream.io_loop.add_callback(callback)', 'if', 'self._write_future', 'is', 'not', 'None:', 'future', '=', 'self._write_future', 'self._write_future', '=', 'None', 'future_set_result_unless_cancelled(future,', 'None)', 'def', '_can_keep_alive(', 'self,', 'start_line:', 'httputil.RequestStartLine,', 'headers:', 'httputil.HTTPHeaders', ')', '->', 'bool:', 'if', 'self.params.no_keep_alive:', 'return', 'False', 'connection_header', '=', 'headers.get(\"Connection\")', 'if', 'connection_header', 'is', 'not', 'None:', 'connection_header', '=', 'connection_header.lower()', 'if', 'start_line.version', '==', '\"HTTP/1.1\":', 'return', 'connection_header', '!=', '\"close\"', 'elif', '(', '\"Content-Length\"', 'in', 'headers', 'or', 'headers.get(\"Transfer-Encoding\",', '\"\").lower()', '==', '\"chunked\"', 'or', 'getattr(start_line,', '\"method\",', 'None)', 'in', '(\"HEAD\",', '\"GET\")', '):', 'return', 'connection_header', '==', '\"keep-alive\"', 'return', 'False', 'def', '_finish_request(self,', 'future:', '\"Optional[Future[None]]\")', '->', 'None:', 'self._clear_callbacks()', 'if', 'not', 'self.is_client', 'and', 'self._disconnect_on_finish:', 'self.close()', 'return', 'self.stream.set_nodelay(False)', 'if', 'not', 'self._finish_future.done():', 'future_set_result_unless_cancelled(self._finish_future,', 'None)', 'def', '_parse_headers(self,', 'data:', 'bytes)', '->', 'Tuple[str,', 'httputil.HTTPHeaders]:', 'data_str', '=', 'native_str(data.decode(\"latin1\")).lstrip(\"\\\\r\\\\n\")', 'eol', '=', 'data_str.find(\"\\\\n\")', 'start_line', '=', 'data_str[:eol].rstrip(\"\\\\r\")', 'headers', '=', 'httputil.HTTPHeaders.parse(data_str[eol:])', 'return', 'start_line,', 'headers', 'def', '_read_body(', 'self,', 'code:', 'int,', 'headers:', 'httputil.HTTPHeaders,', 'delegate:', 'httputil.HTTPMessageDelegate,', ')', '->', 'Optional[Awaitable[None]]:', 'if', '\"Content-Length\"', 'in', 'headers:', 'if', '\"Transfer-Encoding\"', 'in', 'headers:', 'raise', 'httputil.HTTPInputError(', '\"Response', 'with', 'both', 'Transfer-Encoding', 'and', 'Content-Length\"', ')', 'if', '\",\"', 'in', 'headers[\"Content-Length\"]:', 'pieces', '=', 're.split(r\",\\\\s*\",', 'headers[\"Content-Length\"])', 'if', 'any(i', '!=', 'pieces[0]', 'for', 'i', 'in', 'pieces):', 'raise', 'httputil.HTTPInputError(', '\"Multiple', 'unequal', 'Content-Lengths:', '%r\"', '%', 'headers[\"Content-Length\"]', ')', 'headers[\"Content-Length\"]', '=', 'pieces[0]', 'try:', 'content_length:', 'Optional[int]', '=', 'parse_int(headers[\"Content-Length\"])', 'except', 'ValueError:', 'raise', 'httputil.HTTPInputError(', '\"Only', 'integer', 'Content-Length', 'is', 'allowed:', '%s\"', '%', 'headers[\"Content-Length\"]', ')', 'if', 'cast(int,', 'content_length)', '>', 'self._max_body_size:', 'raise', 'httputil.HTTPInputError(\"Content-Length', 'too', 'long\")', 'else:', 'content_length', '=', 'None', 'if', 'code', '==', '204:', 'if', '\"Transfer-Encoding\"', 'in', 'headers', 'or', 'content_length', 'not', 'in', '(None,', '0):', 'raise', 'httputil.HTTPInputError(', '\"Response', 'with', 'code', '%d', 'should', 'not', 'have', 'body\"', '%', 'code', ')', 'content_length', '=', '0', 'if', 'content_length', 'is', 'not', 'None:', 'return', 'self._read_fixed_body(content_length,', 'delegate)', 'if', 'headers.get(\"Transfer-Encoding\",', '\"\").lower()', '==', '\"chunked\":', 'return', 'self._read_chunked_body(delegate)', 'if', 'self.is_client:', 'return', 'self._read_body_until_close(delegate)', 'return', 'None', 'async', 'def', '_read_fixed_body(', 'self,', 'content_length:', 'int,', 'delegate:', 'httputil.HTTPMessageDelegate', ')', '->', 'None:', 'while', 'content_length', '>', '0:', 'body', '=', 'await', 'self.stream.read_bytes(', 'min(self.params.chunk_size,', 'content_length),', 'partial=True', ')', 'content_length', '-=', 'len(body)', 'if', 'not', 'self._write_finished', 'or', 'self.is_client:', 'with', '_ExceptionLoggingContext(app_log):', 'ret', '=', 'delegate.data_received(body)', 'if', 'ret', 'is', 'not', 'None:', 'await', 'ret', 'async', 'def', '_read_chunked_body(self,', 'delegate:', 'httputil.HTTPMessageDelegate)', '->', 'None:', 'total_size', '=', '0', 'while', 'True:', 'chunk_len_str', '=', 'await', 'self.stream.read_until(b\"\\\\r\\\\n\",', 'max_bytes=64)', 'try:', 'chunk_len', '=', 'parse_hex_int(native_str(chunk_len_str[:-2]))', 'except', 'ValueError:', 'raise', 'httputil.HTTPInputError(\"invalid', 'chunk', 'size\")', 'if', 'chunk_len', '==', '0:', 'crlf', '=', 'await', 'self.stream.read_bytes(2)', 'if', 'crlf', '!=', 'b\"\\\\r\\\\n\":', 'raise', 'httputil.HTTPInputError(', '\"improperly', 'terminated', 'chunked', 'request\"', ')', 'return', 'total_size', '+=', 'chunk_len', 'if', 'total_size', '>', 'self._max_body_size:', 'raise', 'httputil.HTTPInputError(\"chunked', 'body', 'too', 'large\")', 'bytes_to_read', '=', 'chunk_len', 'while', 'bytes_to_read:', 'chunk', '=', 'await', 'self.stream.read_bytes(', 'min(bytes_to_read,', 'self.params.chunk_size),', 'partial=True', ')', 'bytes_to_read', '-=', 'len(chunk)', 'if', 'not', 'self._write_finished', 'or', 'self.is_client:', 'with', '_ExceptionLoggingContext(app_log):', 'ret', '=', 'delegate.data_received(chunk)', 'if', 'ret', 'is', 'not', 'None:', 'await', 'ret', 'crlf', '=', 'await', 'self.stream.read_bytes(2)', 'assert', 'crlf', '==', 'b\"\\\\r\\\\n\"', 'async', 'def', '_read_body_until_close(', 'self,', 'delegate:', 'httputil.HTTPMessageDelegate', ')', '->', 'None:', 'body', '=', 'await', 'self.stream.read_until_close()', 'if', 'not', 'self._write_finished', 'or', 'self.is_client:', 'with', '_ExceptionLoggingContext(app_log):', 'ret', '=', 'delegate.data_received(body)', 'if', 'ret', 'is', 'not', 'None:', 'await', 'ret', 'class', '_GzipMessageDelegate(httputil.HTTPMessageDelegate):', 'def', '__init__(self,', 'delegate:', 'httputil.HTTPMessageDelegate,', 'chunk_size:', 'int)', '->', 'None:', 'self._delegate', '=', 'delegate', 'self._chunk_size', '=', 'chunk_size', 'self._decompressor', '=', 'None', 'def', 'headers_received(', 'self,', 'start_line:', 'Union[httputil.RequestStartLine,', 'httputil.ResponseStartLine],', 'headers:', 'httputil.HTTPHeaders,', ')', '->', 'Optional[Awaitable[None]]:', 'if', 'headers.get(\"Content-Encoding\",', '\"\").lower()', '==', '\"gzip\":', 'self._decompressor', '=', 'GzipDecompressor()', 'headers.add(\"X-Consumed-Content-Encoding\",', 'headers[\"Content-Encoding\"])', 'del', 'headers[\"Content-Encoding\"]', 'return', 'self._delegate.headers_received(start_line,', 'headers)', 'async', 'def', 'data_received(self,', 'chunk:', 'bytes)', '->', 'None:', 'if', 'self._decompressor:', 'compressed_data', '=', 'chunk', 'while', 'compressed_data:', 'decompressed', '=', 'self._decompressor.decompress(', 'compressed_data,', 'self._chunk_size', ')', 'if', 'decompressed:', 'ret', '=', 'self._delegate.data_received(decompressed)', 'if', 'ret', 'is', 'not', 'None:', 'await', 'ret', 'compressed_data', '=', 'self._decompressor.unconsumed_tail', 'if', 'compressed_data', 'and', 'not', 'decompressed:', 'raise', 'httputil.HTTPInputError(', '\"encountered', 'unconsumed', 'gzip', 'data', 'without', 'making', 'progress\"', ')', 'else:', 'ret', '=', 'self._delegate.data_received(chunk)', 'if', 'ret', 'is', 'not', 'None:', 'await', 'ret', 'def', 'finish(self)', '->', 'None:', 'if', 'self._decompressor', 'is', 'not', 'None:', 'tail', '=', 'self._decompressor.flush()', 'if', 'tail:', 'raise', 'ValueError(', '\"decompressor.flush', 'returned', 'data;', 'possible', 'truncated', 'input\"', ')', 'return', 'self._delegate.finish()', 'def', 'on_connection_close(self)', '->', 'None:', 'return', 'self._delegate.on_connection_close()', 'class', 'HTTP1ServerConnection(object):', 'def', '__init__(', 'self,', 'stream:', 'iostream.IOStream,', 'params:', 'Optional[HTTP1ConnectionParameters]', '=', 'None,', 'context:', 'Optional[object]', '=', 'None,', ')', '->', 'None:', 'self.stream', '=', 'stream', 'if', 'params', 'is', 'None:', 'params', '=', 'HTTP1ConnectionParameters()', 'self.params', '=', 'params', 'self.context', '=', 'context', 'self._serving_future', '=', 'None', 'async', 'def', 'close(self)', '->', 'None:', 'self.stream.close()', 'assert', 'self._serving_future', 'is', 'not', 'None', 'try:', 'await', 'self._serving_future', 'except', 'Exception:', 'pass', 'def', 'start_serving(self,', 'delegate:', 'httputil.HTTPServerConnectionDelegate)', '->', 'None:', 'assert', 'isinstance(delegate,', 'httputil.HTTPServerConnectionDelegate)', 'fut', '=', 'gen.convert_yielded(self._server_request_loop(delegate))', 'self._serving_future', '=', 'fut', 'self.stream.io_loop.add_future(fut,', 'lambda', 'f:', 'f.result())', 'async', 'def', '_server_request_loop(', 'self,', 'delegate:', 'httputil.HTTPServerConnectionDelegate', ')', '->', 'None:', 'try:', 'while', 'True:', 'conn', '=', 'HTTP1Connection(self.stream,', 'False,', 'self.params,', 'self.context)', 'request_delegate', '=', 'delegate.start_request(self,', 'conn)', 'try:', 'ret', '=', 'await', 'conn.read_response(request_delegate)', 'except', '(', 'iostream.StreamClosedError,', 'iostream.UnsatisfiableReadError,', 'asyncio.CancelledError,', '):', 'return', 'except', '_QuietException:', 'conn.close()', 'return', 'except', 'Exception:', 'gen_log.error(\"Uncaught', 'exception\",', 'exc_info=True)', 'conn.close()', 'return', 'if', 'not', 'ret:', 'return', 'await', 'asyncio.sleep(0)', 'finally:', 'delegate.on_close(self)', 'DIGITS', '=', 're.compile(r\"[0-9]+\")', 'HEXDIGITS', '=', 're.compile(r\"[0-9a-fA-F]+\")', 'def', 'parse_int(s:', 'str)', '->', 'int:', 'if', 'DIGITS.fullmatch(s)', 'is', 'None:', 'raise', 'ValueError(\"not', 'an', 'integer:', '%r\"', '%', 's)', 'return', 'int(s)', 'def', 'parse_hex_int(s:', 'str)', '->', 'int:', 'if', 'HEXDIGITS.fullmatch(s)', 'is', 'None:', 'raise', 'ValueError(\"not', 'a', 'hexadecimal', 'integer:', '%r\"', '%', 's)', 'return', 'int(s,', '16)']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/httpclient.py",
        "vector": "['import', 'datetime', 'import', 'functools', 'from', 'io', 'import', 'BytesIO', 'import', 'ssl', 'import', 'time', 'import', 'weakref', 'from', 'tornado.concurrent', 'import', '(', 'Future,', 'future_set_result_unless_cancelled,', 'future_set_exception_unless_cancelled,', ')', 'from', 'tornado.escape', 'import', 'utf8,', 'native_str', 'from', 'tornado', 'import', 'gen,', 'httputil', 'from', 'tornado.ioloop', 'import', 'IOLoop', 'from', 'tornado.util', 'import', 'Configurable', 'from', 'typing', 'import', 'Type,', 'Any,', 'Union,', 'Dict,', 'Callable,', 'Optional,', 'cast', 'class', 'HTTPClient(object):', 'def', '__init__(', 'self,', 'async_client_class:', '\"Optional[Type[AsyncHTTPClient]]\"', '=', 'None,', '**kwargs:', 'Any', ')', '->', 'None:', 'self._closed', '=', 'True', 'self._io_loop', '=', 'IOLoop(make_current=False)', 'if', 'async_client_class', 'is', 'None:', 'async_client_class', '=', 'AsyncHTTPClient', 'async', 'def', 'make_client()', '->', '\"AsyncHTTPClient\":', 'await', 'gen.sleep(0)', 'assert', 'async_client_class', 'is', 'not', 'None', 'return', 'async_client_class(**kwargs)', 'self._async_client', '=', 'self._io_loop.run_sync(make_client)', 'self._closed', '=', 'False', 'def', '__del__(self)', '->', 'None:', 'self.close()', 'def', 'close(self)', '->', 'None:', 'if', 'not', 'self._closed:', 'self._async_client.close()', 'self._io_loop.close()', 'self._closed', '=', 'True', 'def', 'fetch(', 'self,', 'request:', 'Union[\"HTTPRequest\",', 'str],', '**kwargs:', 'Any', ')', '->', '\"HTTPResponse\":', 'response', '=', 'self._io_loop.run_sync(', 'functools.partial(self._async_client.fetch,', 'request,', '**kwargs)', ')', 'return', 'response', 'class', 'AsyncHTTPClient(Configurable):', '_instance_cache', '=', 'None', '@classmethod', 'def', 'configurable_base(cls)', '->', 'Type[Configurable]:', 'return', 'AsyncHTTPClient', '@classmethod', 'def', 'configurable_default(cls)', '->', 'Type[Configurable]:', 'from', 'tornado.simple_httpclient', 'import', 'SimpleAsyncHTTPClient', 'return', 'SimpleAsyncHTTPClient', '@classmethod', 'def', '_async_clients(cls)', '->', 'Dict[IOLoop,', '\"AsyncHTTPClient\"]:', 'attr_name', '=', '\"_async_client_dict_\"', '+', 'cls.__name__', 'if', 'not', 'hasattr(cls,', 'attr_name):', 'setattr(cls,', 'attr_name,', 'weakref.WeakKeyDictionary())', 'return', 'getattr(cls,', 'attr_name)', 'def', '__new__(cls,', 'force_instance:', 'bool', '=', 'False,', '**kwargs:', 'Any)', '->', '\"AsyncHTTPClient\":', 'io_loop', '=', 'IOLoop.current()', 'if', 'force_instance:', 'instance_cache', '=', 'None', 'else:', 'instance_cache', '=', 'cls._async_clients()', 'if', 'instance_cache', 'is', 'not', 'None', 'and', 'io_loop', 'in', 'instance_cache:', 'return', 'instance_cache[io_loop]', 'instance', '=', 'super(AsyncHTTPClient,', 'cls).__new__(cls,', '**kwargs)', 'instance._instance_cache', '=', 'instance_cache', 'if', 'instance_cache', 'is', 'not', 'None:', 'instance_cache[instance.io_loop]', '=', 'instance', 'return', 'instance', 'def', 'initialize(self,', 'defaults:', 'Optional[Dict[str,', 'Any]]', '=', 'None)', '->', 'None:', 'self.io_loop', '=', 'IOLoop.current()', 'self.defaults', '=', 'dict(HTTPRequest._DEFAULTS)', 'if', 'defaults', 'is', 'not', 'None:', 'self.defaults.update(defaults)', 'self._closed', '=', 'False', 'def', 'close(self)', '->', 'None:', 'if', 'self._closed:', 'return', 'self._closed', '=', 'True', 'if', 'self._instance_cache', 'is', 'not', 'None:', 'cached_val', '=', 'self._instance_cache.pop(self.io_loop,', 'None)', 'if', 'cached_val', 'is', 'not', 'None', 'and', 'cached_val', 'is', 'not', 'self:', 'raise', 'RuntimeError(\"inconsistent', 'AsyncHTTPClient', 'cache\")', 'def', 'fetch(', 'self,', 'request:', 'Union[str,', '\"HTTPRequest\"],', 'raise_error:', 'bool', '=', 'True,', '**kwargs:', 'Any', ')', '->', '\"Future[HTTPResponse]\":', 'if', 'self._closed:', 'raise', 'RuntimeError(\"fetch()', 'called', 'on', 'closed', 'AsyncHTTPClient\")', 'if', 'not', 'isinstance(request,', 'HTTPRequest):', 'request', '=', 'HTTPRequest(url=request,', '**kwargs)', 'else:', 'if', 'kwargs:', 'raise', 'ValueError(', '\"kwargs', \"can't\", 'be', 'used', 'if', 'request', 'is', 'an', 'HTTPRequest', 'object\"', ')', 'request.headers', '=', 'httputil.HTTPHeaders(request.headers)', 'request_proxy', '=', '_RequestProxy(request,', 'self.defaults)', 'future', '=', 'Future()', 'def', 'handle_response(response:', '\"HTTPResponse\")', '->', 'None:', 'if', 'response.error:', 'if', 'raise_error', 'or', 'not', 'response._error_is_response_code:', 'future_set_exception_unless_cancelled(future,', 'response.error)', 'return', 'future_set_result_unless_cancelled(future,', 'response)', 'self.fetch_impl(cast(HTTPRequest,', 'request_proxy),', 'handle_response)', 'return', 'future', 'def', 'fetch_impl(', 'self,', 'request:', '\"HTTPRequest\",', 'callback:', 'Callable[[\"HTTPResponse\"],', 'None]', ')', '->', 'None:', 'raise', 'NotImplementedError()', '@classmethod', 'def', 'configure(', 'cls,', 'impl:', '\"Union[None,', 'str,', 'Type[Configurable]]\",', '**kwargs:', 'Any', ')', '->', 'None:', 'super(AsyncHTTPClient,', 'cls).configure(impl,', '**kwargs)', 'class', 'HTTPRequest(object):', '_headers', '=', 'None', '_DEFAULTS', '=', 'dict(', 'connect_timeout=20.0,', 'request_timeout=20.0,', 'follow_redirects=True,', 'max_redirects=5,', 'decompress_response=True,', 'proxy_password=\"\",', 'allow_nonstandard_methods=False,', 'validate_cert=True,', ')', 'def', '__init__(', 'self,', 'url:', 'str,', 'method:', 'str', '=', '\"GET\",', 'headers:', 'Optional[Union[Dict[str,', 'str],', 'httputil.HTTPHeaders]]', '=', 'None,', 'body:', 'Optional[Union[bytes,', 'str]]', '=', 'None,', 'auth_username:', 'Optional[str]', '=', 'None,', 'auth_password:', 'Optional[str]', '=', 'None,', 'auth_mode:', 'Optional[str]', '=', 'None,', 'connect_timeout:', 'Optional[float]', '=', 'None,', 'request_timeout:', 'Optional[float]', '=', 'None,', 'if_modified_since:', 'Optional[Union[float,', 'datetime.datetime]]', '=', 'None,', 'follow_redirects:', 'Optional[bool]', '=', 'None,', 'max_redirects:', 'Optional[int]', '=', 'None,', 'user_agent:', 'Optional[str]', '=', 'None,', 'use_gzip:', 'Optional[bool]', '=', 'None,', 'network_interface:', 'Optional[str]', '=', 'None,', 'streaming_callback:', 'Optional[Callable[[bytes],', 'None]]', '=', 'None,', 'header_callback:', 'Optional[Callable[[str],', 'None]]', '=', 'None,', 'prepare_curl_callback:', 'Optional[Callable[[Any],', 'None]]', '=', 'None,', 'proxy_host:', 'Optional[str]', '=', 'None,', 'proxy_port:', 'Optional[int]', '=', 'None,', 'proxy_username:', 'Optional[str]', '=', 'None,', 'proxy_password:', 'Optional[str]', '=', 'None,', 'proxy_auth_mode:', 'Optional[str]', '=', 'None,', 'allow_nonstandard_methods:', 'Optional[bool]', '=', 'None,', 'validate_cert:', 'Optional[bool]', '=', 'None,', 'ca_certs:', 'Optional[str]', '=', 'None,', 'allow_ipv6:', 'Optional[bool]', '=', 'None,', 'client_key:', 'Optional[str]', '=', 'None,', 'client_cert:', 'Optional[str]', '=', 'None,', 'body_producer:', 'Optional[', 'Callable[[Callable[[bytes],', 'None]],', '\"Future[None]\"]', ']', '=', 'None,', 'expect_100_continue:', 'bool', '=', 'False,', 'decompress_response:', 'Optional[bool]', '=', 'None,', 'ssl_options:', 'Optional[Union[Dict[str,', 'Any],', 'ssl.SSLContext]]', '=', 'None,', ')', '->', 'None:', 'r', 'self.headers', '=', 'headers', 'if', 'if_modified_since:', 'self.headers[\"If-Modified-Since\"]', '=', 'httputil.format_timestamp(', 'if_modified_since', ')', 'self.proxy_host', '=', 'proxy_host', 'self.proxy_port', '=', 'proxy_port', 'self.proxy_username', '=', 'proxy_username', 'self.proxy_password', '=', 'proxy_password', 'self.proxy_auth_mode', '=', 'proxy_auth_mode', 'self.url', '=', 'url', 'self.method', '=', 'method', 'self.body', '=', 'body', 'self.body_producer', '=', 'body_producer', 'self.auth_username', '=', 'auth_username', 'self.auth_password', '=', 'auth_password', 'self.auth_mode', '=', 'auth_mode', 'self.connect_timeout', '=', 'connect_timeout', 'self.request_timeout', '=', 'request_timeout', 'self.follow_redirects', '=', 'follow_redirects', 'self.max_redirects', '=', 'max_redirects', 'self.user_agent', '=', 'user_agent', 'if', 'decompress_response', 'is', 'not', 'None:', 'self.decompress_response', '=', 'decompress_response', 'else:', 'self.decompress_response', '=', 'use_gzip', 'self.network_interface', '=', 'network_interface', 'self.streaming_callback', '=', 'streaming_callback', 'self.header_callback', '=', 'header_callback', 'self.prepare_curl_callback', '=', 'prepare_curl_callback', 'self.allow_nonstandard_methods', '=', 'allow_nonstandard_methods', 'self.validate_cert', '=', 'validate_cert', 'self.ca_certs', '=', 'ca_certs', 'self.allow_ipv6', '=', 'allow_ipv6', 'self.client_key', '=', 'client_key', 'self.client_cert', '=', 'client_cert', 'self.ssl_options', '=', 'ssl_options', 'self.expect_100_continue', '=', 'expect_100_continue', 'self.start_time', '=', 'time.time()', '@property', 'def', 'headers(self)', '->', 'httputil.HTTPHeaders:', 'return', 'self._headers', '@headers.setter', 'def', 'headers(self,', 'value:', 'Union[Dict[str,', 'str],', 'httputil.HTTPHeaders])', '->', 'None:', 'if', 'value', 'is', 'None:', 'self._headers', '=', 'httputil.HTTPHeaders()', 'else:', 'self._headers', '=', 'value', '@property', 'def', 'body(self)', '->', 'bytes:', 'return', 'self._body', '@body.setter', 'def', 'body(self,', 'value:', 'Union[bytes,', 'str])', '->', 'None:', 'self._body', '=', 'utf8(value)', 'class', 'HTTPResponse(object):', 'error', '=', 'None', '_error_is_response_code', '=', 'False', 'request', '=', 'None', 'def', '__init__(', 'self,', 'request:', 'HTTPRequest,', 'code:', 'int,', 'headers:', 'Optional[httputil.HTTPHeaders]', '=', 'None,', 'buffer:', 'Optional[BytesIO]', '=', 'None,', 'effective_url:', 'Optional[str]', '=', 'None,', 'error:', 'Optional[BaseException]', '=', 'None,', 'request_time:', 'Optional[float]', '=', 'None,', 'time_info:', 'Optional[Dict[str,', 'float]]', '=', 'None,', 'reason:', 'Optional[str]', '=', 'None,', 'start_time:', 'Optional[float]', '=', 'None,', ')', '->', 'None:', 'if', 'isinstance(request,', '_RequestProxy):', 'self.request', '=', 'request.request', 'else:', 'self.request', '=', 'request', 'self.code', '=', 'code', 'self.reason', '=', 'reason', 'or', 'httputil.responses.get(code,', '\"Unknown\")', 'if', 'headers', 'is', 'not', 'None:', 'self.headers', '=', 'headers', 'else:', 'self.headers', '=', 'httputil.HTTPHeaders()', 'self.buffer', '=', 'buffer', 'self._body', '=', 'None', 'if', 'effective_url', 'is', 'None:', 'self.effective_url', '=', 'request.url', 'else:', 'self.effective_url', '=', 'effective_url', 'self._error_is_response_code', '=', 'False', 'if', 'error', 'is', 'None:', 'if', 'self.code', '<', '200', 'or', 'self.code', '>=', '300:', 'self._error_is_response_code', '=', 'True', 'self.error', '=', 'HTTPError(self.code,', 'message=self.reason,', 'response=self)', 'else:', 'self.error', '=', 'None', 'else:', 'self.error', '=', 'error', 'self.start_time', '=', 'start_time', 'self.request_time', '=', 'request_time', 'self.time_info', '=', 'time_info', 'or', '{}', '@property', 'def', 'body(self)', '->', 'bytes:', 'if', 'self.buffer', 'is', 'None:', 'return', 'b\"\"', 'elif', 'self._body', 'is', 'None:', 'self._body', '=', 'self.buffer.getvalue()', 'return', 'self._body', 'def', 'rethrow(self)', '->', 'None:', 'if', 'self.error:', 'raise', 'self.error', 'def', '__repr__(self)', '->', 'str:', 'args', '=', '\",\".join(\"%s=%r\"', '%', 'i', 'for', 'i', 'in', 'sorted(self.__dict__.items()))', 'return', '\"%s(%s)\"', '%', '(self.__class__.__name__,', 'args)', 'class', 'HTTPClientError(Exception):', 'def', '__init__(', 'self,', 'code:', 'int,', 'message:', 'Optional[str]', '=', 'None,', 'response:', 'Optional[HTTPResponse]', '=', 'None,', ')', '->', 'None:', 'self.code', '=', 'code', 'self.message', '=', 'message', 'or', 'httputil.responses.get(code,', '\"Unknown\")', 'self.response', '=', 'response', 'super().__init__(code,', 'message,', 'response)', 'def', '__str__(self)', '->', 'str:', 'return', '\"HTTP', '%d:', '%s\"', '%', '(self.code,', 'self.message)', '__repr__', '=', '__str__', 'HTTPError', '=', 'HTTPClientError', 'class', '_RequestProxy(object):', 'def', '__init__(', 'self,', 'request:', 'HTTPRequest,', 'defaults:', 'Optional[Dict[str,', 'Any]]', ')', '->', 'None:', 'self.request', '=', 'request', 'self.defaults', '=', 'defaults', 'def', '__getattr__(self,', 'name:', 'str)', '->', 'Any:', 'request_attr', '=', 'getattr(self.request,', 'name)', 'if', 'request_attr', 'is', 'not', 'None:', 'return', 'request_attr', 'elif', 'self.defaults', 'is', 'not', 'None:', 'return', 'self.defaults.get(name,', 'None)', 'else:', 'return', 'None', 'def', 'main()', '->', 'None:', 'from', 'tornado.options', 'import', 'define,', 'options,', 'parse_command_line', 'define(\"print_headers\",', 'type=bool,', 'default=False)', 'define(\"print_body\",', 'type=bool,', 'default=True)', 'define(\"follow_redirects\",', 'type=bool,', 'default=True)', 'define(\"validate_cert\",', 'type=bool,', 'default=True)', 'define(\"proxy_host\",', 'type=str)', 'define(\"proxy_port\",', 'type=int)', 'args', '=', 'parse_command_line()', 'client', '=', 'HTTPClient()', 'for', 'arg', 'in', 'args:', 'try:', 'response', '=', 'client.fetch(', 'arg,', 'follow_redirects=options.follow_redirects,', 'validate_cert=options.validate_cert,', 'proxy_host=options.proxy_host,', 'proxy_port=options.proxy_port,', ')', 'except', 'HTTPError', 'as', 'e:', 'if', 'e.response', 'is', 'not', 'None:', 'response', '=', 'e.response', 'else:', 'raise', 'if', 'options.print_headers:', 'print(response.headers)', 'if', 'options.print_body:', 'print(native_str(response.body))', 'client.close()', 'if', '__name__', '==', '\"__main__\":', 'main()']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/httpserver.py",
        "vector": "['import', 'socket', 'import', 'ssl', 'from', 'tornado.escape', 'import', 'native_str', 'from', 'tornado.http1connection', 'import', 'HTTP1ServerConnection,', 'HTTP1ConnectionParameters', 'from', 'tornado', 'import', 'httputil', 'from', 'tornado', 'import', 'iostream', 'from', 'tornado', 'import', 'netutil', 'from', 'tornado.tcpserver', 'import', 'TCPServer', 'from', 'tornado.util', 'import', 'Configurable', 'import', 'typing', 'from', 'typing', 'import', 'Union,', 'Any,', 'Dict,', 'Callable,', 'List,', 'Type,', 'Tuple,', 'Optional,', 'Awaitable', 'if', 'typing.TYPE_CHECKING:', 'from', 'typing', 'import', 'Set', 'class', 'HTTPServer(TCPServer,', 'Configurable,', 'httputil.HTTPServerConnectionDelegate):', 'r', 'def', '__init__(self,', '*args:', 'Any,', '**kwargs:', 'Any)', '->', 'None:', 'pass', 'def', 'initialize(', 'self,', 'request_callback:', 'Union[', 'httputil.HTTPServerConnectionDelegate,', 'Callable[[httputil.HTTPServerRequest],', 'None],', '],', 'no_keep_alive:', 'bool', '=', 'False,', 'xheaders:', 'bool', '=', 'False,', 'ssl_options:', 'Optional[Union[Dict[str,', 'Any],', 'ssl.SSLContext]]', '=', 'None,', 'protocol:', 'Optional[str]', '=', 'None,', 'decompress_request:', 'bool', '=', 'False,', 'chunk_size:', 'Optional[int]', '=', 'None,', 'max_header_size:', 'Optional[int]', '=', 'None,', 'idle_connection_timeout:', 'Optional[float]', '=', 'None,', 'body_timeout:', 'Optional[float]', '=', 'None,', 'max_body_size:', 'Optional[int]', '=', 'None,', 'max_buffer_size:', 'Optional[int]', '=', 'None,', 'trusted_downstream:', 'Optional[List[str]]', '=', 'None,', ')', '->', 'None:', 'self.request_callback', '=', 'request_callback', 'self.xheaders', '=', 'xheaders', 'self.protocol', '=', 'protocol', 'self.conn_params', '=', 'HTTP1ConnectionParameters(', 'decompress=decompress_request,', 'chunk_size=chunk_size,', 'max_header_size=max_header_size,', 'header_timeout=idle_connection_timeout', 'or', '3600,', 'max_body_size=max_body_size,', 'body_timeout=body_timeout,', 'no_keep_alive=no_keep_alive,', ')', 'TCPServer.__init__(', 'self,', 'ssl_options=ssl_options,', 'max_buffer_size=max_buffer_size,', 'read_chunk_size=chunk_size,', ')', 'self._connections', '=', 'set()', 'self.trusted_downstream', '=', 'trusted_downstream', '@classmethod', 'def', 'configurable_base(cls)', '->', 'Type[Configurable]:', 'return', 'HTTPServer', '@classmethod', 'def', 'configurable_default(cls)', '->', 'Type[Configurable]:', 'return', 'HTTPServer', 'async', 'def', 'close_all_connections(self)', '->', 'None:', 'while', 'self._connections:', 'conn', '=', 'next(iter(self._connections))', 'await', 'conn.close()', 'def', 'handle_stream(self,', 'stream:', 'iostream.IOStream,', 'address:', 'Tuple)', '->', 'None:', 'context', '=', '_HTTPRequestContext(', 'stream,', 'address,', 'self.protocol,', 'self.trusted_downstream', ')', 'conn', '=', 'HTTP1ServerConnection(stream,', 'self.conn_params,', 'context)', 'self._connections.add(conn)', 'conn.start_serving(self)', 'def', 'start_request(', 'self,', 'server_conn:', 'object,', 'request_conn:', 'httputil.HTTPConnection', ')', '->', 'httputil.HTTPMessageDelegate:', 'if', 'isinstance(self.request_callback,', 'httputil.HTTPServerConnectionDelegate):', 'delegate', '=', 'self.request_callback.start_request(server_conn,', 'request_conn)', 'else:', 'delegate', '=', '_CallableAdapter(self.request_callback,', 'request_conn)', 'if', 'self.xheaders:', 'delegate', '=', '_ProxyAdapter(delegate,', 'request_conn)', 'return', 'delegate', 'def', 'on_close(self,', 'server_conn:', 'object)', '->', 'None:', 'self._connections.remove(typing.cast(HTTP1ServerConnection,', 'server_conn))', 'class', '_CallableAdapter(httputil.HTTPMessageDelegate):', 'def', '__init__(', 'self,', 'request_callback:', 'Callable[[httputil.HTTPServerRequest],', 'None],', 'request_conn:', 'httputil.HTTPConnection,', ')', '->', 'None:', 'self.connection', '=', 'request_conn', 'self.request_callback', '=', 'request_callback', 'self.request', '=', 'None', 'self.delegate', '=', 'None', 'self._chunks', '=', '[]', 'def', 'headers_received(', 'self,', 'start_line:', 'Union[httputil.RequestStartLine,', 'httputil.ResponseStartLine],', 'headers:', 'httputil.HTTPHeaders,', ')', '->', 'Optional[Awaitable[None]]:', 'self.request', '=', 'httputil.HTTPServerRequest(', 'connection=self.connection,', 'start_line=typing.cast(httputil.RequestStartLine,', 'start_line),', 'headers=headers,', ')', 'return', 'None', 'def', 'data_received(self,', 'chunk:', 'bytes)', '->', 'Optional[Awaitable[None]]:', 'self._chunks.append(chunk)', 'return', 'None', 'def', 'finish(self)', '->', 'None:', 'assert', 'self.request', 'is', 'not', 'None', 'self.request.body', '=', 'b\"\".join(self._chunks)', 'self.request._parse_body()', 'self.request_callback(self.request)', 'def', 'on_connection_close(self)', '->', 'None:', 'del', 'self._chunks', 'class', '_HTTPRequestContext(object):', 'def', '__init__(', 'self,', 'stream:', 'iostream.IOStream,', 'address:', 'Tuple,', 'protocol:', 'Optional[str],', 'trusted_downstream:', 'Optional[List[str]]', '=', 'None,', ')', '->', 'None:', 'self.address', '=', 'address', 'if', 'stream.socket', 'is', 'not', 'None:', 'self.address_family', '=', 'stream.socket.family', 'else:', 'self.address_family', '=', 'None', 'if', '(', 'self.address_family', 'in', '(socket.AF_INET,', 'socket.AF_INET6)', 'and', 'address', 'is', 'not', 'None', '):', 'self.remote_ip', '=', 'address[0]', 'else:', 'self.remote_ip', '=', '\"0.0.0.0\"', 'if', 'protocol:', 'self.protocol', '=', 'protocol', 'elif', 'isinstance(stream,', 'iostream.SSLIOStream):', 'self.protocol', '=', '\"https\"', 'else:', 'self.protocol', '=', '\"http\"', 'self._orig_remote_ip', '=', 'self.remote_ip', 'self._orig_protocol', '=', 'self.protocol', 'self.trusted_downstream', '=', 'set(trusted_downstream', 'or', '[])', 'def', '__str__(self)', '->', 'str:', 'if', 'self.address_family', 'in', '(socket.AF_INET,', 'socket.AF_INET6):', 'return', 'self.remote_ip', 'elif', 'isinstance(self.address,', 'bytes):', 'return', 'native_str(self.address)', 'else:', 'return', 'str(self.address)', 'def', '_apply_xheaders(self,', 'headers:', 'httputil.HTTPHeaders)', '->', 'None:', 'ip', '=', 'headers.get(\"X-Forwarded-For\",', 'self.remote_ip)', 'for', 'ip', 'in', '(cand.strip()', 'for', 'cand', 'in', 'reversed(ip.split(\",\"))):', 'if', 'ip', 'not', 'in', 'self.trusted_downstream:', 'break', 'ip', '=', 'headers.get(\"X-Real-Ip\",', 'ip)', 'if', 'netutil.is_valid_ip(ip):', 'self.remote_ip', '=', 'ip', 'proto_header', '=', 'headers.get(', '\"X-Scheme\",', 'headers.get(\"X-Forwarded-Proto\",', 'self.protocol)', ')', 'if', 'proto_header:', 'proto_header', '=', 'proto_header.split(\",\")[-1].strip()', 'if', 'proto_header', 'in', '(\"http\",', '\"https\"):', 'self.protocol', '=', 'proto_header', 'def', '_unapply_xheaders(self)', '->', 'None:', 'self.remote_ip', '=', 'self._orig_remote_ip', 'self.protocol', '=', 'self._orig_protocol', 'class', '_ProxyAdapter(httputil.HTTPMessageDelegate):', 'def', '__init__(', 'self,', 'delegate:', 'httputil.HTTPMessageDelegate,', 'request_conn:', 'httputil.HTTPConnection,', ')', '->', 'None:', 'self.connection', '=', 'request_conn', 'self.delegate', '=', 'delegate', 'def', 'headers_received(', 'self,', 'start_line:', 'Union[httputil.RequestStartLine,', 'httputil.ResponseStartLine],', 'headers:', 'httputil.HTTPHeaders,', ')', '->', 'Optional[Awaitable[None]]:', 'self.connection.context._apply_xheaders(headers)', 'return', 'self.delegate.headers_received(start_line,', 'headers)', 'def', 'data_received(self,', 'chunk:', 'bytes)', '->', 'Optional[Awaitable[None]]:', 'return', 'self.delegate.data_received(chunk)', 'def', 'finish(self)', '->', 'None:', 'self.delegate.finish()', 'self._cleanup()', 'def', 'on_connection_close(self)', '->', 'None:', 'self.delegate.on_connection_close()', 'self._cleanup()', 'def', '_cleanup(self)', '->', 'None:', 'self.connection.context._unapply_xheaders()', 'HTTPRequest', '=', 'httputil.HTTPServerRequest']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/httputil.py",
        "vector": "['import', 'calendar', 'import', 'collections.abc', 'import', 'copy', 'import', 'datetime', 'import', 'email.utils', 'from', 'functools', 'import', 'lru_cache', 'from', 'http.client', 'import', 'responses', 'import', 'http.cookies', 'import', 're', 'from', 'ssl', 'import', 'SSLError', 'import', 'time', 'import', 'unicodedata', 'from', 'urllib.parse', 'import', 'urlencode,', 'urlparse,', 'urlunparse,', 'parse_qsl', 'from', 'tornado.escape', 'import', 'native_str,', 'parse_qs_bytes,', 'utf8', 'from', 'tornado.log', 'import', 'gen_log', 'from', 'tornado.util', 'import', 'ObjectDict,', 'unicode_type', 'responses', 'import', 'typing', 'from', 'typing', 'import', '(', 'Tuple,', 'Iterable,', 'List,', 'Mapping,', 'Iterator,', 'Dict,', 'Union,', 'Optional,', 'Awaitable,', 'Generator,', 'AnyStr,', ')', 'if', 'typing.TYPE_CHECKING:', 'from', 'typing', 'import', 'Deque', 'from', 'asyncio', 'import', 'Future', 'import', 'unittest', '@lru_cache(1000)', 'def', '_normalize_header(name:', 'str)', '->', 'str:', 'return', '\"-\".join([w.capitalize()', 'for', 'w', 'in', 'name.split(\"-\")])', 'class', 'HTTPHeaders(collections.abc.MutableMapping):', '@typing.overload', 'def', '__init__(self,', '__arg:', 'Mapping[str,', 'List[str]])', '->', 'None:', 'pass', '@typing.overload', 'def', '__init__(self,', '__arg:', 'Mapping[str,', 'str])', '->', 'None:', 'pass', '@typing.overload', 'def', '__init__(self,', '*args:', 'Tuple[str,', 'str])', '->', 'None:', 'pass', '@typing.overload', 'def', '__init__(self,', '**kwargs:', 'str)', '->', 'None:', 'pass', 'def', '__init__(self,', '*args:', 'typing.Any,', '**kwargs:', 'str)', '->', 'None:', 'self._dict', '=', '{}', 'self._as_list', '=', '{}', 'self._last_key', '=', 'None', 'if', 'len(args)', '==', '1', 'and', 'len(kwargs)', '==', '0', 'and', 'isinstance(args[0],', 'HTTPHeaders):', 'for', 'k,', 'v', 'in', 'args[0].get_all():', 'self.add(k,', 'v)', 'else:', 'self.update(*args,', '**kwargs)', 'def', 'add(self,', 'name:', 'str,', 'value:', 'str)', '->', 'None:', 'norm_name', '=', '_normalize_header(name)', 'self._last_key', '=', 'norm_name', 'if', 'norm_name', 'in', 'self:', 'self._dict[norm_name]', '=', '(', 'native_str(self[norm_name])', '+', '\",\"', '+', 'native_str(value)', ')', 'self._as_list[norm_name].append(value)', 'else:', 'self[norm_name]', '=', 'value', 'def', 'get_list(self,', 'name:', 'str)', '->', 'List[str]:', 'norm_name', '=', '_normalize_header(name)', 'return', 'self._as_list.get(norm_name,', '[])', 'def', 'get_all(self)', '->', 'Iterable[Tuple[str,', 'str]]:', 'for', 'name,', 'values', 'in', 'self._as_list.items():', 'for', 'value', 'in', 'values:', 'yield', '(name,', 'value)', 'def', 'parse_line(self,', 'line:', 'str)', '->', 'None:', 'if', 'line[0].isspace():', 'if', 'self._last_key', 'is', 'None:', 'raise', 'HTTPInputError(\"first', 'header', 'line', 'cannot', 'start', 'with', 'whitespace\")', 'new_part', '=', '\"', '\"', '+', 'line.lstrip()', 'self._as_list[self._last_key][-1]', '+=', 'new_part', 'self._dict[self._last_key]', '+=', 'new_part', 'else:', 'try:', 'name,', 'value', '=', 'line.split(\":\",', '1)', 'except', 'ValueError:', 'raise', 'HTTPInputError(\"no', 'colon', 'in', 'header', 'line\")', 'self.add(name,', 'value.strip())', '@classmethod', 'def', 'parse(cls,', 'headers:', 'str)', '->', '\"HTTPHeaders\":', 'h', '=', 'cls()', 'for', 'line', 'in', 'headers.split(\"\\\\n\"):', 'if', 'line.endswith(\"\\\\r\"):', 'line', '=', 'line[:-1]', 'if', 'line:', 'h.parse_line(line)', 'return', 'h', 'def', '__setitem__(self,', 'name:', 'str,', 'value:', 'str)', '->', 'None:', 'norm_name', '=', '_normalize_header(name)', 'self._dict[norm_name]', '=', 'value', 'self._as_list[norm_name]', '=', '[value]', 'def', '__getitem__(self,', 'name:', 'str)', '->', 'str:', 'return', 'self._dict[_normalize_header(name)]', 'def', '__delitem__(self,', 'name:', 'str)', '->', 'None:', 'norm_name', '=', '_normalize_header(name)', 'del', 'self._dict[norm_name]', 'del', 'self._as_list[norm_name]', 'def', '__len__(self)', '->', 'int:', 'return', 'len(self._dict)', 'def', '__iter__(self)', '->', 'Iterator[typing.Any]:', 'return', 'iter(self._dict)', 'def', 'copy(self)', '->', '\"HTTPHeaders\":', 'return', 'HTTPHeaders(self)', '__copy__', '=', 'copy', 'def', '__str__(self)', '->', 'str:', 'lines', '=', '[]', 'for', 'name,', 'value', 'in', 'self.get_all():', 'lines.append(\"%s:', '%s\\\\n\"', '%', '(name,', 'value))', 'return', '\"\".join(lines)', '__unicode__', '=', '__str__', 'class', 'HTTPServerRequest(object):', 'path', '=', 'None', 'query', '=', 'None', '_body_future', '=', 'None', 'def', '__init__(', 'self,', 'method:', 'Optional[str]', '=', 'None,', 'uri:', 'Optional[str]', '=', 'None,', 'version:', 'str', '=', '\"HTTP/1.0\",', 'headers:', 'Optional[HTTPHeaders]', '=', 'None,', 'body:', 'Optional[bytes]', '=', 'None,', 'host:', 'Optional[str]', '=', 'None,', 'files:', 'Optional[Dict[str,', 'List[\"HTTPFile\"]]]', '=', 'None,', 'connection:', 'Optional[\"HTTPConnection\"]', '=', 'None,', 'start_line:', 'Optional[\"RequestStartLine\"]', '=', 'None,', 'server_connection:', 'Optional[object]', '=', 'None,', ')', '->', 'None:', 'if', 'start_line', 'is', 'not', 'None:', 'method,', 'uri,', 'version', '=', 'start_line', 'self.method', '=', 'method', 'self.uri', '=', 'uri', 'self.version', '=', 'version', 'self.headers', '=', 'headers', 'or', 'HTTPHeaders()', 'self.body', '=', 'body', 'or', 'b\"\"', 'context', '=', 'getattr(connection,', '\"context\",', 'None)', 'self.remote_ip', '=', 'getattr(context,', '\"remote_ip\",', 'None)', 'self.protocol', '=', 'getattr(context,', '\"protocol\",', '\"http\")', 'self.host', '=', 'host', 'or', 'self.headers.get(\"Host\")', 'or', '\"127.0.0.1\"', 'self.host_name', '=', 'split_host_and_port(self.host.lower())[0]', 'self.files', '=', 'files', 'or', '{}', 'self.connection', '=', 'connection', 'self.server_connection', '=', 'server_connection', 'self._start_time', '=', 'time.time()', 'self._finish_time', '=', 'None', 'if', 'uri', 'is', 'not', 'None:', 'self.path,', 'sep,', 'self.query', '=', 'uri.partition(\"?\")', 'self.arguments', '=', 'parse_qs_bytes(self.query,', 'keep_blank_values=True)', 'self.query_arguments', '=', 'copy.deepcopy(self.arguments)', 'self.body_arguments', '=', '{}', '@property', 'def', 'cookies(self)', '->', 'Dict[str,', 'http.cookies.Morsel]:', 'if', 'not', 'hasattr(self,', '\"_cookies\"):', 'self._cookies', '=', '(', 'http.cookies.SimpleCookie()', ')', 'if', '\"Cookie\"', 'in', 'self.headers:', 'try:', 'parsed', '=', 'parse_cookie(self.headers[\"Cookie\"])', 'except', 'Exception:', 'pass', 'else:', 'for', 'k,', 'v', 'in', 'parsed.items():', 'try:', 'self._cookies[k]', '=', 'v', 'except', 'Exception:', 'pass', 'return', 'self._cookies', 'def', 'full_url(self)', '->', 'str:', 'return', 'self.protocol', '+', '\"://\"', '+', 'self.host', '+', 'self.uri', 'def', 'request_time(self)', '->', 'float:', 'if', 'self._finish_time', 'is', 'None:', 'return', 'time.time()', '-', 'self._start_time', 'else:', 'return', 'self._finish_time', '-', 'self._start_time', 'def', 'get_ssl_certificate(', 'self,', 'binary_form:', 'bool', '=', 'False', ')', '->', 'Union[None,', 'Dict,', 'bytes]:', 'try:', 'if', 'self.connection', 'is', 'None:', 'return', 'None', 'return', 'self.connection.stream.socket.getpeercert(', 'binary_form=binary_form', ')', 'except', 'SSLError:', 'return', 'None', 'def', '_parse_body(self)', '->', 'None:', 'parse_body_arguments(', 'self.headers.get(\"Content-Type\",', '\"\"),', 'self.body,', 'self.body_arguments,', 'self.files,', 'self.headers,', ')', 'for', 'k,', 'v', 'in', 'self.body_arguments.items():', 'self.arguments.setdefault(k,', '[]).extend(v)', 'def', '__repr__(self)', '->', 'str:', 'attrs', '=', '(\"protocol\",', '\"host\",', '\"method\",', '\"uri\",', '\"version\",', '\"remote_ip\")', 'args', '=', '\",', '\".join([\"%s=%r\"', '%', '(n,', 'getattr(self,', 'n))', 'for', 'n', 'in', 'attrs])', 'return', '\"%s(%s)\"', '%', '(self.__class__.__name__,', 'args)', 'class', 'HTTPInputError(Exception):', 'pass', 'class', 'HTTPOutputError(Exception):', 'pass', 'class', 'HTTPServerConnectionDelegate(object):', 'def', 'start_request(', 'self,', 'server_conn:', 'object,', 'request_conn:', '\"HTTPConnection\"', ')', '->', '\"HTTPMessageDelegate\":', 'raise', 'NotImplementedError()', 'def', 'on_close(self,', 'server_conn:', 'object)', '->', 'None:', 'pass', 'class', 'HTTPMessageDelegate(object):', 'def', 'headers_received(', 'self,', 'start_line:', 'Union[\"RequestStartLine\",', '\"ResponseStartLine\"],', 'headers:', 'HTTPHeaders,', ')', '->', 'Optional[Awaitable[None]]:', 'pass', 'def', 'data_received(self,', 'chunk:', 'bytes)', '->', 'Optional[Awaitable[None]]:', 'pass', 'def', 'finish(self)', '->', 'None:', 'pass', 'def', 'on_connection_close(self)', '->', 'None:', 'pass', 'class', 'HTTPConnection(object):', 'def', 'write_headers(', 'self,', 'start_line:', 'Union[\"RequestStartLine\",', '\"ResponseStartLine\"],', 'headers:', 'HTTPHeaders,', 'chunk:', 'Optional[bytes]', '=', 'None,', ')', '->', '\"Future[None]\":', 'raise', 'NotImplementedError()', 'def', 'write(self,', 'chunk:', 'bytes)', '->', '\"Future[None]\":', 'raise', 'NotImplementedError()', 'def', 'finish(self)', '->', 'None:', 'raise', 'NotImplementedError()', 'def', 'url_concat(', 'url:', 'str,', 'args:', 'Union[', 'None,', 'Dict[str,', 'str],', 'List[Tuple[str,', 'str]],', 'Tuple[Tuple[str,', 'str],', '...]', '],', ')', '->', 'str:', 'if', 'args', 'is', 'None:', 'return', 'url', 'parsed_url', '=', 'urlparse(url)', 'if', 'isinstance(args,', 'dict):', 'parsed_query', '=', 'parse_qsl(parsed_url.query,', 'keep_blank_values=True)', 'parsed_query.extend(args.items())', 'elif', 'isinstance(args,', 'list)', 'or', 'isinstance(args,', 'tuple):', 'parsed_query', '=', 'parse_qsl(parsed_url.query,', 'keep_blank_values=True)', 'parsed_query.extend(args)', 'else:', 'err', '=', '\"\\'args\\'', 'parameter', 'should', 'be', 'dict,', 'list', 'or', 'tuple.', 'Not', '{0}\".format(', 'type(args)', ')', 'raise', 'TypeError(err)', 'final_query', '=', 'urlencode(parsed_query)', 'url', '=', 'urlunparse(', '(', 'parsed_url[0],', 'parsed_url[1],', 'parsed_url[2],', 'parsed_url[3],', 'final_query,', 'parsed_url[5],', ')', ')', 'return', 'url', 'class', 'HTTPFile(ObjectDict):', 'filename:', 'str', 'body:', 'bytes', 'content_type:', 'str', 'def', '_parse_request_range(', 'range_header:', 'str,', ')', '->', 'Optional[Tuple[Optional[int],', 'Optional[int]]]:', 'unit,', '_,', 'value', '=', 'range_header.partition(\"=\")', 'unit,', 'value', '=', 'unit.strip(),', 'value.strip()', 'if', 'unit', '!=', '\"bytes\":', 'return', 'None', 'start_b,', '_,', 'end_b', '=', 'value.partition(\"-\")', 'try:', 'start', '=', '_int_or_none(start_b)', 'end', '=', '_int_or_none(end_b)', 'except', 'ValueError:', 'return', 'None', 'if', 'end', 'is', 'not', 'None:', 'if', 'start', 'is', 'None:', 'if', 'end', '!=', '0:', 'start', '=', '-end', 'end', '=', 'None', 'else:', 'end', '+=', '1', 'return', '(start,', 'end)', 'def', '_get_content_range(start:', 'Optional[int],', 'end:', 'Optional[int],', 'total:', 'int)', '->', 'str:', 'start', '=', 'start', 'or', '0', 'end', '=', '(end', 'or', 'total)', '-', '1', 'return', '\"bytes', '%s-%s/%s\"', '%', '(start,', 'end,', 'total)', 'def', '_int_or_none(val:', 'str)', '->', 'Optional[int]:', 'val', '=', 'val.strip()', 'if', 'val', '==', '\"\":', 'return', 'None', 'return', 'int(val)', 'def', 'parse_body_arguments(', 'content_type:', 'str,', 'body:', 'bytes,', 'arguments:', 'Dict[str,', 'List[bytes]],', 'files:', 'Dict[str,', 'List[HTTPFile]],', 'headers:', 'Optional[HTTPHeaders]', '=', 'None,', ')', '->', 'None:', 'if', 'content_type.startswith(\"application/x-www-form-urlencoded\"):', 'if', 'headers', 'and', '\"Content-Encoding\"', 'in', 'headers:', 'gen_log.warning(', '\"Unsupported', 'Content-Encoding:', '%s\",', 'headers[\"Content-Encoding\"]', ')', 'return', 'try:', 'uri_arguments', '=', 'parse_qs_bytes(body,', 'keep_blank_values=True)', 'except', 'Exception', 'as', 'e:', 'gen_log.warning(\"Invalid', 'x-www-form-urlencoded', 'body:', '%s\",', 'e)', 'uri_arguments', '=', '{}', 'for', 'name,', 'values', 'in', 'uri_arguments.items():', 'if', 'values:', 'arguments.setdefault(name,', '[]).extend(values)', 'elif', 'content_type.startswith(\"multipart/form-data\"):', 'if', 'headers', 'and', '\"Content-Encoding\"', 'in', 'headers:', 'gen_log.warning(', '\"Unsupported', 'Content-Encoding:', '%s\",', 'headers[\"Content-Encoding\"]', ')', 'return', 'try:', 'fields', '=', 'content_type.split(\";\")', 'for', 'field', 'in', 'fields:', 'k,', 'sep,', 'v', '=', 'field.strip().partition(\"=\")', 'if', 'k', '==', '\"boundary\"', 'and', 'v:', 'parse_multipart_form_data(utf8(v),', 'body,', 'arguments,', 'files)', 'break', 'else:', 'raise', 'ValueError(\"multipart', 'boundary', 'not', 'found\")', 'except', 'Exception', 'as', 'e:', 'gen_log.warning(\"Invalid', 'multipart/form-data:', '%s\",', 'e)', 'def', 'parse_multipart_form_data(', 'boundary:', 'bytes,', 'data:', 'bytes,', 'arguments:', 'Dict[str,', 'List[bytes]],', 'files:', 'Dict[str,', 'List[HTTPFile]],', ')', '->', 'None:', 'if', 'boundary.startswith(b\\'\"\\')', 'and', 'boundary.endswith(b\\'\"\\'):', 'boundary', '=', 'boundary[1:-1]', 'final_boundary_index', '=', 'data.rfind(b\"--\"', '+', 'boundary', '+', 'b\"--\")', 'if', 'final_boundary_index', '==', '-1:', 'gen_log.warning(\"Invalid', 'multipart/form-data:', 'no', 'final', 'boundary\")', 'return', 'parts', '=', 'data[:final_boundary_index].split(b\"--\"', '+', 'boundary', '+', 'b\"\\\\r\\\\n\")', 'for', 'part', 'in', 'parts:', 'if', 'not', 'part:', 'continue', 'eoh', '=', 'part.find(b\"\\\\r\\\\n\\\\r\\\\n\")', 'if', 'eoh', '==', '-1:', 'gen_log.warning(\"multipart/form-data', 'missing', 'headers\")', 'continue', 'headers', '=', 'HTTPHeaders.parse(part[:eoh].decode(\"utf-8\"))', 'disp_header', '=', 'headers.get(\"Content-Disposition\",', '\"\")', 'disposition,', 'disp_params', '=', '_parse_header(disp_header)', 'if', 'disposition', '!=', '\"form-data\"', 'or', 'not', 'part.endswith(b\"\\\\r\\\\n\"):', 'gen_log.warning(\"Invalid', 'multipart/form-data\")', 'continue', 'value', '=', 'part[eoh', '+', '4', ':', '-2]', 'if', 'not', 'disp_params.get(\"name\"):', 'gen_log.warning(\"multipart/form-data', 'value', 'missing', 'name\")', 'continue', 'name', '=', 'disp_params[\"name\"]', 'if', 'disp_params.get(\"filename\"):', 'ctype', '=', 'headers.get(\"Content-Type\",', '\"application/unknown\")', 'files.setdefault(name,', '[]).append(', 'HTTPFile(', 'filename=disp_params[\"filename\"],', 'body=value,', 'content_type=ctype', ')', ')', 'else:', 'arguments.setdefault(name,', '[]).append(value)', 'def', 'format_timestamp(', 'ts:', 'Union[int,', 'float,', 'tuple,', 'time.struct_time,', 'datetime.datetime]', ')', '->', 'str:', 'if', 'isinstance(ts,', '(int,', 'float)):', 'time_num', '=', 'ts', 'elif', 'isinstance(ts,', '(tuple,', 'time.struct_time)):', 'time_num', '=', 'calendar.timegm(ts)', 'elif', 'isinstance(ts,', 'datetime.datetime):', 'time_num', '=', 'calendar.timegm(ts.utctimetuple())', 'else:', 'raise', 'TypeError(\"unknown', 'timestamp', 'type:', '%r\"', '%', 'ts)', 'return', 'email.utils.formatdate(time_num,', 'usegmt=True)', 'RequestStartLine', '=', 'collections.namedtuple(', '\"RequestStartLine\",', '[\"method\",', '\"path\",', '\"version\"]', ')', '_http_version_re', '=', 're.compile(r\"^HTTP/1\\\\.[0-9]$\")', 'def', 'parse_request_start_line(line:', 'str)', '->', 'RequestStartLine:', 'try:', 'method,', 'path,', 'version', '=', 'line.split(\"', '\")', 'except', 'ValueError:', 'raise', 'HTTPInputError(\"Malformed', 'HTTP', 'request', 'line\")', 'if', 'not', '_http_version_re.match(version):', 'raise', 'HTTPInputError(', '\"Malformed', 'HTTP', 'version', 'in', 'HTTP', 'Request-Line:', '%r\"', '%', 'version', ')', 'return', 'RequestStartLine(method,', 'path,', 'version)', 'ResponseStartLine', '=', 'collections.namedtuple(', '\"ResponseStartLine\",', '[\"version\",', '\"code\",', '\"reason\"]', ')', '_http_response_line_re', '=', 're.compile(r\"(HTTP/1.[0-9])', '([0-9]+)', '([^\\\\r]*)\")', 'def', 'parse_response_start_line(line:', 'str)', '->', 'ResponseStartLine:', 'line', '=', 'native_str(line)', 'match', '=', '_http_response_line_re.match(line)', 'if', 'not', 'match:', 'raise', 'HTTPInputError(\"Error', 'parsing', 'response', 'start', 'line\")', 'return', 'ResponseStartLine(match.group(1),', 'int(match.group(2)),', 'match.group(3))', 'def', '_parseparam(s:', 'str)', '->', 'Generator[str,', 'None,', 'None]:', 'while', 's[:1]', '==', '\";\":', 's', '=', 's[1:]', 'end', '=', 's.find(\";\")', 'while', 'end', '>', '0', 'and', '(s.count(\\'\"\\',', '0,', 'end)', '-', 's.count(\\'\\\\\\\\\"\\',', '0,', 'end))', '%', '2:', 'end', '=', 's.find(\";\",', 'end', '+', '1)', 'if', 'end', '<', '0:', 'end', '=', 'len(s)', 'f', '=', 's[:end]', 'yield', 'f.strip()', 's', '=', 's[end:]', 'def', '_parse_header(line:', 'str)', '->', 'Tuple[str,', 'Dict[str,', 'str]]:', 'r', 'parts', '=', '_parseparam(\";\"', '+', 'line)', 'key', '=', 'next(parts)', 'params', '=', '[(\"Dummy\",', '\"value\")]', 'for', 'p', 'in', 'parts:', 'i', '=', 'p.find(\"=\")', 'if', 'i', '>=', '0:', 'name', '=', 'p[:i].strip().lower()', 'value', '=', 'p[i', '+', '1', ':].strip()', 'params.append((name,', 'native_str(value)))', 'decoded_params', '=', 'email.utils.decode_params(params)', 'decoded_params.pop(0)', 'pdict', '=', '{}', 'for', 'name,', 'decoded_value', 'in', 'decoded_params:', 'value', '=', 'email.utils.collapse_rfc2231_value(decoded_value)', 'if', 'len(value)', '>=', '2', 'and', 'value[0]', '==', '\\'\"\\'', 'and', 'value[-1]', '==', '\\'\"\\':', 'value', '=', 'value[1:-1]', 'pdict[name]', '=', 'value', 'return', 'key,', 'pdict', 'def', '_encode_header(key:', 'str,', 'pdict:', 'Dict[str,', 'str])', '->', 'str:', 'if', 'not', 'pdict:', 'return', 'key', 'out', '=', '[key]', 'for', 'k,', 'v', 'in', 'sorted(pdict.items()):', 'if', 'v', 'is', 'None:', 'out.append(k)', 'else:', 'out.append(\"%s=%s\"', '%', '(k,', 'v))', 'return', '\";', '\".join(out)', 'def', 'encode_username_password(', 'username:', 'Union[str,', 'bytes],', 'password:', 'Union[str,', 'bytes]', ')', '->', 'bytes:', 'if', 'isinstance(username,', 'unicode_type):', 'username', '=', 'unicodedata.normalize(\"NFC\",', 'username)', 'if', 'isinstance(password,', 'unicode_type):', 'password', '=', 'unicodedata.normalize(\"NFC\",', 'password)', 'return', 'utf8(username)', '+', 'b\":\"', '+', 'utf8(password)', 'def', 'doctests():', 'import', 'doctest', 'return', 'doctest.DocTestSuite()', '_netloc_re', '=', 're.compile(r\"^(.+):(\\\\d+)$\")', 'def', 'split_host_and_port(netloc:', 'str)', '->', 'Tuple[str,', 'Optional[int]]:', 'match', '=', '_netloc_re.match(netloc)', 'if', 'match:', 'host', '=', 'match.group(1)', 'port', '=', 'int(match.group(2))', 'else:', 'host', '=', 'netloc', 'port', '=', 'None', 'return', '(host,', 'port)', 'def', 'qs_to_qsl(qs:', 'Dict[str,', 'List[AnyStr]])', '->', 'Iterable[Tuple[str,', 'AnyStr]]:', 'for', 'k,', 'vs', 'in', 'qs.items():', 'for', 'v', 'in', 'vs:', 'yield', '(k,', 'v)', '_OctalPatt', '=', 're.compile(r\"\\\\\\\\[0-3][0-7][0-7]\")', '_QuotePatt', '=', 're.compile(r\"[\\\\\\\\].\")', '_nulljoin', '=', '\"\".join', 'def', '_unquote_cookie(s:', 'str)', '->', 'str:', 'if', 's', 'is', 'None', 'or', 'len(s)', '<', '2:', 'return', 's', 'if', 's[0]', '!=', '\\'\"\\'', 'or', 's[-1]', '!=', '\\'\"\\':', 'return', 's', 's', '=', 's[1:-1]', 'i', '=', '0', 'n', '=', 'len(s)', 'res', '=', '[]', 'while', '0', '<=', 'i', '<', 'n:', 'o_match', '=', '_OctalPatt.search(s,', 'i)', 'q_match', '=', '_QuotePatt.search(s,', 'i)', 'if', 'not', 'o_match', 'and', 'not', 'q_match:', 'res.append(s[i:])', 'break', 'j', '=', 'k', '=', '-1', 'if', 'o_match:', 'j', '=', 'o_match.start(0)', 'if', 'q_match:', 'k', '=', 'q_match.start(0)', 'if', 'q_match', 'and', '(not', 'o_match', 'or', 'k', '<', 'j):', 'res.append(s[i:k])', 'res.append(s[k', '+', '1])', 'i', '=', 'k', '+', '2', 'else:', 'res.append(s[i:j])', 'res.append(chr(int(s[j', '+', '1', ':', 'j', '+', '4],', '8)))', 'i', '=', 'j', '+', '4', 'return', '_nulljoin(res)', 'def', 'parse_cookie(cookie:', 'str)', '->', 'Dict[str,', 'str]:', 'cookiedict', '=', '{}', 'for', 'chunk', 'in', 'cookie.split(str(\";\")):', 'if', 'str(\"=\")', 'in', 'chunk:', 'key,', 'val', '=', 'chunk.split(str(\"=\"),', '1)', 'else:', 'key,', 'val', '=', 'str(\"\"),', 'chunk', 'key,', 'val', '=', 'key.strip(),', 'val.strip()', 'if', 'key', 'or', 'val:', 'cookiedict[key]', '=', '_unquote_cookie(val)', 'return', 'cookiedict']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/ioloop.py",
        "vector": "['import', 'asyncio', 'import', 'concurrent.futures', 'import', 'datetime', 'import', 'functools', 'import', 'numbers', 'import', 'os', 'import', 'sys', 'import', 'time', 'import', 'math', 'import', 'random', 'import', 'warnings', 'from', 'inspect', 'import', 'isawaitable', 'from', 'tornado.concurrent', 'import', '(', 'Future,', 'is_future,', 'chain_future,', 'future_set_exc_info,', 'future_add_done_callback,', ')', 'from', 'tornado.log', 'import', 'app_log', 'from', 'tornado.util', 'import', 'Configurable,', 'TimeoutError,', 'import_object', 'import', 'typing', 'from', 'typing', 'import', 'Union,', 'Any,', 'Type,', 'Optional,', 'Callable,', 'TypeVar,', 'Tuple,', 'Awaitable', 'if', 'typing.TYPE_CHECKING:', 'from', 'typing', 'import', 'Dict,', 'List,', 'Set', 'from', 'typing_extensions', 'import', 'Protocol', 'else:', 'Protocol', '=', 'object', 'class', '_Selectable(Protocol):', 'def', 'fileno(self)', '->', 'int:', 'pass', 'def', 'close(self)', '->', 'None:', 'pass', '_T', '=', 'TypeVar(\"_T\")', '_S', '=', 'TypeVar(\"_S\",', 'bound=_Selectable)', 'class', 'IOLoop(Configurable):', 'NONE', '=', '0', 'READ', '=', '0x001', 'WRITE', '=', '0x004', 'ERROR', '=', '0x018', '_ioloop_for_asyncio', '=', 'dict()', '_pending_tasks', '=', 'set()', '@classmethod', 'def', 'configure(', 'cls,', 'impl:', '\"Union[None,', 'str,', 'Type[Configurable]]\",', '**kwargs:', 'Any', ')', '->', 'None:', 'from', 'tornado.platform.asyncio', 'import', 'BaseAsyncIOLoop', 'if', 'isinstance(impl,', 'str):', 'impl', '=', 'import_object(impl)', 'if', 'isinstance(impl,', 'type)', 'and', 'not', 'issubclass(impl,', 'BaseAsyncIOLoop):', 'raise', 'RuntimeError(\"only', 'AsyncIOLoop', 'is', 'allowed', 'when', 'asyncio', 'is', 'available\")', 'super(IOLoop,', 'cls).configure(impl,', '**kwargs)', '@staticmethod', 'def', 'instance()', '->', '\"IOLoop\":', 'return', 'IOLoop.current()', 'def', 'install(self)', '->', 'None:', 'self.make_current()', '@staticmethod', 'def', 'clear_instance()', '->', 'None:', 'IOLoop.clear_current()', '@typing.overload', '@staticmethod', 'def', 'current()', '->', '\"IOLoop\":', 'pass', '@typing.overload', '@staticmethod', 'def', 'current(instance:', 'bool', '=', 'True)', '->', 'Optional[\"IOLoop\"]:', 'pass', '@staticmethod', 'def', 'current(instance:', 'bool', '=', 'True)', '->', 'Optional[\"IOLoop\"]:', 'try:', 'loop', '=', 'asyncio.get_event_loop()', 'except', 'RuntimeError:', 'if', 'not', 'instance:', 'return', 'None', 'loop', '=', 'asyncio.new_event_loop()', 'asyncio.set_event_loop(loop)', 'try:', 'return', 'IOLoop._ioloop_for_asyncio[loop]', 'except', 'KeyError:', 'if', 'instance:', 'from', 'tornado.platform.asyncio', 'import', 'AsyncIOMainLoop', 'current', '=', 'AsyncIOMainLoop()', 'else:', 'current', '=', 'None', 'return', 'current', 'def', 'make_current(self)', '->', 'None:', 'warnings.warn(', '\"make_current', 'is', 'deprecated;', 'start', 'the', 'event', 'loop', 'first\",', 'DeprecationWarning,', 'stacklevel=2,', ')', 'self._make_current()', 'def', '_make_current(self)', '->', 'None:', 'raise', 'NotImplementedError()', '@staticmethod', 'def', 'clear_current()', '->', 'None:', 'warnings.warn(', '\"clear_current', 'is', 'deprecated\",', 'DeprecationWarning,', 'stacklevel=2,', ')', 'IOLoop._clear_current()', '@staticmethod', 'def', '_clear_current()', '->', 'None:', 'old', '=', 'IOLoop.current(instance=False)', 'if', 'old', 'is', 'not', 'None:', 'old._clear_current_hook()', 'def', '_clear_current_hook(self)', '->', 'None:', 'pass', '@classmethod', 'def', 'configurable_base(cls)', '->', 'Type[Configurable]:', 'return', 'IOLoop', '@classmethod', 'def', 'configurable_default(cls)', '->', 'Type[Configurable]:', 'from', 'tornado.platform.asyncio', 'import', 'AsyncIOLoop', 'return', 'AsyncIOLoop', 'def', 'initialize(self,', 'make_current:', 'bool', '=', 'True)', '->', 'None:', 'if', 'make_current:', 'self._make_current()', 'def', 'close(self,', 'all_fds:', 'bool', '=', 'False)', '->', 'None:', 'raise', 'NotImplementedError()', '@typing.overload', 'def', 'add_handler(', 'self,', 'fd:', 'int,', 'handler:', 'Callable[[int,', 'int],', 'None],', 'events:', 'int', ')', '->', 'None:', 'pass', '@typing.overload', 'def', 'add_handler(', 'self,', 'fd:', '_S,', 'handler:', 'Callable[[_S,', 'int],', 'None],', 'events:', 'int', ')', '->', 'None:', 'pass', 'def', 'add_handler(', 'self,', 'fd:', 'Union[int,', '_Selectable],', 'handler:', 'Callable[...,', 'None],', 'events:', 'int', ')', '->', 'None:', 'raise', 'NotImplementedError()', 'def', 'update_handler(self,', 'fd:', 'Union[int,', '_Selectable],', 'events:', 'int)', '->', 'None:', 'raise', 'NotImplementedError()', 'def', 'remove_handler(self,', 'fd:', 'Union[int,', '_Selectable])', '->', 'None:', 'raise', 'NotImplementedError()', 'def', 'start(self)', '->', 'None:', 'raise', 'NotImplementedError()', 'def', 'stop(self)', '->', 'None:', 'raise', 'NotImplementedError()', 'def', 'run_sync(self,', 'func:', 'Callable,', 'timeout:', 'Optional[float]', '=', 'None)', '->', 'Any:', 'future_cell', '=', '[None]', 'def', 'run()', '->', 'None:', 'try:', 'result', '=', 'func()', 'if', 'result', 'is', 'not', 'None:', 'from', 'tornado.gen', 'import', 'convert_yielded', 'result', '=', 'convert_yielded(result)', 'except', 'Exception:', 'fut', '=', 'Future()', 'future_cell[0]', '=', 'fut', 'future_set_exc_info(fut,', 'sys.exc_info())', 'else:', 'if', 'is_future(result):', 'future_cell[0]', '=', 'result', 'else:', 'fut', '=', 'Future()', 'future_cell[0]', '=', 'fut', 'fut.set_result(result)', 'assert', 'future_cell[0]', 'is', 'not', 'None', 'self.add_future(future_cell[0],', 'lambda', 'future:', 'self.stop())', 'self.add_callback(run)', 'if', 'timeout', 'is', 'not', 'None:', 'def', 'timeout_callback()', '->', 'None:', 'assert', 'future_cell[0]', 'is', 'not', 'None', 'if', 'not', 'future_cell[0].cancel():', 'self.stop()', 'timeout_handle', '=', 'self.add_timeout(self.time()', '+', 'timeout,', 'timeout_callback)', 'self.start()', 'if', 'timeout', 'is', 'not', 'None:', 'self.remove_timeout(timeout_handle)', 'assert', 'future_cell[0]', 'is', 'not', 'None', 'if', 'future_cell[0].cancelled()', 'or', 'not', 'future_cell[0].done():', 'raise', 'TimeoutError(\"Operation', 'timed', 'out', 'after', '%s', 'seconds\"', '%', 'timeout)', 'return', 'future_cell[0].result()', 'def', 'time(self)', '->', 'float:', 'return', 'time.time()', 'def', 'add_timeout(', 'self,', 'deadline:', 'Union[float,', 'datetime.timedelta],', 'callback:', 'Callable,', '*args:', 'Any,', '**kwargs:', 'Any', ')', '->', 'object:', 'if', 'isinstance(deadline,', 'numbers.Real):', 'return', 'self.call_at(deadline,', 'callback,', '*args,', '**kwargs)', 'elif', 'isinstance(deadline,', 'datetime.timedelta):', 'return', 'self.call_at(', 'self.time()', '+', 'deadline.total_seconds(),', 'callback,', '*args,', '**kwargs', ')', 'else:', 'raise', 'TypeError(\"Unsupported', 'deadline', '%r\"', '%', 'deadline)', 'def', 'call_later(', 'self,', 'delay:', 'float,', 'callback:', 'Callable,', '*args:', 'Any,', '**kwargs:', 'Any', ')', '->', 'object:', 'return', 'self.call_at(self.time()', '+', 'delay,', 'callback,', '*args,', '**kwargs)', 'def', 'call_at(', 'self,', 'when:', 'float,', 'callback:', 'Callable,', '*args:', 'Any,', '**kwargs:', 'Any', ')', '->', 'object:', 'return', 'self.add_timeout(when,', 'callback,', '*args,', '**kwargs)', 'def', 'remove_timeout(self,', 'timeout:', 'object)', '->', 'None:', 'raise', 'NotImplementedError()', 'def', 'add_callback(self,', 'callback:', 'Callable,', '*args:', 'Any,', '**kwargs:', 'Any)', '->', 'None:', 'raise', 'NotImplementedError()', 'def', 'add_callback_from_signal(', 'self,', 'callback:', 'Callable,', '*args:', 'Any,', '**kwargs:', 'Any', ')', '->', 'None:', 'raise', 'NotImplementedError()', 'def', 'spawn_callback(self,', 'callback:', 'Callable,', '*args:', 'Any,', '**kwargs:', 'Any)', '->', 'None:', 'self.add_callback(callback,', '*args,', '**kwargs)', 'def', 'add_future(', 'self,', 'future:', '\"Union[Future[_T],', 'concurrent.futures.Future[_T]]\",', 'callback:', 'Callable[[\"Future[_T]\"],', 'None],', ')', '->', 'None:', 'if', 'isinstance(future,', 'Future):', 'future.add_done_callback(', 'lambda', 'f:', 'self._run_callback(functools.partial(callback,', 'f))', ')', 'else:', 'assert', 'is_future(future)', 'future_add_done_callback(future,', 'lambda', 'f:', 'self.add_callback(callback,', 'f))', 'def', 'run_in_executor(', 'self,', 'executor:', 'Optional[concurrent.futures.Executor],', 'func:', 'Callable[...,', '_T],', '*args:', 'Any', ')', '->', '\"Future[_T]\":', 'if', 'executor', 'is', 'None:', 'if', 'not', 'hasattr(self,', '\"_executor\"):', 'from', 'tornado.process', 'import', 'cpu_count', 'self._executor', '=', 'concurrent.futures.ThreadPoolExecutor(', 'max_workers=(cpu_count()', '*', '5)', ')', 'executor', '=', 'self._executor', 'c_future', '=', 'executor.submit(func,', '*args)', 't_future', '=', 'Future()', 'self.add_future(c_future,', 'lambda', 'f:', 'chain_future(f,', 't_future))', 'return', 't_future', 'def', 'set_default_executor(self,', 'executor:', 'concurrent.futures.Executor)', '->', 'None:', 'self._executor', '=', 'executor', 'def', '_run_callback(self,', 'callback:', 'Callable[[],', 'Any])', '->', 'None:', 'try:', 'ret', '=', 'callback()', 'if', 'ret', 'is', 'not', 'None:', 'from', 'tornado', 'import', 'gen', 'try:', 'ret', '=', 'gen.convert_yielded(ret)', 'except', 'gen.BadYieldError:', 'pass', 'else:', 'self.add_future(ret,', 'self._discard_future_result)', 'except', 'asyncio.CancelledError:', 'pass', 'except', 'Exception:', 'app_log.error(\"Exception', 'in', 'callback', '%r\",', 'callback,', 'exc_info=True)', 'def', '_discard_future_result(self,', 'future:', 'Future)', '->', 'None:', 'future.result()', 'def', 'split_fd(', 'self,', 'fd:', 'Union[int,', '_Selectable]', ')', '->', 'Tuple[int,', 'Union[int,', '_Selectable]]:', 'if', 'isinstance(fd,', 'int):', 'return', 'fd,', 'fd', 'return', 'fd.fileno(),', 'fd', 'def', 'close_fd(self,', 'fd:', 'Union[int,', '_Selectable])', '->', 'None:', 'try:', 'if', 'isinstance(fd,', 'int):', 'os.close(fd)', 'else:', 'fd.close()', 'except', 'OSError:', 'pass', 'def', '_register_task(self,', 'f:', 'Future)', '->', 'None:', 'self._pending_tasks.add(f)', 'def', '_unregister_task(self,', 'f:', 'Future)', '->', 'None:', 'self._pending_tasks.discard(f)', 'class', '_Timeout(object):', '__slots__', '=', '[\"deadline\",', '\"callback\",', '\"tdeadline\"]', 'def', '__init__(', 'self,', 'deadline:', 'float,', 'callback:', 'Callable[[],', 'None],', 'io_loop:', 'IOLoop', ')', '->', 'None:', 'if', 'not', 'isinstance(deadline,', 'numbers.Real):', 'raise', 'TypeError(\"Unsupported', 'deadline', '%r\"', '%', 'deadline)', 'self.deadline', '=', 'deadline', 'self.callback', '=', 'callback', 'self.tdeadline', '=', '(', 'deadline,', 'next(io_loop._timeout_counter),', ')', 'def', '__lt__(self,', 'other:', '\"_Timeout\")', '->', 'bool:', 'return', 'self.tdeadline', '<', 'other.tdeadline', 'def', '__le__(self,', 'other:', '\"_Timeout\")', '->', 'bool:', 'return', 'self.tdeadline', '<=', 'other.tdeadline', 'class', 'PeriodicCallback(object):', 'def', '__init__(', 'self,', 'callback:', 'Callable[[],', 'Optional[Awaitable]],', 'callback_time:', 'Union[datetime.timedelta,', 'float],', 'jitter:', 'float', '=', '0,', ')', '->', 'None:', 'self.callback', '=', 'callback', 'if', 'isinstance(callback_time,', 'datetime.timedelta):', 'self.callback_time', '=', 'callback_time', '/', 'datetime.timedelta(milliseconds=1)', 'else:', 'if', 'callback_time', '<=', '0:', 'raise', 'ValueError(\"Periodic', 'callback', 'must', 'have', 'a', 'positive', 'callback_time\")', 'self.callback_time', '=', 'callback_time', 'self.jitter', '=', 'jitter', 'self._running', '=', 'False', 'self._timeout', '=', 'None', 'def', 'start(self)', '->', 'None:', 'self.io_loop', '=', 'IOLoop.current()', 'self._running', '=', 'True', 'self._next_timeout', '=', 'self.io_loop.time()', 'self._schedule_next()', 'def', 'stop(self)', '->', 'None:', 'self._running', '=', 'False', 'if', 'self._timeout', 'is', 'not', 'None:', 'self.io_loop.remove_timeout(self._timeout)', 'self._timeout', '=', 'None', 'def', 'is_running(self)', '->', 'bool:', 'return', 'self._running', 'async', 'def', '_run(self)', '->', 'None:', 'if', 'not', 'self._running:', 'return', 'try:', 'val', '=', 'self.callback()', 'if', 'val', 'is', 'not', 'None', 'and', 'isawaitable(val):', 'await', 'val', 'except', 'Exception:', 'app_log.error(\"Exception', 'in', 'callback', '%r\",', 'self.callback,', 'exc_info=True)', 'finally:', 'self._schedule_next()', 'def', '_schedule_next(self)', '->', 'None:', 'if', 'self._running:', 'self._update_next(self.io_loop.time())', 'self._timeout', '=', 'self.io_loop.add_timeout(self._next_timeout,', 'self._run)', 'def', '_update_next(self,', 'current_time:', 'float)', '->', 'None:', 'callback_time_sec', '=', 'self.callback_time', '/', '1000.0', 'if', 'self.jitter:', 'callback_time_sec', '*=', '1', '+', '(self.jitter', '*', '(random.random()', '-', '0.5))', 'if', 'self._next_timeout', '<=', 'current_time:', 'self._next_timeout', '+=', '(', 'math.floor((current_time', '-', 'self._next_timeout)', '/', 'callback_time_sec)', '+', '1', ')', '*', 'callback_time_sec', 'else:', 'self._next_timeout', '+=', 'callback_time_sec']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/iostream.py",
        "vector": "['import', 'asyncio', 'import', 'collections', 'import', 'errno', 'import', 'io', 'import', 'numbers', 'import', 'os', 'import', 'socket', 'import', 'ssl', 'import', 'sys', 'import', 're', 'from', 'tornado.concurrent', 'import', 'Future,', 'future_set_result_unless_cancelled', 'from', 'tornado', 'import', 'ioloop', 'from', 'tornado.log', 'import', 'gen_log', 'from', 'tornado.netutil', 'import', 'ssl_wrap_socket,', '_client_ssl_defaults,', '_server_ssl_defaults', 'from', 'tornado.util', 'import', 'errno_from_exception', 'import', 'typing', 'from', 'typing', 'import', '(', 'Union,', 'Optional,', 'Awaitable,', 'Callable,', 'Pattern,', 'Any,', 'Dict,', 'TypeVar,', 'Tuple,', ')', 'from', 'types', 'import', 'TracebackType', 'if', 'typing.TYPE_CHECKING:', 'from', 'typing', 'import', 'Deque,', 'List,', 'Type', '_IOStreamType', '=', 'TypeVar(\"_IOStreamType\",', 'bound=\"IOStream\")', '_ERRNO_CONNRESET', '=', '(errno.ECONNRESET,', 'errno.ECONNABORTED,', 'errno.EPIPE,', 'errno.ETIMEDOUT)', 'if', 'hasattr(errno,', '\"WSAECONNRESET\"):', '_ERRNO_CONNRESET', '+=', '(', 'errno.WSAECONNRESET,', 'errno.WSAECONNABORTED,', 'errno.WSAETIMEDOUT,', ')', 'if', 'sys.platform', '==', '\"darwin\":', '_ERRNO_CONNRESET', '+=', '(errno.EPROTOTYPE,)', '_WINDOWS', '=', 'sys.platform.startswith(\"win\")', 'class', 'StreamClosedError(IOError):', 'def', '__init__(self,', 'real_error:', 'Optional[BaseException]', '=', 'None)', '->', 'None:', 'super().__init__(\"Stream', 'is', 'closed\")', 'self.real_error', '=', 'real_error', 'class', 'UnsatisfiableReadError(Exception):', 'pass', 'class', 'StreamBufferFullError(Exception):', 'class', '_StreamBuffer(object):', 'def', '__init__(self)', '->', 'None:', 'self._buffers', '=', '(', 'collections.deque()', ')', 'self._first_pos', '=', '0', 'self._size', '=', '0', 'def', '__len__(self)', '->', 'int:', 'return', 'self._size', '_large_buf_threshold', '=', '2048', 'def', 'append(self,', 'data:', 'Union[bytes,', 'bytearray,', 'memoryview])', '->', 'None:', 'size', '=', 'len(data)', 'if', 'size', '>', 'self._large_buf_threshold:', 'if', 'not', 'isinstance(data,', 'memoryview):', 'data', '=', 'memoryview(data)', 'self._buffers.append((True,', 'data))', 'elif', 'size', '>', '0:', 'if', 'self._buffers:', 'is_memview,', 'b', '=', 'self._buffers[-1]', 'new_buf', '=', 'is_memview', 'or', 'len(b)', '>=', 'self._large_buf_threshold', 'else:', 'new_buf', '=', 'True', 'if', 'new_buf:', 'self._buffers.append((False,', 'bytearray(data)))', 'else:', 'b', '+=', 'data', 'self._size', '+=', 'size', 'def', 'peek(self,', 'size:', 'int)', '->', 'memoryview:', 'assert', 'size', '>', '0', 'try:', 'is_memview,', 'b', '=', 'self._buffers[0]', 'except', 'IndexError:', 'return', 'memoryview(b\"\")', 'pos', '=', 'self._first_pos', 'if', 'is_memview:', 'return', 'typing.cast(memoryview,', 'b[pos', ':', 'pos', '+', 'size])', 'else:', 'return', 'memoryview(b)[pos', ':', 'pos', '+', 'size]', 'def', 'advance(self,', 'size:', 'int)', '->', 'None:', 'assert', '0', '<', 'size', '<=', 'self._size', 'self._size', '-=', 'size', 'pos', '=', 'self._first_pos', 'buffers', '=', 'self._buffers', 'while', 'buffers', 'and', 'size', '>', '0:', 'is_large,', 'b', '=', 'buffers[0]', 'b_remain', '=', 'len(b)', '-', 'size', '-', 'pos', 'if', 'b_remain', '<=', '0:', 'buffers.popleft()', 'size', '-=', 'len(b)', '-', 'pos', 'pos', '=', '0', 'elif', 'is_large:', 'pos', '+=', 'size', 'size', '=', '0', 'else:', 'pos', '+=', 'size', 'del', 'typing.cast(bytearray,', 'b)[:pos]', 'pos', '=', '0', 'size', '=', '0', 'assert', 'size', '==', '0', 'self._first_pos', '=', 'pos', 'class', 'BaseIOStream(object):', 'def', '__init__(', 'self,', 'max_buffer_size:', 'Optional[int]', '=', 'None,', 'read_chunk_size:', 'Optional[int]', '=', 'None,', 'max_write_buffer_size:', 'Optional[int]', '=', 'None,', ')', '->', 'None:', 'self.io_loop', '=', 'ioloop.IOLoop.current()', 'self.max_buffer_size', '=', 'max_buffer_size', 'or', '104857600', 'self.read_chunk_size', '=', 'min(read_chunk_size', 'or', '65536,', 'self.max_buffer_size', '//', '2)', 'self.max_write_buffer_size', '=', 'max_write_buffer_size', 'self.error', '=', 'None', 'self._read_buffer', '=', 'bytearray()', 'self._read_buffer_size', '=', '0', 'self._user_read_buffer', '=', 'False', 'self._after_user_read_buffer', '=', 'None', 'self._write_buffer', '=', '_StreamBuffer()', 'self._total_write_index', '=', '0', 'self._total_write_done_index', '=', '0', 'self._read_delimiter', '=', 'None', 'self._read_regex', '=', 'None', 'self._read_max_bytes', '=', 'None', 'self._read_bytes', '=', 'None', 'self._read_partial', '=', 'False', 'self._read_until_close', '=', 'False', 'self._read_future', '=', 'None', 'self._write_futures', '=', '(', 'collections.deque()', ')', 'self._close_callback', '=', 'None', 'self._connect_future', '=', 'None', 'self._ssl_connect_future', '=', 'None', 'self._connecting', '=', 'False', 'self._state', '=', 'None', 'self._closed', '=', 'False', 'def', 'fileno(self)', '->', 'Union[int,', 'ioloop._Selectable]:', 'raise', 'NotImplementedError()', 'def', 'close_fd(self)', '->', 'None:', 'raise', 'NotImplementedError()', 'def', 'write_to_fd(self,', 'data:', 'memoryview)', '->', 'int:', 'raise', 'NotImplementedError()', 'def', 'read_from_fd(self,', 'buf:', 'Union[bytearray,', 'memoryview])', '->', 'Optional[int]:', 'raise', 'NotImplementedError()', 'def', 'get_fd_error(self)', '->', 'Optional[Exception]:', 'return', 'None', 'def', 'read_until_regex(', 'self,', 'regex:', 'bytes,', 'max_bytes:', 'Optional[int]', '=', 'None', ')', '->', 'Awaitable[bytes]:', 'future', '=', 'self._start_read()', 'self._read_regex', '=', 're.compile(regex)', 'self._read_max_bytes', '=', 'max_bytes', 'try:', 'self._try_inline_read()', 'except', 'UnsatisfiableReadError', 'as', 'e:', 'gen_log.info(\"Unsatisfiable', 'read,', 'closing', 'connection:', '%s\"', '%', 'e)', 'self.close(exc_info=e)', 'return', 'future', 'except:', 'future.add_done_callback(lambda', 'f:', 'f.exception())', 'raise', 'return', 'future', 'def', 'read_until(', 'self,', 'delimiter:', 'bytes,', 'max_bytes:', 'Optional[int]', '=', 'None', ')', '->', 'Awaitable[bytes]:', 'future', '=', 'self._start_read()', 'self._read_delimiter', '=', 'delimiter', 'self._read_max_bytes', '=', 'max_bytes', 'try:', 'self._try_inline_read()', 'except', 'UnsatisfiableReadError', 'as', 'e:', 'gen_log.info(\"Unsatisfiable', 'read,', 'closing', 'connection:', '%s\"', '%', 'e)', 'self.close(exc_info=e)', 'return', 'future', 'except:', 'future.add_done_callback(lambda', 'f:', 'f.exception())', 'raise', 'return', 'future', 'def', 'read_bytes(self,', 'num_bytes:', 'int,', 'partial:', 'bool', '=', 'False)', '->', 'Awaitable[bytes]:', 'future', '=', 'self._start_read()', 'assert', 'isinstance(num_bytes,', 'numbers.Integral)', 'self._read_bytes', '=', 'num_bytes', 'self._read_partial', '=', 'partial', 'try:', 'self._try_inline_read()', 'except:', 'future.add_done_callback(lambda', 'f:', 'f.exception())', 'raise', 'return', 'future', 'def', 'read_into(self,', 'buf:', 'bytearray,', 'partial:', 'bool', '=', 'False)', '->', 'Awaitable[int]:', 'future', '=', 'self._start_read()', 'available_bytes', '=', 'self._read_buffer_size', 'n', '=', 'len(buf)', 'if', 'available_bytes', '>=', 'n:', 'buf[:]', '=', 'memoryview(self._read_buffer)[:n]', 'del', 'self._read_buffer[:n]', 'self._after_user_read_buffer', '=', 'self._read_buffer', 'elif', 'available_bytes', '>', '0:', 'buf[:available_bytes]', '=', 'memoryview(self._read_buffer)[:]', 'self._user_read_buffer', '=', 'True', 'self._read_buffer', '=', 'buf', 'self._read_buffer_size', '=', 'available_bytes', 'self._read_bytes', '=', 'n', 'self._read_partial', '=', 'partial', 'try:', 'self._try_inline_read()', 'except:', 'future.add_done_callback(lambda', 'f:', 'f.exception())', 'raise', 'return', 'future', 'def', 'read_until_close(self)', '->', 'Awaitable[bytes]:', 'future', '=', 'self._start_read()', 'if', 'self.closed():', 'self._finish_read(self._read_buffer_size)', 'return', 'future', 'self._read_until_close', '=', 'True', 'try:', 'self._try_inline_read()', 'except:', 'future.add_done_callback(lambda', 'f:', 'f.exception())', 'raise', 'return', 'future', 'def', 'write(self,', 'data:', 'Union[bytes,', 'memoryview])', '->', '\"Future[None]\":', 'self._check_closed()', 'if', 'data:', 'if', 'isinstance(data,', 'memoryview):', 'data', '=', 'memoryview(data).cast(\"B\")', 'if', '(', 'self.max_write_buffer_size', 'is', 'not', 'None', 'and', 'len(self._write_buffer)', '+', 'len(data)', '>', 'self.max_write_buffer_size', '):', 'raise', 'StreamBufferFullError(\"Reached', 'maximum', 'write', 'buffer', 'size\")', 'self._write_buffer.append(data)', 'self._total_write_index', '+=', 'len(data)', 'future', '=', 'Future()', 'future.add_done_callback(lambda', 'f:', 'f.exception())', 'self._write_futures.append((self._total_write_index,', 'future))', 'if', 'not', 'self._connecting:', 'self._handle_write()', 'if', 'self._write_buffer:', 'self._add_io_state(self.io_loop.WRITE)', 'self._maybe_add_error_listener()', 'return', 'future', 'def', 'set_close_callback(self,', 'callback:', 'Optional[Callable[[],', 'None]])', '->', 'None:', 'self._close_callback', '=', 'callback', 'self._maybe_add_error_listener()', 'def', 'close(', 'self,', 'exc_info:', 'Union[', 'None,', 'bool,', 'BaseException,', 'Tuple[', '\"Optional[Type[BaseException]]\",', 'Optional[BaseException],', 'Optional[TracebackType],', '],', ']', '=', 'False,', ')', '->', 'None:', 'if', 'not', 'self.closed():', 'if', 'exc_info:', 'if', 'isinstance(exc_info,', 'tuple):', 'self.error', '=', 'exc_info[1]', 'elif', 'isinstance(exc_info,', 'BaseException):', 'self.error', '=', 'exc_info', 'else:', 'exc_info', '=', 'sys.exc_info()', 'if', 'any(exc_info):', 'self.error', '=', 'exc_info[1]', 'if', 'self._read_until_close:', 'self._read_until_close', '=', 'False', 'self._finish_read(self._read_buffer_size)', 'elif', 'self._read_future', 'is', 'not', 'None:', 'try:', 'pos', '=', 'self._find_read_pos()', 'except', 'UnsatisfiableReadError:', 'pass', 'else:', 'if', 'pos', 'is', 'not', 'None:', 'self._read_from_buffer(pos)', 'if', 'self._state', 'is', 'not', 'None:', 'self.io_loop.remove_handler(self.fileno())', 'self._state', '=', 'None', 'self.close_fd()', 'self._closed', '=', 'True', 'self._signal_closed()', 'def', '_signal_closed(self)', '->', 'None:', 'futures', '=', '[]', 'if', 'self._read_future', 'is', 'not', 'None:', 'futures.append(self._read_future)', 'self._read_future', '=', 'None', 'futures', '+=', '[future', 'for', '_,', 'future', 'in', 'self._write_futures]', 'self._write_futures.clear()', 'if', 'self._connect_future', 'is', 'not', 'None:', 'futures.append(self._connect_future)', 'self._connect_future', '=', 'None', 'for', 'future', 'in', 'futures:', 'if', 'not', 'future.done():', 'future.set_exception(StreamClosedError(real_error=self.error))', 'try:', 'future.exception()', 'except', 'asyncio.CancelledError:', 'pass', 'if', 'self._ssl_connect_future', 'is', 'not', 'None:', 'if', 'not', 'self._ssl_connect_future.done():', 'if', 'self.error', 'is', 'not', 'None:', 'self._ssl_connect_future.set_exception(self.error)', 'else:', 'self._ssl_connect_future.set_exception(StreamClosedError())', 'self._ssl_connect_future.exception()', 'self._ssl_connect_future', '=', 'None', 'if', 'self._close_callback', 'is', 'not', 'None:', 'cb', '=', 'self._close_callback', 'self._close_callback', '=', 'None', 'self.io_loop.add_callback(cb)', 'self._write_buffer', '=', 'None', 'def', 'reading(self)', '->', 'bool:', 'return', 'self._read_future', 'is', 'not', 'None', 'def', 'writing(self)', '->', 'bool:', 'return', 'bool(self._write_buffer)', 'def', 'closed(self)', '->', 'bool:', 'return', 'self._closed', 'def', 'set_nodelay(self,', 'value:', 'bool)', '->', 'None:', 'pass', 'def', '_handle_connect(self)', '->', 'None:', 'raise', 'NotImplementedError()', 'def', '_handle_events(self,', 'fd:', 'Union[int,', 'ioloop._Selectable],', 'events:', 'int)', '->', 'None:', 'if', 'self.closed():', 'gen_log.warning(\"Got', 'events', 'for', 'closed', 'stream', '%s\",', 'fd)', 'return', 'try:', 'if', 'self._connecting:', 'self._handle_connect()', 'if', 'self.closed():', 'return', 'if', 'events', '&', 'self.io_loop.READ:', 'self._handle_read()', 'if', 'self.closed():', 'return', 'if', 'events', '&', 'self.io_loop.WRITE:', 'self._handle_write()', 'if', 'self.closed():', 'return', 'if', 'events', '&', 'self.io_loop.ERROR:', 'self.error', '=', 'self.get_fd_error()', 'self.io_loop.add_callback(self.close)', 'return', 'state', '=', 'self.io_loop.ERROR', 'if', 'self.reading():', 'state', '|=', 'self.io_loop.READ', 'if', 'self.writing():', 'state', '|=', 'self.io_loop.WRITE', 'if', 'state', '==', 'self.io_loop.ERROR', 'and', 'self._read_buffer_size', '==', '0:', 'state', '|=', 'self.io_loop.READ', 'if', 'state', '!=', 'self._state:', 'assert', '(', 'self._state', 'is', 'not', 'None', '),', '\"shouldn\\'t', 'happen:', '_handle_events', 'without', 'self._state\"', 'self._state', '=', 'state', 'self.io_loop.update_handler(self.fileno(),', 'self._state)', 'except', 'UnsatisfiableReadError', 'as', 'e:', 'gen_log.info(\"Unsatisfiable', 'read,', 'closing', 'connection:', '%s\"', '%', 'e)', 'self.close(exc_info=e)', 'except', 'Exception', 'as', 'e:', 'gen_log.error(\"Uncaught', 'exception,', 'closing', 'connection.\",', 'exc_info=True)', 'self.close(exc_info=e)', 'raise', 'def', '_read_to_buffer_loop(self)', '->', 'Optional[int]:', 'if', 'self._read_bytes', 'is', 'not', 'None:', 'target_bytes', '=', 'self._read_bytes', 'elif', 'self._read_max_bytes', 'is', 'not', 'None:', 'target_bytes', '=', 'self._read_max_bytes', 'elif', 'self.reading():', 'target_bytes', '=', 'None', 'else:', 'target_bytes', '=', '0', 'next_find_pos', '=', '0', 'while', 'not', 'self.closed():', 'if', 'self._read_to_buffer()', '==', '0:', 'break', 'if', 'target_bytes', 'is', 'not', 'None', 'and', 'self._read_buffer_size', '>=', 'target_bytes:', 'break', 'if', 'self._read_buffer_size', '>=', 'next_find_pos:', 'pos', '=', 'self._find_read_pos()', 'if', 'pos', 'is', 'not', 'None:', 'return', 'pos', 'next_find_pos', '=', 'self._read_buffer_size', '*', '2', 'return', 'self._find_read_pos()', 'def', '_handle_read(self)', '->', 'None:', 'try:', 'pos', '=', 'self._read_to_buffer_loop()', 'except', 'UnsatisfiableReadError:', 'raise', 'except', 'asyncio.CancelledError:', 'raise', 'except', 'Exception', 'as', 'e:', 'gen_log.warning(\"error', 'on', 'read:', '%s\"', '%', 'e)', 'self.close(exc_info=e)', 'return', 'if', 'pos', 'is', 'not', 'None:', 'self._read_from_buffer(pos)', 'def', '_start_read(self)', '->', 'Future:', 'if', 'self._read_future', 'is', 'not', 'None:', 'self._check_closed()', 'assert', 'self._read_future', 'is', 'None,', '\"Already', 'reading\"', 'self._read_future', '=', 'Future()', 'return', 'self._read_future', 'def', '_finish_read(self,', 'size:', 'int)', '->', 'None:', 'if', 'self._user_read_buffer:', 'self._read_buffer', '=', 'self._after_user_read_buffer', 'or', 'bytearray()', 'self._after_user_read_buffer', '=', 'None', 'self._read_buffer_size', '=', 'len(self._read_buffer)', 'self._user_read_buffer', '=', 'False', 'result', '=', 'size', 'else:', 'result', '=', 'self._consume(size)', 'if', 'self._read_future', 'is', 'not', 'None:', 'future', '=', 'self._read_future', 'self._read_future', '=', 'None', 'future_set_result_unless_cancelled(future,', 'result)', 'self._maybe_add_error_listener()', 'def', '_try_inline_read(self)', '->', 'None:', 'pos', '=', 'self._find_read_pos()', 'if', 'pos', 'is', 'not', 'None:', 'self._read_from_buffer(pos)', 'return', 'self._check_closed()', 'pos', '=', 'self._read_to_buffer_loop()', 'if', 'pos', 'is', 'not', 'None:', 'self._read_from_buffer(pos)', 'return', 'if', 'not', 'self.closed():', 'self._add_io_state(ioloop.IOLoop.READ)', 'def', '_read_to_buffer(self)', '->', 'Optional[int]:', 'try:', 'while', 'True:', 'try:', 'if', 'self._user_read_buffer:', 'buf', '=', 'memoryview(self._read_buffer)[', 'self._read_buffer_size', ':', ']', 'else:', 'buf', '=', 'bytearray(self.read_chunk_size)', 'bytes_read', '=', 'self.read_from_fd(buf)', 'except', '(socket.error,', 'IOError,', 'OSError)', 'as', 'e:', 'if', 'self._is_connreset(e):', 'self.close(exc_info=e)', 'return', 'None', 'self.close(exc_info=e)', 'raise', 'break', 'if', 'bytes_read', 'is', 'None:', 'return', '0', 'elif', 'bytes_read', '==', '0:', 'self.close()', 'return', '0', 'if', 'not', 'self._user_read_buffer:', 'self._read_buffer', '+=', 'memoryview(buf)[:bytes_read]', 'self._read_buffer_size', '+=', 'bytes_read', 'finally:', 'del', 'buf', 'if', 'self._read_buffer_size', '>', 'self.max_buffer_size:', 'gen_log.error(\"Reached', 'maximum', 'read', 'buffer', 'size\")', 'self.close()', 'raise', 'StreamBufferFullError(\"Reached', 'maximum', 'read', 'buffer', 'size\")', 'return', 'bytes_read', 'def', '_read_from_buffer(self,', 'pos:', 'int)', '->', 'None:', 'self._read_bytes', '=', 'self._read_delimiter', '=', 'self._read_regex', '=', 'None', 'self._read_partial', '=', 'False', 'self._finish_read(pos)', 'def', '_find_read_pos(self)', '->', 'Optional[int]:', 'if', 'self._read_bytes', 'is', 'not', 'None', 'and', '(', 'self._read_buffer_size', '>=', 'self._read_bytes', 'or', '(self._read_partial', 'and', 'self._read_buffer_size', '>', '0)', '):', 'num_bytes', '=', 'min(self._read_bytes,', 'self._read_buffer_size)', 'return', 'num_bytes', 'elif', 'self._read_delimiter', 'is', 'not', 'None:', 'if', 'self._read_buffer:', 'loc', '=', 'self._read_buffer.find(self._read_delimiter)', 'if', 'loc', '!=', '-1:', 'delimiter_len', '=', 'len(self._read_delimiter)', 'self._check_max_bytes(self._read_delimiter,', 'loc', '+', 'delimiter_len)', 'return', 'loc', '+', 'delimiter_len', 'self._check_max_bytes(self._read_delimiter,', 'self._read_buffer_size)', 'elif', 'self._read_regex', 'is', 'not', 'None:', 'if', 'self._read_buffer:', 'm', '=', 'self._read_regex.search(self._read_buffer)', 'if', 'm', 'is', 'not', 'None:', 'loc', '=', 'm.end()', 'self._check_max_bytes(self._read_regex,', 'loc)', 'return', 'loc', 'self._check_max_bytes(self._read_regex,', 'self._read_buffer_size)', 'return', 'None', 'def', '_check_max_bytes(self,', 'delimiter:', 'Union[bytes,', 'Pattern],', 'size:', 'int)', '->', 'None:', 'if', 'self._read_max_bytes', 'is', 'not', 'None', 'and', 'size', '>', 'self._read_max_bytes:', 'raise', 'UnsatisfiableReadError(', '\"delimiter', '%r', 'not', 'found', 'within', '%d', 'bytes\"', '%', '(delimiter,', 'self._read_max_bytes)', ')', 'def', '_handle_write(self)', '->', 'None:', 'while', 'True:', 'size', '=', 'len(self._write_buffer)', 'if', 'not', 'size:', 'break', 'assert', 'size', '>', '0', 'try:', 'if', '_WINDOWS:', 'size', '=', '128', '*', '1024', 'num_bytes', '=', 'self.write_to_fd(self._write_buffer.peek(size))', 'if', 'num_bytes', '==', '0:', 'break', 'self._write_buffer.advance(num_bytes)', 'self._total_write_done_index', '+=', 'num_bytes', 'except', 'BlockingIOError:', 'break', 'except', '(socket.error,', 'IOError,', 'OSError)', 'as', 'e:', 'if', 'not', 'self._is_connreset(e):', 'gen_log.warning(\"Write', 'error', 'on', '%s:', '%s\",', 'self.fileno(),', 'e)', 'self.close(exc_info=e)', 'return', 'while', 'self._write_futures:', 'index,', 'future', '=', 'self._write_futures[0]', 'if', 'index', '>', 'self._total_write_done_index:', 'break', 'self._write_futures.popleft()', 'future_set_result_unless_cancelled(future,', 'None)', 'def', '_consume(self,', 'loc:', 'int)', '->', 'bytes:', 'if', 'loc', '==', '0:', 'return', 'b\"\"', 'assert', 'loc', '<=', 'self._read_buffer_size', 'b', '=', '(memoryview(self._read_buffer)[:loc]).tobytes()', 'self._read_buffer_size', '-=', 'loc', 'del', 'self._read_buffer[:loc]', 'return', 'b', 'def', '_check_closed(self)', '->', 'None:', 'if', 'self.closed():', 'raise', 'StreamClosedError(real_error=self.error)', 'def', '_maybe_add_error_listener(self)', '->', 'None:', 'if', 'self._state', 'is', 'None', 'or', 'self._state', '==', 'ioloop.IOLoop.ERROR:', 'if', '(', 'not', 'self.closed()', 'and', 'self._read_buffer_size', '==', '0', 'and', 'self._close_callback', 'is', 'not', 'None', '):', 'self._add_io_state(ioloop.IOLoop.READ)', 'def', '_add_io_state(self,', 'state:', 'int)', '->', 'None:', 'if', 'self.closed():', 'return', 'if', 'self._state', 'is', 'None:', 'self._state', '=', 'ioloop.IOLoop.ERROR', '|', 'state', 'self.io_loop.add_handler(self.fileno(),', 'self._handle_events,', 'self._state)', 'elif', 'not', 'self._state', '&', 'state:', 'self._state', '=', 'self._state', '|', 'state', 'self.io_loop.update_handler(self.fileno(),', 'self._state)', 'def', '_is_connreset(self,', 'exc:', 'BaseException)', '->', 'bool:', 'return', '(', 'isinstance(exc,', '(socket.error,', 'IOError))', 'and', 'errno_from_exception(exc)', 'in', '_ERRNO_CONNRESET', ')', 'class', 'IOStream(BaseIOStream):', 'r', 'def', '__init__(self,', 'socket:', 'socket.socket,', '*args:', 'Any,', '**kwargs:', 'Any)', '->', 'None:', 'self.socket', '=', 'socket', 'self.socket.setblocking(False)', 'super().__init__(*args,', '**kwargs)', 'def', 'fileno(self)', '->', 'Union[int,', 'ioloop._Selectable]:', 'return', 'self.socket', 'def', 'close_fd(self)', '->', 'None:', 'self.socket.close()', 'self.socket', '=', 'None', 'def', 'get_fd_error(self)', '->', 'Optional[Exception]:', 'errno', '=', 'self.socket.getsockopt(socket.SOL_SOCKET,', 'socket.SO_ERROR)', 'return', 'socket.error(errno,', 'os.strerror(errno))', 'def', 'read_from_fd(self,', 'buf:', 'Union[bytearray,', 'memoryview])', '->', 'Optional[int]:', 'try:', 'return', 'self.socket.recv_into(buf,', 'len(buf))', 'except', 'BlockingIOError:', 'return', 'None', 'finally:', 'del', 'buf', 'def', 'write_to_fd(self,', 'data:', 'memoryview)', '->', 'int:', 'try:', 'return', 'self.socket.send(data)', 'finally:', 'del', 'data', 'def', 'connect(', 'self:', '_IOStreamType,', 'address:', 'Any,', 'server_hostname:', 'Optional[str]', '=', 'None', ')', '->', '\"Future[_IOStreamType]\":', 'self._connecting', '=', 'True', 'future', '=', 'Future()', 'self._connect_future', '=', 'typing.cast(\"Future[IOStream]\",', 'future)', 'try:', 'self.socket.connect(address)', 'except', 'BlockingIOError:', 'pass', 'except', 'socket.error', 'as', 'e:', 'if', 'future', 'is', 'None:', 'gen_log.warning(\"Connect', 'error', 'on', 'fd', '%s:', '%s\",', 'self.socket.fileno(),', 'e)', 'self.close(exc_info=e)', 'return', 'future', 'self._add_io_state(self.io_loop.WRITE)', 'return', 'future', 'def', 'start_tls(', 'self,', 'server_side:', 'bool,', 'ssl_options:', 'Optional[Union[Dict[str,', 'Any],', 'ssl.SSLContext]]', '=', 'None,', 'server_hostname:', 'Optional[str]', '=', 'None,', ')', '->', 'Awaitable[\"SSLIOStream\"]:', 'if', '(', 'self._read_future', 'or', 'self._write_futures', 'or', 'self._connect_future', 'or', 'self._closed', 'or', 'self._read_buffer', 'or', 'self._write_buffer', '):', 'raise', 'ValueError(\"IOStream', 'is', 'not', 'idle;', 'cannot', 'convert', 'to', 'SSL\")', 'if', 'ssl_options', 'is', 'None:', 'if', 'server_side:', 'ssl_options', '=', '_server_ssl_defaults', 'else:', 'ssl_options', '=', '_client_ssl_defaults', 'socket', '=', 'self.socket', 'self.io_loop.remove_handler(socket)', 'self.socket', '=', 'None', 'socket', '=', 'ssl_wrap_socket(', 'socket,', 'ssl_options,', 'server_hostname=server_hostname,', 'server_side=server_side,', 'do_handshake_on_connect=False,', ')', 'orig_close_callback', '=', 'self._close_callback', 'self._close_callback', '=', 'None', 'future', '=', 'Future()', 'ssl_stream', '=', 'SSLIOStream(socket,', 'ssl_options=ssl_options)', 'ssl_stream.set_close_callback(orig_close_callback)', 'ssl_stream._ssl_connect_future', '=', 'future', 'ssl_stream.max_buffer_size', '=', 'self.max_buffer_size', 'ssl_stream.read_chunk_size', '=', 'self.read_chunk_size', 'return', 'future', 'def', '_handle_connect(self)', '->', 'None:', 'try:', 'err', '=', 'self.socket.getsockopt(socket.SOL_SOCKET,', 'socket.SO_ERROR)', 'except', 'socket.error', 'as', 'e:', 'if', 'errno_from_exception(e)', '==', 'errno.ENOPROTOOPT:', 'err', '=', '0', 'if', 'err', '!=', '0:', 'self.error', '=', 'socket.error(err,', 'os.strerror(err))', 'if', 'self._connect_future', 'is', 'None:', 'gen_log.warning(', '\"Connect', 'error', 'on', 'fd', '%s:', '%s\",', 'self.socket.fileno(),', 'errno.errorcode[err],', ')', 'self.close()', 'return', 'if', 'self._connect_future', 'is', 'not', 'None:', 'future', '=', 'self._connect_future', 'self._connect_future', '=', 'None', 'future_set_result_unless_cancelled(future,', 'self)', 'self._connecting', '=', 'False', 'def', 'set_nodelay(self,', 'value:', 'bool)', '->', 'None:', 'if', 'self.socket', 'is', 'not', 'None', 'and', 'self.socket.family', 'in', '(', 'socket.AF_INET,', 'socket.AF_INET6,', '):', 'try:', 'self.socket.setsockopt(', 'socket.IPPROTO_TCP,', 'socket.TCP_NODELAY,', '1', 'if', 'value', 'else', '0', ')', 'except', 'socket.error', 'as', 'e:', 'if', 'e.errno', '!=', 'errno.EINVAL', 'and', 'not', 'self._is_connreset(e):', 'raise', 'class', 'SSLIOStream(IOStream):', 'socket', '=', 'None', 'def', '__init__(self,', '*args:', 'Any,', '**kwargs:', 'Any)', '->', 'None:', 'self._ssl_options', '=', 'kwargs.pop(\"ssl_options\",', '_client_ssl_defaults)', 'super().__init__(*args,', '**kwargs)', 'self._ssl_accepting', '=', 'True', 'self._handshake_reading', '=', 'False', 'self._handshake_writing', '=', 'False', 'self._server_hostname', '=', 'None', 'try:', 'self.socket.getpeername()', 'except', 'socket.error:', 'pass', 'else:', 'self._add_io_state(self.io_loop.WRITE)', 'def', 'reading(self)', '->', 'bool:', 'return', 'self._handshake_reading', 'or', 'super().reading()', 'def', 'writing(self)', '->', 'bool:', 'return', 'self._handshake_writing', 'or', 'super().writing()', 'def', '_do_ssl_handshake(self)', '->', 'None:', 'try:', 'self._handshake_reading', '=', 'False', 'self._handshake_writing', '=', 'False', 'self.socket.do_handshake()', 'except', 'ssl.SSLError', 'as', 'err:', 'if', 'err.args[0]', '==', 'ssl.SSL_ERROR_WANT_READ:', 'self._handshake_reading', '=', 'True', 'return', 'elif', 'err.args[0]', '==', 'ssl.SSL_ERROR_WANT_WRITE:', 'self._handshake_writing', '=', 'True', 'return', 'elif', 'err.args[0]', 'in', '(ssl.SSL_ERROR_EOF,', 'ssl.SSL_ERROR_ZERO_RETURN):', 'return', 'self.close(exc_info=err)', 'elif', 'err.args[0]', '==', 'ssl.SSL_ERROR_SSL:', 'try:', 'peer', '=', 'self.socket.getpeername()', 'except', 'Exception:', 'peer', '=', '\"(not', 'connected)\"', 'gen_log.warning(', '\"SSL', 'Error', 'on', '%s', '%s:', '%s\",', 'self.socket.fileno(),', 'peer,', 'err', ')', 'return', 'self.close(exc_info=err)', 'raise', 'except', 'ssl.CertificateError', 'as', 'err:', 'return', 'self.close(exc_info=err)', 'except', 'socket.error', 'as', 'err:', 'if', 'self._is_connreset(err)', 'or', 'err.args[0]', 'in', '(', '0,', 'errno.EBADF,', 'errno.ENOTCONN,', '):', 'return', 'self.close(exc_info=err)', 'raise', 'except', 'AttributeError', 'as', 'err:', 'return', 'self.close(exc_info=err)', 'else:', 'self._ssl_accepting', '=', 'False', 'assert', 'ssl.HAS_SNI', 'self._finish_ssl_connect()', 'def', '_finish_ssl_connect(self)', '->', 'None:', 'if', 'self._ssl_connect_future', 'is', 'not', 'None:', 'future', '=', 'self._ssl_connect_future', 'self._ssl_connect_future', '=', 'None', 'future_set_result_unless_cancelled(future,', 'self)', 'def', '_handle_read(self)', '->', 'None:', 'if', 'self._ssl_accepting:', 'self._do_ssl_handshake()', 'return', 'super()._handle_read()', 'def', '_handle_write(self)', '->', 'None:', 'if', 'self._ssl_accepting:', 'self._do_ssl_handshake()', 'return', 'super()._handle_write()', 'def', 'connect(', 'self,', 'address:', 'Tuple,', 'server_hostname:', 'Optional[str]', '=', 'None', ')', '->', '\"Future[SSLIOStream]\":', 'self._server_hostname', '=', 'server_hostname', 'fut', '=', 'super().connect(address)', 'fut.add_done_callback(lambda', 'f:', 'f.exception())', 'return', 'self.wait_for_handshake()', 'def', '_handle_connect(self)', '->', 'None:', 'super()._handle_connect()', 'if', 'self.closed():', 'return', 'self.io_loop.remove_handler(self.socket)', 'old_state', '=', 'self._state', 'assert', 'old_state', 'is', 'not', 'None', 'self._state', '=', 'None', 'self.socket', '=', 'ssl_wrap_socket(', 'self.socket,', 'self._ssl_options,', 'server_hostname=self._server_hostname,', 'do_handshake_on_connect=False,', 'server_side=False,', ')', 'self._add_io_state(old_state)', 'def', 'wait_for_handshake(self)', '->', '\"Future[SSLIOStream]\":', 'if', 'self._ssl_connect_future', 'is', 'not', 'None:', 'raise', 'RuntimeError(\"Already', 'waiting\")', 'future', '=', 'self._ssl_connect_future', '=', 'Future()', 'if', 'not', 'self._ssl_accepting:', 'self._finish_ssl_connect()', 'return', 'future', 'def', 'write_to_fd(self,', 'data:', 'memoryview)', '->', 'int:', 'if', 'len(data)', '>>', '30:', 'data', '=', 'memoryview(data)[:', '1', '<<', '30]', 'try:', 'return', 'self.socket.send(data)', 'except', 'ssl.SSLError', 'as', 'e:', 'if', 'e.args[0]', '==', 'ssl.SSL_ERROR_WANT_WRITE:', 'return', '0', 'raise', 'finally:', 'del', 'data', 'def', 'read_from_fd(self,', 'buf:', 'Union[bytearray,', 'memoryview])', '->', 'Optional[int]:', 'try:', 'if', 'self._ssl_accepting:', 'return', 'None', 'if', 'len(buf)', '>>', '30:', 'buf', '=', 'memoryview(buf)[:', '1', '<<', '30]', 'try:', 'return', 'self.socket.recv_into(buf,', 'len(buf))', 'except', 'ssl.SSLError', 'as', 'e:', 'if', 'e.args[0]', '==', 'ssl.SSL_ERROR_WANT_READ:', 'return', 'None', 'else:', 'raise', 'except', 'BlockingIOError:', 'return', 'None', 'finally:', 'del', 'buf', 'def', '_is_connreset(self,', 'e:', 'BaseException)', '->', 'bool:', 'if', 'isinstance(e,', 'ssl.SSLError)', 'and', 'e.args[0]', '==', 'ssl.SSL_ERROR_EOF:', 'return', 'True', 'return', 'super()._is_connreset(e)', 'class', 'PipeIOStream(BaseIOStream):', 'def', '__init__(self,', 'fd:', 'int,', '*args:', 'Any,', '**kwargs:', 'Any)', '->', 'None:', 'self.fd', '=', 'fd', 'self._fio', '=', 'io.FileIO(self.fd,', '\"r+\")', 'if', 'sys.platform', '==', '\"win32\":', 'raise', 'AssertionError(\"PipeIOStream', 'is', 'not', 'supported', 'on', 'Windows\")', 'os.set_blocking(fd,', 'False)', 'super().__init__(*args,', '**kwargs)', 'def', 'fileno(self)', '->', 'int:', 'return', 'self.fd', 'def', 'close_fd(self)', '->', 'None:', 'self._fio.close()', 'def', 'write_to_fd(self,', 'data:', 'memoryview)', '->', 'int:', 'try:', 'return', 'os.write(self.fd,', 'data)', 'finally:', 'del', 'data', 'def', 'read_from_fd(self,', 'buf:', 'Union[bytearray,', 'memoryview])', '->', 'Optional[int]:', 'try:', 'return', 'self._fio.readinto(buf)', 'except', '(IOError,', 'OSError)', 'as', 'e:', 'if', 'errno_from_exception(e)', '==', 'errno.EBADF:', 'self.close(exc_info=e)', 'return', 'None', 'else:', 'raise', 'finally:', 'del', 'buf', 'def', 'doctests()', '->', 'Any:', 'import', 'doctest', 'return', 'doctest.DocTestSuite()']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/locale.py",
        "vector": "['import', 'codecs', 'import', 'csv', 'import', 'datetime', 'import', 'gettext', 'import', 'glob', 'import', 'os', 'import', 're', 'from', 'tornado', 'import', 'escape', 'from', 'tornado.log', 'import', 'gen_log', 'from', 'tornado._locale_data', 'import', 'LOCALE_NAMES', 'from', 'typing', 'import', 'Iterable,', 'Any,', 'Union,', 'Dict,', 'Optional', '_default_locale', '=', '\"en_US\"', '_translations', '=', '{}', '_supported_locales', '=', 'frozenset([_default_locale])', '_use_gettext', '=', 'False', 'CONTEXT_SEPARATOR', '=', '\"\\\\x04\"', 'def', 'get(*locale_codes:', 'str)', '->', '\"Locale\":', 'return', 'Locale.get_closest(*locale_codes)', 'def', 'set_default_locale(code:', 'str)', '->', 'None:', 'global', '_default_locale', 'global', '_supported_locales', '_default_locale', '=', 'code', '_supported_locales', '=', 'frozenset(list(_translations.keys())', '+', '[_default_locale])', 'def', 'load_translations(directory:', 'str,', 'encoding:', 'Optional[str]', '=', 'None)', '->', 'None:', 'global', '_translations', 'global', '_supported_locales', '_translations', '=', '{}', 'for', 'path', 'in', 'os.listdir(directory):', 'if', 'not', 'path.endswith(\".csv\"):', 'continue', 'locale,', 'extension', '=', 'path.split(\".\")', 'if', 'not', 're.match(\"[a-z]+(_[A-Z]+)?$\",', 'locale):', 'gen_log.error(', '\"Unrecognized', 'locale', '%r', '(path:', '%s)\",', 'locale,', 'os.path.join(directory,', 'path),', ')', 'continue', 'full_path', '=', 'os.path.join(directory,', 'path)', 'if', 'encoding', 'is', 'None:', 'with', 'open(full_path,', '\"rb\")', 'as', 'bf:', 'data', '=', 'bf.read(len(codecs.BOM_UTF16_LE))', 'if', 'data', 'in', '(codecs.BOM_UTF16_LE,', 'codecs.BOM_UTF16_BE):', 'encoding', '=', '\"utf-16\"', 'else:', 'encoding', '=', '\"utf-8-sig\"', 'with', 'open(full_path,', 'encoding=encoding)', 'as', 'f:', '_translations[locale]', '=', '{}', 'for', 'i,', 'row', 'in', 'enumerate(csv.reader(f)):', 'if', 'not', 'row', 'or', 'len(row)', '<', '2:', 'continue', 'row', '=', '[escape.to_unicode(c).strip()', 'for', 'c', 'in', 'row]', 'english,', 'translation', '=', 'row[:2]', 'if', 'len(row)', '>', '2:', 'plural', '=', 'row[2]', 'or', '\"unknown\"', 'else:', 'plural', '=', '\"unknown\"', 'if', 'plural', 'not', 'in', '(\"plural\",', '\"singular\",', '\"unknown\"):', 'gen_log.error(', '\"Unrecognized', 'plural', 'indicator', '%r', 'in', '%s', 'line', '%d\",', 'plural,', 'path,', 'i', '+', '1,', ')', 'continue', '_translations[locale].setdefault(plural,', '{})[english]', '=', 'translation', '_supported_locales', '=', 'frozenset(list(_translations.keys())', '+', '[_default_locale])', 'gen_log.debug(\"Supported', 'locales:', '%s\",', 'sorted(_supported_locales))', 'def', 'load_gettext_translations(directory:', 'str,', 'domain:', 'str)', '->', 'None:', 'global', '_translations', 'global', '_supported_locales', 'global', '_use_gettext', '_translations', '=', '{}', 'for', 'filename', 'in', 'glob.glob(', 'os.path.join(directory,', '\"*\",', '\"LC_MESSAGES\",', 'domain', '+', '\".mo\")', '):', 'lang', '=', 'os.path.basename(os.path.dirname(os.path.dirname(filename)))', 'try:', '_translations[lang]', '=', 'gettext.translation(', 'domain,', 'directory,', 'languages=[lang]', ')', 'except', 'Exception', 'as', 'e:', 'gen_log.error(\"Cannot', 'load', 'translation', 'for', \"'%s':\", '%s\",', 'lang,', 'str(e))', 'continue', '_supported_locales', '=', 'frozenset(list(_translations.keys())', '+', '[_default_locale])', '_use_gettext', '=', 'True', 'gen_log.debug(\"Supported', 'locales:', '%s\",', 'sorted(_supported_locales))', 'def', 'get_supported_locales()', '->', 'Iterable[str]:', 'return', '_supported_locales', 'class', 'Locale(object):', '_cache', '=', '{}', '@classmethod', 'def', 'get_closest(cls,', '*locale_codes:', 'str)', '->', '\"Locale\":', 'for', 'code', 'in', 'locale_codes:', 'if', 'not', 'code:', 'continue', 'code', '=', 'code.replace(\"-\",', '\"_\")', 'parts', '=', 'code.split(\"_\")', 'if', 'len(parts)', '>', '2:', 'continue', 'elif', 'len(parts)', '==', '2:', 'code', '=', 'parts[0].lower()', '+', '\"_\"', '+', 'parts[1].upper()', 'if', 'code', 'in', '_supported_locales:', 'return', 'cls.get(code)', 'if', 'parts[0].lower()', 'in', '_supported_locales:', 'return', 'cls.get(parts[0].lower())', 'return', 'cls.get(_default_locale)', '@classmethod', 'def', 'get(cls,', 'code:', 'str)', '->', '\"Locale\":', 'if', 'code', 'not', 'in', 'cls._cache:', 'assert', 'code', 'in', '_supported_locales', 'translations', '=', '_translations.get(code,', 'None)', 'if', 'translations', 'is', 'None:', 'locale', '=', 'CSVLocale(code,', '{})', 'elif', '_use_gettext:', 'locale', '=', 'GettextLocale(code,', 'translations)', 'else:', 'locale', '=', 'CSVLocale(code,', 'translations)', 'cls._cache[code]', '=', 'locale', 'return', 'cls._cache[code]', 'def', '__init__(self,', 'code:', 'str)', '->', 'None:', 'self.code', '=', 'code', 'self.name', '=', 'LOCALE_NAMES.get(code,', '{}).get(\"name\",', '\"Unknown\")', 'self.rtl', '=', 'False', 'for', 'prefix', 'in', '[\"fa\",', '\"ar\",', '\"he\"]:', 'if', 'self.code.startswith(prefix):', 'self.rtl', '=', 'True', 'break', '_', '=', 'self.translate', 'self._months', '=', '[', '_(\"January\"),', '_(\"February\"),', '_(\"March\"),', '_(\"April\"),', '_(\"May\"),', '_(\"June\"),', '_(\"July\"),', '_(\"August\"),', '_(\"September\"),', '_(\"October\"),', '_(\"November\"),', '_(\"December\"),', ']', 'self._weekdays', '=', '[', '_(\"Monday\"),', '_(\"Tuesday\"),', '_(\"Wednesday\"),', '_(\"Thursday\"),', '_(\"Friday\"),', '_(\"Saturday\"),', '_(\"Sunday\"),', ']', 'def', 'translate(', 'self,', 'message:', 'str,', 'plural_message:', 'Optional[str]', '=', 'None,', 'count:', 'Optional[int]', '=', 'None,', ')', '->', 'str:', 'raise', 'NotImplementedError()', 'def', 'pgettext(', 'self,', 'context:', 'str,', 'message:', 'str,', 'plural_message:', 'Optional[str]', '=', 'None,', 'count:', 'Optional[int]', '=', 'None,', ')', '->', 'str:', 'raise', 'NotImplementedError()', 'def', 'format_date(', 'self,', 'date:', 'Union[int,', 'float,', 'datetime.datetime],', 'gmt_offset:', 'int', '=', '0,', 'relative:', 'bool', '=', 'True,', 'shorter:', 'bool', '=', 'False,', 'full_format:', 'bool', '=', 'False,', ')', '->', 'str:', 'if', 'isinstance(date,', '(int,', 'float)):', 'date', '=', 'datetime.datetime.fromtimestamp(date,', 'datetime.timezone.utc)', 'if', 'date.tzinfo', 'is', 'None:', 'date', '=', 'date.replace(tzinfo=datetime.timezone.utc)', 'now', '=', 'datetime.datetime.now(datetime.timezone.utc)', 'if', 'date', '>', 'now:', 'if', 'relative', 'and', '(date', '-', 'now).seconds', '<', '60:', 'date', '=', 'now', 'else:', 'full_format', '=', 'True', 'local_date', '=', 'date', '-', 'datetime.timedelta(minutes=gmt_offset)', 'local_now', '=', 'now', '-', 'datetime.timedelta(minutes=gmt_offset)', 'local_yesterday', '=', 'local_now', '-', 'datetime.timedelta(hours=24)', 'difference', '=', 'now', '-', 'date', 'seconds', '=', 'difference.seconds', 'days', '=', 'difference.days', '_', '=', 'self.translate', 'format', '=', 'None', 'if', 'not', 'full_format:', 'if', 'relative', 'and', 'days', '==', '0:', 'if', 'seconds', '<', '50:', 'return', '_(\"1', 'second', 'ago\",', '\"%(seconds)d', 'seconds', 'ago\",', 'seconds)', '%', '{', '\"seconds\":', 'seconds', '}', 'if', 'seconds', '<', '50', '*', '60:', 'minutes', '=', 'round(seconds', '/', '60.0)', 'return', '_(\"1', 'minute', 'ago\",', '\"%(minutes)d', 'minutes', 'ago\",', 'minutes)', '%', '{', '\"minutes\":', 'minutes', '}', 'hours', '=', 'round(seconds', '/', '(60.0', '*', '60))', 'return', '_(\"1', 'hour', 'ago\",', '\"%(hours)d', 'hours', 'ago\",', 'hours)', '%', '{\"hours\":', 'hours}', 'if', 'days', '==', '0:', 'format', '=', '_(\"%(time)s\")', 'elif', 'days', '==', '1', 'and', 'local_date.day', '==', 'local_yesterday.day', 'and', 'relative:', 'format', '=', '_(\"yesterday\")', 'if', 'shorter', 'else', '_(\"yesterday', 'at', '%(time)s\")', 'elif', 'days', '<', '5:', 'format', '=', '_(\"%(weekday)s\")', 'if', 'shorter', 'else', '_(\"%(weekday)s', 'at', '%(time)s\")', 'elif', 'days', '<', '334:', 'format', '=', '(', '_(\"%(month_name)s', '%(day)s\")', 'if', 'shorter', 'else', '_(\"%(month_name)s', '%(day)s', 'at', '%(time)s\")', ')', 'if', 'format', 'is', 'None:', 'format', '=', '(', '_(\"%(month_name)s', '%(day)s,', '%(year)s\")', 'if', 'shorter', 'else', '_(\"%(month_name)s', '%(day)s,', '%(year)s', 'at', '%(time)s\")', ')', 'tfhour_clock', '=', 'self.code', 'not', 'in', '(\"en\",', '\"en_US\",', '\"zh_CN\")', 'if', 'tfhour_clock:', 'str_time', '=', '\"%d:%02d\"', '%', '(local_date.hour,', 'local_date.minute)', 'elif', 'self.code', '==', '\"zh_CN\":', 'str_time', '=', '\"%s%d:%02d\"', '%', '(', '(\"\\\\u4e0a\\\\u5348\",', '\"\\\\u4e0b\\\\u5348\")[local_date.hour', '>=', '12],', 'local_date.hour', '%', '12', 'or', '12,', 'local_date.minute,', ')', 'else:', 'str_time', '=', '\"%d:%02d', '%s\"', '%', '(', 'local_date.hour', '%', '12', 'or', '12,', 'local_date.minute,', '(\"am\",', '\"pm\")[local_date.hour', '>=', '12],', ')', 'return', 'format', '%', '{', '\"month_name\":', 'self._months[local_date.month', '-', '1],', '\"weekday\":', 'self._weekdays[local_date.weekday()],', '\"day\":', 'str(local_date.day),', '\"year\":', 'str(local_date.year),', '\"time\":', 'str_time,', '}', 'def', 'format_day(', 'self,', 'date:', 'datetime.datetime,', 'gmt_offset:', 'int', '=', '0,', 'dow:', 'bool', '=', 'True', ')', '->', 'bool:', 'local_date', '=', 'date', '-', 'datetime.timedelta(minutes=gmt_offset)', '_', '=', 'self.translate', 'if', 'dow:', 'return', '_(\"%(weekday)s,', '%(month_name)s', '%(day)s\")', '%', '{', '\"month_name\":', 'self._months[local_date.month', '-', '1],', '\"weekday\":', 'self._weekdays[local_date.weekday()],', '\"day\":', 'str(local_date.day),', '}', 'else:', 'return', '_(\"%(month_name)s', '%(day)s\")', '%', '{', '\"month_name\":', 'self._months[local_date.month', '-', '1],', '\"day\":', 'str(local_date.day),', '}', 'def', 'list(self,', 'parts:', 'Any)', '->', 'str:', '_', '=', 'self.translate', 'if', 'len(parts)', '==', '0:', 'return', '\"\"', 'if', 'len(parts)', '==', '1:', 'return', 'parts[0]', 'comma', '=', '\"', '\\\\u0648', '\"', 'if', 'self.code.startswith(\"fa\")', 'else', '\",', '\"', 'return', '_(\"%(commas)s', 'and', '%(last)s\")', '%', '{', '\"commas\":', 'comma.join(parts[:-1]),', '\"last\":', 'parts[len(parts)', '-', '1],', '}', 'def', 'friendly_number(self,', 'value:', 'int)', '->', 'str:', 'if', 'self.code', 'not', 'in', '(\"en\",', '\"en_US\"):', 'return', 'str(value)', 's', '=', 'str(value)', 'parts', '=', '[]', 'while', 's:', 'parts.append(s[-3:])', 's', '=', 's[:-3]', 'return', '\",\".join(reversed(parts))', 'class', 'CSVLocale(Locale):', 'def', '__init__(self,', 'code:', 'str,', 'translations:', 'Dict[str,', 'Dict[str,', 'str]])', '->', 'None:', 'self.translations', '=', 'translations', 'super().__init__(code)', 'def', 'translate(', 'self,', 'message:', 'str,', 'plural_message:', 'Optional[str]', '=', 'None,', 'count:', 'Optional[int]', '=', 'None,', ')', '->', 'str:', 'if', 'plural_message', 'is', 'not', 'None:', 'assert', 'count', 'is', 'not', 'None', 'if', 'count', '!=', '1:', 'message', '=', 'plural_message', 'message_dict', '=', 'self.translations.get(\"plural\",', '{})', 'else:', 'message_dict', '=', 'self.translations.get(\"singular\",', '{})', 'else:', 'message_dict', '=', 'self.translations.get(\"unknown\",', '{})', 'return', 'message_dict.get(message,', 'message)', 'def', 'pgettext(', 'self,', 'context:', 'str,', 'message:', 'str,', 'plural_message:', 'Optional[str]', '=', 'None,', 'count:', 'Optional[int]', '=', 'None,', ')', '->', 'str:', 'if', 'self.translations:', 'gen_log.warning(\"pgettext', 'is', 'not', 'supported', 'by', 'CSVLocale\")', 'return', 'self.translate(message,', 'plural_message,', 'count)', 'class', 'GettextLocale(Locale):', 'def', '__init__(self,', 'code:', 'str,', 'translations:', 'gettext.NullTranslations)', '->', 'None:', 'self.ngettext', '=', 'translations.ngettext', 'self.gettext', '=', 'translations.gettext', 'super().__init__(code)', 'def', 'translate(', 'self,', 'message:', 'str,', 'plural_message:', 'Optional[str]', '=', 'None,', 'count:', 'Optional[int]', '=', 'None,', ')', '->', 'str:', 'if', 'plural_message', 'is', 'not', 'None:', 'assert', 'count', 'is', 'not', 'None', 'return', 'self.ngettext(message,', 'plural_message,', 'count)', 'else:', 'return', 'self.gettext(message)', 'def', 'pgettext(', 'self,', 'context:', 'str,', 'message:', 'str,', 'plural_message:', 'Optional[str]', '=', 'None,', 'count:', 'Optional[int]', '=', 'None,', ')', '->', 'str:', 'if', 'plural_message', 'is', 'not', 'None:', 'assert', 'count', 'is', 'not', 'None', 'msgs_with_ctxt', '=', '(', '\"%s%s%s\"', '%', '(context,', 'CONTEXT_SEPARATOR,', 'message),', '\"%s%s%s\"', '%', '(context,', 'CONTEXT_SEPARATOR,', 'plural_message),', 'count,', ')', 'result', '=', 'self.ngettext(*msgs_with_ctxt)', 'if', 'CONTEXT_SEPARATOR', 'in', 'result:', 'result', '=', 'self.ngettext(message,', 'plural_message,', 'count)', 'return', 'result', 'else:', 'msg_with_ctxt', '=', '\"%s%s%s\"', '%', '(context,', 'CONTEXT_SEPARATOR,', 'message)', 'result', '=', 'self.gettext(msg_with_ctxt)', 'if', 'CONTEXT_SEPARATOR', 'in', 'result:', 'result', '=', 'message', 'return', 'result']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/locks.py",
        "vector": "['import', 'collections', 'import', 'datetime', 'import', 'types', 'from', 'tornado', 'import', 'gen,', 'ioloop', 'from', 'tornado.concurrent', 'import', 'Future,', 'future_set_result_unless_cancelled', 'from', 'typing', 'import', 'Union,', 'Optional,', 'Type,', 'Any,', 'Awaitable', 'import', 'typing', 'if', 'typing.TYPE_CHECKING:', 'from', 'typing', 'import', 'Deque,', 'Set', '__all__', '=', '[\"Condition\",', '\"Event\",', '\"Semaphore\",', '\"BoundedSemaphore\",', '\"Lock\"]', 'class', '_TimeoutGarbageCollector(object):', 'def', '__init__(self)', '->', 'None:', 'self._waiters', '=', 'collections.deque()', 'self._timeouts', '=', '0', 'def', '_garbage_collect(self)', '->', 'None:', 'self._timeouts', '+=', '1', 'if', 'self._timeouts', '>', '100:', 'self._timeouts', '=', '0', 'self._waiters', '=', 'collections.deque(w', 'for', 'w', 'in', 'self._waiters', 'if', 'not', 'w.done())', 'class', 'Condition(_TimeoutGarbageCollector):', 'def', '__repr__(self)', '->', 'str:', 'result', '=', '\"<%s\"', '%', '(self.__class__.__name__,)', 'if', 'self._waiters:', 'result', '+=', '\"', 'waiters[%s]\"', '%', 'len(self._waiters)', 'return', 'result', '+', '\">\"', 'def', 'wait(', 'self,', 'timeout:', 'Optional[Union[float,', 'datetime.timedelta]]', '=', 'None', ')', '->', 'Awaitable[bool]:', 'waiter', '=', 'Future()', 'self._waiters.append(waiter)', 'if', 'timeout:', 'def', 'on_timeout()', '->', 'None:', 'if', 'not', 'waiter.done():', 'future_set_result_unless_cancelled(waiter,', 'False)', 'self._garbage_collect()', 'io_loop', '=', 'ioloop.IOLoop.current()', 'timeout_handle', '=', 'io_loop.add_timeout(timeout,', 'on_timeout)', 'waiter.add_done_callback(lambda', '_:', 'io_loop.remove_timeout(timeout_handle))', 'return', 'waiter', 'def', 'notify(self,', 'n:', 'int', '=', '1)', '->', 'None:', 'waiters', '=', '[]', 'while', 'n', 'and', 'self._waiters:', 'waiter', '=', 'self._waiters.popleft()', 'if', 'not', 'waiter.done():', 'n', '-=', '1', 'waiters.append(waiter)', 'for', 'waiter', 'in', 'waiters:', 'future_set_result_unless_cancelled(waiter,', 'True)', 'def', 'notify_all(self)', '->', 'None:', 'self.notify(len(self._waiters))', 'class', 'Event(object):', 'def', '__init__(self)', '->', 'None:', 'self._value', '=', 'False', 'self._waiters', '=', 'set()', 'def', '__repr__(self)', '->', 'str:', 'return', '\"<%s', '%s>\"', '%', '(', 'self.__class__.__name__,', '\"set\"', 'if', 'self.is_set()', 'else', '\"clear\",', ')', 'def', 'is_set(self)', '->', 'bool:', 'return', 'self._value', 'def', 'set(self)', '->', 'None:', 'if', 'not', 'self._value:', 'self._value', '=', 'True', 'for', 'fut', 'in', 'self._waiters:', 'if', 'not', 'fut.done():', 'fut.set_result(None)', 'def', 'clear(self)', '->', 'None:', 'self._value', '=', 'False', 'def', 'wait(', 'self,', 'timeout:', 'Optional[Union[float,', 'datetime.timedelta]]', '=', 'None', ')', '->', 'Awaitable[None]:', 'fut', '=', 'Future()', 'if', 'self._value:', 'fut.set_result(None)', 'return', 'fut', 'self._waiters.add(fut)', 'fut.add_done_callback(lambda', 'fut:', 'self._waiters.remove(fut))', 'if', 'timeout', 'is', 'None:', 'return', 'fut', 'else:', 'timeout_fut', '=', 'gen.with_timeout(timeout,', 'fut)', 'timeout_fut.add_done_callback(', 'lambda', 'tf:', 'fut.cancel()', 'if', 'not', 'fut.done()', 'else', 'None', ')', 'return', 'timeout_fut', 'class', '_ReleasingContextManager(object):', 'def', '__init__(self,', 'obj:', 'Any)', '->', 'None:', 'self._obj', '=', 'obj', 'def', '__enter__(self)', '->', 'None:', 'pass', 'def', '__exit__(', 'self,', 'exc_type:', '\"Optional[Type[BaseException]]\",', 'exc_val:', 'Optional[BaseException],', 'exc_tb:', 'Optional[types.TracebackType],', ')', '->', 'None:', 'self._obj.release()', 'class', 'Semaphore(_TimeoutGarbageCollector):', 'def', '__init__(self,', 'value:', 'int', '=', '1)', '->', 'None:', 'super().__init__()', 'if', 'value', '<', '0:', 'raise', 'ValueError(\"semaphore', 'initial', 'value', 'must', 'be', '>=', '0\")', 'self._value', '=', 'value', 'def', '__repr__(self)', '->', 'str:', 'res', '=', 'super().__repr__()', 'extra', '=', '(', '\"locked\"', 'if', 'self._value', '==', '0', 'else', '\"unlocked,value:{0}\".format(self._value)', ')', 'if', 'self._waiters:', 'extra', '=', '\"{0},waiters:{1}\".format(extra,', 'len(self._waiters))', 'return', '\"<{0}', '[{1}]>\".format(res[1:-1],', 'extra)', 'def', 'release(self)', '->', 'None:', 'self._value', '+=', '1', 'while', 'self._waiters:', 'waiter', '=', 'self._waiters.popleft()', 'if', 'not', 'waiter.done():', 'self._value', '-=', '1', 'waiter.set_result(_ReleasingContextManager(self))', 'break', 'def', 'acquire(', 'self,', 'timeout:', 'Optional[Union[float,', 'datetime.timedelta]]', '=', 'None', ')', '->', 'Awaitable[_ReleasingContextManager]:', 'waiter', '=', 'Future()', 'if', 'self._value', '>', '0:', 'self._value', '-=', '1', 'waiter.set_result(_ReleasingContextManager(self))', 'else:', 'self._waiters.append(waiter)', 'if', 'timeout:', 'def', 'on_timeout()', '->', 'None:', 'if', 'not', 'waiter.done():', 'waiter.set_exception(gen.TimeoutError())', 'self._garbage_collect()', 'io_loop', '=', 'ioloop.IOLoop.current()', 'timeout_handle', '=', 'io_loop.add_timeout(timeout,', 'on_timeout)', 'waiter.add_done_callback(', 'lambda', '_:', 'io_loop.remove_timeout(timeout_handle)', ')', 'return', 'waiter', 'def', '__enter__(self)', '->', 'None:', 'raise', 'RuntimeError(\"Use', \"'async\", \"with'\", 'instead', 'of', \"'with'\", 'for', 'Semaphore\")', 'def', '__exit__(', 'self,', 'typ:', '\"Optional[Type[BaseException]]\",', 'value:', 'Optional[BaseException],', 'traceback:', 'Optional[types.TracebackType],', ')', '->', 'None:', 'self.__enter__()', 'async', 'def', '__aenter__(self)', '->', 'None:', 'await', 'self.acquire()', 'async', 'def', '__aexit__(', 'self,', 'typ:', '\"Optional[Type[BaseException]]\",', 'value:', 'Optional[BaseException],', 'tb:', 'Optional[types.TracebackType],', ')', '->', 'None:', 'self.release()', 'class', 'BoundedSemaphore(Semaphore):', 'def', '__init__(self,', 'value:', 'int', '=', '1)', '->', 'None:', 'super().__init__(value=value)', 'self._initial_value', '=', 'value', 'def', 'release(self)', '->', 'None:', 'if', 'self._value', '>=', 'self._initial_value:', 'raise', 'ValueError(\"Semaphore', 'released', 'too', 'many', 'times\")', 'super().release()', 'class', 'Lock(object):', 'def', '__init__(self)', '->', 'None:', 'self._block', '=', 'BoundedSemaphore(value=1)', 'def', '__repr__(self)', '->', 'str:', 'return', '\"<%s', '_block=%s>\"', '%', '(self.__class__.__name__,', 'self._block)', 'def', 'acquire(', 'self,', 'timeout:', 'Optional[Union[float,', 'datetime.timedelta]]', '=', 'None', ')', '->', 'Awaitable[_ReleasingContextManager]:', 'return', 'self._block.acquire(timeout)', 'def', 'release(self)', '->', 'None:', 'try:', 'self._block.release()', 'except', 'ValueError:', 'raise', 'RuntimeError(\"release', 'unlocked', 'lock\")', 'def', '__enter__(self)', '->', 'None:', 'raise', 'RuntimeError(\"Use', '`async', 'with`', 'instead', 'of', '`with`', 'for', 'Lock\")', 'def', '__exit__(', 'self,', 'typ:', '\"Optional[Type[BaseException]]\",', 'value:', 'Optional[BaseException],', 'tb:', 'Optional[types.TracebackType],', ')', '->', 'None:', 'self.__enter__()', 'async', 'def', '__aenter__(self)', '->', 'None:', 'await', 'self.acquire()', 'async', 'def', '__aexit__(', 'self,', 'typ:', '\"Optional[Type[BaseException]]\",', 'value:', 'Optional[BaseException],', 'tb:', 'Optional[types.TracebackType],', ')', '->', 'None:', 'self.release()']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/log.py",
        "vector": "['import', 'logging', 'import', 'logging.handlers', 'import', 'sys', 'from', 'tornado.escape', 'import', '_unicode', 'from', 'tornado.util', 'import', 'unicode_type,', 'basestring_type', 'try:', 'import', 'colorama', 'except', 'ImportError:', 'colorama', '=', 'None', 'try:', 'import', 'curses', 'except', 'ImportError:', 'curses', '=', 'None', 'from', 'typing', 'import', 'Dict,', 'Any,', 'cast,', 'Optional', 'access_log', '=', 'logging.getLogger(\"tornado.access\")', 'app_log', '=', 'logging.getLogger(\"tornado.application\")', 'gen_log', '=', 'logging.getLogger(\"tornado.general\")', 'def', '_stderr_supports_color()', '->', 'bool:', 'try:', 'if', 'hasattr(sys.stderr,', '\"isatty\")', 'and', 'sys.stderr.isatty():', 'if', 'curses:', 'curses.setupterm()', 'if', 'curses.tigetnum(\"colors\")', '>', '0:', 'return', 'True', 'elif', 'colorama:', 'if', 'sys.stderr', 'is', 'getattr(', 'colorama.initialise,', '\"wrapped_stderr\",', 'object()', '):', 'return', 'True', 'except', 'Exception:', 'pass', 'return', 'False', 'def', '_safe_unicode(s:', 'Any)', '->', 'str:', 'try:', 'return', '_unicode(s)', 'except', 'UnicodeDecodeError:', 'return', 'repr(s)', 'class', 'LogFormatter(logging.Formatter):', 'DEFAULT_FORMAT', '=', '\"%(color)s[%(levelname)1.1s', '%(asctime)s', '%(module)s:%(lineno)d]%(end_color)s', '%(message)s\"', 'DEFAULT_DATE_FORMAT', '=', '\"%y%m%d', '%H:%M:%S\"', 'DEFAULT_COLORS', '=', '{', 'logging.DEBUG:', '4,', 'logging.INFO:', '2,', 'logging.WARNING:', '3,', 'logging.ERROR:', '1,', 'logging.CRITICAL:', '5,', '}', 'def', '__init__(', 'self,', 'fmt:', 'str', '=', 'DEFAULT_FORMAT,', 'datefmt:', 'str', '=', 'DEFAULT_DATE_FORMAT,', 'style:', 'str', '=', '\"%\",', 'color:', 'bool', '=', 'True,', 'colors:', 'Dict[int,', 'int]', '=', 'DEFAULT_COLORS,', ')', '->', 'None:', 'r', 'logging.Formatter.__init__(self,', 'datefmt=datefmt)', 'self._fmt', '=', 'fmt', 'self._colors', '=', '{}', 'if', 'color', 'and', '_stderr_supports_color():', 'if', 'curses', 'is', 'not', 'None:', 'fg_color', '=', 'curses.tigetstr(\"setaf\")', 'or', 'curses.tigetstr(\"setf\")', 'or', 'b\"\"', 'for', 'levelno,', 'code', 'in', 'colors.items():', 'self._colors[levelno]', '=', 'unicode_type(', 'curses.tparm(fg_color,', 'code),', '\"ascii\"', ')', 'normal', '=', 'curses.tigetstr(\"sgr0\")', 'if', 'normal', 'is', 'not', 'None:', 'self._normal', '=', 'unicode_type(normal,', '\"ascii\")', 'else:', 'self._normal', '=', '\"\"', 'else:', 'for', 'levelno,', 'code', 'in', 'colors.items():', 'self._colors[levelno]', '=', '\"\\\\033[2;3%dm\"', '%', 'code', 'self._normal', '=', '\"\\\\033[0m\"', 'else:', 'self._normal', '=', '\"\"', 'def', 'format(self,', 'record:', 'Any)', '->', 'str:', 'try:', 'message', '=', 'record.getMessage()', 'assert', 'isinstance(message,', 'basestring_type)', 'record.message', '=', '_safe_unicode(message)', 'except', 'Exception', 'as', 'e:', 'record.message', '=', '\"Bad', 'message', '(%r):', '%r\"', '%', '(e,', 'record.__dict__)', 'record.asctime', '=', 'self.formatTime(record,', 'cast(str,', 'self.datefmt))', 'if', 'record.levelno', 'in', 'self._colors:', 'record.color', '=', 'self._colors[record.levelno]', 'record.end_color', '=', 'self._normal', 'else:', 'record.color', '=', 'record.end_color', '=', '\"\"', 'formatted', '=', 'self._fmt', '%', 'record.__dict__', 'if', 'record.exc_info:', 'if', 'not', 'record.exc_text:', 'record.exc_text', '=', 'self.formatException(record.exc_info)', 'if', 'record.exc_text:', 'lines', '=', '[formatted.rstrip()]', 'lines.extend(_safe_unicode(ln)', 'for', 'ln', 'in', 'record.exc_text.split(\"\\\\n\"))', 'formatted', '=', '\"\\\\n\".join(lines)', 'return', 'formatted.replace(\"\\\\n\",', '\"\\\\n', '\")', 'def', 'enable_pretty_logging(', 'options:', 'Any', '=', 'None,', 'logger:', 'Optional[logging.Logger]', '=', 'None', ')', '->', 'None:', 'if', 'options', 'is', 'None:', 'import', 'tornado.options', 'options', '=', 'tornado.options.options', 'if', 'options.logging', 'is', 'None', 'or', 'options.logging.lower()', '==', '\"none\":', 'return', 'if', 'logger', 'is', 'None:', 'logger', '=', 'logging.getLogger()', 'logger.setLevel(getattr(logging,', 'options.logging.upper()))', 'if', 'options.log_file_prefix:', 'rotate_mode', '=', 'options.log_rotate_mode', 'if', 'rotate_mode', '==', '\"size\":', 'channel', '=', 'logging.handlers.RotatingFileHandler(', 'filename=options.log_file_prefix,', 'maxBytes=options.log_file_max_size,', 'backupCount=options.log_file_num_backups,', 'encoding=\"utf-8\",', ')', 'elif', 'rotate_mode', '==', '\"time\":', 'channel', '=', 'logging.handlers.TimedRotatingFileHandler(', 'filename=options.log_file_prefix,', 'when=options.log_rotate_when,', 'interval=options.log_rotate_interval,', 'backupCount=options.log_file_num_backups,', 'encoding=\"utf-8\",', ')', 'else:', 'error_message', '=', '(', '\"The', 'value', 'of', 'log_rotate_mode', 'option', 'should', 'be', '\"', '+', '\\'\"size\"', 'or', '\"time\",', 'not', '\"%s\".\\'', '%', 'rotate_mode', ')', 'raise', 'ValueError(error_message)', 'channel.setFormatter(LogFormatter(color=False))', 'logger.addHandler(channel)', 'if', 'options.log_to_stderr', 'or', '(options.log_to_stderr', 'is', 'None', 'and', 'not', 'logger.handlers):', 'channel', '=', 'logging.StreamHandler()', 'channel.setFormatter(LogFormatter())', 'logger.addHandler(channel)', 'def', 'define_logging_options(options:', 'Any', '=', 'None)', '->', 'None:', 'if', 'options', 'is', 'None:', 'import', 'tornado.options', 'options', '=', 'tornado.options.options', 'options.define(', '\"logging\",', 'default=\"info\",', 'help=(', '\"Set', 'the', 'Python', 'log', 'level.', 'If', \"'none',\", 'tornado', \"won't\", 'touch', 'the', '\"', '\"logging', 'configuration.\"', '),', 'metavar=\"debug|info|warning|error|none\",', ')', 'options.define(', '\"log_to_stderr\",', 'type=bool,', 'default=None,', 'help=(', '\"Send', 'log', 'output', 'to', 'stderr', '(colorized', 'if', 'possible).', '\"', '\"By', 'default', 'use', 'stderr', 'if', '--log_file_prefix', 'is', 'not', 'set', 'and', '\"', '\"no', 'other', 'logging', 'is', 'configured.\"', '),', ')', 'options.define(', '\"log_file_prefix\",', 'type=str,', 'default=None,', 'metavar=\"PATH\",', 'help=(', '\"Path', 'prefix', 'for', 'log', 'files.', '\"', '\"Note', 'that', 'if', 'you', 'are', 'running', 'multiple', 'tornado', 'processes,', '\"', '\"log_file_prefix', 'must', 'be', 'different', 'for', 'each', 'of', 'them', '(e.g.', '\"', '\"include', 'the', 'port', 'number)\"', '),', ')', 'options.define(', '\"log_file_max_size\",', 'type=int,', 'default=100', '*', '1000', '*', '1000,', 'help=\"max', 'size', 'of', 'log', 'files', 'before', 'rollover\",', ')', 'options.define(', '\"log_file_num_backups\",', 'type=int,', 'default=10,', 'help=\"number', 'of', 'log', 'files', 'to', 'keep\"', ')', 'options.define(', '\"log_rotate_when\",', 'type=str,', 'default=\"midnight\",', 'help=(', '\"specify', 'the', 'type', 'of', 'TimedRotatingFileHandler', 'interval', '\"', '\"other', \"options:('S',\", \"'M',\", \"'H',\", \"'D',\", '\\'W0\\'-\\'W6\\')\"', '),', ')', 'options.define(', '\"log_rotate_interval\",', 'type=int,', 'default=1,', 'help=\"The', 'interval', 'value', 'of', 'timed', 'rotating\",', ')', 'options.define(', '\"log_rotate_mode\",', 'type=str,', 'default=\"size\",', 'help=\"The', 'mode', 'of', 'rotating', 'files(time', 'or', 'size)\",', ')', 'options.add_parse_callback(lambda:', 'enable_pretty_logging(options))']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/netutil.py",
        "vector": "['import', 'asyncio', 'import', 'concurrent.futures', 'import', 'errno', 'import', 'os', 'import', 'sys', 'import', 'socket', 'import', 'ssl', 'import', 'stat', 'from', 'tornado.concurrent', 'import', 'dummy_executor,', 'run_on_executor', 'from', 'tornado.ioloop', 'import', 'IOLoop', 'from', 'tornado.util', 'import', 'Configurable,', 'errno_from_exception', 'from', 'typing', 'import', 'List,', 'Callable,', 'Any,', 'Type,', 'Dict,', 'Union,', 'Tuple,', 'Awaitable,', 'Optional', '_client_ssl_defaults', '=', 'ssl.create_default_context(ssl.Purpose.SERVER_AUTH)', '_server_ssl_defaults', '=', 'ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)', 'if', 'hasattr(ssl,', '\"OP_NO_COMPRESSION\"):', '_client_ssl_defaults.options', '|=', 'ssl.OP_NO_COMPRESSION', '_server_ssl_defaults.options', '|=', 'ssl.OP_NO_COMPRESSION', '\"foo\".encode(\"idna\")', '\"foo\".encode(\"latin1\")', '_DEFAULT_BACKLOG', '=', '128', 'def', 'bind_sockets(', 'port:', 'int,', 'address:', 'Optional[str]', '=', 'None,', 'family:', 'socket.AddressFamily', '=', 'socket.AF_UNSPEC,', 'backlog:', 'int', '=', '_DEFAULT_BACKLOG,', 'flags:', 'Optional[int]', '=', 'None,', 'reuse_port:', 'bool', '=', 'False,', ')', '->', 'List[socket.socket]:', 'if', 'reuse_port', 'and', 'not', 'hasattr(socket,', '\"SO_REUSEPORT\"):', 'raise', 'ValueError(\"the', 'platform', \"doesn't\", 'support', 'SO_REUSEPORT\")', 'sockets', '=', '[]', 'if', 'address', '==', '\"\":', 'address', '=', 'None', 'if', 'not', 'socket.has_ipv6', 'and', 'family', '==', 'socket.AF_UNSPEC:', 'family', '=', 'socket.AF_INET', 'if', 'flags', 'is', 'None:', 'flags', '=', 'socket.AI_PASSIVE', 'bound_port', '=', 'None', 'unique_addresses', '=', 'set()', 'for', 'res', 'in', 'sorted(', 'socket.getaddrinfo(address,', 'port,', 'family,', 'socket.SOCK_STREAM,', '0,', 'flags),', 'key=lambda', 'x:', 'x[0],', '):', 'if', 'res', 'in', 'unique_addresses:', 'continue', 'unique_addresses.add(res)', 'af,', 'socktype,', 'proto,', 'canonname,', 'sockaddr', '=', 'res', 'if', '(', 'sys.platform', '==', '\"darwin\"', 'and', 'address', '==', '\"localhost\"', 'and', 'af', '==', 'socket.AF_INET6', 'and', 'sockaddr[3]', '!=', '0', '):', 'continue', 'try:', 'sock', '=', 'socket.socket(af,', 'socktype,', 'proto)', 'except', 'socket.error', 'as', 'e:', 'if', 'errno_from_exception(e)', '==', 'errno.EAFNOSUPPORT:', 'continue', 'raise', 'if', 'os.name', '!=', '\"nt\":', 'try:', 'sock.setsockopt(socket.SOL_SOCKET,', 'socket.SO_REUSEADDR,', '1)', 'except', 'socket.error', 'as', 'e:', 'if', 'errno_from_exception(e)', '!=', 'errno.ENOPROTOOPT:', 'raise', 'if', 'reuse_port:', 'sock.setsockopt(socket.SOL_SOCKET,', 'socket.SO_REUSEPORT,', '1)', 'if', 'af', '==', 'socket.AF_INET6:', 'if', 'hasattr(socket,', '\"IPPROTO_IPV6\"):', 'sock.setsockopt(socket.IPPROTO_IPV6,', 'socket.IPV6_V6ONLY,', '1)', 'host,', 'requested_port', '=', 'sockaddr[:2]', 'if', 'requested_port', '==', '0', 'and', 'bound_port', 'is', 'not', 'None:', 'sockaddr', '=', 'tuple([host,', 'bound_port]', '+', 'list(sockaddr[2:]))', 'sock.setblocking(False)', 'try:', 'sock.bind(sockaddr)', 'except', 'OSError', 'as', 'e:', 'if', '(', 'errno_from_exception(e)', '==', 'errno.EADDRNOTAVAIL', 'and', 'address', '==', '\"localhost\"', 'and', 'sockaddr[0]', '==', '\"::1\"', '):', 'sock.close()', 'continue', 'else:', 'raise', 'bound_port', '=', 'sock.getsockname()[1]', 'sock.listen(backlog)', 'sockets.append(sock)', 'return', 'sockets', 'if', 'hasattr(socket,', '\"AF_UNIX\"):', 'def', 'bind_unix_socket(', 'file:', 'str,', 'mode:', 'int', '=', '0o600,', 'backlog:', 'int', '=', '_DEFAULT_BACKLOG', ')', '->', 'socket.socket:', 'sock', '=', 'socket.socket(socket.AF_UNIX,', 'socket.SOCK_STREAM)', 'try:', 'sock.setsockopt(socket.SOL_SOCKET,', 'socket.SO_REUSEADDR,', '1)', 'except', 'socket.error', 'as', 'e:', 'if', 'errno_from_exception(e)', '!=', 'errno.ENOPROTOOPT:', 'raise', 'sock.setblocking(False)', 'try:', 'st', '=', 'os.stat(file)', 'except', 'FileNotFoundError:', 'pass', 'else:', 'if', 'stat.S_ISSOCK(st.st_mode):', 'os.remove(file)', 'else:', 'raise', 'ValueError(\"File', '%s', 'exists', 'and', 'is', 'not', 'a', 'socket\",', 'file)', 'sock.bind(file)', 'os.chmod(file,', 'mode)', 'sock.listen(backlog)', 'return', 'sock', 'def', 'add_accept_handler(', 'sock:', 'socket.socket,', 'callback:', 'Callable[[socket.socket,', 'Any],', 'None]', ')', '->', 'Callable[[],', 'None]:', 'io_loop', '=', 'IOLoop.current()', 'removed', '=', '[False]', 'def', 'accept_handler(fd:', 'socket.socket,', 'events:', 'int)', '->', 'None:', 'for', 'i', 'in', 'range(_DEFAULT_BACKLOG):', 'if', 'removed[0]:', 'return', 'try:', 'connection,', 'address', '=', 'sock.accept()', 'except', 'BlockingIOError:', 'return', 'except', 'ConnectionAbortedError:', 'continue', 'callback(connection,', 'address)', 'def', 'remove_handler()', '->', 'None:', 'io_loop.remove_handler(sock)', 'removed[0]', '=', 'True', 'io_loop.add_handler(sock,', 'accept_handler,', 'IOLoop.READ)', 'return', 'remove_handler', 'def', 'is_valid_ip(ip:', 'str)', '->', 'bool:', 'if', 'not', 'ip', 'or', '\"\\\\x00\"', 'in', 'ip:', 'return', 'False', 'try:', 'res', '=', 'socket.getaddrinfo(', 'ip,', '0,', 'socket.AF_UNSPEC,', 'socket.SOCK_STREAM,', '0,', 'socket.AI_NUMERICHOST', ')', 'return', 'bool(res)', 'except', 'socket.gaierror', 'as', 'e:', 'if', 'e.args[0]', '==', 'socket.EAI_NONAME:', 'return', 'False', 'raise', 'except', 'UnicodeError:', 'return', 'False', 'return', 'True', 'class', 'Resolver(Configurable):', '@classmethod', 'def', 'configurable_base(cls)', '->', 'Type[\"Resolver\"]:', 'return', 'Resolver', '@classmethod', 'def', 'configurable_default(cls)', '->', 'Type[\"Resolver\"]:', 'return', 'DefaultLoopResolver', 'def', 'resolve(', 'self,', 'host:', 'str,', 'port:', 'int,', 'family:', 'socket.AddressFamily', '=', 'socket.AF_UNSPEC', ')', '->', 'Awaitable[List[Tuple[int,', 'Any]]]:', 'raise', 'NotImplementedError()', 'def', 'close(self)', '->', 'None:', 'pass', 'def', '_resolve_addr(', 'host:', 'str,', 'port:', 'int,', 'family:', 'socket.AddressFamily', '=', 'socket.AF_UNSPEC', ')', '->', 'List[Tuple[int,', 'Any]]:', 'addrinfo', '=', 'socket.getaddrinfo(host,', 'port,', 'family,', 'socket.SOCK_STREAM)', 'results', '=', '[]', 'for', 'fam,', 'socktype,', 'proto,', 'canonname,', 'address', 'in', 'addrinfo:', 'results.append((fam,', 'address))', 'return', 'results', 'class', 'DefaultExecutorResolver(Resolver):', 'async', 'def', 'resolve(', 'self,', 'host:', 'str,', 'port:', 'int,', 'family:', 'socket.AddressFamily', '=', 'socket.AF_UNSPEC', ')', '->', 'List[Tuple[int,', 'Any]]:', 'result', '=', 'await', 'IOLoop.current().run_in_executor(', 'None,', '_resolve_addr,', 'host,', 'port,', 'family', ')', 'return', 'result', 'class', 'DefaultLoopResolver(Resolver):', 'async', 'def', 'resolve(', 'self,', 'host:', 'str,', 'port:', 'int,', 'family:', 'socket.AddressFamily', '=', 'socket.AF_UNSPEC', ')', '->', 'List[Tuple[int,', 'Any]]:', 'return', '[', '(fam,', 'address)', 'for', 'fam,', '_,', '_,', '_,', 'address', 'in', 'await', 'asyncio.get_running_loop().getaddrinfo(', 'host,', 'port,', 'family=family,', 'type=socket.SOCK_STREAM', ')', ']', 'class', 'ExecutorResolver(Resolver):', 'def', 'initialize(', 'self,', 'executor:', 'Optional[concurrent.futures.Executor]', '=', 'None,', 'close_executor:', 'bool', '=', 'True,', ')', '->', 'None:', 'if', 'executor', 'is', 'not', 'None:', 'self.executor', '=', 'executor', 'self.close_executor', '=', 'close_executor', 'else:', 'self.executor', '=', 'dummy_executor', 'self.close_executor', '=', 'False', 'def', 'close(self)', '->', 'None:', 'if', 'self.close_executor:', 'self.executor.shutdown()', 'self.executor', '=', 'None', '@run_on_executor', 'def', 'resolve(', 'self,', 'host:', 'str,', 'port:', 'int,', 'family:', 'socket.AddressFamily', '=', 'socket.AF_UNSPEC', ')', '->', 'List[Tuple[int,', 'Any]]:', 'return', '_resolve_addr(host,', 'port,', 'family)', 'class', 'BlockingResolver(ExecutorResolver):', 'def', 'initialize(self)', '->', 'None:', 'super().initialize()', 'class', 'ThreadedResolver(ExecutorResolver):', '_threadpool', '=', 'None', '_threadpool_pid', '=', 'None', 'def', 'initialize(self,', 'num_threads:', 'int', '=', '10)', '->', 'None:', 'threadpool', '=', 'ThreadedResolver._create_threadpool(num_threads)', 'super().initialize(executor=threadpool,', 'close_executor=False)', '@classmethod', 'def', '_create_threadpool(', 'cls,', 'num_threads:', 'int', ')', '->', 'concurrent.futures.ThreadPoolExecutor:', 'pid', '=', 'os.getpid()', 'if', 'cls._threadpool_pid', '!=', 'pid:', 'cls._threadpool', '=', 'None', 'if', 'cls._threadpool', 'is', 'None:', 'cls._threadpool', '=', 'concurrent.futures.ThreadPoolExecutor(num_threads)', 'cls._threadpool_pid', '=', 'pid', 'return', 'cls._threadpool', 'class', 'OverrideResolver(Resolver):', 'def', 'initialize(self,', 'resolver:', 'Resolver,', 'mapping:', 'dict)', '->', 'None:', 'self.resolver', '=', 'resolver', 'self.mapping', '=', 'mapping', 'def', 'close(self)', '->', 'None:', 'self.resolver.close()', 'def', 'resolve(', 'self,', 'host:', 'str,', 'port:', 'int,', 'family:', 'socket.AddressFamily', '=', 'socket.AF_UNSPEC', ')', '->', 'Awaitable[List[Tuple[int,', 'Any]]]:', 'if', '(host,', 'port,', 'family)', 'in', 'self.mapping:', 'host,', 'port', '=', 'self.mapping[(host,', 'port,', 'family)]', 'elif', '(host,', 'port)', 'in', 'self.mapping:', 'host,', 'port', '=', 'self.mapping[(host,', 'port)]', 'elif', 'host', 'in', 'self.mapping:', 'host', '=', 'self.mapping[host]', 'return', 'self.resolver.resolve(host,', 'port,', 'family)', '_SSL_CONTEXT_KEYWORDS', '=', 'frozenset(', '[\"ssl_version\",', '\"certfile\",', '\"keyfile\",', '\"cert_reqs\",', '\"ca_certs\",', '\"ciphers\"]', ')', 'def', 'ssl_options_to_context(', 'ssl_options:', 'Union[Dict[str,', 'Any],', 'ssl.SSLContext],', 'server_side:', 'Optional[bool]', '=', 'None,', ')', '->', 'ssl.SSLContext:', 'if', 'isinstance(ssl_options,', 'ssl.SSLContext):', 'return', 'ssl_options', 'assert', 'isinstance(ssl_options,', 'dict)', 'assert', 'all(k', 'in', '_SSL_CONTEXT_KEYWORDS', 'for', 'k', 'in', 'ssl_options),', 'ssl_options', 'default_version', '=', 'ssl.PROTOCOL_TLS', 'if', 'server_side:', 'default_version', '=', 'ssl.PROTOCOL_TLS_SERVER', 'elif', 'server_side', 'is', 'not', 'None:', 'default_version', '=', 'ssl.PROTOCOL_TLS_CLIENT', 'context', '=', 'ssl.SSLContext(ssl_options.get(\"ssl_version\",', 'default_version))', 'if', '\"certfile\"', 'in', 'ssl_options:', 'context.load_cert_chain(', 'ssl_options[\"certfile\"],', 'ssl_options.get(\"keyfile\",', 'None)', ')', 'if', '\"cert_reqs\"', 'in', 'ssl_options:', 'if', 'ssl_options[\"cert_reqs\"]', '==', 'ssl.CERT_NONE:', 'context.check_hostname', '=', 'False', 'context.verify_mode', '=', 'ssl_options[\"cert_reqs\"]', 'if', '\"ca_certs\"', 'in', 'ssl_options:', 'context.load_verify_locations(ssl_options[\"ca_certs\"])', 'if', '\"ciphers\"', 'in', 'ssl_options:', 'context.set_ciphers(ssl_options[\"ciphers\"])', 'if', 'hasattr(ssl,', '\"OP_NO_COMPRESSION\"):', 'context.options', '|=', 'ssl.OP_NO_COMPRESSION', 'return', 'context', 'def', 'ssl_wrap_socket(', 'socket:', 'socket.socket,', 'ssl_options:', 'Union[Dict[str,', 'Any],', 'ssl.SSLContext],', 'server_hostname:', 'Optional[str]', '=', 'None,', 'server_side:', 'Optional[bool]', '=', 'None,', '**kwargs:', 'Any', ')', '->', 'ssl.SSLSocket:', 'context', '=', 'ssl_options_to_context(ssl_options,', 'server_side=server_side)', 'if', 'server_side', 'is', 'None:', 'server_side', '=', 'False', 'assert', 'ssl.HAS_SNI', 'return', 'context.wrap_socket(', 'socket,', 'server_hostname=server_hostname,', 'server_side=server_side,', '**kwargs', ')']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/options.py",
        "vector": "['import', 'datetime', 'import', 'numbers', 'import', 're', 'import', 'sys', 'import', 'os', 'import', 'textwrap', 'from', 'tornado.escape', 'import', '_unicode,', 'native_str', 'from', 'tornado.log', 'import', 'define_logging_options', 'from', 'tornado.util', 'import', 'basestring_type,', 'exec_in', 'from', 'typing', 'import', '(', 'Any,', 'Iterator,', 'Iterable,', 'Tuple,', 'Set,', 'Dict,', 'Callable,', 'List,', 'TextIO,', 'Optional,', ')', 'class', 'Error(Exception):', 'pass', 'class', 'OptionParser(object):', 'def', '__init__(self)', '->', 'None:', 'self.__dict__[\"_options\"]', '=', '{}', 'self.__dict__[\"_parse_callbacks\"]', '=', '[]', 'self.define(', '\"help\",', 'type=bool,', 'help=\"show', 'this', 'help', 'information\",', 'callback=self._help_callback,', ')', 'def', '_normalize_name(self,', 'name:', 'str)', '->', 'str:', 'return', 'name.replace(\"_\",', '\"-\")', 'def', '__getattr__(self,', 'name:', 'str)', '->', 'Any:', 'name', '=', 'self._normalize_name(name)', 'if', 'isinstance(self._options.get(name),', '_Option):', 'return', 'self._options[name].value()', 'raise', 'AttributeError(\"Unrecognized', 'option', '%r\"', '%', 'name)', 'def', '__setattr__(self,', 'name:', 'str,', 'value:', 'Any)', '->', 'None:', 'name', '=', 'self._normalize_name(name)', 'if', 'isinstance(self._options.get(name),', '_Option):', 'return', 'self._options[name].set(value)', 'raise', 'AttributeError(\"Unrecognized', 'option', '%r\"', '%', 'name)', 'def', '__iter__(self)', '->', 'Iterator:', 'return', '(opt.name', 'for', 'opt', 'in', 'self._options.values())', 'def', '__contains__(self,', 'name:', 'str)', '->', 'bool:', 'name', '=', 'self._normalize_name(name)', 'return', 'name', 'in', 'self._options', 'def', '__getitem__(self,', 'name:', 'str)', '->', 'Any:', 'return', 'self.__getattr__(name)', 'def', '__setitem__(self,', 'name:', 'str,', 'value:', 'Any)', '->', 'None:', 'return', 'self.__setattr__(name,', 'value)', 'def', 'items(self)', '->', 'Iterable[Tuple[str,', 'Any]]:', 'return', '[(opt.name,', 'opt.value())', 'for', 'name,', 'opt', 'in', 'self._options.items()]', 'def', 'groups(self)', '->', 'Set[str]:', 'return', 'set(opt.group_name', 'for', 'opt', 'in', 'self._options.values())', 'def', 'group_dict(self,', 'group:', 'str)', '->', 'Dict[str,', 'Any]:', 'return', 'dict(', '(opt.name,', 'opt.value())', 'for', 'name,', 'opt', 'in', 'self._options.items()', 'if', 'not', 'group', 'or', 'group', '==', 'opt.group_name', ')', 'def', 'as_dict(self)', '->', 'Dict[str,', 'Any]:', 'return', 'dict((opt.name,', 'opt.value())', 'for', 'name,', 'opt', 'in', 'self._options.items())', 'def', 'define(', 'self,', 'name:', 'str,', 'default:', 'Any', '=', 'None,', 'type:', 'Optional[type]', '=', 'None,', 'help:', 'Optional[str]', '=', 'None,', 'metavar:', 'Optional[str]', '=', 'None,', 'multiple:', 'bool', '=', 'False,', 'group:', 'Optional[str]', '=', 'None,', 'callback:', 'Optional[Callable[[Any],', 'None]]', '=', 'None,', ')', '->', 'None:', 'normalized', '=', 'self._normalize_name(name)', 'if', 'normalized', 'in', 'self._options:', 'raise', 'Error(', '\"Option', '%r', 'already', 'defined', 'in', '%s\"', '%', '(normalized,', 'self._options[normalized].file_name)', ')', 'frame', '=', 'sys._getframe(0)', 'if', 'frame', 'is', 'not', 'None:', 'options_file', '=', 'frame.f_code.co_filename', 'if', '(', 'frame.f_back', 'is', 'not', 'None', 'and', 'frame.f_back.f_code.co_filename', '==', 'options_file', 'and', 'frame.f_back.f_code.co_name', '==', '\"define\"', '):', 'frame', '=', 'frame.f_back', 'assert', 'frame.f_back', 'is', 'not', 'None', 'file_name', '=', 'frame.f_back.f_code.co_filename', 'else:', 'file_name', '=', '\"<unknown>\"', 'if', 'file_name', '==', 'options_file:', 'file_name', '=', '\"\"', 'if', 'type', 'is', 'None:', 'if', 'not', 'multiple', 'and', 'default', 'is', 'not', 'None:', 'type', '=', 'default.__class__', 'else:', 'type', '=', 'str', 'if', 'group:', 'group_name', '=', 'group', 'else:', 'group_name', '=', 'file_name', 'option', '=', '_Option(', 'name,', 'file_name=file_name,', 'default=default,', 'type=type,', 'help=help,', 'metavar=metavar,', 'multiple=multiple,', 'group_name=group_name,', 'callback=callback,', ')', 'self._options[normalized]', '=', 'option', 'def', 'parse_command_line(', 'self,', 'args:', 'Optional[List[str]]', '=', 'None,', 'final:', 'bool', '=', 'True', ')', '->', 'List[str]:', 'if', 'args', 'is', 'None:', 'args', '=', 'sys.argv', 'remaining', '=', '[]', 'for', 'i', 'in', 'range(1,', 'len(args)):', 'if', 'not', 'args[i].startswith(\"-\"):', 'remaining', '=', 'args[i:]', 'break', 'if', 'args[i]', '==', '\"--\":', 'remaining', '=', 'args[i', '+', '1', ':]', 'break', 'arg', '=', 'args[i].lstrip(\"-\")', 'name,', 'equals,', 'value', '=', 'arg.partition(\"=\")', 'name', '=', 'self._normalize_name(name)', 'if', 'name', 'not', 'in', 'self._options:', 'self.print_help()', 'raise', 'Error(\"Unrecognized', 'command', 'line', 'option:', '%r\"', '%', 'name)', 'option', '=', 'self._options[name]', 'if', 'not', 'equals:', 'if', 'option.type', '==', 'bool:', 'value', '=', '\"true\"', 'else:', 'raise', 'Error(\"Option', '%r', 'requires', 'a', 'value\"', '%', 'name)', 'option.parse(value)', 'if', 'final:', 'self.run_parse_callbacks()', 'return', 'remaining', 'def', 'parse_config_file(self,', 'path:', 'str,', 'final:', 'bool', '=', 'True)', '->', 'None:', 'config', '=', '{\"__file__\":', 'os.path.abspath(path)}', 'with', 'open(path,', '\"rb\")', 'as', 'f:', 'exec_in(native_str(f.read()),', 'config,', 'config)', 'for', 'name', 'in', 'config:', 'normalized', '=', 'self._normalize_name(name)', 'if', 'normalized', 'in', 'self._options:', 'option', '=', 'self._options[normalized]', 'if', 'option.multiple:', 'if', 'not', 'isinstance(config[name],', '(list,', 'str)):', 'raise', 'Error(', '\"Option', '%r', 'is', 'required', 'to', 'be', 'a', 'list', 'of', '%s', '\"', '\"or', 'a', 'comma-separated', 'string\"', '%', '(option.name,', 'option.type.__name__)', ')', 'if', 'type(config[name])', '==', 'str', 'and', '(', 'option.type', '!=', 'str', 'or', 'option.multiple', '):', 'option.parse(config[name])', 'else:', 'option.set(config[name])', 'if', 'final:', 'self.run_parse_callbacks()', 'def', 'print_help(self,', 'file:', 'Optional[TextIO]', '=', 'None)', '->', 'None:', 'if', 'file', 'is', 'None:', 'file', '=', 'sys.stderr', 'print(\"Usage:', '%s', '[OPTIONS]\"', '%', 'sys.argv[0],', 'file=file)', 'print(\"\\\\nOptions:\\\\n\",', 'file=file)', 'by_group', '=', '{}', 'for', 'option', 'in', 'self._options.values():', 'by_group.setdefault(option.group_name,', '[]).append(option)', 'for', 'filename,', 'o', 'in', 'sorted(by_group.items()):', 'if', 'filename:', 'print(\"\\\\n%s', 'options:\\\\n\"', '%', 'os.path.normpath(filename),', 'file=file)', 'o.sort(key=lambda', 'option:', 'option.name)', 'for', 'option', 'in', 'o:', 'prefix', '=', 'self._normalize_name(option.name)', 'if', 'option.metavar:', 'prefix', '+=', '\"=\"', '+', 'option.metavar', 'description', '=', 'option.help', 'or', '\"\"', 'if', 'option.default', 'is', 'not', 'None', 'and', 'option.default', '!=', '\"\":', 'description', '+=', '\"', '(default', '%s)\"', '%', 'option.default', 'lines', '=', 'textwrap.wrap(description,', '79', '-', '35)', 'if', 'len(prefix)', '>', '30', 'or', 'len(lines)', '==', '0:', 'lines.insert(0,', '\"\")', 'print(\"', '--%-30s', '%s\"', '%', '(prefix,', 'lines[0]),', 'file=file)', 'for', 'line', 'in', 'lines[1:]:', 'print(\"%-34s', '%s\"', '%', '(\"', '\",', 'line),', 'file=file)', 'print(file=file)', 'def', '_help_callback(self,', 'value:', 'bool)', '->', 'None:', 'if', 'value:', 'self.print_help()', 'sys.exit(0)', 'def', 'add_parse_callback(self,', 'callback:', 'Callable[[],', 'None])', '->', 'None:', 'self._parse_callbacks.append(callback)', 'def', 'run_parse_callbacks(self)', '->', 'None:', 'for', 'callback', 'in', 'self._parse_callbacks:', 'callback()', 'def', 'mockable(self)', '->', '\"_Mockable\":', 'return', '_Mockable(self)', 'class', '_Mockable(object):', 'def', '__init__(self,', 'options:', 'OptionParser)', '->', 'None:', 'self.__dict__[\"_options\"]', '=', 'options', 'self.__dict__[\"_originals\"]', '=', '{}', 'def', '__getattr__(self,', 'name:', 'str)', '->', 'Any:', 'return', 'getattr(self._options,', 'name)', 'def', '__setattr__(self,', 'name:', 'str,', 'value:', 'Any)', '->', 'None:', 'assert', 'name', 'not', 'in', 'self._originals,', '\"don\\'t', 'reuse', 'mockable', 'objects\"', 'self._originals[name]', '=', 'getattr(self._options,', 'name)', 'setattr(self._options,', 'name,', 'value)', 'def', '__delattr__(self,', 'name:', 'str)', '->', 'None:', 'setattr(self._options,', 'name,', 'self._originals.pop(name))', 'class', '_Option(object):', 'UNSET', '=', 'object()', 'def', '__init__(', 'self,', 'name:', 'str,', 'default:', 'Any', '=', 'None,', 'type:', 'Optional[type]', '=', 'None,', 'help:', 'Optional[str]', '=', 'None,', 'metavar:', 'Optional[str]', '=', 'None,', 'multiple:', 'bool', '=', 'False,', 'file_name:', 'Optional[str]', '=', 'None,', 'group_name:', 'Optional[str]', '=', 'None,', 'callback:', 'Optional[Callable[[Any],', 'None]]', '=', 'None,', ')', '->', 'None:', 'if', 'default', 'is', 'None', 'and', 'multiple:', 'default', '=', '[]', 'self.name', '=', 'name', 'if', 'type', 'is', 'None:', 'raise', 'ValueError(\"type', 'must', 'not', 'be', 'None\")', 'self.type', '=', 'type', 'self.help', '=', 'help', 'self.metavar', '=', 'metavar', 'self.multiple', '=', 'multiple', 'self.file_name', '=', 'file_name', 'self.group_name', '=', 'group_name', 'self.callback', '=', 'callback', 'self.default', '=', 'default', 'self._value', '=', '_Option.UNSET', 'def', 'value(self)', '->', 'Any:', 'return', 'self.default', 'if', 'self._value', 'is', '_Option.UNSET', 'else', 'self._value', 'def', 'parse(self,', 'value:', 'str)', '->', 'Any:', '_parse', '=', '{', 'datetime.datetime:', 'self._parse_datetime,', 'datetime.timedelta:', 'self._parse_timedelta,', 'bool:', 'self._parse_bool,', 'basestring_type:', 'self._parse_string,', '}.get(', 'self.type,', 'self.type', ')', 'if', 'self.multiple:', 'self._value', '=', '[]', 'for', 'part', 'in', 'value.split(\",\"):', 'if', 'issubclass(self.type,', 'numbers.Integral):', 'lo_str,', '_,', 'hi_str', '=', 'part.partition(\":\")', 'lo', '=', '_parse(lo_str)', 'hi', '=', '_parse(hi_str)', 'if', 'hi_str', 'else', 'lo', 'self._value.extend(range(lo,', 'hi', '+', '1))', 'else:', 'self._value.append(_parse(part))', 'else:', 'self._value', '=', '_parse(value)', 'if', 'self.callback', 'is', 'not', 'None:', 'self.callback(self._value)', 'return', 'self.value()', 'def', 'set(self,', 'value:', 'Any)', '->', 'None:', 'if', 'self.multiple:', 'if', 'not', 'isinstance(value,', 'list):', 'raise', 'Error(', '\"Option', '%r', 'is', 'required', 'to', 'be', 'a', 'list', 'of', '%s\"', '%', '(self.name,', 'self.type.__name__)', ')', 'for', 'item', 'in', 'value:', 'if', 'item', 'is', 'not', 'None', 'and', 'not', 'isinstance(item,', 'self.type):', 'raise', 'Error(', '\"Option', '%r', 'is', 'required', 'to', 'be', 'a', 'list', 'of', '%s\"', '%', '(self.name,', 'self.type.__name__)', ')', 'else:', 'if', 'value', 'is', 'not', 'None', 'and', 'not', 'isinstance(value,', 'self.type):', 'raise', 'Error(', '\"Option', '%r', 'is', 'required', 'to', 'be', 'a', '%s', '(%s', 'given)\"', '%', '(self.name,', 'self.type.__name__,', 'type(value))', ')', 'self._value', '=', 'value', 'if', 'self.callback', 'is', 'not', 'None:', 'self.callback(self._value)', '_DATETIME_FORMATS', '=', '[', '\"%a', '%b', '%d', '%H:%M:%S', '%Y\",', '\"%Y-%m-%d', '%H:%M:%S\",', '\"%Y-%m-%d', '%H:%M\",', '\"%Y-%m-%dT%H:%M\",', '\"%Y%m%d', '%H:%M:%S\",', '\"%Y%m%d', '%H:%M\",', '\"%Y-%m-%d\",', '\"%Y%m%d\",', '\"%H:%M:%S\",', '\"%H:%M\",', ']', 'def', '_parse_datetime(self,', 'value:', 'str)', '->', 'datetime.datetime:', 'for', 'format', 'in', 'self._DATETIME_FORMATS:', 'try:', 'return', 'datetime.datetime.strptime(value,', 'format)', 'except', 'ValueError:', 'pass', 'raise', 'Error(\"Unrecognized', 'date/time', 'format:', '%r\"', '%', 'value)', '_TIMEDELTA_ABBREV_DICT', '=', '{', '\"h\":', '\"hours\",', '\"m\":', '\"minutes\",', '\"min\":', '\"minutes\",', '\"s\":', '\"seconds\",', '\"sec\":', '\"seconds\",', '\"ms\":', '\"milliseconds\",', '\"us\":', '\"microseconds\",', '\"d\":', '\"days\",', '\"w\":', '\"weeks\",', '}', '_FLOAT_PATTERN', '=', 'r\"[-+]?(?:\\\\d+(?:\\\\.\\\\d*)?|\\\\.\\\\d+)(?:[eE][-+]?\\\\d+)?\"', '_TIMEDELTA_PATTERN', '=', 're.compile(', 'r\"\\\\s*(%s)\\\\s*(\\\\w*)\\\\s*\"', '%', '_FLOAT_PATTERN,', 're.IGNORECASE', ')', 'def', '_parse_timedelta(self,', 'value:', 'str)', '->', 'datetime.timedelta:', 'try:', 'sum', '=', 'datetime.timedelta()', 'start', '=', '0', 'while', 'start', '<', 'len(value):', 'm', '=', 'self._TIMEDELTA_PATTERN.match(value,', 'start)', 'if', 'not', 'm:', 'raise', 'Exception()', 'num', '=', 'float(m.group(1))', 'units', '=', 'm.group(2)', 'or', '\"seconds\"', 'units', '=', 'self._TIMEDELTA_ABBREV_DICT.get(units,', 'units)', 'sum', '+=', 'datetime.timedelta(**{units:', 'num})', 'start', '=', 'm.end()', 'return', 'sum', 'except', 'Exception:', 'raise', 'def', '_parse_bool(self,', 'value:', 'str)', '->', 'bool:', 'return', 'value.lower()', 'not', 'in', '(\"false\",', '\"0\",', '\"f\")', 'def', '_parse_string(self,', 'value:', 'str)', '->', 'str:', 'return', '_unicode(value)', 'options', '=', 'OptionParser()', 'def', 'define(', 'name:', 'str,', 'default:', 'Any', '=', 'None,', 'type:', 'Optional[type]', '=', 'None,', 'help:', 'Optional[str]', '=', 'None,', 'metavar:', 'Optional[str]', '=', 'None,', 'multiple:', 'bool', '=', 'False,', 'group:', 'Optional[str]', '=', 'None,', 'callback:', 'Optional[Callable[[Any],', 'None]]', '=', 'None,', ')', '->', 'None:', 'return', 'options.define(', 'name,', 'default=default,', 'type=type,', 'help=help,', 'metavar=metavar,', 'multiple=multiple,', 'group=group,', 'callback=callback,', ')', 'def', 'parse_command_line(', 'args:', 'Optional[List[str]]', '=', 'None,', 'final:', 'bool', '=', 'True', ')', '->', 'List[str]:', 'return', 'options.parse_command_line(args,', 'final=final)', 'def', 'parse_config_file(path:', 'str,', 'final:', 'bool', '=', 'True)', '->', 'None:', 'return', 'options.parse_config_file(path,', 'final=final)', 'def', 'print_help(file:', 'Optional[TextIO]', '=', 'None)', '->', 'None:', 'return', 'options.print_help(file)', 'def', 'add_parse_callback(callback:', 'Callable[[],', 'None])', '->', 'None:', 'options.add_parse_callback(callback)', 'define_logging_options(options)']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/platform/__init__.py",
        "vector": "[]"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/platform/asyncio.py",
        "vector": "['import', 'asyncio', 'import', 'atexit', 'import', 'concurrent.futures', 'import', 'errno', 'import', 'functools', 'import', 'select', 'import', 'socket', 'import', 'sys', 'import', 'threading', 'import', 'typing', 'import', 'warnings', 'from', 'tornado.gen', 'import', 'convert_yielded', 'from', 'tornado.ioloop', 'import', 'IOLoop,', '_Selectable', 'from', 'typing', 'import', '(', 'Any,', 'Callable,', 'Dict,', 'List,', 'Optional,', 'Protocol,', 'Set,', 'Tuple,', 'TypeVar,', 'Union,', ')', 'class', '_HasFileno(Protocol):', 'def', 'fileno(self)', '->', 'int:', 'pass', '_FileDescriptorLike', '=', 'Union[int,', '_HasFileno]', '_T', '=', 'TypeVar(\"_T\")', '_selector_loops:', 'Set[\"SelectorThread\"]', '=', 'set()', 'def', '_atexit_callback()', '->', 'None:', 'for', 'loop', 'in', '_selector_loops:', 'with', 'loop._select_cond:', 'loop._closing_selector', '=', 'True', 'loop._select_cond.notify()', 'try:', 'loop._waker_w.send(b\"a\")', 'except', 'BlockingIOError:', 'pass', 'if', 'loop._thread', 'is', 'not', 'None:', 'loop._thread.join()', '_selector_loops.clear()', 'atexit.register(_atexit_callback)', 'class', 'BaseAsyncIOLoop(IOLoop):', 'def', 'initialize(', 'self,', 'asyncio_loop:', 'asyncio.AbstractEventLoop,', '**kwargs:', 'Any', ')', '->', 'None:', 'self.asyncio_loop', '=', 'asyncio_loop', 'self.selector_loop', '=', 'asyncio_loop', 'if', 'hasattr(asyncio,', '\"ProactorEventLoop\")', 'and', 'isinstance(', 'asyncio_loop,', 'asyncio.ProactorEventLoop', '):', 'self.selector_loop', '=', 'AddThreadSelectorEventLoop(asyncio_loop)', 'self.handlers:', 'Dict[int,', 'Tuple[Union[int,', '_Selectable],', 'Callable]]', '=', '{}', 'self.readers:', 'Set[int]', '=', 'set()', 'self.writers:', 'Set[int]', '=', 'set()', 'self.closing', '=', 'False', 'for', 'loop', 'in', 'IOLoop._ioloop_for_asyncio.copy():', 'if', 'loop.is_closed():', 'try:', 'del', 'IOLoop._ioloop_for_asyncio[loop]', 'except', 'KeyError:', 'pass', 'existing_loop', '=', 'IOLoop._ioloop_for_asyncio.setdefault(asyncio_loop,', 'self)', 'if', 'existing_loop', 'is', 'not', 'self:', 'raise', 'RuntimeError(', 'f\"IOLoop', '{existing_loop}', 'already', 'associated', 'with', 'asyncio', 'loop', '{asyncio_loop}\"', ')', 'super().initialize(**kwargs)', 'def', 'close(self,', 'all_fds:', 'bool', '=', 'False)', '->', 'None:', 'self.closing', '=', 'True', 'for', 'fd', 'in', 'list(self.handlers):', 'fileobj,', 'handler_func', '=', 'self.handlers[fd]', 'self.remove_handler(fd)', 'if', 'all_fds:', 'self.close_fd(fileobj)', 'del', 'IOLoop._ioloop_for_asyncio[self.asyncio_loop]', 'if', 'self.selector_loop', 'is', 'not', 'self.asyncio_loop:', 'self.selector_loop.close()', 'self.asyncio_loop.close()', 'def', 'add_handler(', 'self,', 'fd:', 'Union[int,', '_Selectable],', 'handler:', 'Callable[...,', 'None],', 'events:', 'int', ')', '->', 'None:', 'fd,', 'fileobj', '=', 'self.split_fd(fd)', 'if', 'fd', 'in', 'self.handlers:', 'raise', 'ValueError(\"fd', '%s', 'added', 'twice\"', '%', 'fd)', 'self.handlers[fd]', '=', '(fileobj,', 'handler)', 'if', 'events', '&', 'IOLoop.READ:', 'self.selector_loop.add_reader(fd,', 'self._handle_events,', 'fd,', 'IOLoop.READ)', 'self.readers.add(fd)', 'if', 'events', '&', 'IOLoop.WRITE:', 'self.selector_loop.add_writer(fd,', 'self._handle_events,', 'fd,', 'IOLoop.WRITE)', 'self.writers.add(fd)', 'def', 'update_handler(self,', 'fd:', 'Union[int,', '_Selectable],', 'events:', 'int)', '->', 'None:', 'fd,', 'fileobj', '=', 'self.split_fd(fd)', 'if', 'events', '&', 'IOLoop.READ:', 'if', 'fd', 'not', 'in', 'self.readers:', 'self.selector_loop.add_reader(fd,', 'self._handle_events,', 'fd,', 'IOLoop.READ)', 'self.readers.add(fd)', 'else:', 'if', 'fd', 'in', 'self.readers:', 'self.selector_loop.remove_reader(fd)', 'self.readers.remove(fd)', 'if', 'events', '&', 'IOLoop.WRITE:', 'if', 'fd', 'not', 'in', 'self.writers:', 'self.selector_loop.add_writer(fd,', 'self._handle_events,', 'fd,', 'IOLoop.WRITE)', 'self.writers.add(fd)', 'else:', 'if', 'fd', 'in', 'self.writers:', 'self.selector_loop.remove_writer(fd)', 'self.writers.remove(fd)', 'def', 'remove_handler(self,', 'fd:', 'Union[int,', '_Selectable])', '->', 'None:', 'fd,', 'fileobj', '=', 'self.split_fd(fd)', 'if', 'fd', 'not', 'in', 'self.handlers:', 'return', 'if', 'fd', 'in', 'self.readers:', 'self.selector_loop.remove_reader(fd)', 'self.readers.remove(fd)', 'if', 'fd', 'in', 'self.writers:', 'self.selector_loop.remove_writer(fd)', 'self.writers.remove(fd)', 'del', 'self.handlers[fd]', 'def', '_handle_events(self,', 'fd:', 'int,', 'events:', 'int)', '->', 'None:', 'fileobj,', 'handler_func', '=', 'self.handlers[fd]', 'handler_func(fileobj,', 'events)', 'def', 'start(self)', '->', 'None:', 'self.asyncio_loop.run_forever()', 'def', 'stop(self)', '->', 'None:', 'self.asyncio_loop.stop()', 'def', 'call_at(', 'self,', 'when:', 'float,', 'callback:', 'Callable,', '*args:', 'Any,', '**kwargs:', 'Any', ')', '->', 'object:', 'return', 'self.asyncio_loop.call_later(', 'max(0,', 'when', '-', 'self.time()),', 'self._run_callback,', 'functools.partial(callback,', '*args,', '**kwargs),', ')', 'def', 'remove_timeout(self,', 'timeout:', 'object)', '->', 'None:', 'timeout.cancel()', 'def', 'add_callback(self,', 'callback:', 'Callable,', '*args:', 'Any,', '**kwargs:', 'Any)', '->', 'None:', 'try:', 'if', 'asyncio.get_running_loop()', 'is', 'self.asyncio_loop:', 'call_soon', '=', 'self.asyncio_loop.call_soon', 'else:', 'call_soon', '=', 'self.asyncio_loop.call_soon_threadsafe', 'except', 'RuntimeError:', 'call_soon', '=', 'self.asyncio_loop.call_soon_threadsafe', 'try:', 'call_soon(self._run_callback,', 'functools.partial(callback,', '*args,', '**kwargs))', 'except', 'RuntimeError:', 'pass', 'except', 'AttributeError:', 'pass', 'def', 'add_callback_from_signal(', 'self,', 'callback:', 'Callable,', '*args:', 'Any,', '**kwargs:', 'Any', ')', '->', 'None:', 'warnings.warn(\"add_callback_from_signal', 'is', 'deprecated\",', 'DeprecationWarning)', 'try:', 'self.asyncio_loop.call_soon_threadsafe(', 'self._run_callback,', 'functools.partial(callback,', '*args,', '**kwargs)', ')', 'except', 'RuntimeError:', 'pass', 'def', 'run_in_executor(', 'self,', 'executor:', 'Optional[concurrent.futures.Executor],', 'func:', 'Callable[...,', '_T],', '*args:', 'Any,', ')', '->', '\"asyncio.Future[_T]\":', 'return', 'self.asyncio_loop.run_in_executor(executor,', 'func,', '*args)', 'def', 'set_default_executor(self,', 'executor:', 'concurrent.futures.Executor)', '->', 'None:', 'return', 'self.asyncio_loop.set_default_executor(executor)', 'class', 'AsyncIOMainLoop(BaseAsyncIOLoop):', 'def', 'initialize(self,', '**kwargs:', 'Any)', '->', 'None:', 'super().initialize(asyncio.get_event_loop(),', '**kwargs)', 'def', '_make_current(self)', '->', 'None:', 'pass', 'class', 'AsyncIOLoop(BaseAsyncIOLoop):', 'def', 'initialize(self,', '**kwargs:', 'Any)', '->', 'None:', 'self.is_current', '=', 'False', 'loop', '=', 'None', 'if', '\"asyncio_loop\"', 'not', 'in', 'kwargs:', 'kwargs[\"asyncio_loop\"]', '=', 'loop', '=', 'asyncio.new_event_loop()', 'try:', 'super().initialize(**kwargs)', 'except', 'Exception:', 'if', 'loop', 'is', 'not', 'None:', 'loop.close()', 'raise', 'def', 'close(self,', 'all_fds:', 'bool', '=', 'False)', '->', 'None:', 'if', 'self.is_current:', 'self._clear_current()', 'super().close(all_fds=all_fds)', 'def', '_make_current(self)', '->', 'None:', 'if', 'not', 'self.is_current:', 'try:', 'self.old_asyncio', '=', 'asyncio.get_event_loop()', 'except', '(RuntimeError,', 'AssertionError):', 'self.old_asyncio', '=', 'None', 'self.is_current', '=', 'True', 'asyncio.set_event_loop(self.asyncio_loop)', 'def', '_clear_current_hook(self)', '->', 'None:', 'if', 'self.is_current:', 'asyncio.set_event_loop(self.old_asyncio)', 'self.is_current', '=', 'False', 'def', 'to_tornado_future(asyncio_future:', 'asyncio.Future)', '->', 'asyncio.Future:', 'return', 'asyncio_future', 'def', 'to_asyncio_future(tornado_future:', 'asyncio.Future)', '->', 'asyncio.Future:', 'return', 'convert_yielded(tornado_future)', 'if', 'sys.platform', '==', '\"win32\"', 'and', 'hasattr(asyncio,', '\"WindowsSelectorEventLoopPolicy\"):', '_BasePolicy', '=', 'asyncio.WindowsSelectorEventLoopPolicy', 'else:', '_BasePolicy', '=', 'asyncio.DefaultEventLoopPolicy', 'class', 'AnyThreadEventLoopPolicy(_BasePolicy):', 'def', '__init__(self)', '->', 'None:', 'super().__init__()', 'warnings.warn(', '\"AnyThreadEventLoopPolicy', 'is', 'deprecated,', 'use', 'asyncio.run', '\"', '\"or', 'asyncio.new_event_loop', 'instead\",', 'DeprecationWarning,', 'stacklevel=2,', ')', 'def', 'get_event_loop(self)', '->', 'asyncio.AbstractEventLoop:', 'try:', 'return', 'super().get_event_loop()', 'except', 'RuntimeError:', 'loop', '=', 'self.new_event_loop()', 'self.set_event_loop(loop)', 'return', 'loop', 'class', 'SelectorThread:', '_closed', '=', 'False', 'def', '__init__(self,', 'real_loop:', 'asyncio.AbstractEventLoop)', '->', 'None:', 'self._real_loop', '=', 'real_loop', 'self._select_cond', '=', 'threading.Condition()', 'self._select_args:', 'Optional[', 'Tuple[List[_FileDescriptorLike],', 'List[_FileDescriptorLike]]', ']', '=', 'None', 'self._closing_selector', '=', 'False', 'self._thread:', 'Optional[threading.Thread]', '=', 'None', 'self._thread_manager_handle', '=', 'self._thread_manager()', 'async', 'def', 'thread_manager_anext()', '->', 'None:', 'await', 'self._thread_manager_handle.__anext__()', 'self._real_loop.call_soon(', 'lambda:', 'self._real_loop.create_task(thread_manager_anext())', ')', 'self._readers:', 'Dict[_FileDescriptorLike,', 'Callable]', '=', '{}', 'self._writers:', 'Dict[_FileDescriptorLike,', 'Callable]', '=', '{}', 'self._waker_r,', 'self._waker_w', '=', 'socket.socketpair()', 'self._waker_r.setblocking(False)', 'self._waker_w.setblocking(False)', '_selector_loops.add(self)', 'self.add_reader(self._waker_r,', 'self._consume_waker)', 'def', 'close(self)', '->', 'None:', 'if', 'self._closed:', 'return', 'with', 'self._select_cond:', 'self._closing_selector', '=', 'True', 'self._select_cond.notify()', 'self._wake_selector()', 'if', 'self._thread', 'is', 'not', 'None:', 'self._thread.join()', '_selector_loops.discard(self)', 'self.remove_reader(self._waker_r)', 'self._waker_r.close()', 'self._waker_w.close()', 'self._closed', '=', 'True', 'async', 'def', '_thread_manager(self)', '->', 'typing.AsyncGenerator[None,', 'None]:', 'self._thread', '=', 'threading.Thread(', 'name=\"Tornado', 'selector\",', 'daemon=True,', 'target=self._run_select,', ')', 'self._thread.start()', 'self._start_select()', 'try:', 'yield', 'except', 'GeneratorExit:', 'self.close()', 'raise', 'def', '_wake_selector(self)', '->', 'None:', 'if', 'self._closed:', 'return', 'try:', 'self._waker_w.send(b\"a\")', 'except', 'BlockingIOError:', 'pass', 'def', '_consume_waker(self)', '->', 'None:', 'try:', 'self._waker_r.recv(1024)', 'except', 'BlockingIOError:', 'pass', 'def', '_start_select(self)', '->', 'None:', 'with', 'self._select_cond:', 'assert', 'self._select_args', 'is', 'None', 'self._select_args', '=', '(list(self._readers.keys()),', 'list(self._writers.keys()))', 'self._select_cond.notify()', 'def', '_run_select(self)', '->', 'None:', 'while', 'True:', 'with', 'self._select_cond:', 'while', 'self._select_args', 'is', 'None', 'and', 'not', 'self._closing_selector:', 'self._select_cond.wait()', 'if', 'self._closing_selector:', 'return', 'assert', 'self._select_args', 'is', 'not', 'None', 'to_read,', 'to_write', '=', 'self._select_args', 'self._select_args', '=', 'None', 'try:', 'rs,', 'ws,', 'xs', '=', 'select.select(to_read,', 'to_write,', 'to_write)', 'ws', '=', 'ws', '+', 'xs', 'except', 'OSError', 'as', 'e:', 'if', 'e.errno', '==', 'getattr(errno,', '\"WSAENOTSOCK\",', 'errno.EBADF):', 'rs,', '_,', '_', '=', 'select.select([self._waker_r.fileno()],', '[],', '[],', '0)', 'if', 'rs:', 'ws', '=', '[]', 'else:', 'raise', 'else:', 'raise', 'try:', 'self._real_loop.call_soon_threadsafe(self._handle_select,', 'rs,', 'ws)', 'except', 'RuntimeError:', 'pass', 'except', 'AttributeError:', 'pass', 'def', '_handle_select(', 'self,', 'rs:', 'List[_FileDescriptorLike],', 'ws:', 'List[_FileDescriptorLike]', ')', '->', 'None:', 'for', 'r', 'in', 'rs:', 'self._handle_event(r,', 'self._readers)', 'for', 'w', 'in', 'ws:', 'self._handle_event(w,', 'self._writers)', 'self._start_select()', 'def', '_handle_event(', 'self,', 'fd:', '_FileDescriptorLike,', 'cb_map:', 'Dict[_FileDescriptorLike,', 'Callable],', ')', '->', 'None:', 'try:', 'callback', '=', 'cb_map[fd]', 'except', 'KeyError:', 'return', 'callback()', 'def', 'add_reader(', 'self,', 'fd:', '_FileDescriptorLike,', 'callback:', 'Callable[...,', 'None],', '*args:', 'Any', ')', '->', 'None:', 'self._readers[fd]', '=', 'functools.partial(callback,', '*args)', 'self._wake_selector()', 'def', 'add_writer(', 'self,', 'fd:', '_FileDescriptorLike,', 'callback:', 'Callable[...,', 'None],', '*args:', 'Any', ')', '->', 'None:', 'self._writers[fd]', '=', 'functools.partial(callback,', '*args)', 'self._wake_selector()', 'def', 'remove_reader(self,', 'fd:', '_FileDescriptorLike)', '->', 'bool:', 'try:', 'del', 'self._readers[fd]', 'except', 'KeyError:', 'return', 'False', 'self._wake_selector()', 'return', 'True', 'def', 'remove_writer(self,', 'fd:', '_FileDescriptorLike)', '->', 'bool:', 'try:', 'del', 'self._writers[fd]', 'except', 'KeyError:', 'return', 'False', 'self._wake_selector()', 'return', 'True', 'class', 'AddThreadSelectorEventLoop(asyncio.AbstractEventLoop):', 'MY_ATTRIBUTES', '=', '{', '\"_real_loop\",', '\"_selector\",', '\"add_reader\",', '\"add_writer\",', '\"close\",', '\"remove_reader\",', '\"remove_writer\",', '}', 'def', '__getattribute__(self,', 'name:', 'str)', '->', 'Any:', 'if', 'name', 'in', 'AddThreadSelectorEventLoop.MY_ATTRIBUTES:', 'return', 'super().__getattribute__(name)', 'return', 'getattr(self._real_loop,', 'name)', 'def', '__init__(self,', 'real_loop:', 'asyncio.AbstractEventLoop)', '->', 'None:', 'self._real_loop', '=', 'real_loop', 'self._selector', '=', 'SelectorThread(real_loop)', 'def', 'close(self)', '->', 'None:', 'self._selector.close()', 'self._real_loop.close()', 'def', 'add_reader(', 'self,', 'fd:', '\"_FileDescriptorLike\",', 'callback:', 'Callable[...,', 'None],', '*args:', 'Any', ')', '->', 'None:', 'return', 'self._selector.add_reader(fd,', 'callback,', '*args)', 'def', 'add_writer(', 'self,', 'fd:', '\"_FileDescriptorLike\",', 'callback:', 'Callable[...,', 'None],', '*args:', 'Any', ')', '->', 'None:', 'return', 'self._selector.add_writer(fd,', 'callback,', '*args)', 'def', 'remove_reader(self,', 'fd:', '\"_FileDescriptorLike\")', '->', 'bool:', 'return', 'self._selector.remove_reader(fd)', 'def', 'remove_writer(self,', 'fd:', '\"_FileDescriptorLike\")', '->', 'bool:', 'return', 'self._selector.remove_writer(fd)']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/platform/caresresolver.py",
        "vector": "['import', 'pycares', 'import', 'socket', 'from', 'tornado.concurrent', 'import', 'Future', 'from', 'tornado', 'import', 'gen', 'from', 'tornado.ioloop', 'import', 'IOLoop', 'from', 'tornado.netutil', 'import', 'Resolver,', 'is_valid_ip', 'import', 'typing', 'if', 'typing.TYPE_CHECKING:', 'from', 'typing', 'import', 'Generator,', 'Any,', 'List,', 'Tuple,', 'Dict', 'class', 'CaresResolver(Resolver):', 'def', 'initialize(self)', '->', 'None:', 'self.io_loop', '=', 'IOLoop.current()', 'self.channel', '=', 'pycares.Channel(sock_state_cb=self._sock_state_cb)', 'self.fds', '=', '{}', 'def', '_sock_state_cb(self,', 'fd:', 'int,', 'readable:', 'bool,', 'writable:', 'bool)', '->', 'None:', 'state', '=', '(IOLoop.READ', 'if', 'readable', 'else', '0)', '|', '(IOLoop.WRITE', 'if', 'writable', 'else', '0)', 'if', 'not', 'state:', 'self.io_loop.remove_handler(fd)', 'del', 'self.fds[fd]', 'elif', 'fd', 'in', 'self.fds:', 'self.io_loop.update_handler(fd,', 'state)', 'self.fds[fd]', '=', 'state', 'else:', 'self.io_loop.add_handler(fd,', 'self._handle_events,', 'state)', 'self.fds[fd]', '=', 'state', 'def', '_handle_events(self,', 'fd:', 'int,', 'events:', 'int)', '->', 'None:', 'read_fd', '=', 'pycares.ARES_SOCKET_BAD', 'write_fd', '=', 'pycares.ARES_SOCKET_BAD', 'if', 'events', '&', 'IOLoop.READ:', 'read_fd', '=', 'fd', 'if', 'events', '&', 'IOLoop.WRITE:', 'write_fd', '=', 'fd', 'self.channel.process_fd(read_fd,', 'write_fd)', '@gen.coroutine', 'def', 'resolve(', 'self,', 'host:', 'str,', 'port:', 'int,', 'family:', 'int', '=', '0', ')', '->', '\"Generator[Any,', 'Any,', 'List[Tuple[int,', 'Any]]]\":', 'if', 'is_valid_ip(host):', 'addresses', '=', '[host]', 'else:', 'fut', '=', 'Future()', 'self.channel.gethostbyname(', 'host,', 'family,', 'lambda', 'result,', 'error:', 'fut.set_result((result,', 'error))', ')', 'result,', 'error', '=', 'yield', 'fut', 'if', 'error:', 'raise', 'IOError(', '\"C-Ares', 'returned', 'error', '%s:', '%s', 'while', 'resolving', '%s\"', '%', '(error,', 'pycares.errno.strerror(error),', 'host)', ')', 'addresses', '=', 'result.addresses', 'addrinfo', '=', '[]', 'for', 'address', 'in', 'addresses:', 'if', '\".\"', 'in', 'address:', 'address_family', '=', 'socket.AF_INET', 'elif', '\":\"', 'in', 'address:', 'address_family', '=', 'socket.AF_INET6', 'else:', 'address_family', '=', 'socket.AF_UNSPEC', 'if', 'family', '!=', 'socket.AF_UNSPEC', 'and', 'family', '!=', 'address_family:', 'raise', 'IOError(', '\"Requested', 'socket', 'family', '%d', 'but', 'got', '%d\"', '%', '(family,', 'address_family)', ')', 'addrinfo.append((typing.cast(int,', 'address_family),', '(address,', 'port)))', 'return', 'addrinfo']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/platform/twisted.py",
        "vector": "['import', 'socket', 'import', 'sys', 'import', 'twisted.internet.abstract', 'import', 'twisted.internet.asyncioreactor', 'from', 'twisted.internet.defer', 'import', 'Deferred', 'from', 'twisted.python', 'import', 'failure', 'import', 'twisted.names.cache', 'import', 'twisted.names.client', 'import', 'twisted.names.hosts', 'import', 'twisted.names.resolve', 'from', 'tornado.concurrent', 'import', 'Future,', 'future_set_exc_info', 'from', 'tornado.escape', 'import', 'utf8', 'from', 'tornado', 'import', 'gen', 'from', 'tornado.netutil', 'import', 'Resolver', 'import', 'typing', 'if', 'typing.TYPE_CHECKING:', 'from', 'typing', 'import', 'Generator,', 'Any,', 'List,', 'Tuple', 'class', 'TwistedResolver(Resolver):', 'def', 'initialize(self)', '->', 'None:', 'self.reactor', '=', 'twisted.internet.asyncioreactor.AsyncioSelectorReactor()', 'host_resolver', '=', 'twisted.names.hosts.Resolver(\"/etc/hosts\")', 'cache_resolver', '=', 'twisted.names.cache.CacheResolver(reactor=self.reactor)', 'real_resolver', '=', 'twisted.names.client.Resolver(', '\"/etc/resolv.conf\",', 'reactor=self.reactor', ')', 'self.resolver', '=', 'twisted.names.resolve.ResolverChain(', '[host_resolver,', 'cache_resolver,', 'real_resolver]', ')', '@gen.coroutine', 'def', 'resolve(', 'self,', 'host:', 'str,', 'port:', 'int,', 'family:', 'int', '=', '0', ')', '->', '\"Generator[Any,', 'Any,', 'List[Tuple[int,', 'Any]]]\":', 'if', 'twisted.internet.abstract.isIPAddress(host):', 'resolved', '=', 'host', 'resolved_family', '=', 'socket.AF_INET', 'elif', 'twisted.internet.abstract.isIPv6Address(host):', 'resolved', '=', 'host', 'resolved_family', '=', 'socket.AF_INET6', 'else:', 'deferred', '=', 'self.resolver.getHostByName(utf8(host))', 'fut', '=', 'Future()', 'deferred.addBoth(fut.set_result)', 'resolved', '=', 'yield', 'fut', 'if', 'isinstance(resolved,', 'failure.Failure):', 'try:', 'resolved.raiseException()', 'except', 'twisted.names.error.DomainError', 'as', 'e:', 'raise', 'IOError(e)', 'elif', 'twisted.internet.abstract.isIPAddress(resolved):', 'resolved_family', '=', 'socket.AF_INET', 'elif', 'twisted.internet.abstract.isIPv6Address(resolved):', 'resolved_family', '=', 'socket.AF_INET6', 'else:', 'resolved_family', '=', 'socket.AF_UNSPEC', 'if', 'family', '!=', 'socket.AF_UNSPEC', 'and', 'family', '!=', 'resolved_family:', 'raise', 'Exception(', '\"Requested', 'socket', 'family', '%d', 'but', 'got', '%d\"', '%', '(family,', 'resolved_family)', ')', 'result', '=', '[(typing.cast(int,', 'resolved_family),', '(resolved,', 'port))]', 'return', 'result', 'def', 'install()', '->', 'None:', 'from', 'twisted.internet.asyncioreactor', 'import', 'install', 'install()', 'if', 'hasattr(gen.convert_yielded,', '\"register\"):', '@gen.convert_yielded.register(Deferred)', 'def', '_(d:', 'Deferred)', '->', 'Future:', 'f', '=', 'Future()', 'def', 'errback(failure:', 'failure.Failure)', '->', 'None:', 'try:', 'failure.raiseException()', 'raise', 'Exception(\"errback', 'called', 'without', 'error\")', 'except:', 'future_set_exc_info(f,', 'sys.exc_info())', 'd.addCallbacks(f.set_result,', 'errback)', 'return', 'f']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/process.py",
        "vector": "['import', 'asyncio', 'import', 'os', 'import', 'multiprocessing', 'import', 'signal', 'import', 'subprocess', 'import', 'sys', 'import', 'time', 'from', 'binascii', 'import', 'hexlify', 'from', 'tornado.concurrent', 'import', '(', 'Future,', 'future_set_result_unless_cancelled,', 'future_set_exception_unless_cancelled,', ')', 'from', 'tornado', 'import', 'ioloop', 'from', 'tornado.iostream', 'import', 'PipeIOStream', 'from', 'tornado.log', 'import', 'gen_log', 'import', 'typing', 'from', 'typing', 'import', 'Optional,', 'Any,', 'Callable', 'if', 'typing.TYPE_CHECKING:', 'from', 'typing', 'import', 'List', 'CalledProcessError', '=', 'subprocess.CalledProcessError', 'def', 'cpu_count()', '->', 'int:', 'if', 'multiprocessing', 'is', 'None:', 'return', '1', 'try:', 'return', 'multiprocessing.cpu_count()', 'except', 'NotImplementedError:', 'pass', 'try:', 'return', 'os.sysconf(\"SC_NPROCESSORS_CONF\")', 'except', '(AttributeError,', 'ValueError):', 'pass', 'gen_log.error(\"Could', 'not', 'detect', 'number', 'of', 'processors;', 'assuming', '1\")', 'return', '1', 'def', '_reseed_random()', '->', 'None:', 'if', '\"random\"', 'not', 'in', 'sys.modules:', 'return', 'import', 'random', 'try:', 'seed', '=', 'int(hexlify(os.urandom(16)),', '16)', 'except', 'NotImplementedError:', 'seed', '=', 'int(time.time()', '*', '1000)', '^', 'os.getpid()', 'random.seed(seed)', '_task_id', '=', 'None', 'def', 'fork_processes(', 'num_processes:', 'Optional[int],', 'max_restarts:', 'Optional[int]', '=', 'None', ')', '->', 'int:', 'if', 'sys.platform', '==', '\"win32\":', 'raise', 'Exception(\"fork', 'not', 'available', 'on', 'windows\")', 'if', 'max_restarts', 'is', 'None:', 'max_restarts', '=', '100', 'global', '_task_id', 'assert', '_task_id', 'is', 'None', 'if', 'num_processes', 'is', 'None', 'or', 'num_processes', '<=', '0:', 'num_processes', '=', 'cpu_count()', 'gen_log.info(\"Starting', '%d', 'processes\",', 'num_processes)', 'children', '=', '{}', 'def', 'start_child(i:', 'int)', '->', 'Optional[int]:', 'pid', '=', 'os.fork()', 'if', 'pid', '==', '0:', '_reseed_random()', 'global', '_task_id', '_task_id', '=', 'i', 'return', 'i', 'else:', 'children[pid]', '=', 'i', 'return', 'None', 'for', 'i', 'in', 'range(num_processes):', 'id', '=', 'start_child(i)', 'if', 'id', 'is', 'not', 'None:', 'return', 'id', 'num_restarts', '=', '0', 'while', 'children:', 'pid,', 'status', '=', 'os.wait()', 'if', 'pid', 'not', 'in', 'children:', 'continue', 'id', '=', 'children.pop(pid)', 'if', 'os.WIFSIGNALED(status):', 'gen_log.warning(', '\"child', '%d', '(pid', '%d)', 'killed', 'by', 'signal', '%d,', 'restarting\",', 'id,', 'pid,', 'os.WTERMSIG(status),', ')', 'elif', 'os.WEXITSTATUS(status)', '!=', '0:', 'gen_log.warning(', '\"child', '%d', '(pid', '%d)', 'exited', 'with', 'status', '%d,', 'restarting\",', 'id,', 'pid,', 'os.WEXITSTATUS(status),', ')', 'else:', 'gen_log.info(\"child', '%d', '(pid', '%d)', 'exited', 'normally\",', 'id,', 'pid)', 'continue', 'num_restarts', '+=', '1', 'if', 'num_restarts', '>', 'max_restarts:', 'raise', 'RuntimeError(\"Too', 'many', 'child', 'restarts,', 'giving', 'up\")', 'new_id', '=', 'start_child(id)', 'if', 'new_id', 'is', 'not', 'None:', 'return', 'new_id', 'sys.exit(0)', 'def', 'task_id()', '->', 'Optional[int]:', 'global', '_task_id', 'return', '_task_id', 'class', 'Subprocess(object):', 'STREAM', '=', 'object()', '_initialized', '=', 'False', '_waiting', '=', '{}', 'def', '__init__(self,', '*args:', 'Any,', '**kwargs:', 'Any)', '->', 'None:', 'self.io_loop', '=', 'ioloop.IOLoop.current()', 'pipe_fds', '=', '[]', 'to_close', '=', '[]', 'if', 'kwargs.get(\"stdin\")', 'is', 'Subprocess.STREAM:', 'in_r,', 'in_w', '=', 'os.pipe()', 'kwargs[\"stdin\"]', '=', 'in_r', 'pipe_fds.extend((in_r,', 'in_w))', 'to_close.append(in_r)', 'self.stdin', '=', 'PipeIOStream(in_w)', 'if', 'kwargs.get(\"stdout\")', 'is', 'Subprocess.STREAM:', 'out_r,', 'out_w', '=', 'os.pipe()', 'kwargs[\"stdout\"]', '=', 'out_w', 'pipe_fds.extend((out_r,', 'out_w))', 'to_close.append(out_w)', 'self.stdout', '=', 'PipeIOStream(out_r)', 'if', 'kwargs.get(\"stderr\")', 'is', 'Subprocess.STREAM:', 'err_r,', 'err_w', '=', 'os.pipe()', 'kwargs[\"stderr\"]', '=', 'err_w', 'pipe_fds.extend((err_r,', 'err_w))', 'to_close.append(err_w)', 'self.stderr', '=', 'PipeIOStream(err_r)', 'try:', 'self.proc', '=', 'subprocess.Popen(*args,', '**kwargs)', 'except:', 'for', 'fd', 'in', 'pipe_fds:', 'os.close(fd)', 'raise', 'for', 'fd', 'in', 'to_close:', 'os.close(fd)', 'self.pid', '=', 'self.proc.pid', 'for', 'attr', 'in', '[\"stdin\",', '\"stdout\",', '\"stderr\"]:', 'if', 'not', 'hasattr(self,', 'attr):', 'setattr(self,', 'attr,', 'getattr(self.proc,', 'attr))', 'self._exit_callback', '=', 'None', 'self.returncode', '=', 'None', 'def', 'set_exit_callback(self,', 'callback:', 'Callable[[int],', 'None])', '->', 'None:', 'self._exit_callback', '=', 'callback', 'Subprocess.initialize()', 'Subprocess._waiting[self.pid]', '=', 'self', 'Subprocess._try_cleanup_process(self.pid)', 'def', 'wait_for_exit(self,', 'raise_error:', 'bool', '=', 'True)', '->', '\"Future[int]\":', 'future', '=', 'Future()', 'def', 'callback(ret:', 'int)', '->', 'None:', 'if', 'ret', '!=', '0', 'and', 'raise_error:', 'future_set_exception_unless_cancelled(', 'future,', 'CalledProcessError(ret,', '\"unknown\")', ')', 'else:', 'future_set_result_unless_cancelled(future,', 'ret)', 'self.set_exit_callback(callback)', 'return', 'future', '@classmethod', 'def', 'initialize(cls)', '->', 'None:', 'if', 'cls._initialized:', 'return', 'loop', '=', 'asyncio.get_event_loop()', 'loop.add_signal_handler(signal.SIGCHLD,', 'cls._cleanup)', 'cls._initialized', '=', 'True', '@classmethod', 'def', 'uninitialize(cls)', '->', 'None:', 'if', 'not', 'cls._initialized:', 'return', 'loop', '=', 'asyncio.get_event_loop()', 'loop.remove_signal_handler(signal.SIGCHLD)', 'cls._initialized', '=', 'False', '@classmethod', 'def', '_cleanup(cls)', '->', 'None:', 'for', 'pid', 'in', 'list(cls._waiting.keys()):', 'cls._try_cleanup_process(pid)', '@classmethod', 'def', '_try_cleanup_process(cls,', 'pid:', 'int)', '->', 'None:', 'try:', 'ret_pid,', 'status', '=', 'os.waitpid(pid,', 'os.WNOHANG)', 'except', 'ChildProcessError:', 'return', 'if', 'ret_pid', '==', '0:', 'return', 'assert', 'ret_pid', '==', 'pid', 'subproc', '=', 'cls._waiting.pop(pid)', 'subproc.io_loop.add_callback(subproc._set_returncode,', 'status)', 'def', '_set_returncode(self,', 'status:', 'int)', '->', 'None:', 'if', 'sys.platform', '==', '\"win32\":', 'self.returncode', '=', '-1', 'else:', 'if', 'os.WIFSIGNALED(status):', 'self.returncode', '=', '-os.WTERMSIG(status)', 'else:', 'assert', 'os.WIFEXITED(status)', 'self.returncode', '=', 'os.WEXITSTATUS(status)', 'self.proc.returncode', '=', 'self.returncode', 'if', 'self._exit_callback:', 'callback', '=', 'self._exit_callback', 'self._exit_callback', '=', 'None', 'callback(self.returncode)']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/queues.py",
        "vector": "['import', 'collections', 'import', 'datetime', 'import', 'heapq', 'from', 'tornado', 'import', 'gen,', 'ioloop', 'from', 'tornado.concurrent', 'import', 'Future,', 'future_set_result_unless_cancelled', 'from', 'tornado.locks', 'import', 'Event', 'from', 'typing', 'import', 'Union,', 'TypeVar,', 'Generic,', 'Awaitable,', 'Optional', 'import', 'typing', 'if', 'typing.TYPE_CHECKING:', 'from', 'typing', 'import', 'Deque,', 'Tuple,', 'Any', '_T', '=', 'TypeVar(\"_T\")', '__all__', '=', '[\"Queue\",', '\"PriorityQueue\",', '\"LifoQueue\",', '\"QueueFull\",', '\"QueueEmpty\"]', 'class', 'QueueEmpty(Exception):', 'pass', 'class', 'QueueFull(Exception):', 'pass', 'def', '_set_timeout(', 'future:', 'Future,', 'timeout:', 'Union[None,', 'float,', 'datetime.timedelta]', ')', '->', 'None:', 'if', 'timeout:', 'def', 'on_timeout()', '->', 'None:', 'if', 'not', 'future.done():', 'future.set_exception(gen.TimeoutError())', 'io_loop', '=', 'ioloop.IOLoop.current()', 'timeout_handle', '=', 'io_loop.add_timeout(timeout,', 'on_timeout)', 'future.add_done_callback(lambda', '_:', 'io_loop.remove_timeout(timeout_handle))', 'class', '_QueueIterator(Generic[_T]):', 'def', '__init__(self,', 'q:', '\"Queue[_T]\")', '->', 'None:', 'self.q', '=', 'q', 'def', '__anext__(self)', '->', 'Awaitable[_T]:', 'return', 'self.q.get()', 'class', 'Queue(Generic[_T]):', '_queue', '=', 'None', 'def', '__init__(self,', 'maxsize:', 'int', '=', '0)', '->', 'None:', 'if', 'maxsize', 'is', 'None:', 'raise', 'TypeError(\"maxsize', \"can't\", 'be', 'None\")', 'if', 'maxsize', '<', '0:', 'raise', 'ValueError(\"maxsize', \"can't\", 'be', 'negative\")', 'self._maxsize', '=', 'maxsize', 'self._init()', 'self._getters', '=', 'collections.deque([])', 'self._putters', '=', 'collections.deque([])', 'self._unfinished_tasks', '=', '0', 'self._finished', '=', 'Event()', 'self._finished.set()', '@property', 'def', 'maxsize(self)', '->', 'int:', 'return', 'self._maxsize', 'def', 'qsize(self)', '->', 'int:', 'return', 'len(self._queue)', 'def', 'empty(self)', '->', 'bool:', 'return', 'not', 'self._queue', 'def', 'full(self)', '->', 'bool:', 'if', 'self.maxsize', '==', '0:', 'return', 'False', 'else:', 'return', 'self.qsize()', '>=', 'self.maxsize', 'def', 'put(', 'self,', 'item:', '_T,', 'timeout:', 'Optional[Union[float,', 'datetime.timedelta]]', '=', 'None', ')', '->', '\"Future[None]\":', 'future', '=', 'Future()', 'try:', 'self.put_nowait(item)', 'except', 'QueueFull:', 'self._putters.append((item,', 'future))', '_set_timeout(future,', 'timeout)', 'else:', 'future.set_result(None)', 'return', 'future', 'def', 'put_nowait(self,', 'item:', '_T)', '->', 'None:', 'self._consume_expired()', 'if', 'self._getters:', 'assert', 'self.empty(),', '\"queue', 'non-empty,', 'why', 'are', 'getters', 'waiting?\"', 'getter', '=', 'self._getters.popleft()', 'self.__put_internal(item)', 'future_set_result_unless_cancelled(getter,', 'self._get())', 'elif', 'self.full():', 'raise', 'QueueFull', 'else:', 'self.__put_internal(item)', 'def', 'get(', 'self,', 'timeout:', 'Optional[Union[float,', 'datetime.timedelta]]', '=', 'None', ')', '->', 'Awaitable[_T]:', 'future', '=', 'Future()', 'try:', 'future.set_result(self.get_nowait())', 'except', 'QueueEmpty:', 'self._getters.append(future)', '_set_timeout(future,', 'timeout)', 'return', 'future', 'def', 'get_nowait(self)', '->', '_T:', 'self._consume_expired()', 'if', 'self._putters:', 'assert', 'self.full(),', '\"queue', 'not', 'full,', 'why', 'are', 'putters', 'waiting?\"', 'item,', 'putter', '=', 'self._putters.popleft()', 'self.__put_internal(item)', 'future_set_result_unless_cancelled(putter,', 'None)', 'return', 'self._get()', 'elif', 'self.qsize():', 'return', 'self._get()', 'else:', 'raise', 'QueueEmpty', 'def', 'task_done(self)', '->', 'None:', 'if', 'self._unfinished_tasks', '<=', '0:', 'raise', 'ValueError(\"task_done()', 'called', 'too', 'many', 'times\")', 'self._unfinished_tasks', '-=', '1', 'if', 'self._unfinished_tasks', '==', '0:', 'self._finished.set()', 'def', 'join(', 'self,', 'timeout:', 'Optional[Union[float,', 'datetime.timedelta]]', '=', 'None', ')', '->', 'Awaitable[None]:', 'return', 'self._finished.wait(timeout)', 'def', '__aiter__(self)', '->', '_QueueIterator[_T]:', 'return', '_QueueIterator(self)', 'def', '_init(self)', '->', 'None:', 'self._queue', '=', 'collections.deque()', 'def', '_get(self)', '->', '_T:', 'return', 'self._queue.popleft()', 'def', '_put(self,', 'item:', '_T)', '->', 'None:', 'self._queue.append(item)', 'def', '__put_internal(self,', 'item:', '_T)', '->', 'None:', 'self._unfinished_tasks', '+=', '1', 'self._finished.clear()', 'self._put(item)', 'def', '_consume_expired(self)', '->', 'None:', 'while', 'self._putters', 'and', 'self._putters[0][1].done():', 'self._putters.popleft()', 'while', 'self._getters', 'and', 'self._getters[0].done():', 'self._getters.popleft()', 'def', '__repr__(self)', '->', 'str:', 'return', '\"<%s', 'at', '%s', '%s>\"', '%', '(type(self).__name__,', 'hex(id(self)),', 'self._format())', 'def', '__str__(self)', '->', 'str:', 'return', '\"<%s', '%s>\"', '%', '(type(self).__name__,', 'self._format())', 'def', '_format(self)', '->', 'str:', 'result', '=', '\"maxsize=%r\"', '%', '(self.maxsize,)', 'if', 'getattr(self,', '\"_queue\",', 'None):', 'result', '+=', '\"', 'queue=%r\"', '%', 'self._queue', 'if', 'self._getters:', 'result', '+=', '\"', 'getters[%s]\"', '%', 'len(self._getters)', 'if', 'self._putters:', 'result', '+=', '\"', 'putters[%s]\"', '%', 'len(self._putters)', 'if', 'self._unfinished_tasks:', 'result', '+=', '\"', 'tasks=%s\"', '%', 'self._unfinished_tasks', 'return', 'result', 'class', 'PriorityQueue(Queue):', 'def', '_init(self)', '->', 'None:', 'self._queue', '=', '[]', 'def', '_put(self,', 'item:', '_T)', '->', 'None:', 'heapq.heappush(self._queue,', 'item)', 'def', '_get(self)', '->', '_T:', 'return', 'heapq.heappop(self._queue)', 'class', 'LifoQueue(Queue):', 'def', '_init(self)', '->', 'None:', 'self._queue', '=', '[]', 'def', '_put(self,', 'item:', '_T)', '->', 'None:', 'self._queue.append(item)', 'def', '_get(self)', '->', '_T:', 'return', 'self._queue.pop()']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/routing.py",
        "vector": "['import', 're', 'from', 'functools', 'import', 'partial', 'from', 'tornado', 'import', 'httputil', 'from', 'tornado.httpserver', 'import', '_CallableAdapter', 'from', 'tornado.escape', 'import', 'url_escape,', 'url_unescape,', 'utf8', 'from', 'tornado.log', 'import', 'app_log', 'from', 'tornado.util', 'import', 'basestring_type,', 'import_object,', 're_unescape,', 'unicode_type', 'from', 'typing', 'import', 'Any,', 'Union,', 'Optional,', 'Awaitable,', 'List,', 'Dict,', 'Pattern,', 'Tuple,', 'overload', 'class', 'Router(httputil.HTTPServerConnectionDelegate):', 'def', 'find_handler(', 'self,', 'request:', 'httputil.HTTPServerRequest,', '**kwargs:', 'Any', ')', '->', 'Optional[httputil.HTTPMessageDelegate]:', 'raise', 'NotImplementedError()', 'def', 'start_request(', 'self,', 'server_conn:', 'object,', 'request_conn:', 'httputil.HTTPConnection', ')', '->', 'httputil.HTTPMessageDelegate:', 'return', '_RoutingDelegate(self,', 'server_conn,', 'request_conn)', 'class', 'ReversibleRouter(Router):', 'def', 'reverse_url(self,', 'name:', 'str,', '*args:', 'Any)', '->', 'Optional[str]:', 'raise', 'NotImplementedError()', 'class', '_RoutingDelegate(httputil.HTTPMessageDelegate):', 'def', '__init__(', 'self,', 'router:', 'Router,', 'server_conn:', 'object,', 'request_conn:', 'httputil.HTTPConnection', ')', '->', 'None:', 'self.server_conn', '=', 'server_conn', 'self.request_conn', '=', 'request_conn', 'self.delegate', '=', 'None', 'self.router', '=', 'router', 'def', 'headers_received(', 'self,', 'start_line:', 'Union[httputil.RequestStartLine,', 'httputil.ResponseStartLine],', 'headers:', 'httputil.HTTPHeaders,', ')', '->', 'Optional[Awaitable[None]]:', 'assert', 'isinstance(start_line,', 'httputil.RequestStartLine)', 'request', '=', 'httputil.HTTPServerRequest(', 'connection=self.request_conn,', 'server_connection=self.server_conn,', 'start_line=start_line,', 'headers=headers,', ')', 'self.delegate', '=', 'self.router.find_handler(request)', 'if', 'self.delegate', 'is', 'None:', 'app_log.debug(', '\"Delegate', 'for', '%s', '%s', 'request', 'not', 'found\",', 'start_line.method,', 'start_line.path,', ')', 'self.delegate', '=', '_DefaultMessageDelegate(self.request_conn)', 'return', 'self.delegate.headers_received(start_line,', 'headers)', 'def', 'data_received(self,', 'chunk:', 'bytes)', '->', 'Optional[Awaitable[None]]:', 'assert', 'self.delegate', 'is', 'not', 'None', 'return', 'self.delegate.data_received(chunk)', 'def', 'finish(self)', '->', 'None:', 'assert', 'self.delegate', 'is', 'not', 'None', 'self.delegate.finish()', 'def', 'on_connection_close(self)', '->', 'None:', 'assert', 'self.delegate', 'is', 'not', 'None', 'self.delegate.on_connection_close()', 'class', '_DefaultMessageDelegate(httputil.HTTPMessageDelegate):', 'def', '__init__(self,', 'connection:', 'httputil.HTTPConnection)', '->', 'None:', 'self.connection', '=', 'connection', 'def', 'finish(self)', '->', 'None:', 'self.connection.write_headers(', 'httputil.ResponseStartLine(\"HTTP/1.1\",', '404,', '\"Not', 'Found\"),', 'httputil.HTTPHeaders(),', ')', 'self.connection.finish()', '_RuleList', '=', 'List[', 'Union[', '\"Rule\",', 'List[Any],', 'Tuple[Union[str,', '\"Matcher\"],', 'Any],', 'Tuple[Union[str,', '\"Matcher\"],', 'Any,', 'Dict[str,', 'Any]],', 'Tuple[Union[str,', '\"Matcher\"],', 'Any,', 'Dict[str,', 'Any],', 'str],', ']', ']', 'class', 'RuleRouter(Router):', 'def', '__init__(self,', 'rules:', 'Optional[_RuleList]', '=', 'None)', '->', 'None:', 'self.rules', '=', '[]', 'if', 'rules:', 'self.add_rules(rules)', 'def', 'add_rules(self,', 'rules:', '_RuleList)', '->', 'None:', 'for', 'rule', 'in', 'rules:', 'if', 'isinstance(rule,', '(tuple,', 'list)):', 'assert', 'len(rule)', 'in', '(2,', '3,', '4)', 'if', 'isinstance(rule[0],', 'basestring_type):', 'rule', '=', 'Rule(PathMatches(rule[0]),', '*rule[1:])', 'else:', 'rule', '=', 'Rule(*rule)', 'self.rules.append(self.process_rule(rule))', 'def', 'process_rule(self,', 'rule:', '\"Rule\")', '->', '\"Rule\":', 'return', 'rule', 'def', 'find_handler(', 'self,', 'request:', 'httputil.HTTPServerRequest,', '**kwargs:', 'Any', ')', '->', 'Optional[httputil.HTTPMessageDelegate]:', 'for', 'rule', 'in', 'self.rules:', 'target_params', '=', 'rule.matcher.match(request)', 'if', 'target_params', 'is', 'not', 'None:', 'if', 'rule.target_kwargs:', 'target_params[\"target_kwargs\"]', '=', 'rule.target_kwargs', 'delegate', '=', 'self.get_target_delegate(', 'rule.target,', 'request,', '**target_params', ')', 'if', 'delegate', 'is', 'not', 'None:', 'return', 'delegate', 'return', 'None', 'def', 'get_target_delegate(', 'self,', 'target:', 'Any,', 'request:', 'httputil.HTTPServerRequest,', '**target_params:', 'Any', ')', '->', 'Optional[httputil.HTTPMessageDelegate]:', 'if', 'isinstance(target,', 'Router):', 'return', 'target.find_handler(request,', '**target_params)', 'elif', 'isinstance(target,', 'httputil.HTTPServerConnectionDelegate):', 'assert', 'request.connection', 'is', 'not', 'None', 'return', 'target.start_request(request.server_connection,', 'request.connection)', 'elif', 'callable(target):', 'assert', 'request.connection', 'is', 'not', 'None', 'return', '_CallableAdapter(', 'partial(target,', '**target_params),', 'request.connection', ')', 'return', 'None', 'class', 'ReversibleRuleRouter(ReversibleRouter,', 'RuleRouter):', 'def', '__init__(self,', 'rules:', 'Optional[_RuleList]', '=', 'None)', '->', 'None:', 'self.named_rules', '=', '{}', 'super().__init__(rules)', 'def', 'process_rule(self,', 'rule:', '\"Rule\")', '->', '\"Rule\":', 'rule', '=', 'super().process_rule(rule)', 'if', 'rule.name:', 'if', 'rule.name', 'in', 'self.named_rules:', 'app_log.warning(', '\"Multiple', 'handlers', 'named', '%s;', 'replacing', 'previous', 'value\",', 'rule.name', ')', 'self.named_rules[rule.name]', '=', 'rule', 'return', 'rule', 'def', 'reverse_url(self,', 'name:', 'str,', '*args:', 'Any)', '->', 'Optional[str]:', 'if', 'name', 'in', 'self.named_rules:', 'return', 'self.named_rules[name].matcher.reverse(*args)', 'for', 'rule', 'in', 'self.rules:', 'if', 'isinstance(rule.target,', 'ReversibleRouter):', 'reversed_url', '=', 'rule.target.reverse_url(name,', '*args)', 'if', 'reversed_url', 'is', 'not', 'None:', 'return', 'reversed_url', 'return', 'None', 'class', 'Rule(object):', 'def', '__init__(', 'self,', 'matcher:', '\"Matcher\",', 'target:', 'Any,', 'target_kwargs:', 'Optional[Dict[str,', 'Any]]', '=', 'None,', 'name:', 'Optional[str]', '=', 'None,', ')', '->', 'None:', 'if', 'isinstance(target,', 'str):', 'target', '=', 'import_object(target)', 'self.matcher', '=', 'matcher', 'self.target', '=', 'target', 'self.target_kwargs', '=', 'target_kwargs', 'if', 'target_kwargs', 'else', '{}', 'self.name', '=', 'name', 'def', 'reverse(self,', '*args:', 'Any)', '->', 'Optional[str]:', 'return', 'self.matcher.reverse(*args)', 'def', '__repr__(self)', '->', 'str:', 'return', '\"%s(%r,', '%s,', 'kwargs=%r,', 'name=%r)\"', '%', '(', 'self.__class__.__name__,', 'self.matcher,', 'self.target,', 'self.target_kwargs,', 'self.name,', ')', 'class', 'Matcher(object):', 'def', 'match(self,', 'request:', 'httputil.HTTPServerRequest)', '->', 'Optional[Dict[str,', 'Any]]:', 'raise', 'NotImplementedError()', 'def', 'reverse(self,', '*args:', 'Any)', '->', 'Optional[str]:', 'return', 'None', 'class', 'AnyMatches(Matcher):', 'def', 'match(self,', 'request:', 'httputil.HTTPServerRequest)', '->', 'Optional[Dict[str,', 'Any]]:', 'return', '{}', 'class', 'HostMatches(Matcher):', 'def', '__init__(self,', 'host_pattern:', 'Union[str,', 'Pattern])', '->', 'None:', 'if', 'isinstance(host_pattern,', 'basestring_type):', 'if', 'not', 'host_pattern.endswith(\"$\"):', 'host_pattern', '+=', '\"$\"', 'self.host_pattern', '=', 're.compile(host_pattern)', 'else:', 'self.host_pattern', '=', 'host_pattern', 'def', 'match(self,', 'request:', 'httputil.HTTPServerRequest)', '->', 'Optional[Dict[str,', 'Any]]:', 'if', 'self.host_pattern.match(request.host_name):', 'return', '{}', 'return', 'None', 'class', 'DefaultHostMatches(Matcher):', 'def', '__init__(self,', 'application:', 'Any,', 'host_pattern:', 'Pattern)', '->', 'None:', 'self.application', '=', 'application', 'self.host_pattern', '=', 'host_pattern', 'def', 'match(self,', 'request:', 'httputil.HTTPServerRequest)', '->', 'Optional[Dict[str,', 'Any]]:', 'if', '\"X-Real-Ip\"', 'not', 'in', 'request.headers:', 'if', 'self.host_pattern.match(self.application.default_host):', 'return', '{}', 'return', 'None', 'class', 'PathMatches(Matcher):', 'def', '__init__(self,', 'path_pattern:', 'Union[str,', 'Pattern])', '->', 'None:', 'if', 'isinstance(path_pattern,', 'basestring_type):', 'if', 'not', 'path_pattern.endswith(\"$\"):', 'path_pattern', '+=', '\"$\"', 'self.regex', '=', 're.compile(path_pattern)', 'else:', 'self.regex', '=', 'path_pattern', 'assert', 'len(self.regex.groupindex)', 'in', '(0,', 'self.regex.groups),', '(', '\"groups', 'in', 'url', 'regexes', 'must', 'either', 'be', 'all', 'named', 'or', 'all', '\"', '\"positional:', '%r\"', '%', 'self.regex.pattern', ')', 'self._path,', 'self._group_count', '=', 'self._find_groups()', 'def', 'match(self,', 'request:', 'httputil.HTTPServerRequest)', '->', 'Optional[Dict[str,', 'Any]]:', 'match', '=', 'self.regex.match(request.path)', 'if', 'match', 'is', 'None:', 'return', 'None', 'if', 'not', 'self.regex.groups:', 'return', '{}', 'path_args', '=', '[]', 'path_kwargs', '=', '{}', 'if', 'self.regex.groupindex:', 'path_kwargs', '=', 'dict(', '(str(k),', '_unquote_or_none(v))', 'for', '(k,', 'v)', 'in', 'match.groupdict().items()', ')', 'else:', 'path_args', '=', '[_unquote_or_none(s)', 'for', 's', 'in', 'match.groups()]', 'return', 'dict(path_args=path_args,', 'path_kwargs=path_kwargs)', 'def', 'reverse(self,', '*args:', 'Any)', '->', 'Optional[str]:', 'if', 'self._path', 'is', 'None:', 'raise', 'ValueError(\"Cannot', 'reverse', 'url', 'regex', '\"', '+', 'self.regex.pattern)', 'assert', 'len(args)', '==', 'self._group_count,', '(', '\"required', 'number', 'of', 'arguments', '\"', '\"not', 'found\"', ')', 'if', 'not', 'len(args):', 'return', 'self._path', 'converted_args', '=', '[]', 'for', 'a', 'in', 'args:', 'if', 'not', 'isinstance(a,', '(unicode_type,', 'bytes)):', 'a', '=', 'str(a)', 'converted_args.append(url_escape(utf8(a),', 'plus=False))', 'return', 'self._path', '%', 'tuple(converted_args)', 'def', '_find_groups(self)', '->', 'Tuple[Optional[str],', 'Optional[int]]:', 'pattern', '=', 'self.regex.pattern', 'if', 'pattern.startswith(\"^\"):', 'pattern', '=', 'pattern[1:]', 'if', 'pattern.endswith(\"$\"):', 'pattern', '=', 'pattern[:-1]', 'if', 'self.regex.groups', '!=', 'pattern.count(\"(\"):', 'return', 'None,', 'None', 'pieces', '=', '[]', 'for', 'fragment', 'in', 'pattern.split(\"(\"):', 'if', '\")\"', 'in', 'fragment:', 'paren_loc', '=', 'fragment.index(\")\")', 'if', 'paren_loc', '>=', '0:', 'try:', 'unescaped_fragment', '=', 're_unescape(fragment[paren_loc', '+', '1', ':])', 'except', 'ValueError:', 'return', '(None,', 'None)', 'pieces.append(\"%s\"', '+', 'unescaped_fragment)', 'else:', 'try:', 'unescaped_fragment', '=', 're_unescape(fragment)', 'except', 'ValueError:', 'return', '(None,', 'None)', 'pieces.append(unescaped_fragment)', 'return', '\"\".join(pieces),', 'self.regex.groups', 'class', 'URLSpec(Rule):', 'def', '__init__(', 'self,', 'pattern:', 'Union[str,', 'Pattern],', 'handler:', 'Any,', 'kwargs:', 'Optional[Dict[str,', 'Any]]', '=', 'None,', 'name:', 'Optional[str]', '=', 'None,', ')', '->', 'None:', 'matcher', '=', 'PathMatches(pattern)', 'super().__init__(matcher,', 'handler,', 'kwargs,', 'name)', 'self.regex', '=', 'matcher.regex', 'self.handler_class', '=', 'self.target', 'self.kwargs', '=', 'kwargs', 'def', '__repr__(self)', '->', 'str:', 'return', '\"%s(%r,', '%s,', 'kwargs=%r,', 'name=%r)\"', '%', '(', 'self.__class__.__name__,', 'self.regex.pattern,', 'self.handler_class,', 'self.kwargs,', 'self.name,', ')', '@overload', 'def', '_unquote_or_none(s:', 'str)', '->', 'bytes:', 'pass', '@overload', 'def', '_unquote_or_none(s:', 'None)', '->', 'None:', 'pass', 'def', '_unquote_or_none(s:', 'Optional[str])', '->', 'Optional[bytes]:', 'if', 's', 'is', 'None:', 'return', 's', 'return', 'url_unescape(s,', 'encoding=None,', 'plus=False)']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/simple_httpclient.py",
        "vector": "['from', 'tornado.escape', 'import', '_unicode', 'from', 'tornado', 'import', 'gen,', 'version', 'from', 'tornado.httpclient', 'import', '(', 'HTTPResponse,', 'HTTPError,', 'AsyncHTTPClient,', 'main,', '_RequestProxy,', 'HTTPRequest,', ')', 'from', 'tornado', 'import', 'httputil', 'from', 'tornado.http1connection', 'import', 'HTTP1Connection,', 'HTTP1ConnectionParameters', 'from', 'tornado.ioloop', 'import', 'IOLoop', 'from', 'tornado.iostream', 'import', 'StreamClosedError,', 'IOStream', 'from', 'tornado.netutil', 'import', '(', 'Resolver,', 'OverrideResolver,', '_client_ssl_defaults,', 'is_valid_ip,', ')', 'from', 'tornado.log', 'import', 'gen_log', 'from', 'tornado.tcpclient', 'import', 'TCPClient', 'import', 'base64', 'import', 'collections', 'import', 'copy', 'import', 'functools', 'import', 're', 'import', 'socket', 'import', 'ssl', 'import', 'sys', 'import', 'time', 'from', 'io', 'import', 'BytesIO', 'import', 'urllib.parse', 'from', 'typing', 'import', 'Dict,', 'Any,', 'Callable,', 'Optional,', 'Type,', 'Union', 'from', 'types', 'import', 'TracebackType', 'import', 'typing', 'if', 'typing.TYPE_CHECKING:', 'from', 'typing', 'import', 'Deque,', 'Tuple,', 'List', 'class', 'HTTPTimeoutError(HTTPError):', 'def', '__init__(self,', 'message:', 'str)', '->', 'None:', 'super().__init__(599,', 'message=message)', 'def', '__str__(self)', '->', 'str:', 'return', 'self.message', 'or', '\"Timeout\"', 'class', 'HTTPStreamClosedError(HTTPError):', 'def', '__init__(self,', 'message:', 'str)', '->', 'None:', 'super().__init__(599,', 'message=message)', 'def', '__str__(self)', '->', 'str:', 'return', 'self.message', 'or', '\"Stream', 'closed\"', 'class', 'SimpleAsyncHTTPClient(AsyncHTTPClient):', 'def', 'initialize(', 'self,', 'max_clients:', 'int', '=', '10,', 'hostname_mapping:', 'Optional[Dict[str,', 'str]]', '=', 'None,', 'max_buffer_size:', 'int', '=', '104857600,', 'resolver:', 'Optional[Resolver]', '=', 'None,', 'defaults:', 'Optional[Dict[str,', 'Any]]', '=', 'None,', 'max_header_size:', 'Optional[int]', '=', 'None,', 'max_body_size:', 'Optional[int]', '=', 'None,', ')', '->', 'None:', 'super().initialize(defaults=defaults)', 'self.max_clients', '=', 'max_clients', 'self.queue', '=', '(', 'collections.deque()', ')', 'self.active', '=', '(', '{}', ')', 'self.waiting', '=', '(', '{}', ')', 'self.max_buffer_size', '=', 'max_buffer_size', 'self.max_header_size', '=', 'max_header_size', 'self.max_body_size', '=', 'max_body_size', 'if', 'resolver:', 'self.resolver', '=', 'resolver', 'self.own_resolver', '=', 'False', 'else:', 'self.resolver', '=', 'Resolver()', 'self.own_resolver', '=', 'True', 'if', 'hostname_mapping', 'is', 'not', 'None:', 'self.resolver', '=', 'OverrideResolver(', 'resolver=self.resolver,', 'mapping=hostname_mapping', ')', 'self.tcp_client', '=', 'TCPClient(resolver=self.resolver)', 'def', 'close(self)', '->', 'None:', 'super().close()', 'if', 'self.own_resolver:', 'self.resolver.close()', 'self.tcp_client.close()', 'def', 'fetch_impl(', 'self,', 'request:', 'HTTPRequest,', 'callback:', 'Callable[[HTTPResponse],', 'None]', ')', '->', 'None:', 'key', '=', 'object()', 'self.queue.append((key,', 'request,', 'callback))', 'assert', 'request.connect_timeout', 'is', 'not', 'None', 'assert', 'request.request_timeout', 'is', 'not', 'None', 'timeout_handle', '=', 'None', 'if', 'len(self.active)', '>=', 'self.max_clients:', 'timeout', '=', '(', 'min(request.connect_timeout,', 'request.request_timeout)', 'or', 'request.connect_timeout', 'or', 'request.request_timeout', ')', 'if', 'timeout:', 'timeout_handle', '=', 'self.io_loop.add_timeout(', 'self.io_loop.time()', '+', 'timeout,', 'functools.partial(self._on_timeout,', 'key,', '\"in', 'request', 'queue\"),', ')', 'self.waiting[key]', '=', '(request,', 'callback,', 'timeout_handle)', 'self._process_queue()', 'if', 'self.queue:', 'gen_log.debug(', '\"max_clients', 'limit', 'reached,', 'request', 'queued.', '\"', '\"%d', 'active,', '%d', 'queued', 'requests.\"', '%', '(len(self.active),', 'len(self.queue))', ')', 'def', '_process_queue(self)', '->', 'None:', 'while', 'self.queue', 'and', 'len(self.active)', '<', 'self.max_clients:', 'key,', 'request,', 'callback', '=', 'self.queue.popleft()', 'if', 'key', 'not', 'in', 'self.waiting:', 'continue', 'self._remove_timeout(key)', 'self.active[key]', '=', '(request,', 'callback)', 'release_callback', '=', 'functools.partial(self._release_fetch,', 'key)', 'self._handle_request(request,', 'release_callback,', 'callback)', 'def', '_connection_class(self)', '->', 'type:', 'return', '_HTTPConnection', 'def', '_handle_request(', 'self,', 'request:', 'HTTPRequest,', 'release_callback:', 'Callable[[],', 'None],', 'final_callback:', 'Callable[[HTTPResponse],', 'None],', ')', '->', 'None:', 'self._connection_class()(', 'self,', 'request,', 'release_callback,', 'final_callback,', 'self.max_buffer_size,', 'self.tcp_client,', 'self.max_header_size,', 'self.max_body_size,', ')', 'def', '_release_fetch(self,', 'key:', 'object)', '->', 'None:', 'del', 'self.active[key]', 'self._process_queue()', 'def', '_remove_timeout(self,', 'key:', 'object)', '->', 'None:', 'if', 'key', 'in', 'self.waiting:', 'request,', 'callback,', 'timeout_handle', '=', 'self.waiting[key]', 'if', 'timeout_handle', 'is', 'not', 'None:', 'self.io_loop.remove_timeout(timeout_handle)', 'del', 'self.waiting[key]', 'def', '_on_timeout(self,', 'key:', 'object,', 'info:', 'Optional[str]', '=', 'None)', '->', 'None:', 'request,', 'callback,', 'timeout_handle', '=', 'self.waiting[key]', 'self.queue.remove((key,', 'request,', 'callback))', 'error_message', '=', '\"Timeout', '{0}\".format(info)', 'if', 'info', 'else', '\"Timeout\"', 'timeout_response', '=', 'HTTPResponse(', 'request,', '599,', 'error=HTTPTimeoutError(error_message),', 'request_time=self.io_loop.time()', '-', 'request.start_time,', ')', 'self.io_loop.add_callback(callback,', 'timeout_response)', 'del', 'self.waiting[key]', 'class', '_HTTPConnection(httputil.HTTPMessageDelegate):', '_SUPPORTED_METHODS', '=', 'set(', '[\"GET\",', '\"HEAD\",', '\"POST\",', '\"PUT\",', '\"DELETE\",', '\"PATCH\",', '\"OPTIONS\"]', ')', 'def', '__init__(', 'self,', 'client:', 'Optional[SimpleAsyncHTTPClient],', 'request:', 'HTTPRequest,', 'release_callback:', 'Callable[[],', 'None],', 'final_callback:', 'Callable[[HTTPResponse],', 'None],', 'max_buffer_size:', 'int,', 'tcp_client:', 'TCPClient,', 'max_header_size:', 'int,', 'max_body_size:', 'int,', ')', '->', 'None:', 'self.io_loop', '=', 'IOLoop.current()', 'self.start_time', '=', 'self.io_loop.time()', 'self.start_wall_time', '=', 'time.time()', 'self.client', '=', 'client', 'self.request', '=', 'request', 'self.release_callback', '=', 'release_callback', 'self.final_callback', '=', 'final_callback', 'self.max_buffer_size', '=', 'max_buffer_size', 'self.tcp_client', '=', 'tcp_client', 'self.max_header_size', '=', 'max_header_size', 'self.max_body_size', '=', 'max_body_size', 'self.code', '=', 'None', 'self.headers', '=', 'None', 'self.chunks', '=', '[]', 'self._decompressor', '=', 'None', 'self._timeout', '=', 'None', 'self._sockaddr', '=', 'None', 'IOLoop.current().add_future(', 'gen.convert_yielded(self.run()),', 'lambda', 'f:', 'f.result()', ')', 'async', 'def', 'run(self)', '->', 'None:', 'try:', 'self.parsed', '=', 'urllib.parse.urlsplit(_unicode(self.request.url))', 'if', 'self.parsed.scheme', 'not', 'in', '(\"http\",', '\"https\"):', 'raise', 'ValueError(\"Unsupported', 'url', 'scheme:', '%s\"', '%', 'self.request.url)', 'netloc', '=', 'self.parsed.netloc', 'if', '\"@\"', 'in', 'netloc:', 'userpass,', '_,', 'netloc', '=', 'netloc.rpartition(\"@\")', 'host,', 'port', '=', 'httputil.split_host_and_port(netloc)', 'if', 'port', 'is', 'None:', 'port', '=', '443', 'if', 'self.parsed.scheme', '==', '\"https\"', 'else', '80', 'if', 're.match(r\"^\\\\[.*\\\\]$\",', 'host):', 'host', '=', 'host[1:-1]', 'self.parsed_hostname', '=', 'host', 'if', 'self.request.allow_ipv6', 'is', 'False:', 'af', '=', 'socket.AF_INET', 'else:', 'af', '=', 'socket.AF_UNSPEC', 'ssl_options', '=', 'self._get_ssl_options(self.parsed.scheme)', 'source_ip', '=', 'None', 'if', 'self.request.network_interface:', 'if', 'is_valid_ip(self.request.network_interface):', 'source_ip', '=', 'self.request.network_interface', 'else:', 'raise', 'ValueError(', '\"Unrecognized', 'IPv4', 'or', 'IPv6', 'address', 'for', 'network_interface,', 'got', '%r\"', '%', '(self.request.network_interface,)', ')', 'if', 'self.request.connect_timeout', 'and', 'self.request.request_timeout:', 'timeout', '=', 'min(', 'self.request.connect_timeout,', 'self.request.request_timeout', ')', 'elif', 'self.request.connect_timeout:', 'timeout', '=', 'self.request.connect_timeout', 'elif', 'self.request.request_timeout:', 'timeout', '=', 'self.request.request_timeout', 'else:', 'timeout', '=', '0', 'if', 'timeout:', 'self._timeout', '=', 'self.io_loop.add_timeout(', 'self.start_time', '+', 'timeout,', 'functools.partial(self._on_timeout,', '\"while', 'connecting\"),', ')', 'stream', '=', 'await', 'self.tcp_client.connect(', 'host,', 'port,', 'af=af,', 'ssl_options=ssl_options,', 'max_buffer_size=self.max_buffer_size,', 'source_ip=source_ip,', ')', 'if', 'self.final_callback', 'is', 'None:', 'stream.close()', 'return', 'self.stream', '=', 'stream', 'self.stream.set_close_callback(self.on_connection_close)', 'self._remove_timeout()', 'if', 'self.final_callback', 'is', 'None:', 'return', 'if', 'self.request.request_timeout:', 'self._timeout', '=', 'self.io_loop.add_timeout(', 'self.start_time', '+', 'self.request.request_timeout,', 'functools.partial(self._on_timeout,', '\"during', 'request\"),', ')', 'if', '(', 'self.request.method', 'not', 'in', 'self._SUPPORTED_METHODS', 'and', 'not', 'self.request.allow_nonstandard_methods', '):', 'raise', 'KeyError(\"unknown', 'method', '%s\"', '%', 'self.request.method)', 'for', 'key', 'in', '(', '\"proxy_host\",', '\"proxy_port\",', '\"proxy_username\",', '\"proxy_password\",', '\"proxy_auth_mode\",', '):', 'if', 'getattr(self.request,', 'key,', 'None):', 'raise', 'NotImplementedError(\"%s', 'not', 'supported\"', '%', 'key)', 'if', '\"Connection\"', 'not', 'in', 'self.request.headers:', 'self.request.headers[\"Connection\"]', '=', '\"close\"', 'if', '\"Host\"', 'not', 'in', 'self.request.headers:', 'if', '\"@\"', 'in', 'self.parsed.netloc:', 'self.request.headers[\"Host\"]', '=', 'self.parsed.netloc.rpartition(\"@\")[', '-1', ']', 'else:', 'self.request.headers[\"Host\"]', '=', 'self.parsed.netloc', 'username,', 'password', '=', 'None,', 'None', 'if', 'self.parsed.username', 'is', 'not', 'None:', 'username,', 'password', '=', 'self.parsed.username,', 'self.parsed.password', 'elif', 'self.request.auth_username', 'is', 'not', 'None:', 'username', '=', 'self.request.auth_username', 'password', '=', 'self.request.auth_password', 'or', '\"\"', 'if', 'username', 'is', 'not', 'None:', 'assert', 'password', 'is', 'not', 'None', 'if', 'self.request.auth_mode', 'not', 'in', '(None,', '\"basic\"):', 'raise', 'ValueError(\"unsupported', 'auth_mode', '%s\",', 'self.request.auth_mode)', 'self.request.headers[\"Authorization\"]', '=', '\"Basic', '\"', '+', '_unicode(', 'base64.b64encode(', 'httputil.encode_username_password(username,', 'password)', ')', ')', 'if', 'self.request.user_agent:', 'self.request.headers[\"User-Agent\"]', '=', 'self.request.user_agent', 'elif', 'self.request.headers.get(\"User-Agent\")', 'is', 'None:', 'self.request.headers[\"User-Agent\"]', '=', '\"Tornado/{}\".format(version)', 'if', 'not', 'self.request.allow_nonstandard_methods:', 'body_expected', '=', 'self.request.method', 'in', '(\"POST\",', '\"PATCH\",', '\"PUT\")', 'body_present', '=', '(', 'self.request.body', 'is', 'not', 'None', 'or', 'self.request.body_producer', 'is', 'not', 'None', ')', 'if', '(body_expected', 'and', 'not', 'body_present)', 'or', '(', 'body_present', 'and', 'not', 'body_expected', '):', 'raise', 'ValueError(', '\"Body', 'must', '%sbe', 'None', 'for', 'method', '%s', '(unless', '\"', '\"allow_nonstandard_methods', 'is', 'true)\"', '%', '(\"not', '\"', 'if', 'body_expected', 'else', '\"\",', 'self.request.method)', ')', 'if', 'self.request.expect_100_continue:', 'self.request.headers[\"Expect\"]', '=', '\"100-continue\"', 'if', 'self.request.body', 'is', 'not', 'None:', 'self.request.headers[\"Content-Length\"]', '=', 'str(len(self.request.body))', 'if', '(', 'self.request.method', '==', '\"POST\"', 'and', '\"Content-Type\"', 'not', 'in', 'self.request.headers', '):', 'self.request.headers[', '\"Content-Type\"', ']', '=', '\"application/x-www-form-urlencoded\"', 'if', 'self.request.decompress_response:', 'self.request.headers[\"Accept-Encoding\"]', '=', '\"gzip\"', 'req_path', '=', '(self.parsed.path', 'or', '\"/\")', '+', '(', '(\"?\"', '+', 'self.parsed.query)', 'if', 'self.parsed.query', 'else', '\"\"', ')', 'self.connection', '=', 'self._create_connection(stream)', 'start_line', '=', 'httputil.RequestStartLine(self.request.method,', 'req_path,', '\"\")', 'self.connection.write_headers(start_line,', 'self.request.headers)', 'if', 'self.request.expect_100_continue:', 'await', 'self.connection.read_response(self)', 'else:', 'await', 'self._write_body(True)', 'except', 'Exception:', 'if', 'not', 'self._handle_exception(*sys.exc_info()):', 'raise', 'def', '_get_ssl_options(', 'self,', 'scheme:', 'str', ')', '->', 'Union[None,', 'Dict[str,', 'Any],', 'ssl.SSLContext]:', 'if', 'scheme', '==', '\"https\":', 'if', 'self.request.ssl_options', 'is', 'not', 'None:', 'return', 'self.request.ssl_options', 'if', '(', 'self.request.validate_cert', 'and', 'self.request.ca_certs', 'is', 'None', 'and', 'self.request.client_cert', 'is', 'None', 'and', 'self.request.client_key', 'is', 'None', '):', 'return', '_client_ssl_defaults', 'ssl_ctx', '=', 'ssl.create_default_context(', 'ssl.Purpose.SERVER_AUTH,', 'cafile=self.request.ca_certs', ')', 'if', 'not', 'self.request.validate_cert:', 'ssl_ctx.check_hostname', '=', 'False', 'ssl_ctx.verify_mode', '=', 'ssl.CERT_NONE', 'if', 'self.request.client_cert', 'is', 'not', 'None:', 'ssl_ctx.load_cert_chain(', 'self.request.client_cert,', 'self.request.client_key', ')', 'if', 'hasattr(ssl,', '\"OP_NO_COMPRESSION\"):', 'ssl_ctx.options', '|=', 'ssl.OP_NO_COMPRESSION', 'return', 'ssl_ctx', 'return', 'None', 'def', '_on_timeout(self,', 'info:', 'Optional[str]', '=', 'None)', '->', 'None:', 'self._timeout', '=', 'None', 'error_message', '=', '\"Timeout', '{0}\".format(info)', 'if', 'info', 'else', '\"Timeout\"', 'if', 'self.final_callback', 'is', 'not', 'None:', 'self._handle_exception(', 'HTTPTimeoutError,', 'HTTPTimeoutError(error_message),', 'None', ')', 'def', '_remove_timeout(self)', '->', 'None:', 'if', 'self._timeout', 'is', 'not', 'None:', 'self.io_loop.remove_timeout(self._timeout)', 'self._timeout', '=', 'None', 'def', '_create_connection(self,', 'stream:', 'IOStream)', '->', 'HTTP1Connection:', 'stream.set_nodelay(True)', 'connection', '=', 'HTTP1Connection(', 'stream,', 'True,', 'HTTP1ConnectionParameters(', 'no_keep_alive=True,', 'max_header_size=self.max_header_size,', 'max_body_size=self.max_body_size,', 'decompress=bool(self.request.decompress_response),', '),', 'self._sockaddr,', ')', 'return', 'connection', 'async', 'def', '_write_body(self,', 'start_read:', 'bool)', '->', 'None:', 'if', 'self.request.body', 'is', 'not', 'None:', 'self.connection.write(self.request.body)', 'elif', 'self.request.body_producer', 'is', 'not', 'None:', 'fut', '=', 'self.request.body_producer(self.connection.write)', 'if', 'fut', 'is', 'not', 'None:', 'await', 'fut', 'self.connection.finish()', 'if', 'start_read:', 'try:', 'await', 'self.connection.read_response(self)', 'except', 'StreamClosedError:', 'if', 'not', 'self._handle_exception(*sys.exc_info()):', 'raise', 'def', '_release(self)', '->', 'None:', 'if', 'self.release_callback', 'is', 'not', 'None:', 'release_callback', '=', 'self.release_callback', 'self.release_callback', '=', 'None', 'release_callback()', 'def', '_run_callback(self,', 'response:', 'HTTPResponse)', '->', 'None:', 'self._release()', 'if', 'self.final_callback', 'is', 'not', 'None:', 'final_callback', '=', 'self.final_callback', 'self.final_callback', '=', 'None', 'self.io_loop.add_callback(final_callback,', 'response)', 'def', '_handle_exception(', 'self,', 'typ:', '\"Optional[Type[BaseException]]\",', 'value:', 'Optional[BaseException],', 'tb:', 'Optional[TracebackType],', ')', '->', 'bool:', 'if', 'self.final_callback', 'is', 'not', 'None:', 'self._remove_timeout()', 'if', 'isinstance(value,', 'StreamClosedError):', 'if', 'value.real_error', 'is', 'None:', 'value', '=', 'HTTPStreamClosedError(\"Stream', 'closed\")', 'else:', 'value', '=', 'value.real_error', 'self._run_callback(', 'HTTPResponse(', 'self.request,', '599,', 'error=value,', 'request_time=self.io_loop.time()', '-', 'self.start_time,', 'start_time=self.start_wall_time,', ')', ')', 'if', 'hasattr(self,', '\"stream\"):', 'self.stream.close()', 'return', 'True', 'else:', 'return', 'isinstance(value,', 'StreamClosedError)', 'def', 'on_connection_close(self)', '->', 'None:', 'if', 'self.final_callback', 'is', 'not', 'None:', 'message', '=', '\"Connection', 'closed\"', 'if', 'self.stream.error:', 'raise', 'self.stream.error', 'try:', 'raise', 'HTTPStreamClosedError(message)', 'except', 'HTTPStreamClosedError:', 'self._handle_exception(*sys.exc_info())', 'async', 'def', 'headers_received(', 'self,', 'first_line:', 'Union[httputil.ResponseStartLine,', 'httputil.RequestStartLine],', 'headers:', 'httputil.HTTPHeaders,', ')', '->', 'None:', 'assert', 'isinstance(first_line,', 'httputil.ResponseStartLine)', 'if', 'self.request.expect_100_continue', 'and', 'first_line.code', '==', '100:', 'await', 'self._write_body(False)', 'return', 'self.code', '=', 'first_line.code', 'self.reason', '=', 'first_line.reason', 'self.headers', '=', 'headers', 'if', 'self._should_follow_redirect():', 'return', 'if', 'self.request.header_callback', 'is', 'not', 'None:', 'self.request.header_callback(\"%s', '%s', '%s\\\\r\\\\n\"', '%', 'first_line)', 'for', 'k,', 'v', 'in', 'self.headers.get_all():', 'self.request.header_callback(\"%s:', '%s\\\\r\\\\n\"', '%', '(k,', 'v))', 'self.request.header_callback(\"\\\\r\\\\n\")', 'def', '_should_follow_redirect(self)', '->', 'bool:', 'if', 'self.request.follow_redirects:', 'assert', 'self.request.max_redirects', 'is', 'not', 'None', 'return', '(', 'self.code', 'in', '(301,', '302,', '303,', '307,', '308)', 'and', 'self.request.max_redirects', '>', '0', 'and', 'self.headers', 'is', 'not', 'None', 'and', 'self.headers.get(\"Location\")', 'is', 'not', 'None', ')', 'return', 'False', 'def', 'finish(self)', '->', 'None:', 'assert', 'self.code', 'is', 'not', 'None', 'data', '=', 'b\"\".join(self.chunks)', 'self._remove_timeout()', 'original_request', '=', 'getattr(self.request,', '\"original_request\",', 'self.request)', 'if', 'self._should_follow_redirect():', 'assert', 'isinstance(self.request,', '_RequestProxy)', 'assert', 'self.headers', 'is', 'not', 'None', 'new_request', '=', 'copy.copy(self.request.request)', 'new_request.url', '=', 'urllib.parse.urljoin(', 'self.request.url,', 'self.headers[\"Location\"]', ')', 'assert', 'self.request.max_redirects', 'is', 'not', 'None', 'new_request.max_redirects', '=', 'self.request.max_redirects', '-', '1', 'del', 'new_request.headers[\"Host\"]', 'if', '(self.code', '==', '303', 'and', 'self.request.method', '!=', '\"HEAD\")', 'or', '(', 'self.code', 'in', '(301,', '302)', 'and', 'self.request.method', '==', '\"POST\"', '):', 'new_request.method', '=', '\"GET\"', 'new_request.body', '=', 'None', 'for', 'h', 'in', '[', '\"Content-Length\",', '\"Content-Type\",', '\"Content-Encoding\",', '\"Transfer-Encoding\",', ']:', 'try:', 'del', 'self.request.headers[h]', 'except', 'KeyError:', 'pass', 'new_request.original_request', '=', 'original_request', 'final_callback', '=', 'self.final_callback', 'self.final_callback', '=', 'None', 'self._release()', 'assert', 'self.client', 'is', 'not', 'None', 'fut', '=', 'self.client.fetch(new_request,', 'raise_error=False)', 'fut.add_done_callback(lambda', 'f:', 'final_callback(f.result()))', 'self._on_end_request()', 'return', 'if', 'self.request.streaming_callback:', 'buffer', '=', 'BytesIO()', 'else:', 'buffer', '=', 'BytesIO(data)', 'response', '=', 'HTTPResponse(', 'original_request,', 'self.code,', 'reason=getattr(self,', '\"reason\",', 'None),', 'headers=self.headers,', 'request_time=self.io_loop.time()', '-', 'self.start_time,', 'start_time=self.start_wall_time,', 'buffer=buffer,', 'effective_url=self.request.url,', ')', 'self._run_callback(response)', 'self._on_end_request()', 'def', '_on_end_request(self)', '->', 'None:', 'self.stream.close()', 'def', 'data_received(self,', 'chunk:', 'bytes)', '->', 'None:', 'if', 'self._should_follow_redirect():', 'return', 'if', 'self.request.streaming_callback', 'is', 'not', 'None:', 'self.request.streaming_callback(chunk)', 'else:', 'self.chunks.append(chunk)', 'if', '__name__', '==', '\"__main__\":', 'AsyncHTTPClient.configure(SimpleAsyncHTTPClient)', 'main()']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/tcpclient.py",
        "vector": "['import', 'functools', 'import', 'socket', 'import', 'numbers', 'import', 'datetime', 'import', 'ssl', 'import', 'typing', 'from', 'tornado.concurrent', 'import', 'Future,', 'future_add_done_callback', 'from', 'tornado.ioloop', 'import', 'IOLoop', 'from', 'tornado.iostream', 'import', 'IOStream', 'from', 'tornado', 'import', 'gen', 'from', 'tornado.netutil', 'import', 'Resolver', 'from', 'tornado.gen', 'import', 'TimeoutError', 'from', 'typing', 'import', 'Any,', 'Union,', 'Dict,', 'Tuple,', 'List,', 'Callable,', 'Iterator,', 'Optional', 'if', 'typing.TYPE_CHECKING:', 'from', 'typing', 'import', 'Set', '_INITIAL_CONNECT_TIMEOUT', '=', '0.3', 'class', '_Connector(object):', 'def', '__init__(', 'self,', 'addrinfo:', 'List[Tuple],', 'connect:', 'Callable[', '[socket.AddressFamily,', 'Tuple],', 'Tuple[IOStream,', '\"Future[IOStream]\"]', '],', ')', '->', 'None:', 'self.io_loop', '=', 'IOLoop.current()', 'self.connect', '=', 'connect', 'self.future', '=', '(', 'Future()', ')', 'self.timeout', '=', 'None', 'self.connect_timeout', '=', 'None', 'self.last_error', '=', 'None', 'self.remaining', '=', 'len(addrinfo)', 'self.primary_addrs,', 'self.secondary_addrs', '=', 'self.split(addrinfo)', 'self.streams', '=', 'set()', '@staticmethod', 'def', 'split(', 'addrinfo:', 'List[Tuple],', ')', '->', 'Tuple[', 'List[Tuple[socket.AddressFamily,', 'Tuple]],', 'List[Tuple[socket.AddressFamily,', 'Tuple]],', ']:', 'primary', '=', '[]', 'secondary', '=', '[]', 'primary_af', '=', 'addrinfo[0][0]', 'for', 'af,', 'addr', 'in', 'addrinfo:', 'if', 'af', '==', 'primary_af:', 'primary.append((af,', 'addr))', 'else:', 'secondary.append((af,', 'addr))', 'return', 'primary,', 'secondary', 'def', 'start(', 'self,', 'timeout:', 'float', '=', '_INITIAL_CONNECT_TIMEOUT,', 'connect_timeout:', 'Optional[Union[float,', 'datetime.timedelta]]', '=', 'None,', ')', '->', '\"Future[Tuple[socket.AddressFamily,', 'Any,', 'IOStream]]\":', 'self.try_connect(iter(self.primary_addrs))', 'self.set_timeout(timeout)', 'if', 'connect_timeout', 'is', 'not', 'None:', 'self.set_connect_timeout(connect_timeout)', 'return', 'self.future', 'def', 'try_connect(self,', 'addrs:', 'Iterator[Tuple[socket.AddressFamily,', 'Tuple]])', '->', 'None:', 'try:', 'af,', 'addr', '=', 'next(addrs)', 'except', 'StopIteration:', 'if', 'self.remaining', '==', '0', 'and', 'not', 'self.future.done():', 'self.future.set_exception(', 'self.last_error', 'or', 'IOError(\"connection', 'failed\")', ')', 'return', 'stream,', 'future', '=', 'self.connect(af,', 'addr)', 'self.streams.add(stream)', 'future_add_done_callback(', 'future,', 'functools.partial(self.on_connect_done,', 'addrs,', 'af,', 'addr)', ')', 'def', 'on_connect_done(', 'self,', 'addrs:', 'Iterator[Tuple[socket.AddressFamily,', 'Tuple]],', 'af:', 'socket.AddressFamily,', 'addr:', 'Tuple,', 'future:', '\"Future[IOStream]\",', ')', '->', 'None:', 'self.remaining', '-=', '1', 'try:', 'stream', '=', 'future.result()', 'except', 'Exception', 'as', 'e:', 'if', 'self.future.done():', 'return', 'self.last_error', '=', 'e', 'self.try_connect(addrs)', 'if', 'self.timeout', 'is', 'not', 'None:', 'self.io_loop.remove_timeout(self.timeout)', 'self.on_timeout()', 'return', 'self.clear_timeouts()', 'if', 'self.future.done():', 'stream.close()', 'else:', 'self.streams.discard(stream)', 'self.future.set_result((af,', 'addr,', 'stream))', 'self.close_streams()', 'def', 'set_timeout(self,', 'timeout:', 'float)', '->', 'None:', 'self.timeout', '=', 'self.io_loop.add_timeout(', 'self.io_loop.time()', '+', 'timeout,', 'self.on_timeout', ')', 'def', 'on_timeout(self)', '->', 'None:', 'self.timeout', '=', 'None', 'if', 'not', 'self.future.done():', 'self.try_connect(iter(self.secondary_addrs))', 'def', 'clear_timeout(self)', '->', 'None:', 'if', 'self.timeout', 'is', 'not', 'None:', 'self.io_loop.remove_timeout(self.timeout)', 'def', 'set_connect_timeout(', 'self,', 'connect_timeout:', 'Union[float,', 'datetime.timedelta]', ')', '->', 'None:', 'self.connect_timeout', '=', 'self.io_loop.add_timeout(', 'connect_timeout,', 'self.on_connect_timeout', ')', 'def', 'on_connect_timeout(self)', '->', 'None:', 'if', 'not', 'self.future.done():', 'self.future.set_exception(TimeoutError())', 'self.close_streams()', 'def', 'clear_timeouts(self)', '->', 'None:', 'if', 'self.timeout', 'is', 'not', 'None:', 'self.io_loop.remove_timeout(self.timeout)', 'if', 'self.connect_timeout', 'is', 'not', 'None:', 'self.io_loop.remove_timeout(self.connect_timeout)', 'def', 'close_streams(self)', '->', 'None:', 'for', 'stream', 'in', 'self.streams:', 'stream.close()', 'class', 'TCPClient(object):', 'def', '__init__(self,', 'resolver:', 'Optional[Resolver]', '=', 'None)', '->', 'None:', 'if', 'resolver', 'is', 'not', 'None:', 'self.resolver', '=', 'resolver', 'self._own_resolver', '=', 'False', 'else:', 'self.resolver', '=', 'Resolver()', 'self._own_resolver', '=', 'True', 'def', 'close(self)', '->', 'None:', 'if', 'self._own_resolver:', 'self.resolver.close()', 'async', 'def', 'connect(', 'self,', 'host:', 'str,', 'port:', 'int,', 'af:', 'socket.AddressFamily', '=', 'socket.AF_UNSPEC,', 'ssl_options:', 'Optional[Union[Dict[str,', 'Any],', 'ssl.SSLContext]]', '=', 'None,', 'max_buffer_size:', 'Optional[int]', '=', 'None,', 'source_ip:', 'Optional[str]', '=', 'None,', 'source_port:', 'Optional[int]', '=', 'None,', 'timeout:', 'Optional[Union[float,', 'datetime.timedelta]]', '=', 'None,', ')', '->', 'IOStream:', 'if', 'timeout', 'is', 'not', 'None:', 'if', 'isinstance(timeout,', 'numbers.Real):', 'timeout', '=', 'IOLoop.current().time()', '+', 'timeout', 'elif', 'isinstance(timeout,', 'datetime.timedelta):', 'timeout', '=', 'IOLoop.current().time()', '+', 'timeout.total_seconds()', 'else:', 'raise', 'TypeError(\"Unsupported', 'timeout', '%r\"', '%', 'timeout)', 'if', 'timeout', 'is', 'not', 'None:', 'addrinfo', '=', 'await', 'gen.with_timeout(', 'timeout,', 'self.resolver.resolve(host,', 'port,', 'af)', ')', 'else:', 'addrinfo', '=', 'await', 'self.resolver.resolve(host,', 'port,', 'af)', 'connector', '=', '_Connector(', 'addrinfo,', 'functools.partial(', 'self._create_stream,', 'max_buffer_size,', 'source_ip=source_ip,', 'source_port=source_port,', '),', ')', 'af,', 'addr,', 'stream', '=', 'await', 'connector.start(connect_timeout=timeout)', 'if', 'ssl_options', 'is', 'not', 'None:', 'if', 'timeout', 'is', 'not', 'None:', 'stream', '=', 'await', 'gen.with_timeout(', 'timeout,', 'stream.start_tls(', 'False,', 'ssl_options=ssl_options,', 'server_hostname=host', '),', ')', 'else:', 'stream', '=', 'await', 'stream.start_tls(', 'False,', 'ssl_options=ssl_options,', 'server_hostname=host', ')', 'return', 'stream', 'def', '_create_stream(', 'self,', 'max_buffer_size:', 'int,', 'af:', 'socket.AddressFamily,', 'addr:', 'Tuple,', 'source_ip:', 'Optional[str]', '=', 'None,', 'source_port:', 'Optional[int]', '=', 'None,', ')', '->', 'Tuple[IOStream,', '\"Future[IOStream]\"]:', 'source_port_bind', '=', 'source_port', 'if', 'isinstance(source_port,', 'int)', 'else', '0', 'source_ip_bind', '=', 'source_ip', 'if', 'source_port_bind', 'and', 'not', 'source_ip:', 'source_ip_bind', '=', '\"::1\"', 'if', 'af', '==', 'socket.AF_INET6', 'else', '\"127.0.0.1\"', 'socket_obj', '=', 'socket.socket(af)', 'if', 'source_port_bind', 'or', 'source_ip_bind:', 'try:', 'socket_obj.bind((source_ip_bind,', 'source_port_bind))', 'except', 'socket.error:', 'socket_obj.close()', 'raise', 'try:', 'stream', '=', 'IOStream(socket_obj,', 'max_buffer_size=max_buffer_size)', 'except', 'socket.error', 'as', 'e:', 'fu', '=', 'Future()', 'fu.set_exception(e)', 'return', 'stream,', 'fu', 'else:', 'return', 'stream,', 'stream.connect(addr)']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/tcpserver.py",
        "vector": "['import', 'errno', 'import', 'os', 'import', 'socket', 'import', 'ssl', 'from', 'tornado', 'import', 'gen', 'from', 'tornado.log', 'import', 'app_log', 'from', 'tornado.ioloop', 'import', 'IOLoop', 'from', 'tornado.iostream', 'import', 'IOStream,', 'SSLIOStream', 'from', 'tornado.netutil', 'import', '(', 'bind_sockets,', 'add_accept_handler,', 'ssl_wrap_socket,', '_DEFAULT_BACKLOG,', ')', 'from', 'tornado', 'import', 'process', 'from', 'tornado.util', 'import', 'errno_from_exception', 'import', 'typing', 'from', 'typing', 'import', 'Union,', 'Dict,', 'Any,', 'Iterable,', 'Optional,', 'Awaitable', 'if', 'typing.TYPE_CHECKING:', 'from', 'typing', 'import', 'Callable,', 'List', 'class', 'TCPServer(object):', 'r', 'def', '__init__(', 'self,', 'ssl_options:', 'Optional[Union[Dict[str,', 'Any],', 'ssl.SSLContext]]', '=', 'None,', 'max_buffer_size:', 'Optional[int]', '=', 'None,', 'read_chunk_size:', 'Optional[int]', '=', 'None,', ')', '->', 'None:', 'self.ssl_options', '=', 'ssl_options', 'self._sockets', '=', '{}', 'self._handlers', '=', '{}', 'self._pending_sockets', '=', '[]', 'self._started', '=', 'False', 'self._stopped', '=', 'False', 'self.max_buffer_size', '=', 'max_buffer_size', 'self.read_chunk_size', '=', 'read_chunk_size', 'if', 'self.ssl_options', 'is', 'not', 'None', 'and', 'isinstance(self.ssl_options,', 'dict):', 'if', '\"certfile\"', 'not', 'in', 'self.ssl_options:', 'raise', \"KeyError('missing\", 'key', '\"certfile\"', 'in', \"ssl_options')\", 'if', 'not', 'os.path.exists(self.ssl_options[\"certfile\"]):', 'raise', 'ValueError(', \"'certfile\", '\"%s\"', 'does', 'not', \"exist'\", '%', 'self.ssl_options[\"certfile\"]', ')', 'if', '\"keyfile\"', 'in', 'self.ssl_options', 'and', 'not', 'os.path.exists(', 'self.ssl_options[\"keyfile\"]', '):', 'raise', 'ValueError(', \"'keyfile\", '\"%s\"', 'does', 'not', \"exist'\", '%', 'self.ssl_options[\"keyfile\"]', ')', 'def', 'listen(', 'self,', 'port:', 'int,', 'address:', 'Optional[str]', '=', 'None,', 'family:', 'socket.AddressFamily', '=', 'socket.AF_UNSPEC,', 'backlog:', 'int', '=', '_DEFAULT_BACKLOG,', 'flags:', 'Optional[int]', '=', 'None,', 'reuse_port:', 'bool', '=', 'False,', ')', '->', 'None:', 'sockets', '=', 'bind_sockets(', 'port,', 'address=address,', 'family=family,', 'backlog=backlog,', 'flags=flags,', 'reuse_port=reuse_port,', ')', 'self.add_sockets(sockets)', 'def', 'add_sockets(self,', 'sockets:', 'Iterable[socket.socket])', '->', 'None:', 'for', 'sock', 'in', 'sockets:', 'self._sockets[sock.fileno()]', '=', 'sock', 'self._handlers[sock.fileno()]', '=', 'add_accept_handler(', 'sock,', 'self._handle_connection', ')', 'def', 'add_socket(self,', 'socket:', 'socket.socket)', '->', 'None:', 'self.add_sockets([socket])', 'def', 'bind(', 'self,', 'port:', 'int,', 'address:', 'Optional[str]', '=', 'None,', 'family:', 'socket.AddressFamily', '=', 'socket.AF_UNSPEC,', 'backlog:', 'int', '=', '_DEFAULT_BACKLOG,', 'flags:', 'Optional[int]', '=', 'None,', 'reuse_port:', 'bool', '=', 'False,', ')', '->', 'None:', 'sockets', '=', 'bind_sockets(', 'port,', 'address=address,', 'family=family,', 'backlog=backlog,', 'flags=flags,', 'reuse_port=reuse_port,', ')', 'if', 'self._started:', 'self.add_sockets(sockets)', 'else:', 'self._pending_sockets.extend(sockets)', 'def', 'start(', 'self,', 'num_processes:', 'Optional[int]', '=', '1,', 'max_restarts:', 'Optional[int]', '=', 'None', ')', '->', 'None:', 'assert', 'not', 'self._started', 'self._started', '=', 'True', 'if', 'num_processes', '!=', '1:', 'process.fork_processes(num_processes,', 'max_restarts)', 'sockets', '=', 'self._pending_sockets', 'self._pending_sockets', '=', '[]', 'self.add_sockets(sockets)', 'def', 'stop(self)', '->', 'None:', 'if', 'self._stopped:', 'return', 'self._stopped', '=', 'True', 'for', 'fd,', 'sock', 'in', 'self._sockets.items():', 'assert', 'sock.fileno()', '==', 'fd', 'self._handlers.pop(fd)()', 'sock.close()', 'def', 'handle_stream(', 'self,', 'stream:', 'IOStream,', 'address:', 'tuple', ')', '->', 'Optional[Awaitable[None]]:', 'raise', 'NotImplementedError()', 'def', '_handle_connection(self,', 'connection:', 'socket.socket,', 'address:', 'Any)', '->', 'None:', 'if', 'self.ssl_options', 'is', 'not', 'None:', 'assert', 'ssl,', '\"Python', '2.6+', 'and', 'OpenSSL', 'required', 'for', 'SSL\"', 'try:', 'connection', '=', 'ssl_wrap_socket(', 'connection,', 'self.ssl_options,', 'server_side=True,', 'do_handshake_on_connect=False,', ')', 'except', 'ssl.SSLError', 'as', 'err:', 'if', 'err.args[0]', '==', 'ssl.SSL_ERROR_EOF:', 'return', 'connection.close()', 'else:', 'raise', 'except', 'socket.error', 'as', 'err:', 'if', 'errno_from_exception(err)', 'in', '(errno.ECONNABORTED,', 'errno.EINVAL):', 'return', 'connection.close()', 'else:', 'raise', 'try:', 'if', 'self.ssl_options', 'is', 'not', 'None:', 'stream', '=', 'SSLIOStream(', 'connection,', 'max_buffer_size=self.max_buffer_size,', 'read_chunk_size=self.read_chunk_size,', ')', 'else:', 'stream', '=', 'IOStream(', 'connection,', 'max_buffer_size=self.max_buffer_size,', 'read_chunk_size=self.read_chunk_size,', ')', 'future', '=', 'self.handle_stream(stream,', 'address)', 'if', 'future', 'is', 'not', 'None:', 'IOLoop.current().add_future(', 'gen.convert_yielded(future),', 'lambda', 'f:', 'f.result()', ')', 'except', 'Exception:', 'app_log.error(\"Error', 'in', 'connection', 'callback\",', 'exc_info=True)']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/template.py",
        "vector": "['import', 'datetime', 'from', 'io', 'import', 'StringIO', 'import', 'linecache', 'import', 'os.path', 'import', 'posixpath', 'import', 're', 'import', 'threading', 'from', 'tornado', 'import', 'escape', 'from', 'tornado.log', 'import', 'app_log', 'from', 'tornado.util', 'import', 'ObjectDict,', 'exec_in,', 'unicode_type', 'from', 'typing', 'import', 'Any,', 'Union,', 'Callable,', 'List,', 'Dict,', 'Iterable,', 'Optional,', 'TextIO', 'import', 'typing', 'if', 'typing.TYPE_CHECKING:', 'from', 'typing', 'import', 'Tuple,', 'ContextManager', '_DEFAULT_AUTOESCAPE', '=', '\"xhtml_escape\"', 'class', '_UnsetMarker:', 'pass', '_UNSET', '=', '_UnsetMarker()', 'def', 'filter_whitespace(mode:', 'str,', 'text:', 'str)', '->', 'str:', 'if', 'mode', '==', '\"all\":', 'return', 'text', 'elif', 'mode', '==', '\"single\":', 'text', '=', 're.sub(r\"([\\\\t', ']+)\",', '\"', '\",', 'text)', 'text', '=', 're.sub(r\"(\\\\s*\\\\n\\\\s*)\",', '\"\\\\n\",', 'text)', 'return', 'text', 'elif', 'mode', '==', '\"oneline\":', 'return', 're.sub(r\"(\\\\s+)\",', '\"', '\",', 'text)', 'else:', 'raise', 'Exception(\"invalid', 'whitespace', 'mode', '%s\"', '%', 'mode)', 'class', 'Template(object):', 'def', '__init__(', 'self,', 'template_string:', 'Union[str,', 'bytes],', 'name:', 'str', '=', '\"<string>\",', 'loader:', 'Optional[\"BaseLoader\"]', '=', 'None,', 'compress_whitespace:', 'Union[bool,', '_UnsetMarker]', '=', '_UNSET,', 'autoescape:', 'Optional[Union[str,', '_UnsetMarker]]', '=', '_UNSET,', 'whitespace:', 'Optional[str]', '=', 'None,', ')', '->', 'None:', 'self.name', '=', 'escape.native_str(name)', 'if', 'compress_whitespace', 'is', 'not', '_UNSET:', 'if', 'whitespace', 'is', 'not', 'None:', 'raise', 'Exception(\"cannot', 'set', 'both', 'whitespace', 'and', 'compress_whitespace\")', 'whitespace', '=', '\"single\"', 'if', 'compress_whitespace', 'else', '\"all\"', 'if', 'whitespace', 'is', 'None:', 'if', 'loader', 'and', 'loader.whitespace:', 'whitespace', '=', 'loader.whitespace', 'else:', 'if', 'name.endswith(\".html\")', 'or', 'name.endswith(\".js\"):', 'whitespace', '=', '\"single\"', 'else:', 'whitespace', '=', '\"all\"', 'assert', 'whitespace', 'is', 'not', 'None', 'filter_whitespace(whitespace,', '\"\")', 'if', 'not', 'isinstance(autoescape,', '_UnsetMarker):', 'self.autoescape', '=', 'autoescape', 'elif', 'loader:', 'self.autoescape', '=', 'loader.autoescape', 'else:', 'self.autoescape', '=', '_DEFAULT_AUTOESCAPE', 'self.namespace', '=', 'loader.namespace', 'if', 'loader', 'else', '{}', 'reader', '=', '_TemplateReader(name,', 'escape.native_str(template_string),', 'whitespace)', 'self.file', '=', '_File(self,', '_parse(reader,', 'self))', 'self.code', '=', 'self._generate_python(loader)', 'self.loader', '=', 'loader', 'try:', 'self.compiled', '=', 'compile(', 'escape.to_unicode(self.code),', '\"%s.generated.py\"', '%', 'self.name.replace(\".\",', '\"_\"),', '\"exec\",', 'dont_inherit=True,', ')', 'except', 'Exception:', 'formatted_code', '=', '_format_code(self.code).rstrip()', 'app_log.error(\"%s', 'code:\\\\n%s\",', 'self.name,', 'formatted_code)', 'raise', 'def', 'generate(self,', '**kwargs:', 'Any)', '->', 'bytes:', 'namespace', '=', '{', '\"escape\":', 'escape.xhtml_escape,', '\"xhtml_escape\":', 'escape.xhtml_escape,', '\"url_escape\":', 'escape.url_escape,', '\"json_encode\":', 'escape.json_encode,', '\"squeeze\":', 'escape.squeeze,', '\"linkify\":', 'escape.linkify,', '\"datetime\":', 'datetime,', '\"_tt_utf8\":', 'escape.utf8,', '\"_tt_string_types\":', '(unicode_type,', 'bytes),', '\"__name__\":', 'self.name.replace(\".\",', '\"_\"),', '\"__loader__\":', 'ObjectDict(get_source=lambda', 'name:', 'self.code),', '}', 'namespace.update(self.namespace)', 'namespace.update(kwargs)', 'exec_in(self.compiled,', 'namespace)', 'execute', '=', 'typing.cast(Callable[[],', 'bytes],', 'namespace[\"_tt_execute\"])', 'linecache.clearcache()', 'return', 'execute()', 'def', '_generate_python(self,', 'loader:', 'Optional[\"BaseLoader\"])', '->', 'str:', 'buffer', '=', 'StringIO()', 'try:', 'named_blocks', '=', '{}', 'ancestors', '=', 'self._get_ancestors(loader)', 'ancestors.reverse()', 'for', 'ancestor', 'in', 'ancestors:', 'ancestor.find_named_blocks(loader,', 'named_blocks)', 'writer', '=', '_CodeWriter(buffer,', 'named_blocks,', 'loader,', 'ancestors[0].template)', 'ancestors[0].generate(writer)', 'return', 'buffer.getvalue()', 'finally:', 'buffer.close()', 'def', '_get_ancestors(self,', 'loader:', 'Optional[\"BaseLoader\"])', '->', 'List[\"_File\"]:', 'ancestors', '=', '[self.file]', 'for', 'chunk', 'in', 'self.file.body.chunks:', 'if', 'isinstance(chunk,', '_ExtendsBlock):', 'if', 'not', 'loader:', 'raise', 'ParseError(', '\"{%', 'extends', '%}', 'block', 'found,', 'but', 'no', '\"', '\"template', 'loader\"', ')', 'template', '=', 'loader.load(chunk.name,', 'self.name)', 'ancestors.extend(template._get_ancestors(loader))', 'return', 'ancestors', 'class', 'BaseLoader(object):', 'def', '__init__(', 'self,', 'autoescape:', 'str', '=', '_DEFAULT_AUTOESCAPE,', 'namespace:', 'Optional[Dict[str,', 'Any]]', '=', 'None,', 'whitespace:', 'Optional[str]', '=', 'None,', ')', '->', 'None:', 'self.autoescape', '=', 'autoescape', 'self.namespace', '=', 'namespace', 'or', '{}', 'self.whitespace', '=', 'whitespace', 'self.templates', '=', '{}', 'self.lock', '=', 'threading.RLock()', 'def', 'reset(self)', '->', 'None:', 'with', 'self.lock:', 'self.templates', '=', '{}', 'def', 'resolve_path(self,', 'name:', 'str,', 'parent_path:', 'Optional[str]', '=', 'None)', '->', 'str:', 'raise', 'NotImplementedError()', 'def', 'load(self,', 'name:', 'str,', 'parent_path:', 'Optional[str]', '=', 'None)', '->', 'Template:', 'name', '=', 'self.resolve_path(name,', 'parent_path=parent_path)', 'with', 'self.lock:', 'if', 'name', 'not', 'in', 'self.templates:', 'self.templates[name]', '=', 'self._create_template(name)', 'return', 'self.templates[name]', 'def', '_create_template(self,', 'name:', 'str)', '->', 'Template:', 'raise', 'NotImplementedError()', 'class', 'Loader(BaseLoader):', 'def', '__init__(self,', 'root_directory:', 'str,', '**kwargs:', 'Any)', '->', 'None:', 'super().__init__(**kwargs)', 'self.root', '=', 'os.path.abspath(root_directory)', 'def', 'resolve_path(self,', 'name:', 'str,', 'parent_path:', 'Optional[str]', '=', 'None)', '->', 'str:', 'if', '(', 'parent_path', 'and', 'not', 'parent_path.startswith(\"<\")', 'and', 'not', 'parent_path.startswith(\"/\")', 'and', 'not', 'name.startswith(\"/\")', '):', 'current_path', '=', 'os.path.join(self.root,', 'parent_path)', 'file_dir', '=', 'os.path.dirname(os.path.abspath(current_path))', 'relative_path', '=', 'os.path.abspath(os.path.join(file_dir,', 'name))', 'if', 'relative_path.startswith(self.root):', 'name', '=', 'relative_path[len(self.root)', '+', '1', ':]', 'return', 'name', 'def', '_create_template(self,', 'name:', 'str)', '->', 'Template:', 'path', '=', 'os.path.join(self.root,', 'name)', 'with', 'open(path,', '\"rb\")', 'as', 'f:', 'template', '=', 'Template(f.read(),', 'name=name,', 'loader=self)', 'return', 'template', 'class', 'DictLoader(BaseLoader):', 'def', '__init__(self,', 'dict:', 'Dict[str,', 'str],', '**kwargs:', 'Any)', '->', 'None:', 'super().__init__(**kwargs)', 'self.dict', '=', 'dict', 'def', 'resolve_path(self,', 'name:', 'str,', 'parent_path:', 'Optional[str]', '=', 'None)', '->', 'str:', 'if', '(', 'parent_path', 'and', 'not', 'parent_path.startswith(\"<\")', 'and', 'not', 'parent_path.startswith(\"/\")', 'and', 'not', 'name.startswith(\"/\")', '):', 'file_dir', '=', 'posixpath.dirname(parent_path)', 'name', '=', 'posixpath.normpath(posixpath.join(file_dir,', 'name))', 'return', 'name', 'def', '_create_template(self,', 'name:', 'str)', '->', 'Template:', 'return', 'Template(self.dict[name],', 'name=name,', 'loader=self)', 'class', '_Node(object):', 'def', 'each_child(self)', '->', 'Iterable[\"_Node\"]:', 'return', '()', 'def', 'generate(self,', 'writer:', '\"_CodeWriter\")', '->', 'None:', 'raise', 'NotImplementedError()', 'def', 'find_named_blocks(', 'self,', 'loader:', 'Optional[BaseLoader],', 'named_blocks:', 'Dict[str,', '\"_NamedBlock\"]', ')', '->', 'None:', 'for', 'child', 'in', 'self.each_child():', 'child.find_named_blocks(loader,', 'named_blocks)', 'class', '_File(_Node):', 'def', '__init__(self,', 'template:', 'Template,', 'body:', '\"_ChunkList\")', '->', 'None:', 'self.template', '=', 'template', 'self.body', '=', 'body', 'self.line', '=', '0', 'def', 'generate(self,', 'writer:', '\"_CodeWriter\")', '->', 'None:', 'writer.write_line(\"def', '_tt_execute():\",', 'self.line)', 'with', 'writer.indent():', 'writer.write_line(\"_tt_buffer', '=', '[]\",', 'self.line)', 'writer.write_line(\"_tt_append', '=', '_tt_buffer.append\",', 'self.line)', 'self.body.generate(writer)', 'writer.write_line(\"return', '_tt_utf8(\\'\\').join(_tt_buffer)\",', 'self.line)', 'def', 'each_child(self)', '->', 'Iterable[\"_Node\"]:', 'return', '(self.body,)', 'class', '_ChunkList(_Node):', 'def', '__init__(self,', 'chunks:', 'List[_Node])', '->', 'None:', 'self.chunks', '=', 'chunks', 'def', 'generate(self,', 'writer:', '\"_CodeWriter\")', '->', 'None:', 'for', 'chunk', 'in', 'self.chunks:', 'chunk.generate(writer)', 'def', 'each_child(self)', '->', 'Iterable[\"_Node\"]:', 'return', 'self.chunks', 'class', '_NamedBlock(_Node):', 'def', '__init__(self,', 'name:', 'str,', 'body:', '_Node,', 'template:', 'Template,', 'line:', 'int)', '->', 'None:', 'self.name', '=', 'name', 'self.body', '=', 'body', 'self.template', '=', 'template', 'self.line', '=', 'line', 'def', 'each_child(self)', '->', 'Iterable[\"_Node\"]:', 'return', '(self.body,)', 'def', 'generate(self,', 'writer:', '\"_CodeWriter\")', '->', 'None:', 'block', '=', 'writer.named_blocks[self.name]', 'with', 'writer.include(block.template,', 'self.line):', 'block.body.generate(writer)', 'def', 'find_named_blocks(', 'self,', 'loader:', 'Optional[BaseLoader],', 'named_blocks:', 'Dict[str,', '\"_NamedBlock\"]', ')', '->', 'None:', 'named_blocks[self.name]', '=', 'self', '_Node.find_named_blocks(self,', 'loader,', 'named_blocks)', 'class', '_ExtendsBlock(_Node):', 'def', '__init__(self,', 'name:', 'str)', '->', 'None:', 'self.name', '=', 'name', 'class', '_IncludeBlock(_Node):', 'def', '__init__(self,', 'name:', 'str,', 'reader:', '\"_TemplateReader\",', 'line:', 'int)', '->', 'None:', 'self.name', '=', 'name', 'self.template_name', '=', 'reader.name', 'self.line', '=', 'line', 'def', 'find_named_blocks(', 'self,', 'loader:', 'Optional[BaseLoader],', 'named_blocks:', 'Dict[str,', '_NamedBlock]', ')', '->', 'None:', 'assert', 'loader', 'is', 'not', 'None', 'included', '=', 'loader.load(self.name,', 'self.template_name)', 'included.file.find_named_blocks(loader,', 'named_blocks)', 'def', 'generate(self,', 'writer:', '\"_CodeWriter\")', '->', 'None:', 'assert', 'writer.loader', 'is', 'not', 'None', 'included', '=', 'writer.loader.load(self.name,', 'self.template_name)', 'with', 'writer.include(included,', 'self.line):', 'included.file.body.generate(writer)', 'class', '_ApplyBlock(_Node):', 'def', '__init__(self,', 'method:', 'str,', 'line:', 'int,', 'body:', '_Node)', '->', 'None:', 'self.method', '=', 'method', 'self.line', '=', 'line', 'self.body', '=', 'body', 'def', 'each_child(self)', '->', 'Iterable[\"_Node\"]:', 'return', '(self.body,)', 'def', 'generate(self,', 'writer:', '\"_CodeWriter\")', '->', 'None:', 'method_name', '=', '\"_tt_apply%d\"', '%', 'writer.apply_counter', 'writer.apply_counter', '+=', '1', 'writer.write_line(\"def', '%s():\"', '%', 'method_name,', 'self.line)', 'with', 'writer.indent():', 'writer.write_line(\"_tt_buffer', '=', '[]\",', 'self.line)', 'writer.write_line(\"_tt_append', '=', '_tt_buffer.append\",', 'self.line)', 'self.body.generate(writer)', 'writer.write_line(\"return', '_tt_utf8(\\'\\').join(_tt_buffer)\",', 'self.line)', 'writer.write_line(', '\"_tt_append(_tt_utf8(%s(%s())))\"', '%', '(self.method,', 'method_name),', 'self.line', ')', 'class', '_ControlBlock(_Node):', 'def', '__init__(self,', 'statement:', 'str,', 'line:', 'int,', 'body:', '_Node)', '->', 'None:', 'self.statement', '=', 'statement', 'self.line', '=', 'line', 'self.body', '=', 'body', 'def', 'each_child(self)', '->', 'Iterable[_Node]:', 'return', '(self.body,)', 'def', 'generate(self,', 'writer:', '\"_CodeWriter\")', '->', 'None:', 'writer.write_line(\"%s:\"', '%', 'self.statement,', 'self.line)', 'with', 'writer.indent():', 'self.body.generate(writer)', 'writer.write_line(\"pass\",', 'self.line)', 'class', '_IntermediateControlBlock(_Node):', 'def', '__init__(self,', 'statement:', 'str,', 'line:', 'int)', '->', 'None:', 'self.statement', '=', 'statement', 'self.line', '=', 'line', 'def', 'generate(self,', 'writer:', '\"_CodeWriter\")', '->', 'None:', 'writer.write_line(\"pass\",', 'self.line)', 'writer.write_line(\"%s:\"', '%', 'self.statement,', 'self.line,', 'writer.indent_size()', '-', '1)', 'class', '_Statement(_Node):', 'def', '__init__(self,', 'statement:', 'str,', 'line:', 'int)', '->', 'None:', 'self.statement', '=', 'statement', 'self.line', '=', 'line', 'def', 'generate(self,', 'writer:', '\"_CodeWriter\")', '->', 'None:', 'writer.write_line(self.statement,', 'self.line)', 'class', '_Expression(_Node):', 'def', '__init__(self,', 'expression:', 'str,', 'line:', 'int,', 'raw:', 'bool', '=', 'False)', '->', 'None:', 'self.expression', '=', 'expression', 'self.line', '=', 'line', 'self.raw', '=', 'raw', 'def', 'generate(self,', 'writer:', '\"_CodeWriter\")', '->', 'None:', 'writer.write_line(\"_tt_tmp', '=', '%s\"', '%', 'self.expression,', 'self.line)', 'writer.write_line(', '\"if', 'isinstance(_tt_tmp,', '_tt_string_types):\"', '\"', '_tt_tmp', '=', '_tt_utf8(_tt_tmp)\",', 'self.line,', ')', 'writer.write_line(\"else:', '_tt_tmp', '=', '_tt_utf8(str(_tt_tmp))\",', 'self.line)', 'if', 'not', 'self.raw', 'and', 'writer.current_template.autoescape', 'is', 'not', 'None:', 'writer.write_line(', '\"_tt_tmp', '=', '_tt_utf8(%s(_tt_tmp))\"', '%', 'writer.current_template.autoescape,', 'self.line,', ')', 'writer.write_line(\"_tt_append(_tt_tmp)\",', 'self.line)', 'class', '_Module(_Expression):', 'def', '__init__(self,', 'expression:', 'str,', 'line:', 'int)', '->', 'None:', 'super().__init__(\"_tt_modules.\"', '+', 'expression,', 'line,', 'raw=True)', 'class', '_Text(_Node):', 'def', '__init__(self,', 'value:', 'str,', 'line:', 'int,', 'whitespace:', 'str)', '->', 'None:', 'self.value', '=', 'value', 'self.line', '=', 'line', 'self.whitespace', '=', 'whitespace', 'def', 'generate(self,', 'writer:', '\"_CodeWriter\")', '->', 'None:', 'value', '=', 'self.value', 'if', '\"<pre>\"', 'not', 'in', 'value:', 'value', '=', 'filter_whitespace(self.whitespace,', 'value)', 'if', 'value:', 'writer.write_line(\"_tt_append(%r)\"', '%', 'escape.utf8(value),', 'self.line)', 'class', 'ParseError(Exception):', 'def', '__init__(', 'self,', 'message:', 'str,', 'filename:', 'Optional[str]', '=', 'None,', 'lineno:', 'int', '=', '0', ')', '->', 'None:', 'self.message', '=', 'message', 'self.filename', '=', 'filename', 'self.lineno', '=', 'lineno', 'def', '__str__(self)', '->', 'str:', 'return', '\"%s', 'at', '%s:%d\"', '%', '(self.message,', 'self.filename,', 'self.lineno)', 'class', '_CodeWriter(object):', 'def', '__init__(', 'self,', 'file:', 'TextIO,', 'named_blocks:', 'Dict[str,', '_NamedBlock],', 'loader:', 'Optional[BaseLoader],', 'current_template:', 'Template,', ')', '->', 'None:', 'self.file', '=', 'file', 'self.named_blocks', '=', 'named_blocks', 'self.loader', '=', 'loader', 'self.current_template', '=', 'current_template', 'self.apply_counter', '=', '0', 'self.include_stack', '=', '[]', 'self._indent', '=', '0', 'def', 'indent_size(self)', '->', 'int:', 'return', 'self._indent', 'def', 'indent(self)', '->', '\"ContextManager\":', 'class', 'Indenter(object):', 'def', '__enter__(_)', '->', '\"_CodeWriter\":', 'self._indent', '+=', '1', 'return', 'self', 'def', '__exit__(_,', '*args:', 'Any)', '->', 'None:', 'assert', 'self._indent', '>', '0', 'self._indent', '-=', '1', 'return', 'Indenter()', 'def', 'include(self,', 'template:', 'Template,', 'line:', 'int)', '->', '\"ContextManager\":', 'self.include_stack.append((self.current_template,', 'line))', 'self.current_template', '=', 'template', 'class', 'IncludeTemplate(object):', 'def', '__enter__(_)', '->', '\"_CodeWriter\":', 'return', 'self', 'def', '__exit__(_,', '*args:', 'Any)', '->', 'None:', 'self.current_template', '=', 'self.include_stack.pop()[0]', 'return', 'IncludeTemplate()', 'def', 'write_line(', 'self,', 'line:', 'str,', 'line_number:', 'int,', 'indent:', 'Optional[int]', '=', 'None', ')', '->', 'None:', 'if', 'indent', 'is', 'None:', 'indent', '=', 'self._indent', 'line_comment', '=', '\"', 'if', 'self.include_stack:', 'ancestors', '=', '[', '\"%s:%d\"', '%', '(tmpl.name,', 'lineno)', 'for', '(tmpl,', 'lineno)', 'in', 'self.include_stack', ']', 'line_comment', '+=', '\"', '(via', '%s)\"', '%', '\",', '\".join(reversed(ancestors))', 'print(\"', '\"', '*', 'indent', '+', 'line', '+', 'line_comment,', 'file=self.file)', 'class', '_TemplateReader(object):', 'def', '__init__(self,', 'name:', 'str,', 'text:', 'str,', 'whitespace:', 'str)', '->', 'None:', 'self.name', '=', 'name', 'self.text', '=', 'text', 'self.whitespace', '=', 'whitespace', 'self.line', '=', '1', 'self.pos', '=', '0', 'def', 'find(self,', 'needle:', 'str,', 'start:', 'int', '=', '0,', 'end:', 'Optional[int]', '=', 'None)', '->', 'int:', 'assert', 'start', '>=', '0,', 'start', 'pos', '=', 'self.pos', 'start', '+=', 'pos', 'if', 'end', 'is', 'None:', 'index', '=', 'self.text.find(needle,', 'start)', 'else:', 'end', '+=', 'pos', 'assert', 'end', '>=', 'start', 'index', '=', 'self.text.find(needle,', 'start,', 'end)', 'if', 'index', '!=', '-1:', 'index', '-=', 'pos', 'return', 'index', 'def', 'consume(self,', 'count:', 'Optional[int]', '=', 'None)', '->', 'str:', 'if', 'count', 'is', 'None:', 'count', '=', 'len(self.text)', '-', 'self.pos', 'newpos', '=', 'self.pos', '+', 'count', 'self.line', '+=', 'self.text.count(\"\\\\n\",', 'self.pos,', 'newpos)', 's', '=', 'self.text[self.pos', ':', 'newpos]', 'self.pos', '=', 'newpos', 'return', 's', 'def', 'remaining(self)', '->', 'int:', 'return', 'len(self.text)', '-', 'self.pos', 'def', '__len__(self)', '->', 'int:', 'return', 'self.remaining()', 'def', '__getitem__(self,', 'key:', 'Union[int,', 'slice])', '->', 'str:', 'if', 'isinstance(key,', 'slice):', 'size', '=', 'len(self)', 'start,', 'stop,', 'step', '=', 'key.indices(size)', 'if', 'start', 'is', 'None:', 'start', '=', 'self.pos', 'else:', 'start', '+=', 'self.pos', 'if', 'stop', 'is', 'not', 'None:', 'stop', '+=', 'self.pos', 'return', 'self.text[slice(start,', 'stop,', 'step)]', 'elif', 'key', '<', '0:', 'return', 'self.text[key]', 'else:', 'return', 'self.text[self.pos', '+', 'key]', 'def', '__str__(self)', '->', 'str:', 'return', 'self.text[self.pos', ':]', 'def', 'raise_parse_error(self,', 'msg:', 'str)', '->', 'None:', 'raise', 'ParseError(msg,', 'self.name,', 'self.line)', 'def', '_format_code(code:', 'str)', '->', 'str:', 'lines', '=', 'code.splitlines()', 'format', '=', '\"%%%dd', '%%s\\\\n\"', '%', 'len(repr(len(lines)', '+', '1))', 'return', '\"\".join([format', '%', '(i', '+', '1,', 'line)', 'for', '(i,', 'line)', 'in', 'enumerate(lines)])', 'def', '_parse(', 'reader:', '_TemplateReader,', 'template:', 'Template,', 'in_block:', 'Optional[str]', '=', 'None,', 'in_loop:', 'Optional[str]', '=', 'None,', ')', '->', '_ChunkList:', 'body', '=', '_ChunkList([])', 'while', 'True:', 'curly', '=', '0', 'while', 'True:', 'curly', '=', 'reader.find(\"{\",', 'curly)', 'if', 'curly', '==', '-1', 'or', 'curly', '+', '1', '==', 'reader.remaining():', 'if', 'in_block:', 'reader.raise_parse_error(', '\"Missing', '{%%', 'end', '%%}', 'block', 'for', '%s\"', '%', 'in_block', ')', 'body.chunks.append(', '_Text(reader.consume(),', 'reader.line,', 'reader.whitespace)', ')', 'return', 'body', 'if', 'reader[curly', '+', '1]', 'not', 'in', '(\"{\",', '\"%\",', '\"', 'curly', '+=', '1', 'continue', 'if', '(', 'curly', '+', '2', '<', 'reader.remaining()', 'and', 'reader[curly', '+', '1]', '==', '\"{\"', 'and', 'reader[curly', '+', '2]', '==', '\"{\"', '):', 'curly', '+=', '1', 'continue', 'break', 'if', 'curly', '>', '0:', 'cons', '=', 'reader.consume(curly)', 'body.chunks.append(_Text(cons,', 'reader.line,', 'reader.whitespace))', 'start_brace', '=', 'reader.consume(2)', 'line', '=', 'reader.line', 'if', 'reader.remaining()', 'and', 'reader[0]', '==', '\"!\":', 'reader.consume(1)', 'body.chunks.append(_Text(start_brace,', 'line,', 'reader.whitespace))', 'continue', 'if', 'start_brace', '==', '\"{', 'end', '=', 'reader.find(\"', 'if', 'end', '==', '-1:', 'reader.raise_parse_error(\"Missing', 'end', 'comment', 'contents', '=', 'reader.consume(end).strip()', 'reader.consume(2)', 'continue', 'if', 'start_brace', '==', '\"{{\":', 'end', '=', 'reader.find(\"}}\")', 'if', 'end', '==', '-1:', 'reader.raise_parse_error(\"Missing', 'end', 'expression', '}}\")', 'contents', '=', 'reader.consume(end).strip()', 'reader.consume(2)', 'if', 'not', 'contents:', 'reader.raise_parse_error(\"Empty', 'expression\")', 'body.chunks.append(_Expression(contents,', 'line))', 'continue', 'assert', 'start_brace', '==', '\"{%\",', 'start_brace', 'end', '=', 'reader.find(\"%}\")', 'if', 'end', '==', '-1:', 'reader.raise_parse_error(\"Missing', 'end', 'block', '%}\")', 'contents', '=', 'reader.consume(end).strip()', 'reader.consume(2)', 'if', 'not', 'contents:', 'reader.raise_parse_error(\"Empty', 'block', 'tag', '({%', '%})\")', 'operator,', 'space,', 'suffix', '=', 'contents.partition(\"', '\")', 'suffix', '=', 'suffix.strip()', 'intermediate_blocks', '=', '{', '\"else\":', 'set([\"if\",', '\"for\",', '\"while\",', '\"try\"]),', '\"elif\":', 'set([\"if\"]),', '\"except\":', 'set([\"try\"]),', '\"finally\":', 'set([\"try\"]),', '}', 'allowed_parents', '=', 'intermediate_blocks.get(operator)', 'if', 'allowed_parents', 'is', 'not', 'None:', 'if', 'not', 'in_block:', 'reader.raise_parse_error(', '\"%s', 'outside', '%s', 'block\"', '%', '(operator,', 'allowed_parents)', ')', 'if', 'in_block', 'not', 'in', 'allowed_parents:', 'reader.raise_parse_error(', '\"%s', 'block', 'cannot', 'be', 'attached', 'to', '%s', 'block\"', '%', '(operator,', 'in_block)', ')', 'body.chunks.append(_IntermediateControlBlock(contents,', 'line))', 'continue', 'elif', 'operator', '==', '\"end\":', 'if', 'not', 'in_block:', 'reader.raise_parse_error(\"Extra', '{%', 'end', '%}', 'block\")', 'return', 'body', 'elif', 'operator', 'in', '(', '\"extends\",', '\"include\",', '\"set\",', '\"import\",', '\"from\",', '\"comment\",', '\"autoescape\",', '\"whitespace\",', '\"raw\",', '\"module\",', '):', 'if', 'operator', '==', '\"comment\":', 'continue', 'if', 'operator', '==', '\"extends\":', 'suffix', '=', 'suffix.strip(\\'\"\\').strip(\"\\'\")', 'if', 'not', 'suffix:', 'reader.raise_parse_error(\"extends', 'missing', 'file', 'path\")', 'block', '=', '_ExtendsBlock(suffix)', 'elif', 'operator', 'in', '(\"import\",', '\"from\"):', 'if', 'not', 'suffix:', 'reader.raise_parse_error(\"import', 'missing', 'statement\")', 'block', '=', '_Statement(contents,', 'line)', 'elif', 'operator', '==', '\"include\":', 'suffix', '=', 'suffix.strip(\\'\"\\').strip(\"\\'\")', 'if', 'not', 'suffix:', 'reader.raise_parse_error(\"include', 'missing', 'file', 'path\")', 'block', '=', '_IncludeBlock(suffix,', 'reader,', 'line)', 'elif', 'operator', '==', '\"set\":', 'if', 'not', 'suffix:', 'reader.raise_parse_error(\"set', 'missing', 'statement\")', 'block', '=', '_Statement(suffix,', 'line)', 'elif', 'operator', '==', '\"autoescape\":', 'fn', '=', 'suffix.strip()', 'if', 'fn', '==', '\"None\":', 'fn', '=', 'None', 'template.autoescape', '=', 'fn', 'continue', 'elif', 'operator', '==', '\"whitespace\":', 'mode', '=', 'suffix.strip()', 'filter_whitespace(mode,', '\"\")', 'reader.whitespace', '=', 'mode', 'continue', 'elif', 'operator', '==', '\"raw\":', 'block', '=', '_Expression(suffix,', 'line,', 'raw=True)', 'elif', 'operator', '==', '\"module\":', 'block', '=', '_Module(suffix,', 'line)', 'body.chunks.append(block)', 'continue', 'elif', 'operator', 'in', '(\"apply\",', '\"block\",', '\"try\",', '\"if\",', '\"for\",', '\"while\"):', 'if', 'operator', 'in', '(\"for\",', '\"while\"):', 'block_body', '=', '_parse(reader,', 'template,', 'operator,', 'operator)', 'elif', 'operator', '==', '\"apply\":', 'block_body', '=', '_parse(reader,', 'template,', 'operator,', 'None)', 'else:', 'block_body', '=', '_parse(reader,', 'template,', 'operator,', 'in_loop)', 'if', 'operator', '==', '\"apply\":', 'if', 'not', 'suffix:', 'reader.raise_parse_error(\"apply', 'missing', 'method', 'name\")', 'block', '=', '_ApplyBlock(suffix,', 'line,', 'block_body)', 'elif', 'operator', '==', '\"block\":', 'if', 'not', 'suffix:', 'reader.raise_parse_error(\"block', 'missing', 'name\")', 'block', '=', '_NamedBlock(suffix,', 'block_body,', 'template,', 'line)', 'else:', 'block', '=', '_ControlBlock(contents,', 'line,', 'block_body)', 'body.chunks.append(block)', 'continue', 'elif', 'operator', 'in', '(\"break\",', '\"continue\"):', 'if', 'not', 'in_loop:', 'reader.raise_parse_error(', '\"%s', 'outside', '%s', 'block\"', '%', '(operator,', 'set([\"for\",', '\"while\"]))', ')', 'body.chunks.append(_Statement(contents,', 'line))', 'continue', 'else:', 'reader.raise_parse_error(\"unknown', 'operator:', '%r\"', '%', 'operator)']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/__init__.py",
        "vector": "[]"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/__main__.py",
        "vector": "['from', 'tornado.test.runtests', 'import', 'all,', 'main', 'all', '=', 'all', 'main()']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/asyncio_test.py",
        "vector": "['import', 'asyncio', 'import', 'threading', 'import', 'time', 'import', 'unittest', 'import', 'warnings', 'from', 'concurrent.futures', 'import', 'ThreadPoolExecutor', 'from', 'tornado', 'import', 'gen', 'from', 'tornado.ioloop', 'import', 'IOLoop', 'from', 'tornado.platform.asyncio', 'import', '(', 'AsyncIOLoop,', 'to_asyncio_future,', 'AnyThreadEventLoopPolicy,', 'AddThreadSelectorEventLoop,', ')', 'from', 'tornado.testing', 'import', 'AsyncTestCase,', 'gen_test', 'class', 'AsyncIOLoopTest(AsyncTestCase):', '@property', 'def', 'asyncio_loop(self):', 'return', 'self.io_loop.asyncio_loop', 'def', 'test_asyncio_callback(self):', 'async', 'def', 'add_callback():', 'asyncio.get_event_loop().call_soon(self.stop)', 'self.asyncio_loop.run_until_complete(add_callback())', 'self.wait()', '@gen_test', 'def', 'test_asyncio_future(self):', 'x', '=', 'yield', 'asyncio.ensure_future(', 'asyncio.get_event_loop().run_in_executor(None,', 'lambda:', '42)', ')', 'self.assertEqual(x,', '42)', '@gen_test', 'def', 'test_asyncio_yield_from(self):', '@gen.coroutine', 'def', 'f():', 'event_loop', '=', 'asyncio.get_event_loop()', 'x', '=', 'yield', 'from', 'event_loop.run_in_executor(None,', 'lambda:', '42)', 'return', 'x', 'result', '=', 'yield', 'f()', 'self.assertEqual(result,', '42)', 'def', 'test_asyncio_adapter(self):', '@gen.coroutine', 'def', 'tornado_coroutine():', 'yield', 'gen.moment', 'raise', 'gen.Return(42)', 'async', 'def', 'native_coroutine_without_adapter():', 'return', 'await', 'tornado_coroutine()', 'async', 'def', 'native_coroutine_with_adapter():', 'return', 'await', 'to_asyncio_future(tornado_coroutine())', 'async', 'def', 'native_coroutine_with_adapter2():', 'return', 'await', 'to_asyncio_future(native_coroutine_without_adapter())', 'self.assertEqual(self.io_loop.run_sync(native_coroutine_without_adapter),', '42)', 'self.assertEqual(self.io_loop.run_sync(native_coroutine_with_adapter),', '42)', 'self.assertEqual(self.io_loop.run_sync(native_coroutine_with_adapter2),', '42)', 'self.assertEqual(', 'self.asyncio_loop.run_until_complete(native_coroutine_without_adapter()),', '42,', ')', 'self.assertEqual(', 'self.asyncio_loop.run_until_complete(native_coroutine_with_adapter()),', '42,', ')', 'self.assertEqual(', 'self.asyncio_loop.run_until_complete(native_coroutine_with_adapter2()),', '42,', ')', 'def', 'test_add_thread_close_idempotent(self):', 'loop', '=', 'AddThreadSelectorEventLoop(asyncio.get_event_loop())', 'loop.close()', 'loop.close()', 'class', 'LeakTest(unittest.TestCase):', 'def', 'setUp(self):', 'AsyncIOLoop(make_current=False).close()', 'self.orig_policy', '=', 'asyncio.get_event_loop_policy()', 'asyncio.set_event_loop_policy(asyncio.DefaultEventLoopPolicy())', 'def', 'tearDown(self):', 'try:', 'loop', '=', 'asyncio.get_event_loop_policy().get_event_loop()', 'except', 'Exception:', 'pass', 'else:', 'loop.close()', 'asyncio.set_event_loop_policy(self.orig_policy)', 'def', 'test_ioloop_close_leak(self):', 'orig_count', '=', 'len(IOLoop._ioloop_for_asyncio)', 'for', 'i', 'in', 'range(10):', 'with', 'warnings.catch_warnings():', 'warnings.simplefilter(\"ignore\",', 'DeprecationWarning)', 'loop', '=', 'AsyncIOLoop()', 'loop.close()', 'new_count', '=', 'len(IOLoop._ioloop_for_asyncio)', '-', 'orig_count', 'self.assertEqual(new_count,', '0)', 'def', 'test_asyncio_close_leak(self):', 'orig_count', '=', 'len(IOLoop._ioloop_for_asyncio)', 'for', 'i', 'in', 'range(10):', 'loop', '=', 'asyncio.new_event_loop()', 'loop.call_soon(IOLoop.current)', 'loop.call_soon(loop.stop)', 'loop.run_forever()', 'loop.close()', 'new_count', '=', 'len(IOLoop._ioloop_for_asyncio)', '-', 'orig_count', 'self.assertEqual(new_count,', '1)', 'class', 'SelectorThreadLeakTest(unittest.TestCase):', 'def', 'setUp(self):', 'asyncio.run(self.dummy_tornado_coroutine())', 'self.orig_thread_count', '=', 'threading.active_count()', 'def', 'assert_no_thread_leak(self):', 'deadline', '=', 'time.time()', '+', '1', 'while', 'time.time()', '<', 'deadline:', 'threads', '=', 'list(threading.enumerate())', 'if', 'len(threads)', '<=', 'self.orig_thread_count:', 'break', 'time.sleep(0.1)', 'self.assertLessEqual(len(threads),', 'self.orig_thread_count,', 'threads)', 'async', 'def', 'dummy_tornado_coroutine(self):', 'IOLoop.current()', 'def', 'test_asyncio_run(self):', 'for', 'i', 'in', 'range(10):', 'asyncio.run(self.dummy_tornado_coroutine())', 'self.assert_no_thread_leak()', 'def', 'test_asyncio_manual(self):', 'for', 'i', 'in', 'range(10):', 'loop', '=', 'asyncio.new_event_loop()', 'loop.run_until_complete(self.dummy_tornado_coroutine())', 'loop.run_until_complete(loop.shutdown_asyncgens())', 'loop.close()', 'self.assert_no_thread_leak()', 'def', 'test_tornado(self):', 'for', 'i', 'in', 'range(10):', 'loop', '=', 'IOLoop(make_current=False)', 'loop.run_sync(self.dummy_tornado_coroutine)', 'loop.close()', 'self.assert_no_thread_leak()', 'class', 'AnyThreadEventLoopPolicyTest(unittest.TestCase):', 'def', 'setUp(self):', 'self.orig_policy', '=', 'asyncio.get_event_loop_policy()', 'self.executor', '=', 'ThreadPoolExecutor(1)', 'def', 'tearDown(self):', 'asyncio.set_event_loop_policy(self.orig_policy)', 'self.executor.shutdown()', 'def', 'get_event_loop_on_thread(self):', 'def', 'get_and_close_event_loop():', 'loop', '=', 'asyncio.get_event_loop()', 'loop.close()', 'return', 'loop', 'future', '=', 'self.executor.submit(get_and_close_event_loop)', 'return', 'future.result()', 'def', 'test_asyncio_accessor(self):', 'with', 'warnings.catch_warnings():', 'warnings.simplefilter(\"ignore\",', 'DeprecationWarning)', 'self.assertRaises(', 'RuntimeError,', 'self.executor.submit(asyncio.get_event_loop).result', ')', 'asyncio.set_event_loop_policy(AnyThreadEventLoopPolicy())', 'self.assertIsInstance(', 'self.executor.submit(asyncio.get_event_loop).result(),', 'asyncio.AbstractEventLoop,', ')', 'self.executor.submit(lambda:', 'asyncio.get_event_loop().close()).result()', 'def', 'test_tornado_accessor(self):', 'with', 'warnings.catch_warnings():', 'warnings.simplefilter(\"ignore\",', 'DeprecationWarning)', 'self.assertIsInstance(self.executor.submit(IOLoop.current).result(),', 'IOLoop)', 'self.executor.submit(lambda:', 'asyncio.get_event_loop().close()).result()', 'asyncio.set_event_loop_policy(AnyThreadEventLoopPolicy())', 'self.assertIsInstance(self.executor.submit(IOLoop.current).result(),', 'IOLoop)', 'self.executor.submit(lambda:', 'asyncio.get_event_loop().close()).result()']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/auth_test.py",
        "vector": "['import', 'unittest', 'from', 'tornado.auth', 'import', '(', 'OpenIdMixin,', 'OAuthMixin,', 'OAuth2Mixin,', 'GoogleOAuth2Mixin,', 'FacebookGraphMixin,', 'TwitterMixin,', ')', 'from', 'tornado.escape', 'import', 'json_decode', 'from', 'tornado', 'import', 'gen', 'from', 'tornado.httpclient', 'import', 'HTTPClientError', 'from', 'tornado.httputil', 'import', 'url_concat', 'from', 'tornado.log', 'import', 'app_log', 'from', 'tornado.testing', 'import', 'AsyncHTTPTestCase,', 'ExpectLog', 'from', 'tornado.web', 'import', 'RequestHandler,', 'Application,', 'HTTPError', 'try:', 'from', 'unittest', 'import', 'mock', 'except', 'ImportError:', 'mock', '=', 'None', 'class', 'OpenIdClientLoginHandler(RequestHandler,', 'OpenIdMixin):', 'def', 'initialize(self,', 'test):', 'self._OPENID_ENDPOINT', '=', 'test.get_url(\"/openid/server/authenticate\")', '@gen.coroutine', 'def', 'get(self):', 'if', 'self.get_argument(\"openid.mode\",', 'None):', 'user', '=', 'yield', 'self.get_authenticated_user(', 'http_client=self.settings[\"http_client\"]', ')', 'if', 'user', 'is', 'None:', 'raise', 'Exception(\"user', 'is', 'None\")', 'self.finish(user)', 'return', 'res', '=', 'self.authenticate_redirect()', 'assert', 'res', 'is', 'None', 'class', 'OpenIdServerAuthenticateHandler(RequestHandler):', 'def', 'post(self):', 'if', 'self.get_argument(\"openid.mode\")', '!=', '\"check_authentication\":', 'raise', 'Exception(\"incorrect', 'openid.mode', '%r\")', 'self.write(\"is_valid:true\")', 'class', 'OAuth1ClientLoginHandler(RequestHandler,', 'OAuthMixin):', 'def', 'initialize(self,', 'test,', 'version):', 'self._OAUTH_VERSION', '=', 'version', 'self._OAUTH_REQUEST_TOKEN_URL', '=', 'test.get_url(\"/oauth1/server/request_token\")', 'self._OAUTH_AUTHORIZE_URL', '=', 'test.get_url(\"/oauth1/server/authorize\")', 'self._OAUTH_ACCESS_TOKEN_URL', '=', 'test.get_url(\"/oauth1/server/access_token\")', 'def', '_oauth_consumer_token(self):', 'return', 'dict(key=\"asdf\",', 'secret=\"qwer\")', '@gen.coroutine', 'def', 'get(self):', 'if', 'self.get_argument(\"oauth_token\",', 'None):', 'user', '=', 'yield', 'self.get_authenticated_user(', 'http_client=self.settings[\"http_client\"]', ')', 'if', 'user', 'is', 'None:', 'raise', 'Exception(\"user', 'is', 'None\")', 'self.finish(user)', 'return', 'yield', 'self.authorize_redirect(http_client=self.settings[\"http_client\"])', '@gen.coroutine', 'def', '_oauth_get_user_future(self,', 'access_token):', 'if', 'self.get_argument(\"fail_in_get_user\",', 'None):', 'raise', 'Exception(\"failing', 'in', 'get_user\")', 'if', 'access_token', '!=', 'dict(key=\"uiop\",', 'secret=\"5678\"):', 'raise', 'Exception(\"incorrect', 'access', 'token', '%r\"', '%', 'access_token)', 'return', 'dict(email=\"foo@example.com\")', 'class', 'OAuth1ClientLoginCoroutineHandler(OAuth1ClientLoginHandler):', '@gen.coroutine', 'def', 'get(self):', 'if', 'self.get_argument(\"oauth_token\",', 'None):', 'try:', 'yield', 'self.get_authenticated_user()', 'except', 'Exception', 'as', 'e:', 'self.set_status(503)', 'self.write(\"got', 'exception:', '%s\"', '%', 'e)', 'else:', 'yield', 'self.authorize_redirect()', 'class', 'OAuth1ClientRequestParametersHandler(RequestHandler,', 'OAuthMixin):', 'def', 'initialize(self,', 'version):', 'self._OAUTH_VERSION', '=', 'version', 'def', '_oauth_consumer_token(self):', 'return', 'dict(key=\"asdf\",', 'secret=\"qwer\")', 'def', 'get(self):', 'params', '=', 'self._oauth_request_parameters(', '\"http://www.example.com/api/asdf\",', 'dict(key=\"uiop\",', 'secret=\"5678\"),', 'parameters=dict(foo=\"bar\"),', ')', 'self.write(params)', 'class', 'OAuth1ServerRequestTokenHandler(RequestHandler):', 'def', 'get(self):', 'self.write(\"oauth_token=zxcv&oauth_token_secret=1234\")', 'class', 'OAuth1ServerAccessTokenHandler(RequestHandler):', 'def', 'get(self):', 'self.write(\"oauth_token=uiop&oauth_token_secret=5678\")', 'class', 'OAuth2ClientLoginHandler(RequestHandler,', 'OAuth2Mixin):', 'def', 'initialize(self,', 'test):', 'self._OAUTH_AUTHORIZE_URL', '=', 'test.get_url(\"/oauth2/server/authorize\")', 'def', 'get(self):', 'res', '=', 'self.authorize_redirect()', 'assert', 'res', 'is', 'None', 'class', 'FacebookClientLoginHandler(RequestHandler,', 'FacebookGraphMixin):', 'def', 'initialize(self,', 'test):', 'self._OAUTH_AUTHORIZE_URL', '=', 'test.get_url(\"/facebook/server/authorize\")', 'self._OAUTH_ACCESS_TOKEN_URL', '=', 'test.get_url(\"/facebook/server/access_token\")', 'self._FACEBOOK_BASE_URL', '=', 'test.get_url(\"/facebook/server\")', '@gen.coroutine', 'def', 'get(self):', 'if', 'self.get_argument(\"code\",', 'None):', 'user', '=', 'yield', 'self.get_authenticated_user(', 'redirect_uri=self.request.full_url(),', 'client_id=self.settings[\"facebook_api_key\"],', 'client_secret=self.settings[\"facebook_secret\"],', 'code=self.get_argument(\"code\"),', ')', 'self.write(user)', 'else:', 'self.authorize_redirect(', 'redirect_uri=self.request.full_url(),', 'client_id=self.settings[\"facebook_api_key\"],', 'extra_params={\"scope\":', '\"read_stream,offline_access\"},', ')', 'class', 'FacebookServerAccessTokenHandler(RequestHandler):', 'def', 'get(self):', 'self.write(dict(access_token=\"asdf\",', 'expires_in=3600))', 'class', 'FacebookServerMeHandler(RequestHandler):', 'def', 'get(self):', 'self.write(\"{}\")', 'class', 'TwitterClientHandler(RequestHandler,', 'TwitterMixin):', 'def', 'initialize(self,', 'test):', 'self._OAUTH_REQUEST_TOKEN_URL', '=', 'test.get_url(\"/oauth1/server/request_token\")', 'self._OAUTH_ACCESS_TOKEN_URL', '=', 'test.get_url(\"/twitter/server/access_token\")', 'self._OAUTH_AUTHORIZE_URL', '=', 'test.get_url(\"/oauth1/server/authorize\")', 'self._OAUTH_AUTHENTICATE_URL', '=', 'test.get_url(\"/twitter/server/authenticate\")', 'self._TWITTER_BASE_URL', '=', 'test.get_url(\"/twitter/api\")', 'def', 'get_auth_http_client(self):', 'return', 'self.settings[\"http_client\"]', 'class', 'TwitterClientLoginHandler(TwitterClientHandler):', '@gen.coroutine', 'def', 'get(self):', 'if', 'self.get_argument(\"oauth_token\",', 'None):', 'user', '=', 'yield', 'self.get_authenticated_user()', 'if', 'user', 'is', 'None:', 'raise', 'Exception(\"user', 'is', 'None\")', 'self.finish(user)', 'return', 'yield', 'self.authorize_redirect()', 'class', 'TwitterClientAuthenticateHandler(TwitterClientHandler):', '@gen.coroutine', 'def', 'get(self):', 'if', 'self.get_argument(\"oauth_token\",', 'None):', 'user', '=', 'yield', 'self.get_authenticated_user()', 'if', 'user', 'is', 'None:', 'raise', 'Exception(\"user', 'is', 'None\")', 'self.finish(user)', 'return', 'yield', 'self.authenticate_redirect()', 'class', 'TwitterClientLoginGenCoroutineHandler(TwitterClientHandler):', '@gen.coroutine', 'def', 'get(self):', 'if', 'self.get_argument(\"oauth_token\",', 'None):', 'user', '=', 'yield', 'self.get_authenticated_user()', 'self.finish(user)', 'else:', 'yield', 'self.authorize_redirect()', 'class', 'TwitterClientShowUserHandler(TwitterClientHandler):', '@gen.coroutine', 'def', 'get(self):', 'try:', 'response', '=', 'yield', 'self.twitter_request(', '\"/users/show/%s\"', '%', 'self.get_argument(\"name\"),', 'access_token=dict(key=\"hjkl\",', 'secret=\"vbnm\"),', ')', 'except', 'HTTPClientError:', 'self.set_status(500)', 'self.finish(\"error', 'from', 'twitter', 'request\")', 'else:', 'self.finish(response)', 'class', 'TwitterServerAccessTokenHandler(RequestHandler):', 'def', 'get(self):', 'self.write(\"oauth_token=hjkl&oauth_token_secret=vbnm&screen_name=foo\")', 'class', 'TwitterServerShowUserHandler(RequestHandler):', 'def', 'get(self,', 'screen_name):', 'if', 'screen_name', '==', '\"error\":', 'raise', 'HTTPError(500)', 'assert', '\"oauth_nonce\"', 'in', 'self.request.arguments', 'assert', '\"oauth_timestamp\"', 'in', 'self.request.arguments', 'assert', '\"oauth_signature\"', 'in', 'self.request.arguments', 'assert', 'self.get_argument(\"oauth_consumer_key\")', '==', '\"test_twitter_consumer_key\"', 'assert', 'self.get_argument(\"oauth_signature_method\")', '==', '\"HMAC-SHA1\"', 'assert', 'self.get_argument(\"oauth_version\")', '==', '\"1.0\"', 'assert', 'self.get_argument(\"oauth_token\")', '==', '\"hjkl\"', 'self.write(dict(screen_name=screen_name,', 'name=screen_name.capitalize()))', 'class', 'TwitterServerVerifyCredentialsHandler(RequestHandler):', 'def', 'get(self):', 'assert', '\"oauth_nonce\"', 'in', 'self.request.arguments', 'assert', '\"oauth_timestamp\"', 'in', 'self.request.arguments', 'assert', '\"oauth_signature\"', 'in', 'self.request.arguments', 'assert', 'self.get_argument(\"oauth_consumer_key\")', '==', '\"test_twitter_consumer_key\"', 'assert', 'self.get_argument(\"oauth_signature_method\")', '==', '\"HMAC-SHA1\"', 'assert', 'self.get_argument(\"oauth_version\")', '==', '\"1.0\"', 'assert', 'self.get_argument(\"oauth_token\")', '==', '\"hjkl\"', 'self.write(dict(screen_name=\"foo\",', 'name=\"Foo\"))', 'class', 'AuthTest(AsyncHTTPTestCase):', 'def', 'get_app(self):', 'return', 'Application(', '[', '(\"/openid/client/login\",', 'OpenIdClientLoginHandler,', 'dict(test=self)),', '(', '\"/oauth10/client/login\",', 'OAuth1ClientLoginHandler,', 'dict(test=self,', 'version=\"1.0\"),', '),', '(', '\"/oauth10/client/request_params\",', 'OAuth1ClientRequestParametersHandler,', 'dict(version=\"1.0\"),', '),', '(', '\"/oauth10a/client/login\",', 'OAuth1ClientLoginHandler,', 'dict(test=self,', 'version=\"1.0a\"),', '),', '(', '\"/oauth10a/client/login_coroutine\",', 'OAuth1ClientLoginCoroutineHandler,', 'dict(test=self,', 'version=\"1.0a\"),', '),', '(', '\"/oauth10a/client/request_params\",', 'OAuth1ClientRequestParametersHandler,', 'dict(version=\"1.0a\"),', '),', '(\"/oauth2/client/login\",', 'OAuth2ClientLoginHandler,', 'dict(test=self)),', '(\"/facebook/client/login\",', 'FacebookClientLoginHandler,', 'dict(test=self)),', '(\"/twitter/client/login\",', 'TwitterClientLoginHandler,', 'dict(test=self)),', '(', '\"/twitter/client/authenticate\",', 'TwitterClientAuthenticateHandler,', 'dict(test=self),', '),', '(', '\"/twitter/client/login_gen_coroutine\",', 'TwitterClientLoginGenCoroutineHandler,', 'dict(test=self),', '),', '(', '\"/twitter/client/show_user\",', 'TwitterClientShowUserHandler,', 'dict(test=self),', '),', '(\"/openid/server/authenticate\",', 'OpenIdServerAuthenticateHandler),', '(\"/oauth1/server/request_token\",', 'OAuth1ServerRequestTokenHandler),', '(\"/oauth1/server/access_token\",', 'OAuth1ServerAccessTokenHandler),', '(\"/facebook/server/access_token\",', 'FacebookServerAccessTokenHandler),', '(\"/facebook/server/me\",', 'FacebookServerMeHandler),', '(\"/twitter/server/access_token\",', 'TwitterServerAccessTokenHandler),', '(r\"/twitter/api/users/show/(.*)\\\\.json\",', 'TwitterServerShowUserHandler),', '(', 'r\"/twitter/api/account/verify_credentials\\\\.json\",', 'TwitterServerVerifyCredentialsHandler,', '),', '],', 'http_client=self.http_client,', 'twitter_consumer_key=\"test_twitter_consumer_key\",', 'twitter_consumer_secret=\"test_twitter_consumer_secret\",', 'facebook_api_key=\"test_facebook_api_key\",', 'facebook_secret=\"test_facebook_secret\",', ')', 'def', 'test_openid_redirect(self):', 'response', '=', 'self.fetch(\"/openid/client/login\",', 'follow_redirects=False)', 'self.assertEqual(response.code,', '302)', 'self.assertTrue(\"/openid/server/authenticate?\"', 'in', 'response.headers[\"Location\"])', 'def', 'test_openid_get_user(self):', 'response', '=', 'self.fetch(', '\"/openid/client/login?openid.mode=blah\"', '\"&openid.ns.ax=http://openid.net/srv/ax/1.0\"', '\"&openid.ax.type.email=http://axschema.org/contact/email\"', '\"&openid.ax.value.email=foo@example.com\"', ')', 'response.rethrow()', 'parsed', '=', 'json_decode(response.body)', 'self.assertEqual(parsed[\"email\"],', '\"foo@example.com\")', 'def', 'test_oauth10_redirect(self):', 'response', '=', 'self.fetch(\"/oauth10/client/login\",', 'follow_redirects=False)', 'self.assertEqual(response.code,', '302)', 'self.assertTrue(', 'response.headers[\"Location\"].endswith(', '\"/oauth1/server/authorize?oauth_token=zxcv\"', ')', ')', 'self.assertTrue(', '\\'_oauth_request_token=\"enhjdg==|MTIzNA==\"\\'', 'in', 'response.headers[\"Set-Cookie\"],', 'response.headers[\"Set-Cookie\"],', ')', 'def', 'test_oauth10_get_user(self):', 'response', '=', 'self.fetch(', '\"/oauth10/client/login?oauth_token=zxcv\",', 'headers={\"Cookie\":', '\"_oauth_request_token=enhjdg==|MTIzNA==\"},', ')', 'response.rethrow()', 'parsed', '=', 'json_decode(response.body)', 'self.assertEqual(parsed[\"email\"],', '\"foo@example.com\")', 'self.assertEqual(parsed[\"access_token\"],', 'dict(key=\"uiop\",', 'secret=\"5678\"))', 'def', 'test_oauth10_request_parameters(self):', 'response', '=', 'self.fetch(\"/oauth10/client/request_params\")', 'response.rethrow()', 'parsed', '=', 'json_decode(response.body)', 'self.assertEqual(parsed[\"oauth_consumer_key\"],', '\"asdf\")', 'self.assertEqual(parsed[\"oauth_token\"],', '\"uiop\")', 'self.assertTrue(\"oauth_nonce\"', 'in', 'parsed)', 'self.assertTrue(\"oauth_signature\"', 'in', 'parsed)', 'def', 'test_oauth10a_redirect(self):', 'response', '=', 'self.fetch(\"/oauth10a/client/login\",', 'follow_redirects=False)', 'self.assertEqual(response.code,', '302)', 'self.assertTrue(', 'response.headers[\"Location\"].endswith(', '\"/oauth1/server/authorize?oauth_token=zxcv\"', ')', ')', 'self.assertTrue(', '\\'_oauth_request_token=\"enhjdg==|MTIzNA==\"\\'', 'in', 'response.headers[\"Set-Cookie\"],', 'response.headers[\"Set-Cookie\"],', ')', '@unittest.skipIf(mock', 'is', 'None,', '\"mock', 'package', 'not', 'present\")', 'def', 'test_oauth10a_redirect_error(self):', 'with', 'mock.patch.object(OAuth1ServerRequestTokenHandler,', '\"get\")', 'as', 'get:', 'get.side_effect', '=', 'Exception(\"boom\")', 'with', 'ExpectLog(app_log,', '\"Uncaught', 'exception\"):', 'response', '=', 'self.fetch(\"/oauth10a/client/login\",', 'follow_redirects=False)', 'self.assertEqual(response.code,', '500)', 'def', 'test_oauth10a_get_user(self):', 'response', '=', 'self.fetch(', '\"/oauth10a/client/login?oauth_token=zxcv\",', 'headers={\"Cookie\":', '\"_oauth_request_token=enhjdg==|MTIzNA==\"},', ')', 'response.rethrow()', 'parsed', '=', 'json_decode(response.body)', 'self.assertEqual(parsed[\"email\"],', '\"foo@example.com\")', 'self.assertEqual(parsed[\"access_token\"],', 'dict(key=\"uiop\",', 'secret=\"5678\"))', 'def', 'test_oauth10a_request_parameters(self):', 'response', '=', 'self.fetch(\"/oauth10a/client/request_params\")', 'response.rethrow()', 'parsed', '=', 'json_decode(response.body)', 'self.assertEqual(parsed[\"oauth_consumer_key\"],', '\"asdf\")', 'self.assertEqual(parsed[\"oauth_token\"],', '\"uiop\")', 'self.assertTrue(\"oauth_nonce\"', 'in', 'parsed)', 'self.assertTrue(\"oauth_signature\"', 'in', 'parsed)', 'def', 'test_oauth10a_get_user_coroutine_exception(self):', 'response', '=', 'self.fetch(', '\"/oauth10a/client/login_coroutine?oauth_token=zxcv&fail_in_get_user=true\",', 'headers={\"Cookie\":', '\"_oauth_request_token=enhjdg==|MTIzNA==\"},', ')', 'self.assertEqual(response.code,', '503)', 'def', 'test_oauth2_redirect(self):', 'response', '=', 'self.fetch(\"/oauth2/client/login\",', 'follow_redirects=False)', 'self.assertEqual(response.code,', '302)', 'self.assertTrue(\"/oauth2/server/authorize?\"', 'in', 'response.headers[\"Location\"])', 'def', 'test_facebook_login(self):', 'response', '=', 'self.fetch(\"/facebook/client/login\",', 'follow_redirects=False)', 'self.assertEqual(response.code,', '302)', 'self.assertTrue(\"/facebook/server/authorize?\"', 'in', 'response.headers[\"Location\"])', 'response', '=', 'self.fetch(', '\"/facebook/client/login?code=1234\",', 'follow_redirects=False', ')', 'self.assertEqual(response.code,', '200)', 'user', '=', 'json_decode(response.body)', 'self.assertEqual(user[\"access_token\"],', '\"asdf\")', 'self.assertEqual(user[\"session_expires\"],', '\"3600\")', 'def', 'base_twitter_redirect(self,', 'url):', 'response', '=', 'self.fetch(url,', 'follow_redirects=False)', 'self.assertEqual(response.code,', '302)', 'self.assertTrue(', 'response.headers[\"Location\"].endswith(', '\"/oauth1/server/authorize?oauth_token=zxcv\"', ')', ')', 'self.assertTrue(', '\\'_oauth_request_token=\"enhjdg==|MTIzNA==\"\\'', 'in', 'response.headers[\"Set-Cookie\"],', 'response.headers[\"Set-Cookie\"],', ')', 'def', 'test_twitter_redirect(self):', 'self.base_twitter_redirect(\"/twitter/client/login\")', 'def', 'test_twitter_redirect_gen_coroutine(self):', 'self.base_twitter_redirect(\"/twitter/client/login_gen_coroutine\")', 'def', 'test_twitter_authenticate_redirect(self):', 'response', '=', 'self.fetch(\"/twitter/client/authenticate\",', 'follow_redirects=False)', 'self.assertEqual(response.code,', '302)', 'self.assertTrue(', 'response.headers[\"Location\"].endswith(', '\"/twitter/server/authenticate?oauth_token=zxcv\"', '),', 'response.headers[\"Location\"],', ')', 'self.assertTrue(', '\\'_oauth_request_token=\"enhjdg==|MTIzNA==\"\\'', 'in', 'response.headers[\"Set-Cookie\"],', 'response.headers[\"Set-Cookie\"],', ')', 'def', 'test_twitter_get_user(self):', 'response', '=', 'self.fetch(', '\"/twitter/client/login?oauth_token=zxcv\",', 'headers={\"Cookie\":', '\"_oauth_request_token=enhjdg==|MTIzNA==\"},', ')', 'response.rethrow()', 'parsed', '=', 'json_decode(response.body)', 'self.assertEqual(', 'parsed,', '{', '\"access_token\":', '{', '\"key\":', '\"hjkl\",', '\"screen_name\":', '\"foo\",', '\"secret\":', '\"vbnm\",', '},', '\"name\":', '\"Foo\",', '\"screen_name\":', '\"foo\",', '\"username\":', '\"foo\",', '},', ')', 'def', 'test_twitter_show_user(self):', 'response', '=', 'self.fetch(\"/twitter/client/show_user?name=somebody\")', 'response.rethrow()', 'self.assertEqual(', 'json_decode(response.body),', '{\"name\":', '\"Somebody\",', '\"screen_name\":', '\"somebody\"}', ')', 'def', 'test_twitter_show_user_error(self):', 'response', '=', 'self.fetch(\"/twitter/client/show_user?name=error\")', 'self.assertEqual(response.code,', '500)', 'self.assertEqual(response.body,', 'b\"error', 'from', 'twitter', 'request\")', 'class', 'GoogleLoginHandler(RequestHandler,', 'GoogleOAuth2Mixin):', 'def', 'initialize(self,', 'test):', 'self.test', '=', 'test', 'self._OAUTH_REDIRECT_URI', '=', 'test.get_url(\"/client/login\")', 'self._OAUTH_AUTHORIZE_URL', '=', 'test.get_url(\"/google/oauth2/authorize\")', 'self._OAUTH_ACCESS_TOKEN_URL', '=', 'test.get_url(\"/google/oauth2/token\")', '@gen.coroutine', 'def', 'get(self):', 'code', '=', 'self.get_argument(\"code\",', 'None)', 'if', 'code', 'is', 'not', 'None:', 'access', '=', 'yield', 'self.get_authenticated_user(self._OAUTH_REDIRECT_URI,', 'code)', 'user', '=', 'yield', 'self.oauth2_request(', 'self.test.get_url(\"/google/oauth2/userinfo\"),', 'access_token=access[\"access_token\"],', ')', 'user[\"access_token\"]', '=', 'access[\"access_token\"]', 'self.write(user)', 'else:', 'self.authorize_redirect(', 'redirect_uri=self._OAUTH_REDIRECT_URI,', 'client_id=self.settings[\"google_oauth\"][\"key\"],', 'scope=[\"profile\",', '\"email\"],', 'response_type=\"code\",', 'extra_params={\"prompt\":', '\"select_account\"},', ')', 'class', 'GoogleOAuth2AuthorizeHandler(RequestHandler):', 'def', 'get(self):', 'code', '=', '\"fake-authorization-code\"', 'self.redirect(url_concat(self.get_argument(\"redirect_uri\"),', 'dict(code=code)))', 'class', 'GoogleOAuth2TokenHandler(RequestHandler):', 'def', 'post(self):', 'assert', 'self.get_argument(\"code\")', '==', '\"fake-authorization-code\"', 'self.finish(', '{\"access_token\":', '\"fake-access-token\",', '\"expires_in\":', '\"never-expires\"}', ')', 'class', 'GoogleOAuth2UserinfoHandler(RequestHandler):', 'def', 'get(self):', 'assert', 'self.get_argument(\"access_token\")', '==', '\"fake-access-token\"', 'self.finish({\"name\":', '\"Foo\",', '\"email\":', '\"foo@example.com\"})', 'class', 'GoogleOAuth2Test(AsyncHTTPTestCase):', 'def', 'get_app(self):', 'return', 'Application(', '[', '(\"/client/login\",', 'GoogleLoginHandler,', 'dict(test=self)),', '(\"/google/oauth2/authorize\",', 'GoogleOAuth2AuthorizeHandler),', '(\"/google/oauth2/token\",', 'GoogleOAuth2TokenHandler),', '(\"/google/oauth2/userinfo\",', 'GoogleOAuth2UserinfoHandler),', '],', 'google_oauth={', '\"key\":', '\"fake_google_client_id\",', '\"secret\":', '\"fake_google_client_secret\",', '},', ')', 'def', 'test_google_login(self):', 'response', '=', 'self.fetch(\"/client/login\")', 'self.assertDictEqual(', '{', '\"name\":', '\"Foo\",', '\"email\":', '\"foo@example.com\",', '\"access_token\":', '\"fake-access-token\",', '},', 'json_decode(response.body),', ')']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/autoreload_test.py",
        "vector": "['import', 'os', 'import', 'shutil', 'import', 'subprocess', 'from', 'subprocess', 'import', 'Popen', 'import', 'sys', 'from', 'tempfile', 'import', 'mkdtemp', 'import', 'textwrap', 'import', 'time', 'import', 'unittest', 'class', 'AutoreloadTest(unittest.TestCase):', 'def', 'setUp(self):', 'self.maxDiff', '=', '1024', 'self.path', '=', 'mkdtemp()', 'self.write_files(', '{', '\"run_twice_magic.py\":', '}', ')', 'def', 'tearDown(self):', 'try:', 'shutil.rmtree(self.path)', 'except', 'OSError:', 'time.sleep(1)', 'shutil.rmtree(self.path)', 'def', 'write_files(self,', 'tree,', 'base_path=None):', 'if', 'base_path', 'is', 'None:', 'base_path', '=', 'self.path', 'for', 'name,', 'contents', 'in', 'tree.items():', 'if', 'isinstance(contents,', 'dict):', 'os.mkdir(os.path.join(base_path,', 'name))', 'self.write_files(contents,', 'os.path.join(base_path,', 'name))', 'else:', 'with', 'open(os.path.join(base_path,', 'name),', '\"w\",', 'encoding=\"utf-8\")', 'as', 'f:', 'f.write(textwrap.dedent(contents))', 'def', 'run_subprocess(self,', 'args):', 'pythonpath', '=', 'os.getcwd()', 'if', '\"PYTHONPATH\"', 'in', 'os.environ:', 'pythonpath', '+=', 'os.pathsep', '+', 'os.environ[\"PYTHONPATH\"]', 'p', '=', 'Popen(', 'args,', 'stdout=subprocess.PIPE,', 'env=dict(os.environ,', 'PYTHONPATH=pythonpath),', 'cwd=self.path,', 'universal_newlines=True,', 'encoding=\"utf-8\",', ')', 'for', 'i', 'in', 'range(40):', 'if', 'p.poll()', 'is', 'not', 'None:', 'break', 'time.sleep(0.1)', 'else:', 'p.kill()', 'raise', 'Exception(\"subprocess', 'failed', 'to', 'terminate\")', 'out', '=', 'p.communicate()[0]', 'self.assertEqual(p.returncode,', '0)', 'return', 'out', 'def', 'test_reload(self):', 'main', '=', 'self.write_files(', '{', '\"testapp\":', '{', '\"__init__.py\":', '\"\",', '\"__main__.py\":', 'main,', '},', '}', ')', 'for', 'wrapper', 'in', '[False,', 'True]:', 'with', 'self.subTest(wrapper=wrapper):', 'with', 'self.subTest(mode=\"module\"):', 'if', 'wrapper:', 'base_args', '=', '[sys.executable,', '\"-m\",', '\"tornado.autoreload\"]', 'else:', 'base_args', '=', '[sys.executable]', 'out', '=', 'self.run_subprocess(base_args', '+', '[\"-m\",', '\"testapp\"])', 'self.assertEqual(', 'out,', '(', '\"import', 'testapp', 'succeeded\\\\n\"', '+', '\"Starting', \"__name__='__main__',\", '__spec__.name=testapp.__main__\\\\n\"', ')', '*', '2,', ')', 'with', 'self.subTest(mode=\"file\"):', 'out', '=', 'self.run_subprocess(base_args', '+', '[\"testapp/__main__.py\"])', 'expect_import', '=', '(', '\"import', 'testapp', 'succeeded\"', 'if', 'wrapper', 'else', '\"import', 'testapp', 'failed\"', ')', 'self.assertEqual(', 'out,', 'f\"{expect_import}\\\\nStarting', \"__name__='__main__',\", '__spec__.name=None\\\\n\"', '*', '2,', ')', 'with', 'self.subTest(mode=\"directory\"):', 'out', '=', 'self.run_subprocess(base_args', '+', '[\"testapp\"])', 'expect_import', '=', '(', '\"import', 'testapp', 'succeeded\"', 'if', 'wrapper', 'else', '\"import', 'testapp', 'failed\"', ')', 'self.assertEqual(', 'out,', 'f\"{expect_import}\\\\nStarting', \"__name__='__main__',\", '__spec__.name=__main__\\\\n\"', '*', '2,', ')', 'def', 'test_reload_wrapper_preservation(self):', 'main', '=', 'self.write_files(', '{', '\"testapp\":', '{', '\"__init__.py\":', '\"\",', '\"__main__.py\":', 'main,', '},', '}', ')', 'out', '=', 'self.run_subprocess(', '[sys.executable,', '\"-m\",', '\"tornado.autoreload\",', '\"-m\",', '\"testapp\"]', ')', 'self.assertEqual(out,', '\"Starting\\\\n\"', '*', '2)', 'def', 'test_reload_wrapper_args(self):', 'main', '=', 'self.write_files({\"main.py\":', 'main})', 'out', '=', 'self.run_subprocess(', '[', 'sys.executable,', '\"-m\",', '\"tornado.autoreload\",', '\"main.py\",', '\"arg1\",', '\"--arg2\",', '\"-m\",', '\"arg3\",', '],', ')', 'self.assertEqual(out,', '\"main.py\\\\nargv=[\\'arg1\\',', \"'--arg2',\", \"'-m',\", '\\'arg3\\']\\\\n\"', '*', '2)', 'def', 'test_reload_wrapper_until_success(self):', 'main', '=', 'self.write_files({\"main.py\":', 'main})', 'out', '=', 'self.run_subprocess(', '[sys.executable,', '\"-m\",', '\"tornado.autoreload\",', '\"--until-success\",', '\"main.py\"]', ')', 'self.assertEqual(out,', '\"reloading\\\\nexiting', 'cleanly\\\\n\")']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/circlerefs_test.py",
        "vector": "['import', 'asyncio', 'import', 'contextlib', 'import', 'gc', 'import', 'io', 'import', 'sys', 'import', 'traceback', 'import', 'types', 'import', 'typing', 'import', 'unittest', 'import', 'tornado', 'from', 'tornado', 'import', 'web,', 'gen,', 'httpclient', 'from', 'tornado.test.util', 'import', 'skipNotCPython', 'def', 'find_circular_references(garbage):', 'def', 'inner(level):', 'for', 'item', 'in', 'level:', 'item_id', '=', 'id(item)', 'if', 'item_id', 'not', 'in', 'garbage_ids:', 'continue', 'if', 'item_id', 'in', 'visited_ids:', 'continue', 'if', 'item_id', 'in', 'stack_ids:', 'candidate', '=', 'stack[stack.index(item)', ':]', 'candidate.append(item)', 'found.append(candidate)', 'continue', 'stack.append(item)', 'stack_ids.add(item_id)', 'inner(gc.get_referents(item))', 'stack.pop()', 'stack_ids.remove(item_id)', 'visited_ids.add(item_id)', 'found:', 'typing.List[object]', '=', '[]', 'stack', '=', '[]', 'stack_ids', '=', 'set()', 'garbage_ids', '=', 'set(map(id,', 'garbage))', 'visited_ids', '=', 'set()', 'inner(garbage)', 'return', 'found', '@contextlib.contextmanager', 'def', 'assert_no_cycle_garbage():', 'gc.disable()', 'gc.collect()', 'gc.set_debug(gc.DEBUG_STATS', '|', 'gc.DEBUG_SAVEALL)', 'yield', 'try:', 'f', '=', 'io.StringIO()', 'old_stderr', '=', 'sys.stderr', 'sys.stderr', '=', 'f', 'try:', 'gc.collect()', 'finally:', 'sys.stderr', '=', 'old_stderr', 'garbage', '=', 'gc.garbage[:]', 'gc.garbage[:]', '=', '[]', 'if', 'len(garbage)', '==', '0:', 'return', 'for', 'circular', 'in', 'find_circular_references(garbage):', 'f.write(\"\\\\n==========\\\\n', 'Circular', '\\\\n==========\")', 'for', 'item', 'in', 'circular:', 'f.write(f\"\\\\n', '{repr(item)}\")', 'for', 'item', 'in', 'circular:', 'if', 'isinstance(item,', 'types.FrameType):', 'f.write(f\"\\\\nLocals:', '{item.f_locals}\")', 'f.write(f\"\\\\nTraceback:', '{repr(item)}\")', 'traceback.print_stack(item)', 'del', 'garbage', 'raise', 'AssertionError(f.getvalue())', 'finally:', 'gc.set_debug(0)', 'gc.enable()', '@skipNotCPython', 'class', 'CircleRefsTest(unittest.TestCase):', 'def', 'test_known_leak(self):', 'class', 'C(object):', 'def', '__init__(self,', 'name):', 'self.name', '=', 'name', 'self.a:', 'typing.Optional[C]', '=', 'None', 'self.b:', 'typing.Optional[C]', '=', 'None', 'self.c:', 'typing.Optional[C]', '=', 'None', 'def', '__repr__(self):', 'return', 'f\"name={self.name}\"', 'with', 'self.assertRaises(AssertionError)', 'as', 'cm:', 'with', 'assert_no_cycle_garbage():', 'a', '=', 'C(\"a\")', 'b', '=', 'C(\"b\")', 'c', '=', 'C(\"c\")', 'a.b', '=', 'b', 'a.c', '=', 'c', 'b.a', '=', 'a', 'b.c', '=', 'c', 'del', 'a,', 'b', 'self.assertIn(\"Circular\",', 'str(cm.exception))', 'self.assertIn(\"', 'name=a\",', 'str(cm.exception))', 'self.assertIn(\"', 'name=b\",', 'str(cm.exception))', 'self.assertNotIn(\"', 'name=c\",', 'str(cm.exception))', 'async', 'def', 'run_handler(self,', 'handler_class):', 'app', '=', 'web.Application(', '[', '(r\"/\",', 'handler_class),', ']', ')', 'socket,', 'port', '=', 'tornado.testing.bind_unused_port()', 'server', '=', 'tornado.httpserver.HTTPServer(app)', 'server.add_socket(socket)', 'client', '=', 'httpclient.AsyncHTTPClient()', 'with', 'assert_no_cycle_garbage():', 'await', 'client.fetch(f\"http://127.0.0.1:{port}/\")', 'client.close()', 'server.stop()', 'socket.close()', 'def', 'test_sync_handler(self):', 'class', 'Handler(web.RequestHandler):', 'def', 'get(self):', 'self.write(\"ok\\\\n\")', 'asyncio.run(self.run_handler(Handler))', 'def', 'test_finish_exception_handler(self):', 'class', 'Handler(web.RequestHandler):', 'def', 'get(self):', 'raise', 'web.Finish(\"ok\\\\n\")', 'asyncio.run(self.run_handler(Handler))', 'def', 'test_coro_handler(self):', 'class', 'Handler(web.RequestHandler):', '@gen.coroutine', 'def', 'get(self):', 'yield', 'asyncio.sleep(0.01)', 'self.write(\"ok\\\\n\")', 'asyncio.run(self.run_handler(Handler))', 'def', 'test_async_handler(self):', 'class', 'Handler(web.RequestHandler):', 'async', 'def', 'get(self):', 'await', 'asyncio.sleep(0.01)', 'self.write(\"ok\\\\n\")', 'asyncio.run(self.run_handler(Handler))', 'def', 'test_run_on_executor(self):', 'import', 'concurrent.futures', 'with', 'concurrent.futures.ThreadPoolExecutor(1)', 'as', 'thread_pool:', 'class', 'Factory(object):', 'executor', '=', 'thread_pool', '@tornado.concurrent.run_on_executor', 'def', 'run(self):', 'return', 'None', 'factory', '=', 'Factory()', 'async', 'def', 'main():', 'for', 'i', 'in', 'range(2):', 'await', 'factory.run()', 'with', 'assert_no_cycle_garbage():', 'asyncio.run(main())']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/concurrent_test.py",
        "vector": "['from', 'concurrent', 'import', 'futures', 'import', 'logging', 'import', 're', 'import', 'socket', 'import', 'typing', 'import', 'unittest', 'from', 'tornado.concurrent', 'import', '(', 'Future,', 'run_on_executor,', 'future_set_result_unless_cancelled,', ')', 'from', 'tornado.escape', 'import', 'utf8,', 'to_unicode', 'from', 'tornado', 'import', 'gen', 'from', 'tornado.iostream', 'import', 'IOStream', 'from', 'tornado.tcpserver', 'import', 'TCPServer', 'from', 'tornado.testing', 'import', 'AsyncTestCase,', 'bind_unused_port,', 'gen_test', 'class', 'MiscFutureTest(AsyncTestCase):', 'def', 'test_future_set_result_unless_cancelled(self):', 'fut', '=', 'Future()', 'future_set_result_unless_cancelled(fut,', '42)', 'self.assertEqual(fut.result(),', '42)', 'self.assertFalse(fut.cancelled())', 'fut', '=', 'Future()', 'fut.cancel()', 'is_cancelled', '=', 'fut.cancelled()', 'future_set_result_unless_cancelled(fut,', '42)', 'self.assertEqual(fut.cancelled(),', 'is_cancelled)', 'if', 'not', 'is_cancelled:', 'self.assertEqual(fut.result(),', '42)', 'class', 'CapServer(TCPServer):', '@gen.coroutine', 'def', 'handle_stream(self,', 'stream,', 'address):', 'data', '=', 'yield', 'stream.read_until(b\"\\\\n\")', 'data', '=', 'to_unicode(data)', 'if', 'data', '==', 'data.upper():', 'stream.write(b\"error\\\\talready', 'capitalized\\\\n\")', 'else:', 'stream.write(utf8(\"ok\\\\t%s\"', '%', 'data.upper()))', 'stream.close()', 'class', 'CapError(Exception):', 'pass', 'class', 'BaseCapClient(object):', 'def', '__init__(self,', 'port):', 'self.port', '=', 'port', 'def', 'process_response(self,', 'data):', 'm', '=', 're.match(\"(.*)\\\\t(.*)\\\\n\",', 'to_unicode(data))', 'if', 'm', 'is', 'None:', 'raise', 'Exception(\"did', 'not', 'match\")', 'status,', 'message', '=', 'm.groups()', 'if', 'status', '==', '\"ok\":', 'return', 'message', 'else:', 'raise', 'CapError(message)', 'class', 'GeneratorCapClient(BaseCapClient):', '@gen.coroutine', 'def', 'capitalize(self,', 'request_data):', 'logging.debug(\"capitalize\")', 'stream', '=', 'IOStream(socket.socket())', 'logging.debug(\"connecting\")', 'yield', 'stream.connect((\"127.0.0.1\",', 'self.port))', 'stream.write(utf8(request_data', '+', '\"\\\\n\"))', 'logging.debug(\"reading\")', 'data', '=', 'yield', 'stream.read_until(b\"\\\\n\")', 'logging.debug(\"returning\")', 'stream.close()', 'raise', 'gen.Return(self.process_response(data))', 'class', 'ClientTestMixin(object):', 'client_class', '=', 'None', 'def', 'setUp(self):', 'super().setUp()', 'self.server', '=', 'CapServer()', 'sock,', 'port', '=', 'bind_unused_port()', 'self.server.add_sockets([sock])', 'self.client', '=', 'self.client_class(port=port)', 'def', 'tearDown(self):', 'self.server.stop()', 'super().tearDown()', 'def', 'test_future(self:', 'typing.Any):', 'future', '=', 'self.client.capitalize(\"hello\")', 'self.io_loop.add_future(future,', 'self.stop)', 'self.wait()', 'self.assertEqual(future.result(),', '\"HELLO\")', 'def', 'test_future_error(self:', 'typing.Any):', 'future', '=', 'self.client.capitalize(\"HELLO\")', 'self.io_loop.add_future(future,', 'self.stop)', 'self.wait()', 'self.assertRaisesRegex(CapError,', '\"already', 'capitalized\",', 'future.result)', 'def', 'test_generator(self:', 'typing.Any):', '@gen.coroutine', 'def', 'f():', 'result', '=', 'yield', 'self.client.capitalize(\"hello\")', 'self.assertEqual(result,', '\"HELLO\")', 'self.io_loop.run_sync(f)', 'def', 'test_generator_error(self:', 'typing.Any):', '@gen.coroutine', 'def', 'f():', 'with', 'self.assertRaisesRegex(CapError,', '\"already', 'capitalized\"):', 'yield', 'self.client.capitalize(\"HELLO\")', 'self.io_loop.run_sync(f)', 'class', 'GeneratorClientTest(ClientTestMixin,', 'AsyncTestCase):', 'client_class', '=', 'GeneratorCapClient', 'class', 'RunOnExecutorTest(AsyncTestCase):', '@gen_test', 'def', 'test_no_calling(self):', 'class', 'Object(object):', 'def', '__init__(self):', 'self.executor', '=', 'futures.thread.ThreadPoolExecutor(1)', '@run_on_executor', 'def', 'f(self):', 'return', '42', 'o', '=', 'Object()', 'answer', '=', 'yield', 'o.f()', 'self.assertEqual(answer,', '42)', '@gen_test', 'def', 'test_call_with_no_args(self):', 'class', 'Object(object):', 'def', '__init__(self):', 'self.executor', '=', 'futures.thread.ThreadPoolExecutor(1)', '@run_on_executor()', 'def', 'f(self):', 'return', '42', 'o', '=', 'Object()', 'answer', '=', 'yield', 'o.f()', 'self.assertEqual(answer,', '42)', '@gen_test', 'def', 'test_call_with_executor(self):', 'class', 'Object(object):', 'def', '__init__(self):', 'self.__executor', '=', 'futures.thread.ThreadPoolExecutor(1)', '@run_on_executor(executor=\"_Object__executor\")', 'def', 'f(self):', 'return', '42', 'o', '=', 'Object()', 'answer', '=', 'yield', 'o.f()', 'self.assertEqual(answer,', '42)', '@gen_test', 'def', 'test_async_await(self):', 'class', 'Object(object):', 'def', '__init__(self):', 'self.executor', '=', 'futures.thread.ThreadPoolExecutor(1)', '@run_on_executor()', 'def', 'f(self):', 'return', '42', 'o', '=', 'Object()', 'async', 'def', 'f():', 'answer', '=', 'await', 'o.f()', 'return', 'answer', 'result', '=', 'yield', 'f()', 'self.assertEqual(result,', '42)', 'if', '__name__', '==', '\"__main__\":', 'unittest.main()']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/curl_httpclient_test.py",
        "vector": "['from', 'hashlib', 'import', 'md5', 'import', 'unittest', 'from', 'tornado.escape', 'import', 'utf8', 'from', 'tornado.testing', 'import', 'AsyncHTTPTestCase', 'from', 'tornado.test', 'import', 'httpclient_test', 'from', 'tornado.web', 'import', 'Application,', 'RequestHandler', 'try:', 'import', 'pycurl', 'except', 'ImportError:', 'pycurl', '=', 'None', 'if', 'pycurl', 'is', 'not', 'None:', 'from', 'tornado.curl_httpclient', 'import', 'CurlAsyncHTTPClient', '@unittest.skipIf(pycurl', 'is', 'None,', '\"pycurl', 'module', 'not', 'present\")', 'class', 'CurlHTTPClientCommonTestCase(httpclient_test.HTTPClientCommonTestCase):', 'def', 'get_http_client(self):', 'client', '=', 'CurlAsyncHTTPClient(defaults=dict(allow_ipv6=False))', 'self.assertTrue(isinstance(client,', 'CurlAsyncHTTPClient))', 'return', 'client', 'class', 'DigestAuthHandler(RequestHandler):', 'def', 'initialize(self,', 'username,', 'password):', 'self.username', '=', 'username', 'self.password', '=', 'password', 'def', 'get(self):', 'realm', '=', '\"test\"', 'opaque', '=', '\"asdf\"', 'nonce', '=', '\"1234\"', 'auth_header', '=', 'self.request.headers.get(\"Authorization\",', 'None)', 'if', 'auth_header', 'is', 'not', 'None:', 'auth_mode,', 'params', '=', 'auth_header.split(\"', '\",', '1)', 'assert', 'auth_mode', '==', '\"Digest\"', 'param_dict', '=', '{}', 'for', 'pair', 'in', 'params.split(\",\"):', 'k,', 'v', '=', 'pair.strip().split(\"=\",', '1)', 'if', 'v[0]', '==', '\\'\"\\'', 'and', 'v[-1]', '==', '\\'\"\\':', 'v', '=', 'v[1:-1]', 'param_dict[k]', '=', 'v', 'assert', 'param_dict[\"realm\"]', '==', 'realm', 'assert', 'param_dict[\"opaque\"]', '==', 'opaque', 'assert', 'param_dict[\"nonce\"]', '==', 'nonce', 'assert', 'param_dict[\"username\"]', '==', 'self.username', 'assert', 'param_dict[\"uri\"]', '==', 'self.request.path', 'h1', '=', 'md5(', 'utf8(\"%s:%s:%s\"', '%', '(self.username,', 'realm,', 'self.password))', ').hexdigest()', 'h2', '=', 'md5(', 'utf8(\"%s:%s\"', '%', '(self.request.method,', 'self.request.path))', ').hexdigest()', 'digest', '=', 'md5(utf8(\"%s:%s:%s\"', '%', '(h1,', 'nonce,', 'h2))).hexdigest()', 'if', 'digest', '==', 'param_dict[\"response\"]:', 'self.write(\"ok\")', 'else:', 'self.write(\"fail\")', 'else:', 'self.set_status(401)', 'self.set_header(', '\"WWW-Authenticate\",', \"'Digest\", 'realm=\"%s\",', 'nonce=\"%s\",', 'opaque=\"%s\"\\'', '%', '(realm,', 'nonce,', 'opaque),', ')', 'class', 'CustomReasonHandler(RequestHandler):', 'def', 'get(self):', 'self.set_status(200,', '\"Custom', 'reason\")', 'class', 'CustomFailReasonHandler(RequestHandler):', 'def', 'get(self):', 'self.set_status(400,', '\"Custom', 'reason\")', '@unittest.skipIf(pycurl', 'is', 'None,', '\"pycurl', 'module', 'not', 'present\")', 'class', 'CurlHTTPClientTestCase(AsyncHTTPTestCase):', 'def', 'setUp(self):', 'super().setUp()', 'self.http_client', '=', 'self.create_client()', 'def', 'get_app(self):', 'return', 'Application(', '[', '(\"/digest\",', 'DigestAuthHandler,', '{\"username\":', '\"foo\",', '\"password\":', '\"bar\"}),', '(', '\"/digest_non_ascii\",', 'DigestAuthHandler,', '{\"username\":', '\"foo\",', '\"password\":', '\"bar\u30e6\u00a3\"},', '),', '(\"/custom_reason\",', 'CustomReasonHandler),', '(\"/custom_fail_reason\",', 'CustomFailReasonHandler),', ']', ')', 'def', 'create_client(self,', '**kwargs):', 'return', 'CurlAsyncHTTPClient(', 'force_instance=True,', 'defaults=dict(allow_ipv6=False),', '**kwargs', ')', 'def', 'test_digest_auth(self):', 'response', '=', 'self.fetch(', '\"/digest\",', 'auth_mode=\"digest\",', 'auth_username=\"foo\",', 'auth_password=\"bar\"', ')', 'self.assertEqual(response.body,', 'b\"ok\")', 'def', 'test_custom_reason(self):', 'response', '=', 'self.fetch(\"/custom_reason\")', 'self.assertEqual(response.reason,', '\"Custom', 'reason\")', 'def', 'test_fail_custom_reason(self):', 'response', '=', 'self.fetch(\"/custom_fail_reason\")', 'self.assertEqual(str(response.error),', '\"HTTP', '400:', 'Custom', 'reason\")', 'def', 'test_digest_auth_non_ascii(self):', 'response', '=', 'self.fetch(', '\"/digest_non_ascii\",', 'auth_mode=\"digest\",', 'auth_username=\"foo\",', 'auth_password=\"bar\u30e6\u00a3\",', ')', 'self.assertEqual(response.body,', 'b\"ok\")']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/escape_test.py",
        "vector": "['import', 'unittest', 'import', 'tornado', 'from', 'tornado.escape', 'import', '(', 'utf8,', 'xhtml_escape,', 'xhtml_unescape,', 'url_escape,', 'url_unescape,', 'to_unicode,', 'json_decode,', 'json_encode,', 'squeeze,', 'recursive_unicode,', ')', 'from', 'tornado.util', 'import', 'unicode_type', 'from', 'typing', 'import', 'List,', 'Tuple,', 'Union,', 'Dict,', 'Any', 'linkify_tests', '=', '[', '(', '\"hello', 'http://world.com/!\",', '{},', \"'hello\", '<a', 'href=\"http://world.com/\">http://world.com/</a>!\\',', '),', '(', '\"hello', 'http://world.com/with?param=true&stuff=yes\",', '{},', \"'hello\", '<a', 'href=\"http://world.com/with?param=true&amp;stuff=yes\">http://world.com/with?param=true&amp;stuff=yes</a>\\',', '),', '(', '\"http://url.com/w(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",', '{},', \"'<a\", 'href=\"http://url.com/w\">http://url.com/w</a>(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\',', '),', '(', '\"http://url.com/withmany.......................................\",', '{},', \"'<a\", 'href=\"http://url.com/withmany\">http://url.com/withmany</a>.......................................\\',', '),', '(', '\"http://url.com/withmany((((((((((((((((((((((((((((((((((a)\",', '{},', \"'<a\", 'href=\"http://url.com/withmany\">http://url.com/withmany</a>((((((((((((((((((((((((((((((((((a)\\',', '),', '(', '\"http://foo.com/blah_blah\",', '{},', \"'<a\", 'href=\"http://foo.com/blah_blah\">http://foo.com/blah_blah</a>\\',', '),', '(', '\"http://foo.com/blah_blah/\",', '{},', \"'<a\", 'href=\"http://foo.com/blah_blah/\">http://foo.com/blah_blah/</a>\\',', '),', '(', '\"(Something', 'like', 'http://foo.com/blah_blah)\",', '{},', \"'(Something\", 'like', '<a', 'href=\"http://foo.com/blah_blah\">http://foo.com/blah_blah</a>)\\',', '),', '(', '\"http://foo.com/blah_blah_(wikipedia)\",', '{},', \"'<a\", 'href=\"http://foo.com/blah_blah_(wikipedia)\">http://foo.com/blah_blah_(wikipedia)</a>\\',', '),', '(', '\"http://foo.com/blah_(blah)_(wikipedia)_blah\",', '{},', \"'<a\", 'href=\"http://foo.com/blah_(blah)_(wikipedia)_blah\">http://foo.com/blah_(blah)_(wikipedia)_blah</a>\\',', '),', '(', '\"(Something', 'like', 'http://foo.com/blah_blah_(wikipedia))\",', '{},', \"'(Something\", 'like', '<a', 'href=\"http://foo.com/blah_blah_(wikipedia)\">http://foo.com/blah_blah_(wikipedia)</a>)\\',', '),', '(', '\"http://foo.com/blah_blah.\",', '{},', \"'<a\", 'href=\"http://foo.com/blah_blah\">http://foo.com/blah_blah</a>.\\',', '),', '(', '\"http://foo.com/blah_blah/.\",', '{},', \"'<a\", 'href=\"http://foo.com/blah_blah/\">http://foo.com/blah_blah/</a>.\\',', '),', '(', '\"<http://foo.com/blah_blah>\",', '{},', \"'&lt;<a\", 'href=\"http://foo.com/blah_blah\">http://foo.com/blah_blah</a>&gt;\\',', '),', '(', '\"<http://foo.com/blah_blah/>\",', '{},', \"'&lt;<a\", 'href=\"http://foo.com/blah_blah/\">http://foo.com/blah_blah/</a>&gt;\\',', '),', '(', '\"http://foo.com/blah_blah,\",', '{},', \"'<a\", 'href=\"http://foo.com/blah_blah\">http://foo.com/blah_blah</a>,\\',', '),', '(', '\"http://www.example.com/wpstyle/?p=364.\",', '{},', \"'<a\", 'href=\"http://www.example.com/wpstyle/?p=364\">http://www.example.com/wpstyle/?p=364</a>.\\',', '),', '(', '\"rdar://1234\",', '{\"permitted_protocols\":', '[\"http\",', '\"rdar\"]},', \"'<a\", 'href=\"rdar://1234\">rdar://1234</a>\\',', '),', '(', '\"rdar:/1234\",', '{\"permitted_protocols\":', '[\"rdar\"]},', \"'<a\", 'href=\"rdar:/1234\">rdar:/1234</a>\\',', '),', '(', '\"http://userid:password@example.com:8080\",', '{},', \"'<a\", 'href=\"http://userid:password@example.com:8080\">http://userid:password@example.com:8080</a>\\',', '),', '(', '\"http://userid@example.com\",', '{},', \"'<a\", 'href=\"http://userid@example.com\">http://userid@example.com</a>\\',', '),', '(', '\"http://userid@example.com:8080\",', '{},', \"'<a\", 'href=\"http://userid@example.com:8080\">http://userid@example.com:8080</a>\\',', '),', '(', '\"http://userid:password@example.com\",', '{},', \"'<a\", 'href=\"http://userid:password@example.com\">http://userid:password@example.com</a>\\',', '),', '(', '\"message://%3c330e7f8409726r6a4ba78dkf1fd71420c1bf6ff@mail.gmail.com%3e\",', '{\"permitted_protocols\":', '[\"http\",', '\"message\"]},', \"'<a\", 'href=\"message://%3c330e7f8409726r6a4ba78dkf1fd71420c1bf6ff@mail.gmail.com%3e\">\\'', '\"message://%3c330e7f8409726r6a4ba78dkf1fd71420c1bf6ff@mail.gmail.com%3e</a>\",', '),', '(', '\"http://\\\\u27a1.ws/\\\\u4a39\",', '{},', \"'<a\", 'href=\"http://\\\\u27a1.ws/\\\\u4a39\">http://\\\\u27a1.ws/\\\\u4a39</a>\\',', '),', '(', '\"<tag>http://example.com</tag>\",', '{},', \"'&lt;tag&gt;<a\", 'href=\"http://example.com\">http://example.com</a>&lt;/tag&gt;\\',', '),', '(', '\"Just', 'a', 'www.example.com', 'link.\",', '{},', \"'Just\", 'a', '<a', 'href=\"http://www.example.com\">www.example.com</a>', \"link.',\", '),', '(', '\"Just', 'a', 'www.example.com', 'link.\",', '{\"require_protocol\":', 'True},', '\"Just', 'a', 'www.example.com', 'link.\",', '),', '(', '\"A', 'http://reallylong.com/link/that/exceedsthelenglimit.html\",', '{\"require_protocol\":', 'True,', '\"shorten\":', 'True},', \"'A\", '<a', 'href=\"http://reallylong.com/link/that/exceedsthelenglimit.html\"\\'', \"'\", 'title=\"http://reallylong.com/link/that/exceedsthelenglimit.html\">http://reallylong.com/link...</a>\\',', '),', '(', '\"A', 'http://reallylongdomainnamethatwillbetoolong.com/hi!\",', '{\"shorten\":', 'True},', \"'A\", '<a', 'href=\"http://reallylongdomainnamethatwillbetoolong.com/hi\"\\'', \"'\", 'title=\"http://reallylongdomainnamethatwillbetoolong.com/hi\">http://reallylongdomainnametha...</a>!\\',', '),', '(', '\"A', 'file:///passwords.txt', 'and', 'http://web.com', 'link\",', '{},', \"'A\", 'file:///passwords.txt', 'and', '<a', 'href=\"http://web.com\">http://web.com</a>', \"link',\", '),', '(', '\"A', 'file:///passwords.txt', 'and', 'http://web.com', 'link\",', '{\"permitted_protocols\":', '[\"file\"]},', \"'A\", '<a', 'href=\"file:///passwords.txt\">file:///passwords.txt</a>', 'and', 'http://web.com', \"link',\", '),', '(', '\"www.external-link.com\",', '{\"extra_params\":', '\\'rel=\"nofollow\"', 'class=\"external\"\\'},', \"'<a\", 'href=\"http://www.external-link.com\"', 'rel=\"nofollow\"', 'class=\"external\">www.external-link.com</a>\\',', '),', '(', '\"www.external-link.com', 'and', 'www.internal-link.com/blogs', 'extra\",', '{', '\"extra_params\":', 'lambda', 'href:', '\\'class=\"internal\"\\'', 'if', 'href.startswith(\"http://www.internal-link.com\")', 'else', '\\'rel=\"nofollow\"', 'class=\"external\"\\'', '},', \"'<a\", 'href=\"http://www.external-link.com\"', 'rel=\"nofollow\"', 'class=\"external\">www.external-link.com</a>\\'', \"'\", 'and', '<a', 'href=\"http://www.internal-link.com/blogs\"', 'class=\"internal\">www.internal-link.com/blogs</a>', \"extra',\", '),', '(', '\"www.external-link.com\",', '{\"extra_params\":', 'lambda', 'href:', \"'\", 'rel=\"nofollow\"', 'class=\"external\"', \"'},\", \"'<a\", 'href=\"http://www.external-link.com\"', 'rel=\"nofollow\"', 'class=\"external\">www.external-link.com</a>\\',', '),', ']', 'class', 'EscapeTestCase(unittest.TestCase):', 'def', 'test_linkify(self):', 'for', 'text,', 'kwargs,', 'html', 'in', 'linkify_tests:', 'linked', '=', 'tornado.escape.linkify(text,', '**kwargs)', 'self.assertEqual(linked,', 'html)', 'def', 'test_xhtml_escape(self):', 'tests', '=', '[', '(\"<foo>\",', '\"&lt;foo&gt;\"),', '(\"<foo>\",', '\"&lt;foo&gt;\"),', '(b\"<foo>\",', 'b\"&lt;foo&gt;\"),', '(\"<>&\\\\\"\\'\",', '\"&lt;&gt;&amp;&quot;&', '(\"&amp;\",', '\"&amp;amp;\"),', '(\"<\\\\u00e9>\",', '\"&lt;\\\\u00e9&gt;\"),', '(b\"<\\\\xc3\\\\xa9>\",', 'b\"&lt;\\\\xc3\\\\xa9&gt;\"),', ']', 'for', 'unescaped,', 'escaped', 'in', 'tests:', 'self.assertEqual(utf8(xhtml_escape(unescaped)),', 'utf8(escaped))', 'self.assertEqual(utf8(unescaped),', 'utf8(xhtml_unescape(escaped)))', 'def', 'test_xhtml_unescape_numeric(self):', 'tests', '=', '[', '(\"foo&', '(\"foo&', '(\"foo&', '(\"foo&', '(\"foo&', '(\"foo&', '(\"foo&', ']', 'for', 'escaped,', 'unescaped', 'in', 'tests:', 'self.assertEqual(unescaped,', 'xhtml_unescape(escaped))', 'def', 'test_url_escape_unicode(self):', 'tests', '=', '[', '(\"\\\\u00e9\".encode(\"utf8\"),', '\"%C3%A9\"),', '(\"\\\\u00e9\".encode(\"latin1\"),', '\"%E9\"),', '(\"\\\\u00e9\",', '\"%C3%A9\"),', ']', 'for', 'unescaped,', 'escaped', 'in', 'tests:', 'self.assertEqual(url_escape(unescaped),', 'escaped)', 'def', 'test_url_unescape_unicode(self):', 'tests', '=', '[', '(\"%C3%A9\",', '\"\\\\u00e9\",', '\"utf8\"),', '(\"%C3%A9\",', '\"\\\\u00c3\\\\u00a9\",', '\"latin1\"),', '(\"%C3%A9\",', 'utf8(\"\\\\u00e9\"),', 'None),', ']', 'for', 'escaped,', 'unescaped,', 'encoding', 'in', 'tests:', 'self.assertEqual(url_unescape(to_unicode(escaped),', 'encoding),', 'unescaped)', 'self.assertEqual(url_unescape(utf8(escaped),', 'encoding),', 'unescaped)', 'def', 'test_url_escape_quote_plus(self):', 'unescaped', '=', '\"+', 'plus_escaped', '=', '\"%2B+%23%25\"', 'escaped', '=', '\"%2B%20%23%25\"', 'self.assertEqual(url_escape(unescaped),', 'plus_escaped)', 'self.assertEqual(url_escape(unescaped,', 'plus=False),', 'escaped)', 'self.assertEqual(url_unescape(plus_escaped),', 'unescaped)', 'self.assertEqual(url_unescape(escaped,', 'plus=False),', 'unescaped)', 'self.assertEqual(url_unescape(plus_escaped,', 'encoding=None),', 'utf8(unescaped))', 'self.assertEqual(', 'url_unescape(escaped,', 'encoding=None,', 'plus=False),', 'utf8(unescaped)', ')', 'def', 'test_escape_return_types(self):', 'self.assertEqual(type(xhtml_escape(\"foo\")),', 'str)', 'self.assertEqual(type(xhtml_escape(\"foo\")),', 'unicode_type)', 'def', 'test_json_decode(self):', 'self.assertEqual(json_decode(b\\'\"foo\"\\'),', '\"foo\")', 'self.assertEqual(json_decode(\\'\"foo\"\\'),', '\"foo\")', 'self.assertEqual(json_decode(utf8(\\'\"\\\\u00e9\"\\')),', '\"\\\\u00e9\")', 'def', 'test_json_encode(self):', 'self.assertEqual(json_decode(json_encode(\"\\\\u00e9\")),', '\"\\\\u00e9\")', 'if', 'bytes', 'is', 'str:', 'self.assertEqual(json_decode(json_encode(utf8(\"\\\\u00e9\"))),', '\"\\\\u00e9\")', 'self.assertRaises(UnicodeDecodeError,', 'json_encode,', 'b\"\\\\xe9\")', 'def', 'test_squeeze(self):', 'self.assertEqual(', 'squeeze(\"sequences', 'of', 'whitespace', 'chars\"),', '\"sequences', 'of', 'whitespace', 'chars\",', ')', 'def', 'test_recursive_unicode(self):', 'tests', '=', '{', '\"dict\":', '{b\"foo\":', 'b\"bar\"},', '\"list\":', '[b\"foo\",', 'b\"bar\"],', '\"tuple\":', '(b\"foo\",', 'b\"bar\"),', '\"bytes\":', 'b\"foo\",', '}', 'self.assertEqual(recursive_unicode(tests[\"dict\"]),', '{\"foo\":', '\"bar\"})', 'self.assertEqual(recursive_unicode(tests[\"list\"]),', '[\"foo\",', '\"bar\"])', 'self.assertEqual(recursive_unicode(tests[\"tuple\"]),', '(\"foo\",', '\"bar\"))', 'self.assertEqual(recursive_unicode(tests[\"bytes\"]),', '\"foo\")']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/gen_test.py",
        "vector": "['import', 'asyncio', 'from', 'concurrent', 'import', 'futures', 'import', 'gc', 'import', 'datetime', 'import', 'platform', 'import', 'sys', 'import', 'time', 'import', 'weakref', 'import', 'unittest', 'from', 'tornado.concurrent', 'import', 'Future', 'from', 'tornado.log', 'import', 'app_log', 'from', 'tornado.testing', 'import', 'AsyncHTTPTestCase,', 'AsyncTestCase,', 'ExpectLog,', 'gen_test', 'from', 'tornado.test.util', 'import', 'skipOnTravis,', 'skipNotCPython', 'from', 'tornado.web', 'import', 'Application,', 'RequestHandler,', 'HTTPError', 'from', 'tornado', 'import', 'gen', 'try:', 'import', 'contextvars', 'except', 'ImportError:', 'contextvars', '=', 'None', 'import', 'typing', 'if', 'typing.TYPE_CHECKING:', 'from', 'typing', 'import', 'List,', 'Optional', 'class', 'GenBasicTest(AsyncTestCase):', '@gen.coroutine', 'def', 'delay(self,', 'iterations,', 'arg):', 'for', 'i', 'in', 'range(iterations):', 'yield', 'gen.moment', 'raise', 'gen.Return(arg)', '@gen.coroutine', 'def', 'async_future(self,', 'result):', 'yield', 'gen.moment', 'return', 'result', '@gen.coroutine', 'def', 'async_exception(self,', 'e):', 'yield', 'gen.moment', 'raise', 'e', '@gen.coroutine', 'def', 'add_one_async(self,', 'x):', 'yield', 'gen.moment', 'raise', 'gen.Return(x', '+', '1)', 'def', 'test_no_yield(self):', '@gen.coroutine', 'def', 'f():', 'pass', 'self.io_loop.run_sync(f)', 'def', 'test_exception_phase1(self):', '@gen.coroutine', 'def', 'f():', '1', '/', '0', 'self.assertRaises(ZeroDivisionError,', 'self.io_loop.run_sync,', 'f)', 'def', 'test_exception_phase2(self):', '@gen.coroutine', 'def', 'f():', 'yield', 'gen.moment', '1', '/', '0', 'self.assertRaises(ZeroDivisionError,', 'self.io_loop.run_sync,', 'f)', 'def', 'test_bogus_yield(self):', '@gen.coroutine', 'def', 'f():', 'yield', '42', 'self.assertRaises(gen.BadYieldError,', 'self.io_loop.run_sync,', 'f)', 'def', 'test_bogus_yield_tuple(self):', '@gen.coroutine', 'def', 'f():', 'yield', '(1,', '2)', 'self.assertRaises(gen.BadYieldError,', 'self.io_loop.run_sync,', 'f)', 'def', 'test_reuse(self):', '@gen.coroutine', 'def', 'f():', 'yield', 'gen.moment', 'self.io_loop.run_sync(f)', 'self.io_loop.run_sync(f)', 'def', 'test_none(self):', '@gen.coroutine', 'def', 'f():', 'yield', 'None', 'self.io_loop.run_sync(f)', 'def', 'test_multi(self):', '@gen.coroutine', 'def', 'f():', 'results', '=', 'yield', '[self.add_one_async(1),', 'self.add_one_async(2)]', 'self.assertEqual(results,', '[2,', '3])', 'self.io_loop.run_sync(f)', 'def', 'test_multi_dict(self):', '@gen.coroutine', 'def', 'f():', 'results', '=', 'yield', 'dict(foo=self.add_one_async(1),', 'bar=self.add_one_async(2))', 'self.assertEqual(results,', 'dict(foo=2,', 'bar=3))', 'self.io_loop.run_sync(f)', 'def', 'test_multi_delayed(self):', '@gen.coroutine', 'def', 'f():', 'responses', '=', 'yield', 'gen.multi_future(', '[self.delay(3,', '\"v1\"),', 'self.delay(1,', '\"v2\")]', ')', 'self.assertEqual(responses,', '[\"v1\",', '\"v2\"])', 'self.io_loop.run_sync(f)', 'def', 'test_multi_dict_delayed(self):', '@gen.coroutine', 'def', 'f():', 'responses', '=', 'yield', 'gen.multi_future(', 'dict(foo=self.delay(3,', '\"v1\"),', 'bar=self.delay(1,', '\"v2\"))', ')', 'self.assertEqual(responses,', 'dict(foo=\"v1\",', 'bar=\"v2\"))', 'self.io_loop.run_sync(f)', '@skipOnTravis', '@gen_test', 'def', 'test_multi_performance(self):', 'start', '=', 'time.time()', 'yield', '[gen.moment', 'for', 'i', 'in', 'range(2000)]', 'end', '=', 'time.time()', 'self.assertLess(end', '-', 'start,', '1.0)', '@gen_test', 'def', 'test_multi_empty(self):', 'x', '=', 'yield', '[]', 'self.assertTrue(isinstance(x,', 'list))', 'y', '=', 'yield', '{}', 'self.assertTrue(isinstance(y,', 'dict))', '@gen_test', 'def', 'test_future(self):', 'result', '=', 'yield', 'self.async_future(1)', 'self.assertEqual(result,', '1)', '@gen_test', 'def', 'test_multi_future(self):', 'results', '=', 'yield', '[self.async_future(1),', 'self.async_future(2)]', 'self.assertEqual(results,', '[1,', '2])', '@gen_test', 'def', 'test_multi_future_duplicate(self):', 'f', '=', 'self.async_future(2)', 'results', '=', 'yield', '[self.async_future(1),', 'f,', 'self.async_future(3),', 'f]', 'self.assertEqual(results,', '[1,', '2,', '3,', '2])', '@gen_test', 'def', 'test_multi_dict_future(self):', 'results', '=', 'yield', 'dict(foo=self.async_future(1),', 'bar=self.async_future(2))', 'self.assertEqual(results,', 'dict(foo=1,', 'bar=2))', '@gen_test', 'def', 'test_multi_exceptions(self):', 'with', 'ExpectLog(app_log,', '\"Multiple', 'exceptions', 'in', 'yield', 'list\"):', 'with', 'self.assertRaises(RuntimeError)', 'as', 'cm:', 'yield', 'gen.Multi(', '[', 'self.async_exception(RuntimeError(\"error', '1\")),', 'self.async_exception(RuntimeError(\"error', '2\")),', ']', ')', 'self.assertEqual(str(cm.exception),', '\"error', '1\")', 'with', 'self.assertRaises(RuntimeError):', 'yield', 'gen.Multi(', '[self.async_exception(RuntimeError(\"error', '1\")),', 'self.async_future(2)]', ')', 'with', 'self.assertRaises(RuntimeError):', 'yield', 'gen.Multi(', '[', 'self.async_exception(RuntimeError(\"error', '1\")),', 'self.async_exception(RuntimeError(\"error', '2\")),', '],', 'quiet_exceptions=RuntimeError,', ')', '@gen_test', 'def', 'test_multi_future_exceptions(self):', 'with', 'ExpectLog(app_log,', '\"Multiple', 'exceptions', 'in', 'yield', 'list\"):', 'with', 'self.assertRaises(RuntimeError)', 'as', 'cm:', 'yield', '[', 'self.async_exception(RuntimeError(\"error', '1\")),', 'self.async_exception(RuntimeError(\"error', '2\")),', ']', 'self.assertEqual(str(cm.exception),', '\"error', '1\")', 'with', 'self.assertRaises(RuntimeError):', 'yield', '[self.async_exception(RuntimeError(\"error', '1\")),', 'self.async_future(2)]', 'with', 'self.assertRaises(RuntimeError):', 'yield', 'gen.multi_future(', '[', 'self.async_exception(RuntimeError(\"error', '1\")),', 'self.async_exception(RuntimeError(\"error', '2\")),', '],', 'quiet_exceptions=RuntimeError,', ')', 'def', 'test_sync_raise_return(self):', '@gen.coroutine', 'def', 'f():', 'raise', 'gen.Return()', 'self.io_loop.run_sync(f)', 'def', 'test_async_raise_return(self):', '@gen.coroutine', 'def', 'f():', 'yield', 'gen.moment', 'raise', 'gen.Return()', 'self.io_loop.run_sync(f)', 'def', 'test_sync_raise_return_value(self):', '@gen.coroutine', 'def', 'f():', 'raise', 'gen.Return(42)', 'self.assertEqual(42,', 'self.io_loop.run_sync(f))', 'def', 'test_sync_raise_return_value_tuple(self):', '@gen.coroutine', 'def', 'f():', 'raise', 'gen.Return((1,', '2))', 'self.assertEqual((1,', '2),', 'self.io_loop.run_sync(f))', 'def', 'test_async_raise_return_value(self):', '@gen.coroutine', 'def', 'f():', 'yield', 'gen.moment', 'raise', 'gen.Return(42)', 'self.assertEqual(42,', 'self.io_loop.run_sync(f))', 'def', 'test_async_raise_return_value_tuple(self):', '@gen.coroutine', 'def', 'f():', 'yield', 'gen.moment', 'raise', 'gen.Return((1,', '2))', 'self.assertEqual((1,', '2),', 'self.io_loop.run_sync(f))', 'class', 'GenCoroutineTest(AsyncTestCase):', 'def', 'setUp(self):', 'self.finished', '=', 'False', 'super().setUp()', 'def', 'tearDown(self):', 'super().tearDown()', 'assert', 'self.finished', 'def', 'test_attributes(self):', 'self.finished', '=', 'True', 'def', 'f():', 'yield', 'gen.moment', 'coro', '=', 'gen.coroutine(f)', 'self.assertEqual(coro.__name__,', 'f.__name__)', 'self.assertEqual(coro.__module__,', 'f.__module__)', 'self.assertIs(coro.__wrapped__,', 'f)', 'def', 'test_is_coroutine_function(self):', 'self.finished', '=', 'True', 'def', 'f():', 'yield', 'gen.moment', 'coro', '=', 'gen.coroutine(f)', 'self.assertFalse(gen.is_coroutine_function(f))', 'self.assertTrue(gen.is_coroutine_function(coro))', 'self.assertFalse(gen.is_coroutine_function(coro()))', '@gen_test', 'def', 'test_sync_gen_return(self):', '@gen.coroutine', 'def', 'f():', 'raise', 'gen.Return(42)', 'result', '=', 'yield', 'f()', 'self.assertEqual(result,', '42)', 'self.finished', '=', 'True', '@gen_test', 'def', 'test_async_gen_return(self):', '@gen.coroutine', 'def', 'f():', 'yield', 'gen.moment', 'raise', 'gen.Return(42)', 'result', '=', 'yield', 'f()', 'self.assertEqual(result,', '42)', 'self.finished', '=', 'True', '@gen_test', 'def', 'test_sync_return(self):', '@gen.coroutine', 'def', 'f():', 'return', '42', 'result', '=', 'yield', 'f()', 'self.assertEqual(result,', '42)', 'self.finished', '=', 'True', '@gen_test', 'def', 'test_async_return(self):', '@gen.coroutine', 'def', 'f():', 'yield', 'gen.moment', 'return', '42', 'result', '=', 'yield', 'f()', 'self.assertEqual(result,', '42)', 'self.finished', '=', 'True', '@gen_test', 'def', 'test_async_early_return(self):', '@gen.coroutine', 'def', 'f():', 'if', 'True:', 'return', '42', 'yield', 'gen.Task(self.io_loop.add_callback)', 'result', '=', 'yield', 'f()', 'self.assertEqual(result,', '42)', 'self.finished', '=', 'True', '@gen_test', 'def', 'test_async_await(self):', '@gen.coroutine', 'def', 'f1():', 'yield', 'gen.moment', 'raise', 'gen.Return(42)', 'async', 'def', 'f2():', 'result', '=', 'await', 'f1()', 'return', 'result', 'result', '=', 'yield', 'f2()', 'self.assertEqual(result,', '42)', 'self.finished', '=', 'True', '@gen_test', 'def', 'test_asyncio_sleep_zero(self):', 'async', 'def', 'f():', 'import', 'asyncio', 'await', 'asyncio.sleep(0)', 'return', '42', 'result', '=', 'yield', 'f()', 'self.assertEqual(result,', '42)', 'self.finished', '=', 'True', '@gen_test', 'def', 'test_async_await_mixed_multi_native_future(self):', '@gen.coroutine', 'def', 'f1():', 'yield', 'gen.moment', 'async', 'def', 'f2():', 'await', 'f1()', 'return', '42', '@gen.coroutine', 'def', 'f3():', 'yield', 'gen.moment', 'raise', 'gen.Return(43)', 'results', '=', 'yield', '[f2(),', 'f3()]', 'self.assertEqual(results,', '[42,', '43])', 'self.finished', '=', 'True', '@gen_test', 'def', 'test_async_with_timeout(self):', 'async', 'def', 'f1():', 'return', '42', 'result', '=', 'yield', 'gen.with_timeout(datetime.timedelta(hours=1),', 'f1())', 'self.assertEqual(result,', '42)', 'self.finished', '=', 'True', '@gen_test', 'def', 'test_sync_return_no_value(self):', '@gen.coroutine', 'def', 'f():', 'return', 'result', '=', 'yield', 'f()', 'self.assertEqual(result,', 'None)', 'self.finished', '=', 'True', '@gen_test', 'def', 'test_async_return_no_value(self):', '@gen.coroutine', 'def', 'f():', 'yield', 'gen.moment', 'return', 'result', '=', 'yield', 'f()', 'self.assertEqual(result,', 'None)', 'self.finished', '=', 'True', '@gen_test', 'def', 'test_sync_raise(self):', '@gen.coroutine', 'def', 'f():', '1', '/', '0', 'future', '=', 'f()', 'with', 'self.assertRaises(ZeroDivisionError):', 'yield', 'future', 'self.finished', '=', 'True', '@gen_test', 'def', 'test_async_raise(self):', '@gen.coroutine', 'def', 'f():', 'yield', 'gen.moment', '1', '/', '0', 'future', '=', 'f()', 'with', 'self.assertRaises(ZeroDivisionError):', 'yield', 'future', 'self.finished', '=', 'True', '@gen_test', 'def', 'test_replace_yieldpoint_exception(self):', '@gen.coroutine', 'def', 'f1():', '1', '/', '0', '@gen.coroutine', 'def', 'f2():', 'try:', 'yield', 'f1()', 'except', 'ZeroDivisionError:', 'raise', 'KeyError()', 'future', '=', 'f2()', 'with', 'self.assertRaises(KeyError):', 'yield', 'future', 'self.finished', '=', 'True', '@gen_test', 'def', 'test_swallow_yieldpoint_exception(self):', '@gen.coroutine', 'def', 'f1():', '1', '/', '0', '@gen.coroutine', 'def', 'f2():', 'try:', 'yield', 'f1()', 'except', 'ZeroDivisionError:', 'raise', 'gen.Return(42)', 'result', '=', 'yield', 'f2()', 'self.assertEqual(result,', '42)', 'self.finished', '=', 'True', '@gen_test', 'def', 'test_moment(self):', 'calls', '=', '[]', '@gen.coroutine', 'def', 'f(name,', 'yieldable):', 'for', 'i', 'in', 'range(5):', 'calls.append(name)', 'yield', 'yieldable', 'immediate', '=', 'Future()', 'immediate.set_result(None)', 'yield', '[f(\"a\",', 'immediate),', 'f(\"b\",', 'immediate)]', 'self.assertEqual(\"\".join(calls),', '\"aaaaabbbbb\")', 'calls', '=', '[]', 'yield', '[f(\"a\",', 'gen.moment),', 'f(\"b\",', 'gen.moment)]', 'self.assertEqual(\"\".join(calls),', '\"ababababab\")', 'self.finished', '=', 'True', 'calls', '=', '[]', 'yield', '[f(\"a\",', 'gen.moment),', 'f(\"b\",', 'immediate)]', 'self.assertEqual(\"\".join(calls),', '\"abbbbbaaaa\")', '@gen_test', 'def', 'test_sleep(self):', 'yield', 'gen.sleep(0.01)', 'self.finished', '=', 'True', '@gen_test', 'def', 'test_py3_leak_exception_context(self):', 'class', 'LeakedException(Exception):', 'pass', '@gen.coroutine', 'def', 'inner(iteration):', 'raise', 'LeakedException(iteration)', 'try:', 'yield', 'inner(1)', 'except', 'LeakedException', 'as', 'e:', 'self.assertEqual(str(e),', '\"1\")', 'self.assertIsNone(e.__context__)', 'try:', 'yield', 'inner(2)', 'except', 'LeakedException', 'as', 'e:', 'self.assertEqual(str(e),', '\"2\")', 'self.assertIsNone(e.__context__)', 'self.finished', '=', 'True', '@skipNotCPython', '@unittest.skipIf(', '(3,)', '<', 'sys.version_info', '<', '(3,', '6),', '\"asyncio.Future', 'has', 'reference', 'cycles\"', ')', 'def', 'test_coroutine_refcounting(self):', '@gen.coroutine', 'def', 'inner():', 'class', 'Foo(object):', 'pass', 'local_var', '=', 'Foo()', 'self.local_ref', '=', 'weakref.ref(local_var)', 'def', 'dummy():', 'pass', 'yield', 'gen.coroutine(dummy)()', 'raise', 'ValueError(\"Some', 'error\")', '@gen.coroutine', 'def', 'inner2():', 'try:', 'yield', 'inner()', 'except', 'ValueError:', 'pass', 'self.io_loop.run_sync(inner2,', 'timeout=3)', 'self.assertIs(self.local_ref(),', 'None)', 'self.finished', '=', 'True', 'def', 'test_asyncio_future_debug_info(self):', 'self.finished', '=', 'True', 'asyncio_loop', '=', 'asyncio.get_event_loop()', 'self.addCleanup(asyncio_loop.set_debug,', 'asyncio_loop.get_debug())', 'asyncio_loop.set_debug(True)', 'def', 'f():', 'yield', 'gen.moment', 'coro', '=', 'gen.coroutine(f)()', 'self.assertIsInstance(coro,', 'asyncio.Future)', 'expected', '=', '\"created', 'at', '%s:%d\"', '%', '(__file__,', 'f.__code__.co_firstlineno', '+', '3)', 'actual', '=', 'repr(coro)', 'self.assertIn(expected,', 'actual)', '@gen_test', 'def', 'test_asyncio_gather(self):', '@gen.coroutine', 'def', 'f():', 'yield', 'gen.moment', 'raise', 'gen.Return(1)', 'ret', '=', 'yield', 'asyncio.gather(f(),', 'f())', 'self.assertEqual(ret,', '[1,', '1])', 'self.finished', '=', 'True', 'class', 'GenCoroutineSequenceHandler(RequestHandler):', '@gen.coroutine', 'def', 'get(self):', 'yield', 'gen.moment', 'self.write(\"1\")', 'yield', 'gen.moment', 'self.write(\"2\")', 'yield', 'gen.moment', 'self.finish(\"3\")', 'class', 'GenCoroutineUnfinishedSequenceHandler(RequestHandler):', '@gen.coroutine', 'def', 'get(self):', 'yield', 'gen.moment', 'self.write(\"1\")', 'yield', 'gen.moment', 'self.write(\"2\")', 'yield', 'gen.moment', 'self.write(\"3\")', 'class', 'UndecoratedCoroutinesHandler(RequestHandler):', '@gen.coroutine', 'def', 'prepare(self):', 'self.chunks', '=', '[]', 'yield', 'gen.moment', 'self.chunks.append(\"1\")', '@gen.coroutine', 'def', 'get(self):', 'self.chunks.append(\"2\")', 'yield', 'gen.moment', 'self.chunks.append(\"3\")', 'yield', 'gen.moment', 'self.write(\"\".join(self.chunks))', 'class', 'AsyncPrepareErrorHandler(RequestHandler):', '@gen.coroutine', 'def', 'prepare(self):', 'yield', 'gen.moment', 'raise', 'HTTPError(403)', 'def', 'get(self):', 'self.finish(\"ok\")', 'class', 'NativeCoroutineHandler(RequestHandler):', 'async', 'def', 'get(self):', 'await', 'asyncio.sleep(0)', 'self.write(\"ok\")', 'class', 'GenWebTest(AsyncHTTPTestCase):', 'def', 'get_app(self):', 'return', 'Application(', '[', '(\"/coroutine_sequence\",', 'GenCoroutineSequenceHandler),', '(', '\"/coroutine_unfinished_sequence\",', 'GenCoroutineUnfinishedSequenceHandler,', '),', '(\"/undecorated_coroutine\",', 'UndecoratedCoroutinesHandler),', '(\"/async_prepare_error\",', 'AsyncPrepareErrorHandler),', '(\"/native_coroutine\",', 'NativeCoroutineHandler),', ']', ')', 'def', 'test_coroutine_sequence_handler(self):', 'response', '=', 'self.fetch(\"/coroutine_sequence\")', 'self.assertEqual(response.body,', 'b\"123\")', 'def', 'test_coroutine_unfinished_sequence_handler(self):', 'response', '=', 'self.fetch(\"/coroutine_unfinished_sequence\")', 'self.assertEqual(response.body,', 'b\"123\")', 'def', 'test_undecorated_coroutines(self):', 'response', '=', 'self.fetch(\"/undecorated_coroutine\")', 'self.assertEqual(response.body,', 'b\"123\")', 'def', 'test_async_prepare_error_handler(self):', 'response', '=', 'self.fetch(\"/async_prepare_error\")', 'self.assertEqual(response.code,', '403)', 'def', 'test_native_coroutine_handler(self):', 'response', '=', 'self.fetch(\"/native_coroutine\")', 'self.assertEqual(response.code,', '200)', 'self.assertEqual(response.body,', 'b\"ok\")', 'class', 'WithTimeoutTest(AsyncTestCase):', '@gen_test', 'def', 'test_timeout(self):', 'with', 'self.assertRaises(gen.TimeoutError):', 'yield', 'gen.with_timeout(datetime.timedelta(seconds=0.1),', 'Future())', '@gen_test', 'def', 'test_completes_before_timeout(self):', 'future', '=', 'Future()', 'self.io_loop.add_timeout(', 'datetime.timedelta(seconds=0.1),', 'lambda:', 'future.set_result(\"asdf\")', ')', 'result', '=', 'yield', 'gen.with_timeout(datetime.timedelta(seconds=3600),', 'future)', 'self.assertEqual(result,', '\"asdf\")', '@gen_test', 'def', 'test_fails_before_timeout(self):', 'future', '=', 'Future()', 'self.io_loop.add_timeout(', 'datetime.timedelta(seconds=0.1),', 'lambda:', 'future.set_exception(ZeroDivisionError()),', ')', 'with', 'self.assertRaises(ZeroDivisionError):', 'yield', 'gen.with_timeout(datetime.timedelta(seconds=3600),', 'future)', '@gen_test', 'def', 'test_already_resolved(self):', 'future', '=', 'Future()', 'future.set_result(\"asdf\")', 'result', '=', 'yield', 'gen.with_timeout(datetime.timedelta(seconds=3600),', 'future)', 'self.assertEqual(result,', '\"asdf\")', '@gen_test', 'def', 'test_timeout_concurrent_future(self):', 'with', 'futures.ThreadPoolExecutor(1)', 'as', 'executor:', 'with', 'self.assertRaises(gen.TimeoutError):', 'yield', 'gen.with_timeout(', 'self.io_loop.time(),', 'executor.submit(time.sleep,', '0.1)', ')', '@gen_test', 'def', 'test_completed_concurrent_future(self):', 'with', 'futures.ThreadPoolExecutor(1)', 'as', 'executor:', 'def', 'dummy():', 'pass', 'f', '=', 'executor.submit(dummy)', 'f.result()', 'yield', 'gen.with_timeout(datetime.timedelta(seconds=3600),', 'f)', '@gen_test', 'def', 'test_normal_concurrent_future(self):', 'with', 'futures.ThreadPoolExecutor(1)', 'as', 'executor:', 'yield', 'gen.with_timeout(', 'datetime.timedelta(seconds=3600),', 'executor.submit(lambda:', 'time.sleep(0.01)),', ')', 'class', 'WaitIteratorTest(AsyncTestCase):', '@gen_test', 'def', 'test_empty_iterator(self):', 'g', '=', 'gen.WaitIterator()', 'self.assertTrue(g.done(),', '\"empty', 'generator', 'iterated\")', 'with', 'self.assertRaises(ValueError):', 'g', '=', 'gen.WaitIterator(Future(),', 'bar=Future())', 'self.assertEqual(g.current_index,', 'None,', '\"bad', 'nil', 'current', 'index\")', 'self.assertEqual(g.current_future,', 'None,', '\"bad', 'nil', 'current', 'future\")', '@gen_test', 'def', 'test_already_done(self):', 'f1', '=', 'Future()', 'f2', '=', 'Future()', 'f3', '=', 'Future()', 'f1.set_result(24)', 'f2.set_result(42)', 'f3.set_result(84)', 'g', '=', 'gen.WaitIterator(f1,', 'f2,', 'f3)', 'i', '=', '0', 'while', 'not', 'g.done():', 'r', '=', 'yield', 'g.next()', 'if', 'i', '==', '0:', 'self.assertEqual(g.current_index,', '0)', 'self.assertIs(g.current_future,', 'f1)', 'self.assertEqual(r,', '24)', 'elif', 'i', '==', '1:', 'self.assertEqual(g.current_index,', '1)', 'self.assertIs(g.current_future,', 'f2)', 'self.assertEqual(r,', '42)', 'elif', 'i', '==', '2:', 'self.assertEqual(g.current_index,', '2)', 'self.assertIs(g.current_future,', 'f3)', 'self.assertEqual(r,', '84)', 'i', '+=', '1', 'self.assertEqual(g.current_index,', 'None,', '\"bad', 'nil', 'current', 'index\")', 'self.assertEqual(g.current_future,', 'None,', '\"bad', 'nil', 'current', 'future\")', 'dg', '=', 'gen.WaitIterator(f1=f1,', 'f2=f2)', 'while', 'not', 'dg.done():', 'dr', '=', 'yield', 'dg.next()', 'if', 'dg.current_index', '==', '\"f1\":', 'self.assertTrue(', 'dg.current_future', '==', 'f1', 'and', 'dr', '==', '24,', '\"WaitIterator', 'dict', 'status', 'incorrect\",', ')', 'elif', 'dg.current_index', '==', '\"f2\":', 'self.assertTrue(', 'dg.current_future', '==', 'f2', 'and', 'dr', '==', '42,', '\"WaitIterator', 'dict', 'status', 'incorrect\",', ')', 'else:', 'self.fail(\"got', 'bad', 'WaitIterator', 'index', '{}\".format(dg.current_index))', 'i', '+=', '1', 'self.assertEqual(dg.current_index,', 'None,', '\"bad', 'nil', 'current', 'index\")', 'self.assertEqual(dg.current_future,', 'None,', '\"bad', 'nil', 'current', 'future\")', 'def', 'finish_coroutines(self,', 'iteration,', 'futures):', 'if', 'iteration', '==', '3:', 'futures[2].set_result(24)', 'elif', 'iteration', '==', '5:', 'futures[0].set_exception(ZeroDivisionError())', 'elif', 'iteration', '==', '8:', 'futures[1].set_result(42)', 'futures[3].set_result(84)', 'if', 'iteration', '<', '8:', 'self.io_loop.add_callback(self.finish_coroutines,', 'iteration', '+', '1,', 'futures)', '@gen_test', 'def', 'test_iterator(self):', 'futures', '=', '[Future(),', 'Future(),', 'Future(),', 'Future()]', 'self.finish_coroutines(0,', 'futures)', 'g', '=', 'gen.WaitIterator(*futures)', 'i', '=', '0', 'while', 'not', 'g.done():', 'try:', 'r', '=', 'yield', 'g.next()', 'except', 'ZeroDivisionError:', 'self.assertIs(g.current_future,', 'futures[0],', '\"exception', 'future', 'invalid\")', 'else:', 'if', 'i', '==', '0:', 'self.assertEqual(r,', '24,', '\"iterator', 'value', 'incorrect\")', 'self.assertEqual(g.current_index,', '2,', '\"wrong', 'index\")', 'elif', 'i', '==', '2:', 'self.assertEqual(r,', '42,', '\"iterator', 'value', 'incorrect\")', 'self.assertEqual(g.current_index,', '1,', '\"wrong', 'index\")', 'elif', 'i', '==', '3:', 'self.assertEqual(r,', '84,', '\"iterator', 'value', 'incorrect\")', 'self.assertEqual(g.current_index,', '3,', '\"wrong', 'index\")', 'i', '+=', '1', '@gen_test', 'def', 'test_iterator_async_await(self):', 'futures', '=', '[Future(),', 'Future(),', 'Future(),', 'Future()]', 'self.finish_coroutines(0,', 'futures)', 'self.finished', '=', 'False', 'async', 'def', 'f():', 'i', '=', '0', 'g', '=', 'gen.WaitIterator(*futures)', 'try:', 'async', 'for', 'r', 'in', 'g:', 'if', 'i', '==', '0:', 'self.assertEqual(r,', '24,', '\"iterator', 'value', 'incorrect\")', 'self.assertEqual(g.current_index,', '2,', '\"wrong', 'index\")', 'else:', 'raise', 'Exception(\"expected', 'exception', 'on', 'iteration', '1\")', 'i', '+=', '1', 'except', 'ZeroDivisionError:', 'i', '+=', '1', 'async', 'for', 'r', 'in', 'g:', 'if', 'i', '==', '2:', 'self.assertEqual(r,', '42,', '\"iterator', 'value', 'incorrect\")', 'self.assertEqual(g.current_index,', '1,', '\"wrong', 'index\")', 'elif', 'i', '==', '3:', 'self.assertEqual(r,', '84,', '\"iterator', 'value', 'incorrect\")', 'self.assertEqual(g.current_index,', '3,', '\"wrong', 'index\")', 'else:', 'raise', 'Exception(\"didn\\'t', 'expect', 'iteration', '%d\"', '%', 'i)', 'i', '+=', '1', 'self.finished', '=', 'True', 'yield', 'f()', 'self.assertTrue(self.finished)', '@gen_test', 'def', 'test_no_ref(self):', 'yield', 'gen.with_timeout(', 'datetime.timedelta(seconds=0.1),', 'gen.WaitIterator(gen.sleep(0)).next()', ')', 'class', 'RunnerGCTest(AsyncTestCase):', 'def', 'is_pypy3(self):', 'return', 'platform.python_implementation()', '==', '\"PyPy\"', 'and', 'sys.version_info', '>', '(3,)', '@gen_test', 'def', 'test_gc(self):', 'weakref_scope', '=', '[None]', 'def', 'callback():', 'gc.collect(2)', 'weakref_scope[0]().set_result(123)', '@gen.coroutine', 'def', 'tester():', 'fut', '=', 'Future()', 'weakref_scope[0]', '=', 'weakref.ref(fut)', 'self.io_loop.add_callback(callback)', 'yield', 'fut', 'yield', 'gen.with_timeout(datetime.timedelta(seconds=0.2),', 'tester())', 'def', 'test_gc_infinite_coro(self):', 'loop', '=', 'self.get_new_ioloop()', 'result', '=', '[]', 'wfut', '=', '[]', '@gen.coroutine', 'def', 'infinite_coro():', 'try:', 'while', 'True:', 'yield', 'gen.sleep(1e-3)', 'result.append(True)', 'finally:', 'result.append(None)', '@gen.coroutine', 'def', 'do_something():', 'fut', '=', 'infinite_coro()', 'fut._refcycle', '=', 'fut', 'wfut.append(weakref.ref(fut))', 'yield', 'gen.sleep(0.2)', 'loop.run_sync(do_something)', 'loop.close()', 'gc.collect()', 'self.assertIs(wfut[0](),', 'None)', 'self.assertGreaterEqual(len(result),', '2)', 'if', 'not', 'self.is_pypy3():', 'self.assertIs(result[-1],', 'None)', 'def', 'test_gc_infinite_async_await(self):', 'import', 'asyncio', 'async', 'def', 'infinite_coro(result):', 'try:', 'while', 'True:', 'await', 'gen.sleep(1e-3)', 'result.append(True)', 'finally:', 'result.append(None)', 'loop', '=', 'self.get_new_ioloop()', 'result', '=', '[]', 'wfut', '=', '[]', '@gen.coroutine', 'def', 'do_something():', 'fut', '=', 'asyncio.get_event_loop().create_task(infinite_coro(result))', 'fut._refcycle', '=', 'fut', 'wfut.append(weakref.ref(fut))', 'yield', 'gen.sleep(0.2)', 'loop.run_sync(do_something)', 'with', 'ExpectLog(\"asyncio\",', '\"Task', 'was', 'destroyed', 'but', 'it', 'is', 'pending\"):', 'loop.close()', 'gc.collect()', 'self.assertIs(wfut[0](),', 'None)', 'self.assertGreaterEqual(len(result),', '2)', 'if', 'not', 'self.is_pypy3():', 'self.assertIs(result[-1],', 'None)', 'def', 'test_multi_moment(self):', '@gen.coroutine', 'def', 'wait_a_moment():', 'result', '=', 'yield', 'gen.multi([gen.moment,', 'gen.moment])', 'raise', 'gen.Return(result)', 'loop', '=', 'self.get_new_ioloop()', 'result', '=', 'loop.run_sync(wait_a_moment)', 'self.assertEqual(result,', '[None,', 'None])', 'if', 'contextvars', 'is', 'not', 'None:', 'ctx_var', '=', 'contextvars.ContextVar(\"ctx_var\")', '@unittest.skipIf(contextvars', 'is', 'None,', '\"contextvars', 'module', 'not', 'present\")', 'class', 'ContextVarsTest(AsyncTestCase):', 'async', 'def', 'native_root(self,', 'x):', 'ctx_var.set(x)', 'await', 'self.inner(x)', '@gen.coroutine', 'def', 'gen_root(self,', 'x):', 'ctx_var.set(x)', 'yield', 'yield', 'self.inner(x)', 'async', 'def', 'inner(self,', 'x):', 'self.assertEqual(ctx_var.get(),', 'x)', 'await', 'self.gen_inner(x)', 'self.assertEqual(ctx_var.get(),', 'x)', 'ctx', '=', 'contextvars.copy_context()', 'await', 'self.io_loop.run_in_executor(None,', 'lambda:', 'ctx.run(self.thread_inner,', 'x))', 'self.assertEqual(ctx_var.get(),', 'x)', 'await', 'asyncio.get_event_loop().run_in_executor(', 'None,', 'lambda:', 'ctx.run(self.thread_inner,', 'x)', ')', 'self.assertEqual(ctx_var.get(),', 'x)', '@gen.coroutine', 'def', 'gen_inner(self,', 'x):', 'self.assertEqual(ctx_var.get(),', 'x)', 'yield', 'self.assertEqual(ctx_var.get(),', 'x)', 'def', 'thread_inner(self,', 'x):', 'self.assertEqual(ctx_var.get(),', 'x)', '@gen_test', 'def', 'test_propagate(self):', 'yield', '[', 'self.native_root(1),', 'self.native_root(2),', 'self.gen_root(3),', 'self.gen_root(4),', ']', '@gen_test', 'def', 'test_reset(self):', 'token', '=', 'ctx_var.set(1)', 'yield', 'ctx_var.reset(token)', '@gen_test', 'def', 'test_propagate_to_first_yield_with_native_async_function(self):', 'x', '=', '10', 'async', 'def', 'native_async_function():', 'self.assertEqual(ctx_var.get(),', 'x)', 'ctx_var.set(x)', 'yield', 'native_async_function()', 'if', '__name__', '==', '\"__main__\":', 'unittest.main()']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/gettext_translations/extract_me.py",
        "vector": "['_(\"school\")', 'pgettext(\"law\",', '\"right\")', 'pgettext(\"good\",', '\"right\")', 'pgettext(\"organization\",', '\"club\",', '\"clubs\",', '1)', 'pgettext(\"stick\",', '\"club\",', '\"clubs\",', '1)']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/http1connection_test.py",
        "vector": "['import', 'socket', 'import', 'typing', 'from', 'tornado.http1connection', 'import', 'HTTP1Connection', 'from', 'tornado.httputil', 'import', 'HTTPMessageDelegate', 'from', 'tornado.iostream', 'import', 'IOStream', 'from', 'tornado.locks', 'import', 'Event', 'from', 'tornado.netutil', 'import', 'add_accept_handler', 'from', 'tornado.testing', 'import', 'AsyncTestCase,', 'bind_unused_port,', 'gen_test', 'class', 'HTTP1ConnectionTest(AsyncTestCase):', 'code', '=', 'None', 'def', 'setUp(self):', 'super().setUp()', 'self.asyncSetUp()', '@gen_test', 'def', 'asyncSetUp(self):', 'listener,', 'port', '=', 'bind_unused_port()', 'event', '=', 'Event()', 'def', 'accept_callback(conn,', 'addr):', 'self.server_stream', '=', 'IOStream(conn)', 'self.addCleanup(self.server_stream.close)', 'event.set()', 'add_accept_handler(listener,', 'accept_callback)', 'self.client_stream', '=', 'IOStream(socket.socket())', 'self.addCleanup(self.client_stream.close)', 'yield', '[self.client_stream.connect((\"127.0.0.1\",', 'port)),', 'event.wait()]', 'self.io_loop.remove_handler(listener)', 'listener.close()', '@gen_test', 'def', 'test_http10_no_content_length(self):', 'conn', '=', 'HTTP1Connection(self.client_stream,', 'True)', 'self.server_stream.write(b\"HTTP/1.0', '200', 'Not', 'Modified\\\\r\\\\n\\\\r\\\\nhello\")', 'self.server_stream.close()', 'event', '=', 'Event()', 'test', '=', 'self', 'body', '=', '[]', 'class', 'Delegate(HTTPMessageDelegate):', 'def', 'headers_received(self,', 'start_line,', 'headers):', 'test.code', '=', 'start_line.code', 'def', 'data_received(self,', 'data):', 'body.append(data)', 'def', 'finish(self):', 'event.set()', 'yield', 'conn.read_response(Delegate())', 'yield', 'event.wait()', 'self.assertEqual(self.code,', '200)', 'self.assertEqual(b\"\".join(body),', 'b\"hello\")']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/httpclient_test.py",
        "vector": "['import', 'base64', 'import', 'binascii', 'from', 'contextlib', 'import', 'closing', 'import', 'copy', 'import', 'gzip', 'import', 'threading', 'import', 'datetime', 'from', 'io', 'import', 'BytesIO', 'import', 'subprocess', 'import', 'sys', 'import', 'time', 'import', 'typing', 'import', 'unicodedata', 'import', 'unittest', 'from', 'tornado.escape', 'import', 'utf8,', 'native_str,', 'to_unicode', 'from', 'tornado', 'import', 'gen', 'from', 'tornado.httpclient', 'import', '(', 'HTTPRequest,', 'HTTPResponse,', '_RequestProxy,', 'HTTPError,', 'HTTPClient,', ')', 'from', 'tornado.httpserver', 'import', 'HTTPServer', 'from', 'tornado.ioloop', 'import', 'IOLoop', 'from', 'tornado.iostream', 'import', 'IOStream', 'from', 'tornado.log', 'import', 'gen_log,', 'app_log', 'from', 'tornado', 'import', 'netutil', 'from', 'tornado.testing', 'import', 'AsyncHTTPTestCase,', 'bind_unused_port,', 'gen_test,', 'ExpectLog', 'from', 'tornado.test.util', 'import', 'skipOnTravis,', 'ignore_deprecation', 'from', 'tornado.web', 'import', 'Application,', 'RequestHandler,', 'url', 'from', 'tornado.httputil', 'import', 'format_timestamp,', 'HTTPHeaders', 'class', 'HelloWorldHandler(RequestHandler):', 'def', 'get(self):', 'name', '=', 'self.get_argument(\"name\",', '\"world\")', 'self.set_header(\"Content-Type\",', '\"text/plain\")', 'self.finish(\"Hello', '%s!\"', '%', 'name)', 'class', 'PostHandler(RequestHandler):', 'def', 'post(self):', 'self.finish(', '\"Post', 'arg1:', '%s,', 'arg2:', '%s\"', '%', '(self.get_argument(\"arg1\"),', 'self.get_argument(\"arg2\"))', ')', 'class', 'PutHandler(RequestHandler):', 'def', 'put(self):', 'self.write(\"Put', 'body:', '\")', 'self.write(self.request.body)', 'class', 'RedirectHandler(RequestHandler):', 'def', 'prepare(self):', 'self.write(\"redirects', 'can', 'have', 'bodies', 'too\")', 'self.redirect(', 'self.get_argument(\"url\"),', 'status=int(self.get_argument(\"status\",', '\"302\"))', ')', 'class', 'RedirectWithoutLocationHandler(RequestHandler):', 'def', 'prepare(self):', 'self.set_status(301)', 'self.finish()', 'class', 'ChunkHandler(RequestHandler):', '@gen.coroutine', 'def', 'get(self):', 'self.write(\"asdf\")', 'self.flush()', 'yield', 'gen.sleep(0.01)', 'self.write(\"qwer\")', 'class', 'AuthHandler(RequestHandler):', 'def', 'get(self):', 'self.finish(self.request.headers[\"Authorization\"])', 'class', 'CountdownHandler(RequestHandler):', 'def', 'get(self,', 'count):', 'count', '=', 'int(count)', 'if', 'count', '>', '0:', 'self.redirect(self.reverse_url(\"countdown\",', 'count', '-', '1))', 'else:', 'self.write(\"Zero\")', 'class', 'EchoPostHandler(RequestHandler):', 'def', 'post(self):', 'self.write(self.request.body)', 'class', 'UserAgentHandler(RequestHandler):', 'def', 'get(self):', 'self.write(self.request.headers.get(\"User-Agent\",', '\"User', 'agent', 'not', 'set\"))', 'class', 'ContentLength304Handler(RequestHandler):', 'def', 'get(self):', 'self.set_status(304)', 'self.set_header(\"Content-Length\",', '42)', 'def', '_clear_representation_headers(self):', 'pass', 'class', 'PatchHandler(RequestHandler):', 'def', 'patch(self):', '\"Return', 'the', 'request', 'payload', '-', 'so', 'we', 'can', 'check', 'it', 'is', 'being', 'kept\"', 'self.write(self.request.body)', 'class', 'AllMethodsHandler(RequestHandler):', 'SUPPORTED_METHODS', '=', 'RequestHandler.SUPPORTED_METHODS', '+', '(\"OTHER\",)', 'def', 'method(self):', 'assert', 'self.request.method', 'is', 'not', 'None', 'self.write(self.request.method)', 'get', '=', 'head', '=', 'post', '=', 'put', '=', 'delete', '=', 'options', '=', 'patch', '=', 'other', '=', 'method', 'class', 'SetHeaderHandler(RequestHandler):', 'def', 'get(self):', 'for', 'k,', 'v', 'in', 'zip(self.get_arguments(\"k\"),', 'self.request.arguments[\"v\"]):', 'self.set_header(k,', 'v)', 'class', 'InvalidGzipHandler(RequestHandler):', 'def', 'get(self)', '->', 'None:', 'self.set_header(\"Content-Type\",', '\"text/plain\")', 'self.set_header(\"Content-Encoding\",', '\"gzip\")', 'text', '=', '\"\".join(\"Hello', 'World', '{}\\\\n\".format(i)', 'for', 'i', 'in', 'range(9000))[:149051]', 'body', '=', 'gzip.compress(text.encode(),', 'compresslevel=6)', '+', 'b\"\\\\00\"', 'self.write(body)', 'class', 'HeaderEncodingHandler(RequestHandler):', 'def', 'get(self):', 'self.finish(self.request.headers[\"Foo\"].encode(\"ISO8859-1\"))', 'class', 'HTTPClientCommonTestCase(AsyncHTTPTestCase):', 'def', 'get_app(self):', 'return', 'Application(', '[', 'url(\"/hello\",', 'HelloWorldHandler),', 'url(\"/post\",', 'PostHandler),', 'url(\"/put\",', 'PutHandler),', 'url(\"/redirect\",', 'RedirectHandler),', 'url(\"/redirect_without_location\",', 'RedirectWithoutLocationHandler),', 'url(\"/chunk\",', 'ChunkHandler),', 'url(\"/auth\",', 'AuthHandler),', 'url(\"/countdown/([0-9]+)\",', 'CountdownHandler,', 'name=\"countdown\"),', 'url(\"/echopost\",', 'EchoPostHandler),', 'url(\"/user_agent\",', 'UserAgentHandler),', 'url(\"/304_with_content_length\",', 'ContentLength304Handler),', 'url(\"/all_methods\",', 'AllMethodsHandler),', 'url(\"/patch\",', 'PatchHandler),', 'url(\"/set_header\",', 'SetHeaderHandler),', 'url(\"/invalid_gzip\",', 'InvalidGzipHandler),', 'url(\"/header-encoding\",', 'HeaderEncodingHandler),', '],', 'gzip=True,', ')', 'def', 'test_patch_receives_payload(self):', 'body', '=', 'b\"some', 'patch', 'data\"', 'response', '=', 'self.fetch(\"/patch\",', 'method=\"PATCH\",', 'body=body)', 'self.assertEqual(response.code,', '200)', 'self.assertEqual(response.body,', 'body)', '@skipOnTravis', 'def', 'test_hello_world(self):', 'response', '=', 'self.fetch(\"/hello\")', 'self.assertEqual(response.code,', '200)', 'self.assertEqual(response.headers[\"Content-Type\"],', '\"text/plain\")', 'self.assertEqual(response.body,', 'b\"Hello', 'world!\")', 'assert', 'response.request_time', 'is', 'not', 'None', 'self.assertEqual(int(response.request_time),', '0)', 'response', '=', 'self.fetch(\"/hello?name=Ben\")', 'self.assertEqual(response.body,', 'b\"Hello', 'Ben!\")', 'def', 'test_streaming_callback(self):', 'chunks', '=', '[]', 'response', '=', 'self.fetch(\"/hello\",', 'streaming_callback=chunks.append)', 'self.assertEqual(chunks,', '[b\"Hello', 'world!\"])', 'self.assertFalse(response.body)', 'def', 'test_post(self):', 'response', '=', 'self.fetch(\"/post\",', 'method=\"POST\",', 'body=\"arg1=foo&arg2=bar\")', 'self.assertEqual(response.code,', '200)', 'self.assertEqual(response.body,', 'b\"Post', 'arg1:', 'foo,', 'arg2:', 'bar\")', 'def', 'test_chunked(self):', 'response', '=', 'self.fetch(\"/chunk\")', 'self.assertEqual(response.body,', 'b\"asdfqwer\")', 'chunks', '=', '[]', 'response', '=', 'self.fetch(\"/chunk\",', 'streaming_callback=chunks.append)', 'self.assertEqual(chunks,', '[b\"asdf\",', 'b\"qwer\"])', 'self.assertFalse(response.body)', 'def', 'test_chunked_close(self):', 'sock,', 'port', '=', 'bind_unused_port()', 'with', 'closing(sock):', '@gen.coroutine', 'def', 'accept_callback(conn,', 'address):', 'stream', '=', 'IOStream(conn)', 'request_data', '=', 'yield', 'stream.read_until(b\"\\\\r\\\\n\\\\r\\\\n\")', 'if', 'b\"HTTP/1.\"', 'not', 'in', 'request_data:', 'self.skipTest(\"requires', 'HTTP/1.x\")', 'yield', 'stream.write(', 'b.replace(', 'b\"\\\\n\",', 'b\"\\\\r\\\\n\"', ')', ')', 'stream.close()', 'netutil.add_accept_handler(sock,', 'accept_callback)', 'resp', '=', 'self.fetch(\"http://127.0.0.1:%d/\"', '%', 'port)', 'resp.rethrow()', 'self.assertEqual(resp.body,', 'b\"12\")', 'self.io_loop.remove_handler(sock.fileno())', 'def', 'test_basic_auth(self):', 'self.assertEqual(', 'self.fetch(', '\"/auth\",', 'auth_username=\"Aladdin\",', 'auth_password=\"open', 'sesame\"', ').body,', 'b\"Basic', 'QWxhZGRpbjpvcGVuIHNlc2FtZQ==\",', ')', 'def', 'test_basic_auth_explicit_mode(self):', 'self.assertEqual(', 'self.fetch(', '\"/auth\",', 'auth_username=\"Aladdin\",', 'auth_password=\"open', 'sesame\",', 'auth_mode=\"basic\",', ').body,', 'b\"Basic', 'QWxhZGRpbjpvcGVuIHNlc2FtZQ==\",', ')', 'def', 'test_basic_auth_unicode(self):', 'self.assertEqual(', 'self.fetch(\"/auth\",', 'auth_username=\"test\",', 'auth_password=\"123\u00a3\").body,', 'b\"Basic', 'dGVzdDoxMjPCow==\",', ')', 'username', '=', 'unicodedata.normalize(\"NFD\",', '\"jos\u00e9\")', 'self.assertEqual(', 'self.fetch(\"/auth\",', 'auth_username=username,', 'auth_password=\"s\u0259cr\u0259t\").body,', 'b\"Basic', 'am9zw6k6c8mZY3LJmXQ=\",', ')', 'def', 'test_unsupported_auth_mode(self):', 'with', 'ExpectLog(gen_log,', '\"uncaught', 'exception\",', 'required=False):', 'with', 'self.assertRaises((ValueError,', 'HTTPError)):', 'self.fetch(', '\"/auth\",', 'auth_username=\"Aladdin\",', 'auth_password=\"open', 'sesame\",', 'auth_mode=\"asdf\",', 'raise_error=True,', ')', 'def', 'test_follow_redirect(self):', 'response', '=', 'self.fetch(\"/countdown/2\",', 'follow_redirects=False)', 'self.assertEqual(302,', 'response.code)', 'self.assertTrue(response.headers[\"Location\"].endswith(\"/countdown/1\"))', 'response', '=', 'self.fetch(\"/countdown/2\")', 'self.assertEqual(200,', 'response.code)', 'self.assertTrue(response.effective_url.endswith(\"/countdown/0\"))', 'self.assertEqual(b\"Zero\",', 'response.body)', 'def', 'test_redirect_without_location(self):', 'response', '=', 'self.fetch(\"/redirect_without_location\",', 'follow_redirects=True)', 'self.assertEqual(301,', 'response.code)', 'def', 'test_redirect_put_with_body(self):', 'response', '=', 'self.fetch(', '\"/redirect?url=/put&status=307\",', 'method=\"PUT\",', 'body=\"hello\"', ')', 'self.assertEqual(response.body,', 'b\"Put', 'body:', 'hello\")', 'def', 'test_redirect_put_without_body(self):', 'response', '=', 'self.fetch(', '\"/redirect?url=/put&status=307\",', 'method=\"PUT\",', 'allow_nonstandard_methods=True,', ')', 'self.assertEqual(response.body,', 'b\"Put', 'body:', '\")', 'def', 'test_method_after_redirect(self):', 'for', 'status', 'in', '[301,', '302,', '303]:', 'url', '=', '\"/redirect?url=/all_methods&status=%d\"', '%', 'status', 'resp', '=', 'self.fetch(url,', 'method=\"POST\",', 'body=b\"\")', 'self.assertEqual(b\"GET\",', 'resp.body)', 'for', 'method', 'in', '[\"GET\",', '\"OPTIONS\",', '\"PUT\",', '\"DELETE\"]:', 'resp', '=', 'self.fetch(url,', 'method=method,', 'allow_nonstandard_methods=True)', 'if', 'status', 'in', '[301,', '302]:', 'self.assertEqual(utf8(method),', 'resp.body)', 'else:', 'self.assertIn(resp.body,', '[utf8(method),', 'b\"GET\"])', 'resp', '=', 'self.fetch(url,', 'method=\"HEAD\")', 'self.assertEqual(200,', 'resp.code)', 'self.assertEqual(b\"\",', 'resp.body)', 'for', 'status', 'in', '[307,', '308]:', 'url', '=', '\"/redirect?url=/all_methods&status=307\"', 'for', 'method', 'in', '[\"GET\",', '\"OPTIONS\",', '\"POST\",', '\"PUT\",', '\"DELETE\"]:', 'resp', '=', 'self.fetch(url,', 'method=method,', 'allow_nonstandard_methods=True)', 'self.assertEqual(method,', 'to_unicode(resp.body))', 'resp', '=', 'self.fetch(url,', 'method=\"HEAD\")', 'self.assertEqual(200,', 'resp.code)', 'self.assertEqual(b\"\",', 'resp.body)', 'def', 'test_credentials_in_url(self):', 'url', '=', 'self.get_url(\"/auth\").replace(\"http://\",', '\"http://me:secret@\")', 'response', '=', 'self.fetch(url)', 'self.assertEqual(b\"Basic', '\"', '+', 'base64.b64encode(b\"me:secret\"),', 'response.body)', 'def', 'test_body_encoding(self):', 'unicode_body', '=', '\"\\\\xe9\"', 'byte_body', '=', 'binascii.a2b_hex(b\"e9\")', 'response', '=', 'self.fetch(', '\"/echopost\",', 'method=\"POST\",', 'body=unicode_body,', 'headers={\"Content-Type\":', '\"application/blah\"},', ')', 'self.assertEqual(response.headers[\"Content-Length\"],', '\"2\")', 'self.assertEqual(response.body,', 'utf8(unicode_body))', 'response', '=', 'self.fetch(', '\"/echopost\",', 'method=\"POST\",', 'body=byte_body,', 'headers={\"Content-Type\":', '\"application/blah\"},', ')', 'self.assertEqual(response.headers[\"Content-Length\"],', '\"1\")', 'self.assertEqual(response.body,', 'byte_body)', 'response', '=', 'self.fetch(', '\"/echopost\",', 'method=\"POST\",', 'body=byte_body,', 'headers={\"Content-Type\":', '\"application/blah\"},', 'user_agent=\"foo\",', ')', 'self.assertEqual(response.headers[\"Content-Length\"],', '\"1\")', 'self.assertEqual(response.body,', 'byte_body)', 'def', 'test_types(self):', 'response', '=', 'self.fetch(\"/hello\")', 'self.assertEqual(type(response.body),', 'bytes)', 'self.assertEqual(type(response.headers[\"Content-Type\"]),', 'str)', 'self.assertEqual(type(response.code),', 'int)', 'self.assertEqual(type(response.effective_url),', 'str)', 'def', 'test_gzip(self):', 'response', '=', 'self.fetch(', '\"/chunk\",', 'decompress_response=False,', 'headers={\"Accept-Encoding\":', '\"gzip\"}', ')', 'self.assertEqual(response.headers[\"Content-Encoding\"],', '\"gzip\")', 'self.assertNotEqual(response.body,', 'b\"asdfqwer\")', 'self.assertEqual(len(response.body),', '34)', 'f', '=', 'gzip.GzipFile(mode=\"r\",', 'fileobj=response.buffer)', 'self.assertEqual(f.read(),', 'b\"asdfqwer\")', 'def', 'test_invalid_gzip(self):', 'with', 'ExpectLog(', 'app_log,', '\"(Uncaught', 'exception|Exception', 'in', 'callback)\",', 'required=False', '):', 'try:', 'response', '=', 'self.fetch(\"/invalid_gzip\")', 'self.assertEqual(response.code,', '200)', 'self.assertEqual(response.body[:14],', 'b\"Hello', 'World', '0\\\\n\")', 'except', 'HTTPError:', 'pass', 'def', 'test_header_callback(self):', 'first_line', '=', '[]', 'headers', '=', '{}', 'chunks', '=', '[]', 'def', 'header_callback(header_line):', 'if', 'header_line.startswith(\"HTTP/1.1', '101\"):', 'pass', 'elif', 'header_line.startswith(\"HTTP/\"):', 'first_line.append(header_line)', 'elif', 'header_line', '!=', '\"\\\\r\\\\n\":', 'k,', 'v', '=', 'header_line.split(\":\",', '1)', 'headers[k.lower()]', '=', 'v.strip()', 'def', 'streaming_callback(chunk):', 'self.assertEqual(headers[\"content-type\"],', '\"text/html;', 'charset=UTF-8\")', 'chunks.append(chunk)', 'self.fetch(', '\"/chunk\",', 'header_callback=header_callback,', 'streaming_callback=streaming_callback,', ')', 'self.assertEqual(len(first_line),', '1,', 'first_line)', 'self.assertRegex(first_line[0],', '\"HTTP/[0-9]\\\\\\\\.[0-9]', '200.*\\\\r\\\\n\")', 'self.assertEqual(chunks,', '[b\"asdf\",', 'b\"qwer\"])', '@gen_test', 'def', 'test_configure_defaults(self):', 'defaults', '=', 'dict(user_agent=\"TestDefaultUserAgent\",', 'allow_ipv6=False)', 'client', '=', 'self.http_client.__class__(force_instance=True,', 'defaults=defaults)', 'try:', 'response', '=', 'yield', 'client.fetch(self.get_url(\"/user_agent\"))', 'self.assertEqual(response.body,', 'b\"TestDefaultUserAgent\")', 'finally:', 'client.close()', 'def', 'test_header_types(self):', 'for', 'value', 'in', '[\"MyUserAgent\",', 'b\"MyUserAgent\"]:', 'for', 'container', 'in', '[dict,', 'HTTPHeaders]:', 'headers', '=', 'container()', 'headers[\"User-Agent\"]', '=', 'value', 'resp', '=', 'self.fetch(\"/user_agent\",', 'headers=headers)', 'self.assertEqual(', 'resp.body,', 'b\"MyUserAgent\",', '\"response=%r,', 'value=%r,', 'container=%r\"', '%', '(resp.body,', 'value,', 'container),', ')', 'def', 'test_multi_line_headers(self):', 'sock,', 'port', '=', 'bind_unused_port()', 'with', 'closing(sock):', '@gen.coroutine', 'def', 'accept_callback(conn,', 'address):', 'stream', '=', 'IOStream(conn)', 'request_data', '=', 'yield', 'stream.read_until(b\"\\\\r\\\\n\\\\r\\\\n\")', 'if', 'b\"HTTP/1.\"', 'not', 'in', 'request_data:', 'self.skipTest(\"requires', 'HTTP/1.x\")', 'yield', 'stream.write(', 'b.replace(', 'b\"\\\\n\",', 'b\"\\\\r\\\\n\"', ')', ')', 'stream.close()', 'netutil.add_accept_handler(sock,', 'accept_callback)', 'try:', 'resp', '=', 'self.fetch(\"http://127.0.0.1:%d/\"', '%', 'port)', 'resp.rethrow()', 'self.assertEqual(resp.headers[\"X-XSS-Protection\"],', '\"1;', 'mode=block\")', 'finally:', 'self.io_loop.remove_handler(sock.fileno())', '@gen_test', 'def', 'test_header_encoding(self):', 'response', '=', 'yield', 'self.http_client.fetch(', 'self.get_url(\"/header-encoding\"),', 'headers={', '\"Foo\":', '\"b\\\\xe4r\",', '},', ')', 'self.assertEqual(response.body,', '\"b\\\\xe4r\".encode(\"ISO8859-1\"))', 'def', 'test_304_with_content_length(self):', 'response', '=', 'self.fetch(\"/304_with_content_length\")', 'self.assertEqual(response.code,', '304)', 'self.assertEqual(response.headers[\"Content-Length\"],', '\"42\")', '@gen_test', 'def', 'test_future_interface(self):', 'response', '=', 'yield', 'self.http_client.fetch(self.get_url(\"/hello\"))', 'self.assertEqual(response.body,', 'b\"Hello', 'world!\")', '@gen_test', 'def', 'test_future_http_error(self):', 'with', 'self.assertRaises(HTTPError)', 'as', 'context:', 'yield', 'self.http_client.fetch(self.get_url(\"/notfound\"))', 'assert', 'context.exception', 'is', 'not', 'None', 'assert', 'context.exception.response', 'is', 'not', 'None', 'self.assertEqual(context.exception.code,', '404)', 'self.assertEqual(context.exception.response.code,', '404)', '@gen_test', 'def', 'test_future_http_error_no_raise(self):', 'response', '=', 'yield', 'self.http_client.fetch(', 'self.get_url(\"/notfound\"),', 'raise_error=False', ')', 'self.assertEqual(response.code,', '404)', '@gen_test', 'def', 'test_reuse_request_from_response(self):', 'url', '=', 'self.get_url(\"/hello\")', 'response', '=', 'yield', 'self.http_client.fetch(url)', 'self.assertEqual(response.request.url,', 'url)', 'self.assertTrue(isinstance(response.request,', 'HTTPRequest))', 'response2', '=', 'yield', 'self.http_client.fetch(response.request)', 'self.assertEqual(response2.body,', 'b\"Hello', 'world!\")', '@gen_test', 'def', 'test_bind_source_ip(self):', 'url', '=', 'self.get_url(\"/hello\")', 'request', '=', 'HTTPRequest(url,', 'network_interface=\"127.0.0.1\")', 'response', '=', 'yield', 'self.http_client.fetch(request)', 'self.assertEqual(response.code,', '200)', 'with', 'self.assertRaises((ValueError,', 'HTTPError))', 'as', 'context:', 'request', '=', 'HTTPRequest(url,', 'network_interface=\"not-interface-or-ip\")', 'yield', 'self.http_client.fetch(request)', 'self.assertIn(\"not-interface-or-ip\",', 'str(context.exception))', 'def', 'test_all_methods(self):', 'for', 'method', 'in', '[\"GET\",', '\"DELETE\",', '\"OPTIONS\"]:', 'response', '=', 'self.fetch(\"/all_methods\",', 'method=method)', 'self.assertEqual(response.body,', 'utf8(method))', 'for', 'method', 'in', '[\"POST\",', '\"PUT\",', '\"PATCH\"]:', 'response', '=', 'self.fetch(\"/all_methods\",', 'method=method,', 'body=b\"\")', 'self.assertEqual(response.body,', 'utf8(method))', 'response', '=', 'self.fetch(\"/all_methods\",', 'method=\"HEAD\")', 'self.assertEqual(response.body,', 'b\"\")', 'response', '=', 'self.fetch(', '\"/all_methods\",', 'method=\"OTHER\",', 'allow_nonstandard_methods=True', ')', 'self.assertEqual(response.body,', 'b\"OTHER\")', 'def', 'test_body_sanity_checks(self):', 'for', 'method', 'in', '(\"POST\",', '\"PUT\",', '\"PATCH\"):', 'with', 'self.assertRaises(ValueError)', 'as', 'context:', 'self.fetch(\"/all_methods\",', 'method=method,', 'raise_error=True)', 'self.assertIn(\"must', 'not', 'be', 'None\",', 'str(context.exception))', 'resp', '=', 'self.fetch(', '\"/all_methods\",', 'method=method,', 'allow_nonstandard_methods=True', ')', 'self.assertEqual(resp.code,', '200)', 'for', 'method', 'in', '(\"GET\",', '\"DELETE\",', '\"OPTIONS\"):', 'with', 'self.assertRaises(ValueError)', 'as', 'context:', 'self.fetch(', '\"/all_methods\",', 'method=method,', 'body=b\"asdf\",', 'raise_error=True', ')', 'self.assertIn(\"must', 'be', 'None\",', 'str(context.exception))', 'if', 'method', '!=', '\"GET\":', 'self.fetch(', '\"/all_methods\",', 'method=method,', 'body=b\"asdf\",', 'allow_nonstandard_methods=True,', 'raise_error=True,', ')', 'self.assertEqual(resp.code,', '200)', 'def', 'test_put_307(self):', 'response', '=', 'self.fetch(', '\"/redirect?status=307&url=/put\",', 'method=\"PUT\",', 'body=b\"hello\"', ')', 'response.rethrow()', 'self.assertEqual(response.body,', 'b\"Put', 'body:', 'hello\")', 'def', 'test_non_ascii_header(self):', 'response', '=', 'self.fetch(\"/set_header?k=foo&v=%E9\")', 'response.rethrow()', 'self.assertEqual(response.headers[\"Foo\"],', 'native_str(\"\\\\u00e9\"))', 'def', 'test_response_times(self):', 'start_time', '=', 'time.time()', 'response', '=', 'self.fetch(\"/hello\")', 'response.rethrow()', 'assert', 'response.request_time', 'is', 'not', 'None', 'self.assertGreaterEqual(response.request_time,', '0)', 'self.assertLess(response.request_time,', '1.0)', 'assert', 'response.start_time', 'is', 'not', 'None', 'self.assertLess(abs(response.start_time', '-', 'start_time),', '1.0)', 'for', 'k,', 'v', 'in', 'response.time_info.items():', 'self.assertTrue(0', '<=', 'v', '<', '1.0,', '\"time_info[%s]', 'out', 'of', 'bounds:', '%s\"', '%', '(k,', 'v))', 'def', 'test_zero_timeout(self):', 'response', '=', 'self.fetch(\"/hello\",', 'connect_timeout=0)', 'self.assertEqual(response.code,', '200)', 'response', '=', 'self.fetch(\"/hello\",', 'request_timeout=0)', 'self.assertEqual(response.code,', '200)', 'response', '=', 'self.fetch(\"/hello\",', 'connect_timeout=0,', 'request_timeout=0)', 'self.assertEqual(response.code,', '200)', '@gen_test', 'def', 'test_error_after_cancel(self):', 'fut', '=', 'self.http_client.fetch(self.get_url(\"/404\"))', 'self.assertTrue(fut.cancel())', 'with', 'ExpectLog(app_log,', '\"Exception', 'after', 'Future', 'was', 'cancelled\")', 'as', 'el:', 'for', 'i', 'in', 'range(100):', 'yield', 'gen.sleep(0.01)', 'if', 'el.logged_stack:', 'break', 'class', 'RequestProxyTest(unittest.TestCase):', 'def', 'test_request_set(self):', 'proxy', '=', '_RequestProxy(', 'HTTPRequest(\"http://example.com/\",', 'user_agent=\"foo\"),', 'dict()', ')', 'self.assertEqual(proxy.user_agent,', '\"foo\")', 'def', 'test_default_set(self):', 'proxy', '=', '_RequestProxy(', 'HTTPRequest(\"http://example.com/\"),', 'dict(network_interface=\"foo\")', ')', 'self.assertEqual(proxy.network_interface,', '\"foo\")', 'def', 'test_both_set(self):', 'proxy', '=', '_RequestProxy(', 'HTTPRequest(\"http://example.com/\",', 'proxy_host=\"foo\"),', 'dict(proxy_host=\"bar\")', ')', 'self.assertEqual(proxy.proxy_host,', '\"foo\")', 'def', 'test_neither_set(self):', 'proxy', '=', '_RequestProxy(HTTPRequest(\"http://example.com/\"),', 'dict())', 'self.assertIs(proxy.auth_username,', 'None)', 'def', 'test_bad_attribute(self):', 'proxy', '=', '_RequestProxy(HTTPRequest(\"http://example.com/\"),', 'dict())', 'with', 'self.assertRaises(AttributeError):', 'proxy.foo', 'def', 'test_defaults_none(self):', 'proxy', '=', '_RequestProxy(HTTPRequest(\"http://example.com/\"),', 'None)', 'self.assertIs(proxy.auth_username,', 'None)', 'class', 'HTTPResponseTestCase(unittest.TestCase):', 'def', 'test_str(self):', 'response', '=', 'HTTPResponse(', 'HTTPRequest(\"http://example.com\"),', '200,', 'buffer=BytesIO()', ')', 's', '=', 'str(response)', 'self.assertTrue(s.startswith(\"HTTPResponse(\"))', 'self.assertIn(\"code=200\",', 's)', 'class', 'SyncHTTPClientTest(unittest.TestCase):', 'def', 'setUp(self):', 'self.server_ioloop', '=', 'IOLoop(make_current=False)', 'event', '=', 'threading.Event()', '@gen.coroutine', 'def', 'init_server():', 'sock,', 'self.port', '=', 'bind_unused_port()', 'app', '=', 'Application([(\"/\",', 'HelloWorldHandler)])', 'self.server', '=', 'HTTPServer(app)', 'self.server.add_socket(sock)', 'event.set()', 'def', 'start():', 'self.server_ioloop.run_sync(init_server)', 'self.server_ioloop.start()', 'self.server_thread', '=', 'threading.Thread(target=start)', 'self.server_thread.start()', 'event.wait()', 'self.http_client', '=', 'HTTPClient()', 'def', 'tearDown(self):', 'def', 'stop_server():', 'self.server.stop()', '@gen.coroutine', 'def', 'slow_stop():', 'yield', 'self.server.close_all_connections()', 'for', 'i', 'in', 'range(5):', 'yield', 'self.server_ioloop.stop()', 'self.server_ioloop.add_callback(slow_stop)', 'self.server_ioloop.add_callback(stop_server)', 'self.server_thread.join()', 'self.http_client.close()', 'self.server_ioloop.close(all_fds=True)', 'def', 'get_url(self,', 'path):', 'return', '\"http://127.0.0.1:%d%s\"', '%', '(self.port,', 'path)', 'def', 'test_sync_client(self):', 'response', '=', 'self.http_client.fetch(self.get_url(\"/\"))', 'self.assertEqual(b\"Hello', 'world!\",', 'response.body)', 'def', 'test_sync_client_error(self):', 'with', 'self.assertRaises(HTTPError)', 'as', 'assertion:', 'self.http_client.fetch(self.get_url(\"/notfound\"))', 'self.assertEqual(assertion.exception.code,', '404)', 'class', 'SyncHTTPClientSubprocessTest(unittest.TestCase):', 'def', 'test_destructor_log(self):', 'proc', '=', 'subprocess.run(', '[', 'sys.executable,', '\"-c\",', '\"from', 'tornado.httpclient', 'import', 'HTTPClient;', 'f', '=', 'lambda:', 'None;', 'c', '=', 'HTTPClient()\",', '],', 'stdout=subprocess.PIPE,', 'stderr=subprocess.STDOUT,', 'check=True,', 'timeout=15,', ')', 'if', 'proc.stdout:', 'print(\"STDOUT:\")', 'print(to_unicode(proc.stdout))', 'if', 'proc.stdout:', 'self.fail(\"subprocess', 'produced', 'unexpected', 'output\")', 'class', 'HTTPRequestTestCase(unittest.TestCase):', 'def', 'test_headers(self):', 'request', '=', 'HTTPRequest(\"http://example.com\",', 'headers={\"foo\":', '\"bar\"})', 'self.assertEqual(request.headers,', '{\"foo\":', '\"bar\"})', 'def', 'test_headers_setter(self):', 'request', '=', 'HTTPRequest(\"http://example.com\")', 'request.headers', '=', '{\"bar\":', '\"baz\"}', 'self.assertEqual(request.headers,', '{\"bar\":', '\"baz\"})', 'def', 'test_null_headers_setter(self):', 'request', '=', 'HTTPRequest(\"http://example.com\")', 'request.headers', '=', 'None', 'self.assertEqual(request.headers,', '{})', 'def', 'test_body(self):', 'request', '=', 'HTTPRequest(\"http://example.com\",', 'body=\"foo\")', 'self.assertEqual(request.body,', 'utf8(\"foo\"))', 'def', 'test_body_setter(self):', 'request', '=', 'HTTPRequest(\"http://example.com\")', 'request.body', '=', '\"foo\"', 'self.assertEqual(request.body,', 'utf8(\"foo\"))', 'def', 'test_if_modified_since(self):', 'http_date', '=', 'datetime.datetime.now(datetime.timezone.utc)', 'request', '=', 'HTTPRequest(\"http://example.com\",', 'if_modified_since=http_date)', 'self.assertEqual(', 'request.headers,', '{\"If-Modified-Since\":', 'format_timestamp(http_date)}', ')', 'def', 'test_if_modified_since_naive_deprecated(self):', 'with', 'ignore_deprecation():', 'http_date', '=', 'datetime.datetime.utcnow()', 'request', '=', 'HTTPRequest(\"http://example.com\",', 'if_modified_since=http_date)', 'self.assertEqual(', 'request.headers,', '{\"If-Modified-Since\":', 'format_timestamp(http_date)}', ')', 'class', 'HTTPErrorTestCase(unittest.TestCase):', 'def', 'test_copy(self):', 'e', '=', 'HTTPError(403)', 'e2', '=', 'copy.copy(e)', 'self.assertIsNot(e,', 'e2)', 'self.assertEqual(e.code,', 'e2.code)', 'def', 'test_plain_error(self):', 'e', '=', 'HTTPError(403)', 'self.assertEqual(str(e),', '\"HTTP', '403:', 'Forbidden\")', 'self.assertEqual(repr(e),', '\"HTTP', '403:', 'Forbidden\")', 'def', 'test_error_with_response(self):', 'resp', '=', 'HTTPResponse(HTTPRequest(\"http://example.com/\"),', '403)', 'with', 'self.assertRaises(HTTPError)', 'as', 'cm:', 'resp.rethrow()', 'e', '=', 'cm.exception', 'self.assertEqual(str(e),', '\"HTTP', '403:', 'Forbidden\")', 'self.assertEqual(repr(e),', '\"HTTP', '403:', 'Forbidden\")']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/httpserver_test.py",
        "vector": "['from', 'tornado', 'import', 'gen,', 'netutil', 'from', 'tornado.escape', 'import', '(', 'json_decode,', 'json_encode,', 'utf8,', '_unicode,', 'recursive_unicode,', 'native_str,', ')', 'from', 'tornado.http1connection', 'import', 'HTTP1Connection', 'from', 'tornado.httpclient', 'import', 'HTTPError', 'from', 'tornado.httpserver', 'import', 'HTTPServer', 'from', 'tornado.httputil', 'import', '(', 'HTTPHeaders,', 'HTTPMessageDelegate,', 'HTTPServerConnectionDelegate,', 'ResponseStartLine,', ')', 'from', 'tornado.iostream', 'import', 'IOStream', 'from', 'tornado.locks', 'import', 'Event', 'from', 'tornado.log', 'import', 'gen_log,', 'app_log', 'from', 'tornado.netutil', 'import', 'ssl_options_to_context', 'from', 'tornado.simple_httpclient', 'import', 'SimpleAsyncHTTPClient', 'from', 'tornado.testing', 'import', '(', 'AsyncHTTPTestCase,', 'AsyncHTTPSTestCase,', 'AsyncTestCase,', 'ExpectLog,', 'gen_test,', ')', 'from', 'tornado.test.util', 'import', 'skipOnTravis', 'from', 'tornado.web', 'import', 'Application,', 'RequestHandler,', 'stream_request_body', 'from', 'contextlib', 'import', 'closing', 'import', 'datetime', 'import', 'gzip', 'import', 'logging', 'import', 'os', 'import', 'shutil', 'import', 'socket', 'import', 'ssl', 'import', 'sys', 'import', 'tempfile', 'import', 'textwrap', 'import', 'unittest', 'import', 'urllib.parse', 'from', 'io', 'import', 'BytesIO', 'import', 'typing', 'if', 'typing.TYPE_CHECKING:', 'from', 'typing', 'import', 'Dict,', 'List', 'async', 'def', 'read_stream_body(stream):', 'chunks', '=', '[]', 'class', 'Delegate(HTTPMessageDelegate):', 'def', 'headers_received(self,', 'start_line,', 'headers):', 'self.headers', '=', 'headers', 'self.start_line', '=', 'start_line', 'def', 'data_received(self,', 'chunk):', 'chunks.append(chunk)', 'def', 'finish(self):', 'conn.detach()', 'conn', '=', 'HTTP1Connection(stream,', 'True)', 'delegate', '=', 'Delegate()', 'await', 'conn.read_response(delegate)', 'return', 'delegate.start_line,', 'delegate.headers,', 'b\"\".join(chunks)', 'class', 'HandlerBaseTestCase(AsyncHTTPTestCase):', 'Handler', '=', 'None', 'def', 'get_app(self):', 'return', 'Application([(\"/\",', 'self.__class__.Handler)])', 'def', 'fetch_json(self,', '*args,', '**kwargs):', 'response', '=', 'self.fetch(*args,', '**kwargs)', 'response.rethrow()', 'return', 'json_decode(response.body)', 'class', 'HelloWorldRequestHandler(RequestHandler):', 'def', 'initialize(self,', 'protocol=\"http\"):', 'self.expected_protocol', '=', 'protocol', 'def', 'get(self):', 'if', 'self.request.protocol', '!=', 'self.expected_protocol:', 'raise', 'Exception(\"unexpected', 'protocol\")', 'self.finish(\"Hello', 'world\")', 'def', 'post(self):', 'self.finish(\"Got', '%d', 'bytes', 'in', 'POST\"', '%', 'len(self.request.body))', 'skipIfOldSSL', '=', 'unittest.skipIf(', 'getattr(ssl,', '\"OPENSSL_VERSION_INFO\",', '(0,', '0))', '<', '(1,', '0),', '\"old', 'version', 'of', 'ssl', 'module', 'and/or', 'openssl\",', ')', 'class', 'BaseSSLTest(AsyncHTTPSTestCase):', 'def', 'get_app(self):', 'return', 'Application([(\"/\",', 'HelloWorldRequestHandler,', 'dict(protocol=\"https\"))])', 'class', 'SSLTestMixin(object):', 'def', 'get_ssl_options(self):', 'return', 'dict(', 'ssl_version=self.get_ssl_version(),', '**AsyncHTTPSTestCase.default_ssl_options(),', ')', 'def', 'get_ssl_version(self):', 'raise', 'NotImplementedError()', 'def', 'test_ssl(self:', 'typing.Any):', 'response', '=', 'self.fetch(\"/\")', 'self.assertEqual(response.body,', 'b\"Hello', 'world\")', 'def', 'test_large_post(self:', 'typing.Any):', 'response', '=', 'self.fetch(\"/\",', 'method=\"POST\",', 'body=\"A\"', '*', '5000)', 'self.assertEqual(response.body,', 'b\"Got', '5000', 'bytes', 'in', 'POST\")', 'def', 'test_non_ssl_request(self:', 'typing.Any):', 'with', 'ExpectLog(gen_log,', '\"(SSL', 'Error|uncaught', 'exception)\"):', 'with', 'ExpectLog(gen_log,', '\"Uncaught', 'exception\",', 'required=False):', 'with', 'self.assertRaises((IOError,', 'HTTPError)):', 'self.fetch(', 'self.get_url(\"/\").replace(\"https:\",', '\"http:\"),', 'request_timeout=3600,', 'connect_timeout=3600,', 'raise_error=True,', ')', 'def', 'test_error_logging(self:', 'typing.Any):', 'with', 'ExpectLog(gen_log,', '\"SSL', 'Error\")', 'as', 'expect_log:', 'with', 'self.assertRaises((IOError,', 'HTTPError)):', 'self.fetch(', 'self.get_url(\"/\").replace(\"https:\",', '\"http:\"),', 'raise_error=True', ')', 'self.assertFalse(expect_log.logged_stack)', 'class', 'SSLv23Test(BaseSSLTest,', 'SSLTestMixin):', 'def', 'get_ssl_version(self):', 'return', 'ssl.PROTOCOL_SSLv23', '@skipIfOldSSL', 'class', 'SSLv3Test(BaseSSLTest,', 'SSLTestMixin):', 'def', 'get_ssl_version(self):', 'return', 'ssl.PROTOCOL_SSLv3', '@skipIfOldSSL', 'class', 'TLSv1Test(BaseSSLTest,', 'SSLTestMixin):', 'def', 'get_ssl_version(self):', 'return', 'ssl.PROTOCOL_TLSv1', 'class', 'SSLContextTest(BaseSSLTest,', 'SSLTestMixin):', 'def', 'get_ssl_options(self):', 'context', '=', 'ssl_options_to_context(', 'AsyncHTTPSTestCase.get_ssl_options(self),', 'server_side=True', ')', 'assert', 'isinstance(context,', 'ssl.SSLContext)', 'return', 'context', 'class', 'BadSSLOptionsTest(unittest.TestCase):', 'def', 'test_missing_arguments(self):', 'application', '=', 'Application()', 'self.assertRaises(', 'KeyError,', 'HTTPServer,', 'application,', 'ssl_options={\"keyfile\":', '\"/__missing__.crt\"},', ')', 'def', 'test_missing_key(self):', 'application', '=', 'Application()', 'module_dir', '=', 'os.path.dirname(__file__)', 'existing_certificate', '=', 'os.path.join(module_dir,', '\"test.crt\")', 'existing_key', '=', 'os.path.join(module_dir,', '\"test.key\")', 'self.assertRaises(', '(ValueError,', 'IOError),', 'HTTPServer,', 'application,', 'ssl_options={\"certfile\":', '\"/__mising__.crt\"},', ')', 'self.assertRaises(', '(ValueError,', 'IOError),', 'HTTPServer,', 'application,', 'ssl_options={', '\"certfile\":', 'existing_certificate,', '\"keyfile\":', '\"/__missing__.key\",', '},', ')', 'HTTPServer(', 'application,', 'ssl_options={\"certfile\":', 'existing_certificate,', '\"keyfile\":', 'existing_key},', ')', 'class', 'MultipartTestHandler(RequestHandler):', 'def', 'post(self):', 'self.finish(', '{', '\"header\":', 'self.request.headers[\"X-Header-Encoding-Test\"],', '\"argument\":', 'self.get_argument(\"argument\"),', '\"filename\":', 'self.request.files[\"files\"][0].filename,', '\"filebody\":', '_unicode(self.request.files[\"files\"][0][\"body\"]),', '}', ')', 'class', 'HTTPConnectionTest(AsyncHTTPTestCase):', 'def', 'get_handlers(self):', 'return', '[', '(\"/multipart\",', 'MultipartTestHandler),', '(\"/hello\",', 'HelloWorldRequestHandler),', ']', 'def', 'get_app(self):', 'return', 'Application(self.get_handlers())', 'def', 'raw_fetch(self,', 'headers,', 'body,', 'newline=b\"\\\\r\\\\n\"):', 'with', 'closing(IOStream(socket.socket()))', 'as', 'stream:', 'self.io_loop.run_sync(', 'lambda:', 'stream.connect((\"127.0.0.1\",', 'self.get_http_port()))', ')', 'stream.write(', 'newline.join(headers', '+', '[utf8(\"Content-Length:', '%d\"', '%', 'len(body))])', '+', 'newline', '+', 'newline', '+', 'body', ')', 'start_line,', 'headers,', 'body', '=', 'self.io_loop.run_sync(', 'lambda:', 'read_stream_body(stream)', ')', 'return', 'body', 'def', 'test_multipart_form(self):', 'response', '=', 'self.raw_fetch(', '[', 'b\"POST', '/multipart', 'HTTP/1.0\",', 'b\"Content-Type:', 'multipart/form-data;', 'boundary=1234567890\",', 'b\"X-Header-encoding-test:', '\\\\xe9\",', '],', 'b\"\\\\r\\\\n\".join(', '[', 'b\"Content-Disposition:', 'form-data;', 'name=argument\",', 'b\"\",', '\"\\\\u00e1\".encode(\"utf-8\"),', 'b\"--1234567890\",', \"'Content-Disposition:\", 'form-data;', 'name=\"files\";', 'filename=\"\\\\u00f3\"\\'.encode(', '\"utf8\"', '),', 'b\"\",', '\"\\\\u00fa\".encode(\"utf-8\"),', 'b\"--1234567890--\",', 'b\"\",', ']', '),', ')', 'data', '=', 'json_decode(response)', 'self.assertEqual(\"\\\\u00e9\",', 'data[\"header\"])', 'self.assertEqual(\"\\\\u00e1\",', 'data[\"argument\"])', 'self.assertEqual(\"\\\\u00f3\",', 'data[\"filename\"])', 'self.assertEqual(\"\\\\u00fa\",', 'data[\"filebody\"])', 'def', 'test_newlines(self):', 'for', 'newline', 'in', '(b\"\\\\r\\\\n\",', 'b\"\\\\n\"):', 'response', '=', 'self.raw_fetch([b\"GET', '/hello', 'HTTP/1.0\"],', 'b\"\",', 'newline=newline)', 'self.assertEqual(response,', 'b\"Hello', 'world\")', '@gen_test', 'def', 'test_100_continue(self):', 'stream', '=', 'IOStream(socket.socket())', 'yield', 'stream.connect((\"127.0.0.1\",', 'self.get_http_port()))', 'yield', 'stream.write(', 'b\"\\\\r\\\\n\".join(', '[', 'b\"POST', '/hello', 'HTTP/1.1\",', 'b\"Content-Length:', '1024\",', 'b\"Expect:', '100-continue\",', 'b\"Connection:', 'close\",', 'b\"\\\\r\\\\n\",', ']', ')', ')', 'data', '=', 'yield', 'stream.read_until(b\"\\\\r\\\\n\\\\r\\\\n\")', 'self.assertTrue(data.startswith(b\"HTTP/1.1', '100', '\"),', 'data)', 'stream.write(b\"a\"', '*', '1024)', 'first_line', '=', 'yield', 'stream.read_until(b\"\\\\r\\\\n\")', 'self.assertTrue(first_line.startswith(b\"HTTP/1.1', '200\"),', 'first_line)', 'header_data', '=', 'yield', 'stream.read_until(b\"\\\\r\\\\n\\\\r\\\\n\")', 'headers', '=', 'HTTPHeaders.parse(native_str(header_data.decode(\"latin1\")))', 'body', '=', 'yield', 'stream.read_bytes(int(headers[\"Content-Length\"]))', 'self.assertEqual(body,', 'b\"Got', '1024', 'bytes', 'in', 'POST\")', 'stream.close()', 'class', 'EchoHandler(RequestHandler):', 'def', 'get(self):', 'self.write(recursive_unicode(self.request.arguments))', 'def', 'post(self):', 'self.write(recursive_unicode(self.request.arguments))', 'class', 'TypeCheckHandler(RequestHandler):', 'def', 'prepare(self):', 'self.errors', '=', '{}', 'fields', '=', '[', '(\"method\",', 'str),', '(\"uri\",', 'str),', '(\"version\",', 'str),', '(\"remote_ip\",', 'str),', '(\"protocol\",', 'str),', '(\"host\",', 'str),', '(\"path\",', 'str),', '(\"query\",', 'str),', ']', 'for', 'field,', 'expected_type', 'in', 'fields:', 'self.check_type(field,', 'getattr(self.request,', 'field),', 'expected_type)', 'self.check_type(\"header_key\",', 'list(self.request.headers.keys())[0],', 'str)', 'self.check_type(\"header_value\",', 'list(self.request.headers.values())[0],', 'str)', 'self.check_type(\"cookie_key\",', 'list(self.request.cookies.keys())[0],', 'str)', 'self.check_type(', '\"cookie_value\",', 'list(self.request.cookies.values())[0].value,', 'str', ')', 'self.check_type(\"arg_key\",', 'list(self.request.arguments.keys())[0],', 'str)', 'self.check_type(\"arg_value\",', 'list(self.request.arguments.values())[0][0],', 'bytes)', 'def', 'post(self):', 'self.check_type(\"body\",', 'self.request.body,', 'bytes)', 'self.write(self.errors)', 'def', 'get(self):', 'self.write(self.errors)', 'def', 'check_type(self,', 'name,', 'obj,', 'expected_type):', 'actual_type', '=', 'type(obj)', 'if', 'expected_type', '!=', 'actual_type:', 'self.errors[name]', '=', '\"expected', '%s,', 'got', '%s\"', '%', '(expected_type,', 'actual_type)', 'class', 'PostEchoHandler(RequestHandler):', 'def', 'post(self,', '*path_args):', 'self.write(dict(echo=self.get_argument(\"data\")))', 'class', 'PostEchoGBKHandler(PostEchoHandler):', 'def', 'decode_argument(self,', 'value,', 'name=None):', 'try:', 'return', 'value.decode(\"gbk\")', 'except', 'Exception:', 'raise', 'HTTPError(400,', '\"invalid', 'gbk', 'bytes:', '%r\"', '%', 'value)', 'class', 'HTTPServerTest(AsyncHTTPTestCase):', 'def', 'get_app(self):', 'return', 'Application(', '[', '(\"/echo\",', 'EchoHandler),', '(\"/typecheck\",', 'TypeCheckHandler),', '(\"//doubleslash\",', 'EchoHandler),', '(\"/post_utf8\",', 'PostEchoHandler),', '(\"/post_gbk\",', 'PostEchoGBKHandler),', ']', ')', 'def', 'test_query_string_encoding(self):', 'response', '=', 'self.fetch(\"/echo?foo=%C3%A9\")', 'data', '=', 'json_decode(response.body)', 'self.assertEqual(data,', '{\"foo\":', '[\"\\\\u00e9\"]})', 'def', 'test_empty_query_string(self):', 'response', '=', 'self.fetch(\"/echo?foo=&foo=\")', 'data', '=', 'json_decode(response.body)', 'self.assertEqual(data,', '{\"foo\":', '[\"\",', '\"\"]})', 'def', 'test_empty_post_parameters(self):', 'response', '=', 'self.fetch(\"/echo\",', 'method=\"POST\",', 'body=\"foo=&bar=\")', 'data', '=', 'json_decode(response.body)', 'self.assertEqual(data,', '{\"foo\":', '[\"\"],', '\"bar\":', '[\"\"]})', 'def', 'test_types(self):', 'headers', '=', '{\"Cookie\":', '\"foo=bar\"}', 'response', '=', 'self.fetch(\"/typecheck?foo=bar\",', 'headers=headers)', 'data', '=', 'json_decode(response.body)', 'self.assertEqual(data,', '{})', 'response', '=', 'self.fetch(', '\"/typecheck\",', 'method=\"POST\",', 'body=\"foo=bar\",', 'headers=headers', ')', 'data', '=', 'json_decode(response.body)', 'self.assertEqual(data,', '{})', 'def', 'test_double_slash(self):', 'response', '=', 'self.fetch(\"//doubleslash\")', 'self.assertEqual(200,', 'response.code)', 'self.assertEqual(json_decode(response.body),', '{})', 'def', 'test_post_encodings(self):', 'headers', '=', '{\"Content-Type\":', '\"application/x-www-form-urlencoded\"}', 'uni_text', '=', '\"chinese:', '\\\\u5f20\\\\u4e09\"', 'for', 'enc', 'in', '(\"utf8\",', '\"gbk\"):', 'for', 'quote', 'in', '(True,', 'False):', 'with', 'self.subTest(enc=enc,', 'quote=quote):', 'bin_text', '=', 'uni_text.encode(enc)', 'if', 'quote:', 'bin_text', '=', 'urllib.parse.quote(bin_text).encode(\"ascii\")', 'response', '=', 'self.fetch(', '\"/post_\"', '+', 'enc,', 'method=\"POST\",', 'headers=headers,', 'body=(b\"data=\"', '+', 'bin_text),', ')', 'self.assertEqual(json_decode(response.body),', '{\"echo\":', 'uni_text})', 'class', 'HTTPServerRawTest(AsyncHTTPTestCase):', 'def', 'get_app(self):', 'return', 'Application([(\"/echo\",', 'EchoHandler)])', 'def', 'setUp(self):', 'super().setUp()', 'self.stream', '=', 'IOStream(socket.socket())', 'self.io_loop.run_sync(', 'lambda:', 'self.stream.connect((\"127.0.0.1\",', 'self.get_http_port()))', ')', 'def', 'tearDown(self):', 'self.stream.close()', 'super().tearDown()', 'def', 'test_empty_request(self):', 'self.stream.close()', 'self.io_loop.add_timeout(datetime.timedelta(seconds=0.001),', 'self.stop)', 'self.wait()', 'def', 'test_malformed_first_line_response(self):', 'with', 'ExpectLog(gen_log,', '\".*Malformed', 'HTTP', 'request', 'line\",', 'level=logging.INFO):', 'self.stream.write(b\"asdf\\\\r\\\\n\\\\r\\\\n\")', 'start_line,', 'headers,', 'response', '=', 'self.io_loop.run_sync(', 'lambda:', 'read_stream_body(self.stream)', ')', 'self.assertEqual(\"HTTP/1.1\",', 'start_line.version)', 'self.assertEqual(400,', 'start_line.code)', 'self.assertEqual(\"Bad', 'Request\",', 'start_line.reason)', 'def', 'test_malformed_first_line_log(self):', 'with', 'ExpectLog(gen_log,', '\".*Malformed', 'HTTP', 'request', 'line\",', 'level=logging.INFO):', 'self.stream.write(b\"asdf\\\\r\\\\n\\\\r\\\\n\")', 'self.io_loop.add_timeout(datetime.timedelta(seconds=0.05),', 'self.stop)', 'self.wait()', 'def', 'test_malformed_headers(self):', 'with', 'ExpectLog(', 'gen_log,', '\".*Malformed', 'HTTP', 'message.*no', 'colon', 'in', 'header', 'line\",', 'level=logging.INFO,', '):', 'self.stream.write(b\"GET', '/', 'HTTP/1.0\\\\r\\\\nasdf\\\\r\\\\n\\\\r\\\\n\")', 'self.io_loop.add_timeout(datetime.timedelta(seconds=0.05),', 'self.stop)', 'self.wait()', 'def', 'test_chunked_request_body(self):', 'self.stream.write(', 'b.replace(', 'b\"\\\\n\",', 'b\"\\\\r\\\\n\"', ')', ')', 'start_line,', 'headers,', 'response', '=', 'self.io_loop.run_sync(', 'lambda:', 'read_stream_body(self.stream)', ')', 'self.assertEqual(json_decode(response),', '{\"foo\":', '[\"bar\"]})', 'def', 'test_chunked_request_uppercase(self):', 'self.stream.write(', 'b.replace(', 'b\"\\\\n\",', 'b\"\\\\r\\\\n\"', ')', ')', 'start_line,', 'headers,', 'response', '=', 'self.io_loop.run_sync(', 'lambda:', 'read_stream_body(self.stream)', ')', 'self.assertEqual(json_decode(response),', '{\"foo\":', '[\"bar\"]})', 'def', 'test_chunked_request_body_invalid_size(self):', 'self.stream.write(', 'b.replace(', 'b\"\\\\n\",', 'b\"\\\\r\\\\n\"', ')', ')', 'with', 'ExpectLog(gen_log,', '\".*invalid', 'chunk', 'size\",', 'level=logging.INFO):', 'start_line,', 'headers,', 'response', '=', 'self.io_loop.run_sync(', 'lambda:', 'read_stream_body(self.stream)', ')', 'self.assertEqual(400,', 'start_line.code)', '@gen_test', 'def', 'test_invalid_content_length(self):', 'test_cases', '=', '[', '(\"alphabetic\",', '\"foo\"),', '(\"leading', 'plus\",', '\"+10\"),', '(\"internal', 'underscore\",', '\"1_0\"),', ']', 'for', 'name,', 'value', 'in', 'test_cases:', 'with', 'self.subTest(name=name),', 'closing(IOStream(socket.socket()))', 'as', 'stream:', 'with', 'ExpectLog(', 'gen_log,', '\".*Only', 'integer', 'Content-Length', 'is', 'allowed\",', 'level=logging.INFO,', '):', 'yield', 'stream.connect((\"127.0.0.1\",', 'self.get_http_port()))', 'stream.write(', 'utf8(', 'textwrap.dedent(', 'f', ').replace(\"\\\\n\",', '\"\\\\r\\\\n\")', ')', ')', 'yield', 'stream.read_until_close()', 'class', 'XHeaderTest(HandlerBaseTestCase):', 'class', 'Handler(RequestHandler):', 'def', 'get(self):', 'self.set_header(\"request-version\",', 'self.request.version)', 'self.write(', 'dict(', 'remote_ip=self.request.remote_ip,', 'remote_protocol=self.request.protocol,', ')', ')', 'def', 'get_httpserver_options(self):', 'return', 'dict(xheaders=True,', 'trusted_downstream=[\"5.5.5.5\"])', 'def', 'test_ip_headers(self):', 'self.assertEqual(self.fetch_json(\"/\")[\"remote_ip\"],', '\"127.0.0.1\")', 'valid_ipv4', '=', '{\"X-Real-IP\":', '\"4.4.4.4\"}', 'self.assertEqual(', 'self.fetch_json(\"/\",', 'headers=valid_ipv4)[\"remote_ip\"],', '\"4.4.4.4\"', ')', 'valid_ipv4_list', '=', '{\"X-Forwarded-For\":', '\"127.0.0.1,', '4.4.4.4\"}', 'self.assertEqual(', 'self.fetch_json(\"/\",', 'headers=valid_ipv4_list)[\"remote_ip\"],', '\"4.4.4.4\"', ')', 'valid_ipv6', '=', '{\"X-Real-IP\":', '\"2620:0:1cfe:face:b00c::3\"}', 'self.assertEqual(', 'self.fetch_json(\"/\",', 'headers=valid_ipv6)[\"remote_ip\"],', '\"2620:0:1cfe:face:b00c::3\",', ')', 'valid_ipv6_list', '=', '{\"X-Forwarded-For\":', '\"::1,', '2620:0:1cfe:face:b00c::3\"}', 'self.assertEqual(', 'self.fetch_json(\"/\",', 'headers=valid_ipv6_list)[\"remote_ip\"],', '\"2620:0:1cfe:face:b00c::3\",', ')', 'invalid_chars', '=', '{\"X-Real-IP\":', '\"4.4.4.4<script>\"}', 'self.assertEqual(', 'self.fetch_json(\"/\",', 'headers=invalid_chars)[\"remote_ip\"],', '\"127.0.0.1\"', ')', 'invalid_chars_list', '=', '{\"X-Forwarded-For\":', '\"4.4.4.4,', '5.5.5.5<script>\"}', 'self.assertEqual(', 'self.fetch_json(\"/\",', 'headers=invalid_chars_list)[\"remote_ip\"],', '\"127.0.0.1\"', ')', 'invalid_host', '=', '{\"X-Real-IP\":', '\"www.google.com\"}', 'self.assertEqual(', 'self.fetch_json(\"/\",', 'headers=invalid_host)[\"remote_ip\"],', '\"127.0.0.1\"', ')', 'def', 'test_trusted_downstream(self):', 'valid_ipv4_list', '=', '{\"X-Forwarded-For\":', '\"127.0.0.1,', '4.4.4.4,', '5.5.5.5\"}', 'resp', '=', 'self.fetch(\"/\",', 'headers=valid_ipv4_list)', 'if', 'resp.headers[\"request-version\"].startswith(\"HTTP/2\"):', 'self.skipTest(\"requires', 'HTTP/1.x\")', 'result', '=', 'json_decode(resp.body)', 'self.assertEqual(result[\"remote_ip\"],', '\"4.4.4.4\")', 'def', 'test_scheme_headers(self):', 'self.assertEqual(self.fetch_json(\"/\")[\"remote_protocol\"],', '\"http\")', 'https_scheme', '=', '{\"X-Scheme\":', '\"https\"}', 'self.assertEqual(', 'self.fetch_json(\"/\",', 'headers=https_scheme)[\"remote_protocol\"],', '\"https\"', ')', 'https_forwarded', '=', '{\"X-Forwarded-Proto\":', '\"https\"}', 'self.assertEqual(', 'self.fetch_json(\"/\",', 'headers=https_forwarded)[\"remote_protocol\"],', '\"https\"', ')', 'https_multi_forwarded', '=', '{\"X-Forwarded-Proto\":', '\"https', ',', 'http\"}', 'self.assertEqual(', 'self.fetch_json(\"/\",', 'headers=https_multi_forwarded)[\"remote_protocol\"],', '\"http\",', ')', 'http_multi_forwarded', '=', '{\"X-Forwarded-Proto\":', '\"http,https\"}', 'self.assertEqual(', 'self.fetch_json(\"/\",', 'headers=http_multi_forwarded)[\"remote_protocol\"],', '\"https\",', ')', 'bad_forwarded', '=', '{\"X-Forwarded-Proto\":', '\"unknown\"}', 'self.assertEqual(', 'self.fetch_json(\"/\",', 'headers=bad_forwarded)[\"remote_protocol\"],', '\"http\"', ')', 'class', 'SSLXHeaderTest(AsyncHTTPSTestCase,', 'HandlerBaseTestCase):', 'def', 'get_app(self):', 'return', 'Application([(\"/\",', 'XHeaderTest.Handler)])', 'def', 'get_httpserver_options(self):', 'output', '=', 'super().get_httpserver_options()', 'output[\"xheaders\"]', '=', 'True', 'return', 'output', 'def', 'test_request_without_xprotocol(self):', 'self.assertEqual(self.fetch_json(\"/\")[\"remote_protocol\"],', '\"https\")', 'http_scheme', '=', '{\"X-Scheme\":', '\"http\"}', 'self.assertEqual(', 'self.fetch_json(\"/\",', 'headers=http_scheme)[\"remote_protocol\"],', '\"http\"', ')', 'bad_scheme', '=', '{\"X-Scheme\":', '\"unknown\"}', 'self.assertEqual(', 'self.fetch_json(\"/\",', 'headers=bad_scheme)[\"remote_protocol\"],', '\"https\"', ')', 'class', 'ManualProtocolTest(HandlerBaseTestCase):', 'class', 'Handler(RequestHandler):', 'def', 'get(self):', 'self.write(dict(protocol=self.request.protocol))', 'def', 'get_httpserver_options(self):', 'return', 'dict(protocol=\"https\")', 'def', 'test_manual_protocol(self):', 'self.assertEqual(self.fetch_json(\"/\")[\"protocol\"],', '\"https\")', '@unittest.skipIf(', 'not', 'hasattr(socket,', '\"AF_UNIX\")', 'or', 'sys.platform', '==', '\"cygwin\",', '\"unix', 'sockets', 'not', 'supported', 'on', 'this', 'platform\",', ')', 'class', 'UnixSocketTest(AsyncTestCase):', 'def', 'setUp(self):', 'super().setUp()', 'self.tmpdir', '=', 'tempfile.mkdtemp()', 'self.sockfile', '=', 'os.path.join(self.tmpdir,', '\"test.sock\")', 'sock', '=', 'netutil.bind_unix_socket(self.sockfile)', 'app', '=', 'Application([(\"/hello\",', 'HelloWorldRequestHandler)])', 'self.server', '=', 'HTTPServer(app)', 'self.server.add_socket(sock)', 'self.stream', '=', 'IOStream(socket.socket(socket.AF_UNIX))', 'self.io_loop.run_sync(lambda:', 'self.stream.connect(self.sockfile))', 'def', 'tearDown(self):', 'self.stream.close()', 'self.io_loop.run_sync(self.server.close_all_connections)', 'self.server.stop()', 'shutil.rmtree(self.tmpdir)', 'super().tearDown()', '@gen_test', 'def', 'test_unix_socket(self):', 'self.stream.write(b\"GET', '/hello', 'HTTP/1.0\\\\r\\\\n\\\\r\\\\n\")', 'response', '=', 'yield', 'self.stream.read_until(b\"\\\\r\\\\n\")', 'self.assertEqual(response,', 'b\"HTTP/1.1', '200', 'OK\\\\r\\\\n\")', 'header_data', '=', 'yield', 'self.stream.read_until(b\"\\\\r\\\\n\\\\r\\\\n\")', 'headers', '=', 'HTTPHeaders.parse(header_data.decode(\"latin1\"))', 'body', '=', 'yield', 'self.stream.read_bytes(int(headers[\"Content-Length\"]))', 'self.assertEqual(body,', 'b\"Hello', 'world\")', '@gen_test', 'def', 'test_unix_socket_bad_request(self):', 'with', 'ExpectLog(gen_log,', '\"Malformed', 'HTTP', 'message', 'from\",', 'level=logging.INFO):', 'self.stream.write(b\"garbage\\\\r\\\\n\\\\r\\\\n\")', 'response', '=', 'yield', 'self.stream.read_until_close()', 'self.assertEqual(response,', 'b\"HTTP/1.1', '400', 'Bad', 'Request\\\\r\\\\n\\\\r\\\\n\")', 'class', 'KeepAliveTest(AsyncHTTPTestCase):', 'def', 'get_app(self):', 'class', 'HelloHandler(RequestHandler):', 'def', 'get(self):', 'self.finish(\"Hello', 'world\")', 'def', 'post(self):', 'self.finish(\"Hello', 'world\")', 'class', 'LargeHandler(RequestHandler):', 'def', 'get(self):', 'self.write(\"\".join(chr(i', '%', '256)', '*', '1024', 'for', 'i', 'in', 'range(512)))', 'class', 'TransferEncodingChunkedHandler(RequestHandler):', '@gen.coroutine', 'def', 'head(self):', 'self.write(\"Hello', 'world\")', 'yield', 'self.flush()', 'class', 'FinishOnCloseHandler(RequestHandler):', 'def', 'initialize(self,', 'cleanup_event):', 'self.cleanup_event', '=', 'cleanup_event', '@gen.coroutine', 'def', 'get(self):', 'self.flush()', 'yield', 'self.cleanup_event.wait()', 'def', 'on_connection_close(self):', 'self.finish(\"closed\")', 'self.cleanup_event', '=', 'Event()', 'return', 'Application(', '[', '(\"/\",', 'HelloHandler),', '(\"/large\",', 'LargeHandler),', '(\"/chunked\",', 'TransferEncodingChunkedHandler),', '(', '\"/finish_on_close\",', 'FinishOnCloseHandler,', 'dict(cleanup_event=self.cleanup_event),', '),', ']', ')', 'def', 'setUp(self):', 'super().setUp()', 'self.http_version', '=', 'b\"HTTP/1.1\"', 'def', 'tearDown(self):', 'self.io_loop.add_timeout(datetime.timedelta(seconds=0.001),', 'self.stop)', 'self.wait()', 'if', 'hasattr(self,', '\"stream\"):', 'self.stream.close()', 'super().tearDown()', '@gen.coroutine', 'def', 'connect(self):', 'self.stream', '=', 'IOStream(socket.socket())', 'yield', 'self.stream.connect((\"127.0.0.1\",', 'self.get_http_port()))', '@gen.coroutine', 'def', 'read_headers(self):', 'first_line', '=', 'yield', 'self.stream.read_until(b\"\\\\r\\\\n\")', 'self.assertTrue(first_line.startswith(b\"HTTP/1.1', '200\"),', 'first_line)', 'header_bytes', '=', 'yield', 'self.stream.read_until(b\"\\\\r\\\\n\\\\r\\\\n\")', 'headers', '=', 'HTTPHeaders.parse(header_bytes.decode(\"latin1\"))', 'raise', 'gen.Return(headers)', '@gen.coroutine', 'def', 'read_response(self):', 'self.headers', '=', 'yield', 'self.read_headers()', 'body', '=', 'yield', 'self.stream.read_bytes(int(self.headers[\"Content-Length\"]))', 'self.assertEqual(b\"Hello', 'world\",', 'body)', 'def', 'close(self):', 'self.stream.close()', 'del', 'self.stream', '@gen_test', 'def', 'test_two_requests(self):', 'yield', 'self.connect()', 'self.stream.write(b\"GET', '/', 'HTTP/1.1\\\\r\\\\n\\\\r\\\\n\")', 'yield', 'self.read_response()', 'self.stream.write(b\"GET', '/', 'HTTP/1.1\\\\r\\\\n\\\\r\\\\n\")', 'yield', 'self.read_response()', 'self.close()', '@gen_test', 'def', 'test_request_close(self):', 'yield', 'self.connect()', 'self.stream.write(b\"GET', '/', 'HTTP/1.1\\\\r\\\\nConnection:', 'close\\\\r\\\\n\\\\r\\\\n\")', 'yield', 'self.read_response()', 'data', '=', 'yield', 'self.stream.read_until_close()', 'self.assertTrue(not', 'data)', 'self.assertEqual(self.headers[\"Connection\"],', '\"close\")', 'self.close()', '@gen_test', 'def', 'test_http10(self):', 'self.http_version', '=', 'b\"HTTP/1.0\"', 'yield', 'self.connect()', 'self.stream.write(b\"GET', '/', 'HTTP/1.0\\\\r\\\\n\\\\r\\\\n\")', 'yield', 'self.read_response()', 'data', '=', 'yield', 'self.stream.read_until_close()', 'self.assertTrue(not', 'data)', 'self.assertTrue(\"Connection\"', 'not', 'in', 'self.headers)', 'self.close()', '@gen_test', 'def', 'test_http10_keepalive(self):', 'self.http_version', '=', 'b\"HTTP/1.0\"', 'yield', 'self.connect()', 'self.stream.write(b\"GET', '/', 'HTTP/1.0\\\\r\\\\nConnection:', 'keep-alive\\\\r\\\\n\\\\r\\\\n\")', 'yield', 'self.read_response()', 'self.assertEqual(self.headers[\"Connection\"],', '\"Keep-Alive\")', 'self.stream.write(b\"GET', '/', 'HTTP/1.0\\\\r\\\\nConnection:', 'keep-alive\\\\r\\\\n\\\\r\\\\n\")', 'yield', 'self.read_response()', 'self.assertEqual(self.headers[\"Connection\"],', '\"Keep-Alive\")', 'self.close()', '@gen_test', 'def', 'test_http10_keepalive_extra_crlf(self):', 'self.http_version', '=', 'b\"HTTP/1.0\"', 'yield', 'self.connect()', 'self.stream.write(b\"GET', '/', 'HTTP/1.0\\\\r\\\\nConnection:', 'keep-alive\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n\")', 'yield', 'self.read_response()', 'self.assertEqual(self.headers[\"Connection\"],', '\"Keep-Alive\")', 'self.stream.write(b\"GET', '/', 'HTTP/1.0\\\\r\\\\nConnection:', 'keep-alive\\\\r\\\\n\\\\r\\\\n\")', 'yield', 'self.read_response()', 'self.assertEqual(self.headers[\"Connection\"],', '\"Keep-Alive\")', 'self.close()', '@gen_test', 'def', 'test_pipelined_requests(self):', 'yield', 'self.connect()', 'self.stream.write(b\"GET', '/', 'HTTP/1.1\\\\r\\\\n\\\\r\\\\nGET', '/', 'HTTP/1.1\\\\r\\\\n\\\\r\\\\n\")', 'yield', 'self.read_response()', 'yield', 'self.read_response()', 'self.close()', '@gen_test', 'def', 'test_pipelined_cancel(self):', 'yield', 'self.connect()', 'self.stream.write(b\"GET', '/', 'HTTP/1.1\\\\r\\\\n\\\\r\\\\nGET', '/', 'HTTP/1.1\\\\r\\\\n\\\\r\\\\n\")', 'yield', 'self.read_response()', 'self.close()', '@gen_test', 'def', 'test_cancel_during_download(self):', 'yield', 'self.connect()', 'self.stream.write(b\"GET', '/large', 'HTTP/1.1\\\\r\\\\n\\\\r\\\\n\")', 'yield', 'self.read_headers()', 'yield', 'self.stream.read_bytes(1024)', 'self.close()', '@gen_test', 'def', 'test_finish_while_closed(self):', 'yield', 'self.connect()', 'self.stream.write(b\"GET', '/finish_on_close', 'HTTP/1.1\\\\r\\\\n\\\\r\\\\n\")', 'yield', 'self.read_headers()', 'self.close()', 'self.cleanup_event.set()', '@gen_test', 'def', 'test_keepalive_chunked(self):', 'self.http_version', '=', 'b\"HTTP/1.0\"', 'yield', 'self.connect()', 'self.stream.write(', 'b\"POST', '/', 'HTTP/1.0\\\\r\\\\n\"', 'b\"Connection:', 'keep-alive\\\\r\\\\n\"', 'b\"Transfer-Encoding:', 'chunked\\\\r\\\\n\"', 'b\"\\\\r\\\\n\"', 'b\"0\\\\r\\\\n\"', 'b\"\\\\r\\\\n\"', ')', 'yield', 'self.read_response()', 'self.assertEqual(self.headers[\"Connection\"],', '\"Keep-Alive\")', 'self.stream.write(b\"GET', '/', 'HTTP/1.0\\\\r\\\\nConnection:', 'keep-alive\\\\r\\\\n\\\\r\\\\n\")', 'yield', 'self.read_response()', 'self.assertEqual(self.headers[\"Connection\"],', '\"Keep-Alive\")', 'self.close()', '@gen_test', 'def', 'test_keepalive_chunked_head_no_body(self):', 'yield', 'self.connect()', 'self.stream.write(b\"HEAD', '/chunked', 'HTTP/1.1\\\\r\\\\n\\\\r\\\\n\")', 'yield', 'self.read_headers()', 'self.stream.write(b\"HEAD', '/chunked', 'HTTP/1.1\\\\r\\\\n\\\\r\\\\n\")', 'yield', 'self.read_headers()', 'self.close()', 'class', 'GzipBaseTest(AsyncHTTPTestCase):', 'def', 'get_app(self):', 'return', 'Application([(\"/\",', 'EchoHandler)])', 'def', 'post_gzip(self,', 'body):', 'bytesio', '=', 'BytesIO()', 'gzip_file', '=', 'gzip.GzipFile(mode=\"w\",', 'fileobj=bytesio)', 'gzip_file.write(utf8(body))', 'gzip_file.close()', 'compressed_body', '=', 'bytesio.getvalue()', 'return', 'self.fetch(', '\"/\",', 'method=\"POST\",', 'body=compressed_body,', 'headers={\"Content-Encoding\":', '\"gzip\"},', ')', 'def', 'test_uncompressed(self):', 'response', '=', 'self.fetch(\"/\",', 'method=\"POST\",', 'body=\"foo=bar\")', 'self.assertEqual(json_decode(response.body),', '{\"foo\":', '[\"bar\"]})', 'class', 'GzipTest(GzipBaseTest,', 'AsyncHTTPTestCase):', 'def', 'get_httpserver_options(self):', 'return', 'dict(decompress_request=True)', 'def', 'test_gzip(self):', 'response', '=', 'self.post_gzip(\"foo=bar\")', 'self.assertEqual(json_decode(response.body),', '{\"foo\":', '[\"bar\"]})', 'def', 'test_gzip_case_insensitive(self):', 'bytesio', '=', 'BytesIO()', 'gzip_file', '=', 'gzip.GzipFile(mode=\"w\",', 'fileobj=bytesio)', 'gzip_file.write(utf8(\"foo=bar\"))', 'gzip_file.close()', 'compressed_body', '=', 'bytesio.getvalue()', 'response', '=', 'self.fetch(', '\"/\",', 'method=\"POST\",', 'body=compressed_body,', 'headers={\"Content-Encoding\":', '\"GZIP\"},', ')', 'self.assertEqual(json_decode(response.body),', '{\"foo\":', '[\"bar\"]})', 'class', 'GzipUnsupportedTest(GzipBaseTest,', 'AsyncHTTPTestCase):', 'def', 'test_gzip_unsupported(self):', 'with', 'ExpectLog(gen_log,', '\"Unsupported', 'Content-Encoding\"):', 'response', '=', 'self.post_gzip(\"foo=bar\")', 'self.assertEqual(json_decode(response.body),', '{})', 'class', 'StreamingChunkSizeTest(AsyncHTTPTestCase):', 'BODY', '=', 'b\"01234567890123456789012345678901234567890123456789\"', 'CHUNK_SIZE', '=', '16', 'def', 'get_http_client(self):', 'return', 'SimpleAsyncHTTPClient()', 'def', 'get_httpserver_options(self):', 'return', 'dict(chunk_size=self.CHUNK_SIZE,', 'decompress_request=True)', 'class', 'MessageDelegate(HTTPMessageDelegate):', 'def', '__init__(self,', 'connection):', 'self.connection', '=', 'connection', 'def', 'headers_received(self,', 'start_line,', 'headers):', 'self.chunk_lengths', '=', '[]', 'def', 'data_received(self,', 'chunk):', 'self.chunk_lengths.append(len(chunk))', 'def', 'finish(self):', 'response_body', '=', 'utf8(json_encode(self.chunk_lengths))', 'self.connection.write_headers(', 'ResponseStartLine(\"HTTP/1.1\",', '200,', '\"OK\"),', 'HTTPHeaders({\"Content-Length\":', 'str(len(response_body))}),', ')', 'self.connection.write(response_body)', 'self.connection.finish()', 'def', 'get_app(self):', 'class', 'App(HTTPServerConnectionDelegate):', 'def', 'start_request(self,', 'server_conn,', 'request_conn):', 'return', 'StreamingChunkSizeTest.MessageDelegate(request_conn)', 'return', 'App()', 'def', 'fetch_chunk_sizes(self,', '**kwargs):', 'response', '=', 'self.fetch(\"/\",', 'method=\"POST\",', '**kwargs)', 'response.rethrow()', 'chunks', '=', 'json_decode(response.body)', 'self.assertEqual(len(self.BODY),', 'sum(chunks))', 'for', 'chunk_size', 'in', 'chunks:', 'self.assertLessEqual(', 'chunk_size,', 'self.CHUNK_SIZE,', '\"oversized', 'chunk:', '\"', '+', 'str(chunks)', ')', 'self.assertGreater(chunk_size,', '0,', '\"empty', 'chunk:', '\"', '+', 'str(chunks))', 'return', 'chunks', 'def', 'compress(self,', 'body):', 'bytesio', '=', 'BytesIO()', 'gzfile', '=', 'gzip.GzipFile(mode=\"w\",', 'fileobj=bytesio)', 'gzfile.write(body)', 'gzfile.close()', 'compressed', '=', 'bytesio.getvalue()', 'if', 'len(compressed)', '>=', 'len(body):', 'raise', 'Exception(\"body', 'did', 'not', 'shrink', 'when', 'compressed\")', 'return', 'compressed', 'def', 'test_regular_body(self):', 'chunks', '=', 'self.fetch_chunk_sizes(body=self.BODY)', 'self.assertEqual([16,', '16,', '16,', '2],', 'chunks)', 'def', 'test_compressed_body(self):', 'self.fetch_chunk_sizes(', 'body=self.compress(self.BODY),', 'headers={\"Content-Encoding\":', '\"gzip\"}', ')', 'def', 'test_chunked_body(self):', 'def', 'body_producer(write):', 'write(self.BODY[:20])', 'write(self.BODY[20:])', 'chunks', '=', 'self.fetch_chunk_sizes(body_producer=body_producer)', 'self.assertEqual([16,', '4,', '16,', '14],', 'chunks)', 'def', 'test_chunked_compressed(self):', 'compressed', '=', 'self.compress(self.BODY)', 'self.assertGreater(len(compressed),', '20)', 'def', 'body_producer(write):', 'write(compressed[:20])', 'write(compressed[20:])', 'self.fetch_chunk_sizes(', 'body_producer=body_producer,', 'headers={\"Content-Encoding\":', '\"gzip\"}', ')', 'class', 'InvalidOutputContentLengthTest(AsyncHTTPTestCase):', 'class', 'MessageDelegate(HTTPMessageDelegate):', 'def', '__init__(self,', 'connection):', 'self.connection', '=', 'connection', 'def', 'headers_received(self,', 'start_line,', 'headers):', 'content_lengths', '=', '{', '\"normal\":', '\"10\",', '\"alphabetic\":', '\"foo\",', '\"leading', 'plus\":', '\"+10\",', '\"underscore\":', '\"1_0\",', '}', 'self.connection.write_headers(', 'ResponseStartLine(\"HTTP/1.1\",', '200,', '\"OK\"),', 'HTTPHeaders({\"Content-Length\":', 'content_lengths[headers[\"x-test\"]]}),', ')', 'self.connection.write(b\"1234567890\")', 'self.connection.finish()', 'def', 'get_app(self):', 'class', 'App(HTTPServerConnectionDelegate):', 'def', 'start_request(self,', 'server_conn,', 'request_conn):', 'return', 'InvalidOutputContentLengthTest.MessageDelegate(request_conn)', 'return', 'App()', 'def', 'test_invalid_output_content_length(self):', 'with', 'self.subTest(\"normal\"):', 'response', '=', 'self.fetch(\"/\",', 'method=\"GET\",', 'headers={\"x-test\":', '\"normal\"})', 'response.rethrow()', 'self.assertEqual(response.body,', 'b\"1234567890\")', 'for', 'test', 'in', '[\"alphabetic\",', '\"leading', 'plus\",', '\"underscore\"]:', 'with', 'self.subTest(test):', 'with', 'ExpectLog(app_log,', '\"Uncaught', 'exception\"):', 'with', 'self.assertRaises(HTTPError):', 'self.fetch(\"/\",', 'method=\"GET\",', 'headers={\"x-test\":', 'test})', 'class', 'MaxHeaderSizeTest(AsyncHTTPTestCase):', 'def', 'get_app(self):', 'return', 'Application([(\"/\",', 'HelloWorldRequestHandler)])', 'def', 'get_httpserver_options(self):', 'return', 'dict(max_header_size=1024)', 'def', 'test_small_headers(self):', 'response', '=', 'self.fetch(\"/\",', 'headers={\"X-Filler\":', '\"a\"', '*', '100})', 'response.rethrow()', 'self.assertEqual(response.body,', 'b\"Hello', 'world\")', 'def', 'test_large_headers(self):', 'with', 'ExpectLog(gen_log,', '\"Unsatisfiable', 'read\",', 'required=False):', 'try:', 'self.fetch(\"/\",', 'headers={\"X-Filler\":', '\"a\"', '*', '1000},', 'raise_error=True)', 'self.fail(\"did', 'not', 'raise', 'expected', 'exception\")', 'except', 'HTTPError', 'as', 'e:', 'if', 'e.response', 'is', 'not', 'None:', 'self.assertIn(e.response.code,', '(431,', '599))', '@skipOnTravis', 'class', 'IdleTimeoutTest(AsyncHTTPTestCase):', 'def', 'get_app(self):', 'return', 'Application([(\"/\",', 'HelloWorldRequestHandler)])', 'def', 'get_httpserver_options(self):', 'return', 'dict(idle_connection_timeout=0.1)', 'def', 'setUp(self):', 'super().setUp()', 'self.streams', '=', '[]', 'def', 'tearDown(self):', 'super().tearDown()', 'for', 'stream', 'in', 'self.streams:', 'stream.close()', '@gen.coroutine', 'def', 'connect(self):', 'stream', '=', 'IOStream(socket.socket())', 'yield', 'stream.connect((\"127.0.0.1\",', 'self.get_http_port()))', 'self.streams.append(stream)', 'raise', 'gen.Return(stream)', '@gen_test', 'def', 'test_unused_connection(self):', 'stream', '=', 'yield', 'self.connect()', 'event', '=', 'Event()', 'stream.set_close_callback(event.set)', 'yield', 'event.wait()', '@gen_test', 'def', 'test_idle_after_use(self):', 'stream', '=', 'yield', 'self.connect()', 'event', '=', 'Event()', 'stream.set_close_callback(event.set)', 'for', 'i', 'in', 'range(2):', 'stream.write(b\"GET', '/', 'HTTP/1.1\\\\r\\\\n\\\\r\\\\n\")', 'yield', 'stream.read_until(b\"\\\\r\\\\n\\\\r\\\\n\")', 'data', '=', 'yield', 'stream.read_bytes(11)', 'self.assertEqual(data,', 'b\"Hello', 'world\")', 'yield', 'event.wait()', 'class', 'BodyLimitsTest(AsyncHTTPTestCase):', 'def', 'get_app(self):', 'class', 'BufferedHandler(RequestHandler):', 'def', 'put(self):', 'self.write(str(len(self.request.body)))', '@stream_request_body', 'class', 'StreamingHandler(RequestHandler):', 'def', 'initialize(self):', 'self.bytes_read', '=', '0', 'def', 'prepare(self):', 'conn', '=', 'typing.cast(HTTP1Connection,', 'self.request.connection)', 'if', '\"expected_size\"', 'in', 'self.request.arguments:', 'conn.set_max_body_size(int(self.get_argument(\"expected_size\")))', 'if', '\"body_timeout\"', 'in', 'self.request.arguments:', 'conn.set_body_timeout(float(self.get_argument(\"body_timeout\")))', 'def', 'data_received(self,', 'data):', 'self.bytes_read', '+=', 'len(data)', 'def', 'put(self):', 'self.write(str(self.bytes_read))', 'return', 'Application(', '[(\"/buffered\",', 'BufferedHandler),', '(\"/streaming\",', 'StreamingHandler)]', ')', 'def', 'get_httpserver_options(self):', 'return', 'dict(body_timeout=3600,', 'max_body_size=4096)', 'def', 'get_http_client(self):', 'return', 'SimpleAsyncHTTPClient()', 'def', 'test_small_body(self):', 'response', '=', 'self.fetch(\"/buffered\",', 'method=\"PUT\",', 'body=b\"a\"', '*', '4096)', 'self.assertEqual(response.body,', 'b\"4096\")', 'response', '=', 'self.fetch(\"/streaming\",', 'method=\"PUT\",', 'body=b\"a\"', '*', '4096)', 'self.assertEqual(response.body,', 'b\"4096\")', 'def', 'test_large_body_buffered(self):', 'with', 'ExpectLog(gen_log,', '\".*Content-Length', 'too', 'long\",', 'level=logging.INFO):', 'response', '=', 'self.fetch(\"/buffered\",', 'method=\"PUT\",', 'body=b\"a\"', '*', '10240)', 'self.assertEqual(response.code,', '400)', '@unittest.skipIf(os.name', '==', '\"nt\",', '\"flaky', 'on', 'windows\")', 'def', 'test_large_body_buffered_chunked(self):', 'with', 'ExpectLog(gen_log,', '\".*chunked', 'body', 'too', 'large\",', 'level=logging.INFO):', 'response', '=', 'self.fetch(', '\"/buffered\",', 'method=\"PUT\",', 'body_producer=lambda', 'write:', 'write(b\"a\"', '*', '10240),', ')', 'self.assertEqual(response.code,', '400)', 'def', 'test_large_body_streaming(self):', 'with', 'ExpectLog(gen_log,', '\".*Content-Length', 'too', 'long\",', 'level=logging.INFO):', 'response', '=', 'self.fetch(\"/streaming\",', 'method=\"PUT\",', 'body=b\"a\"', '*', '10240)', 'self.assertEqual(response.code,', '400)', '@unittest.skipIf(os.name', '==', '\"nt\",', '\"flaky', 'on', 'windows\")', 'def', 'test_large_body_streaming_chunked(self):', 'with', 'ExpectLog(gen_log,', '\".*chunked', 'body', 'too', 'large\",', 'level=logging.INFO):', 'response', '=', 'self.fetch(', '\"/streaming\",', 'method=\"PUT\",', 'body_producer=lambda', 'write:', 'write(b\"a\"', '*', '10240),', ')', 'self.assertEqual(response.code,', '400)', 'def', 'test_large_body_streaming_override(self):', 'response', '=', 'self.fetch(', '\"/streaming?expected_size=10240\",', 'method=\"PUT\",', 'body=b\"a\"', '*', '10240', ')', 'self.assertEqual(response.body,', 'b\"10240\")', 'def', 'test_large_body_streaming_chunked_override(self):', 'response', '=', 'self.fetch(', '\"/streaming?expected_size=10240\",', 'method=\"PUT\",', 'body_producer=lambda', 'write:', 'write(b\"a\"', '*', '10240),', ')', 'self.assertEqual(response.body,', 'b\"10240\")', '@gen_test', 'def', 'test_timeout(self):', 'stream', '=', 'IOStream(socket.socket())', 'try:', 'yield', 'stream.connect((\"127.0.0.1\",', 'self.get_http_port()))', 'stream.write(', 'b\"PUT', '/streaming?body_timeout=0.1', 'HTTP/1.0\\\\r\\\\n\"', 'b\"Content-Length:', '42\\\\r\\\\n\\\\r\\\\n\"', ')', 'with', 'ExpectLog(gen_log,', '\"Timeout', 'reading', 'body\",', 'level=logging.INFO):', 'response', '=', 'yield', 'stream.read_until_close()', 'self.assertEqual(response,', 'b\"\")', 'finally:', 'stream.close()', '@gen_test', 'def', 'test_body_size_override_reset(self):', 'stream', '=', 'IOStream(socket.socket())', 'try:', 'yield', 'stream.connect((\"127.0.0.1\",', 'self.get_http_port()))', 'stream.write(', 'b\"PUT', '/streaming?expected_size=10240', 'HTTP/1.1\\\\r\\\\n\"', 'b\"Content-Length:', '10240\\\\r\\\\n\\\\r\\\\n\"', ')', 'stream.write(b\"a\"', '*', '10240)', 'start_line,', 'headers,', 'response', '=', 'yield', 'read_stream_body(stream)', 'self.assertEqual(response,', 'b\"10240\")', 'stream.write(', 'b\"PUT', '/streaming', 'HTTP/1.1\\\\r\\\\n\"', 'b\"Content-Length:', '10240\\\\r\\\\n\\\\r\\\\n\"', ')', 'with', 'ExpectLog(gen_log,', '\".*Content-Length', 'too', 'long\",', 'level=logging.INFO):', 'data', '=', 'yield', 'stream.read_until_close()', 'self.assertEqual(data,', 'b\"HTTP/1.1', '400', 'Bad', 'Request\\\\r\\\\n\\\\r\\\\n\")', 'finally:', 'stream.close()', 'class', 'LegacyInterfaceTest(AsyncHTTPTestCase):', 'def', 'get_app(self):', 'def', 'handle_request(request):', 'self.http1', '=', 'request.version.startswith(\"HTTP/1.\")', 'if', 'not', 'self.http1:', 'request.connection.write_headers(', 'ResponseStartLine(\"\",', '200,', '\"OK\"),', 'HTTPHeaders()', ')', 'request.connection.finish()', 'return', 'message', '=', 'b\"Hello', 'world\"', 'request.connection.write(', 'utf8(\"HTTP/1.1', '200', 'OK\\\\r\\\\n\"', '\"Content-Length:', '%d\\\\r\\\\n\\\\r\\\\n\"', '%', 'len(message))', ')', 'request.connection.write(message)', 'request.connection.finish()', 'return', 'handle_request', 'def', 'test_legacy_interface(self):', 'response', '=', 'self.fetch(\"/\")', 'if', 'not', 'self.http1:', 'self.skipTest(\"requires', 'HTTP/1.x\")', 'self.assertEqual(response.body,', 'b\"Hello', 'world\")']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/httputil_test.py",
        "vector": "['from', 'tornado.httputil', 'import', '(', 'url_concat,', 'parse_multipart_form_data,', 'HTTPHeaders,', 'format_timestamp,', 'HTTPServerRequest,', 'parse_request_start_line,', 'parse_cookie,', 'qs_to_qsl,', 'HTTPInputError,', 'HTTPFile,', ')', 'from', 'tornado.escape', 'import', 'utf8,', 'native_str', 'from', 'tornado.log', 'import', 'gen_log', 'from', 'tornado.testing', 'import', 'ExpectLog', 'from', 'tornado.test.util', 'import', 'ignore_deprecation', 'import', 'copy', 'import', 'datetime', 'import', 'logging', 'import', 'pickle', 'import', 'time', 'import', 'urllib.parse', 'import', 'unittest', 'from', 'typing', 'import', 'Tuple,', 'Dict,', 'List', 'def', 'form_data_args()', '->', 'Tuple[Dict[str,', 'List[bytes]],', 'Dict[str,', 'List[HTTPFile]]]:', 'return', '{},', '{}', 'class', 'TestUrlConcat(unittest.TestCase):', 'def', 'test_url_concat_no_query_params(self):', 'url', '=', 'url_concat(\"https://localhost/path\",', '[(\"y\",', '\"y\"),', '(\"z\",', '\"z\")])', 'self.assertEqual(url,', '\"https://localhost/path?y=y&z=z\")', 'def', 'test_url_concat_encode_args(self):', 'url', '=', 'url_concat(\"https://localhost/path\",', '[(\"y\",', '\"/y\"),', '(\"z\",', '\"z\")])', 'self.assertEqual(url,', '\"https://localhost/path?y=%2Fy&z=z\")', 'def', 'test_url_concat_trailing_q(self):', 'url', '=', 'url_concat(\"https://localhost/path?\",', '[(\"y\",', '\"y\"),', '(\"z\",', '\"z\")])', 'self.assertEqual(url,', '\"https://localhost/path?y=y&z=z\")', 'def', 'test_url_concat_q_with_no_trailing_amp(self):', 'url', '=', 'url_concat(\"https://localhost/path?x\",', '[(\"y\",', '\"y\"),', '(\"z\",', '\"z\")])', 'self.assertEqual(url,', '\"https://localhost/path?x=&y=y&z=z\")', 'def', 'test_url_concat_trailing_amp(self):', 'url', '=', 'url_concat(\"https://localhost/path?x&\",', '[(\"y\",', '\"y\"),', '(\"z\",', '\"z\")])', 'self.assertEqual(url,', '\"https://localhost/path?x=&y=y&z=z\")', 'def', 'test_url_concat_mult_params(self):', 'url', '=', 'url_concat(\"https://localhost/path?a=1&b=2\",', '[(\"y\",', '\"y\"),', '(\"z\",', '\"z\")])', 'self.assertEqual(url,', '\"https://localhost/path?a=1&b=2&y=y&z=z\")', 'def', 'test_url_concat_no_params(self):', 'url', '=', 'url_concat(\"https://localhost/path?r=1&t=2\",', '[])', 'self.assertEqual(url,', '\"https://localhost/path?r=1&t=2\")', 'def', 'test_url_concat_none_params(self):', 'url', '=', 'url_concat(\"https://localhost/path?r=1&t=2\",', 'None)', 'self.assertEqual(url,', '\"https://localhost/path?r=1&t=2\")', 'def', 'test_url_concat_with_frag(self):', 'url', '=', 'url_concat(\"https://localhost/path', 'self.assertEqual(url,', '\"https://localhost/path?y=y', 'def', 'test_url_concat_multi_same_params(self):', 'url', '=', 'url_concat(\"https://localhost/path\",', '[(\"y\",', '\"y1\"),', '(\"y\",', '\"y2\")])', 'self.assertEqual(url,', '\"https://localhost/path?y=y1&y=y2\")', 'def', 'test_url_concat_multi_same_query_params(self):', 'url', '=', 'url_concat(\"https://localhost/path?r=1&r=2\",', '[(\"y\",', '\"y\")])', 'self.assertEqual(url,', '\"https://localhost/path?r=1&r=2&y=y\")', 'def', 'test_url_concat_dict_params(self):', 'url', '=', 'url_concat(\"https://localhost/path\",', 'dict(y=\"y\"))', 'self.assertEqual(url,', '\"https://localhost/path?y=y\")', 'class', 'QsParseTest(unittest.TestCase):', 'def', 'test_parsing(self):', 'qsstring', '=', '\"a=1&b=2&a=3\"', 'qs', '=', 'urllib.parse.parse_qs(qsstring)', 'qsl', '=', 'list(qs_to_qsl(qs))', 'self.assertIn((\"a\",', '\"1\"),', 'qsl)', 'self.assertIn((\"a\",', '\"3\"),', 'qsl)', 'self.assertIn((\"b\",', '\"2\"),', 'qsl)', 'class', 'MultipartFormDataTest(unittest.TestCase):', 'def', 'test_file_upload(self):', 'data', '=', 'b.replace(', 'b\"\\\\n\",', 'b\"\\\\r\\\\n\"', ')', 'args,', 'files', '=', 'form_data_args()', 'parse_multipart_form_data(b\"1234\",', 'data,', 'args,', 'files)', 'file', '=', 'files[\"files\"][0]', 'self.assertEqual(file[\"filename\"],', '\"ab.txt\")', 'self.assertEqual(file[\"body\"],', 'b\"Foo\")', 'def', 'test_unquoted_names(self):', 'data', '=', 'b.replace(', 'b\"\\\\n\",', 'b\"\\\\r\\\\n\"', ')', 'args,', 'files', '=', 'form_data_args()', 'parse_multipart_form_data(b\"1234\",', 'data,', 'args,', 'files)', 'file', '=', 'files[\"files\"][0]', 'self.assertEqual(file[\"filename\"],', '\"ab.txt\")', 'self.assertEqual(file[\"body\"],', 'b\"Foo\")', 'def', 'test_special_filenames(self):', 'filenames', '=', '[', '\"a;b.txt\",', '\\'a\"b.txt\\',', '\\'a\";b.txt\\',', '\\'a;\"b.txt\\',', '\\'a\";\";.txt\\',', '\\'a\\\\\\\\\"b.txt\\',', '\"a\\\\\\\\b.txt\",', ']', 'for', 'filename', 'in', 'filenames:', 'logging.debug(\"trying', 'filename', '%r\",', 'filename)', 'str_data', '=', '%', 'filename.replace(', '\"\\\\\\\\\",', '\"\\\\\\\\\\\\\\\\\"', ').replace(', '\\'\"\\',', '\\'\\\\\\\\\"\\'', ')', 'data', '=', 'utf8(str_data.replace(\"\\\\n\",', '\"\\\\r\\\\n\"))', 'args,', 'files', '=', 'form_data_args()', 'parse_multipart_form_data(b\"1234\",', 'data,', 'args,', 'files)', 'file', '=', 'files[\"files\"][0]', 'self.assertEqual(file[\"filename\"],', 'filename)', 'self.assertEqual(file[\"body\"],', 'b\"Foo\")', 'def', 'test_non_ascii_filename(self):', 'data', '=', 'b.replace(', 'b\"\\\\n\",', 'b\"\\\\r\\\\n\"', ')', 'args,', 'files', '=', 'form_data_args()', 'parse_multipart_form_data(b\"1234\",', 'data,', 'args,', 'files)', 'file', '=', 'files[\"files\"][0]', 'self.assertEqual(file[\"filename\"],', '\"\u00e1b.txt\")', 'self.assertEqual(file[\"body\"],', 'b\"Foo\")', 'def', 'test_boundary_starts_and_ends_with_quotes(self):', 'data', '=', 'b.replace(', 'b\"\\\\n\",', 'b\"\\\\r\\\\n\"', ')', 'args,', 'files', '=', 'form_data_args()', 'parse_multipart_form_data(b\\'\"1234\"\\',', 'data,', 'args,', 'files)', 'file', '=', 'files[\"files\"][0]', 'self.assertEqual(file[\"filename\"],', '\"ab.txt\")', 'self.assertEqual(file[\"body\"],', 'b\"Foo\")', 'def', 'test_missing_headers(self):', 'data', '=', 'b.replace(', 'b\"\\\\n\",', 'b\"\\\\r\\\\n\"', ')', 'args,', 'files', '=', 'form_data_args()', 'with', 'ExpectLog(gen_log,', '\"multipart/form-data', 'missing', 'headers\"):', 'parse_multipart_form_data(b\"1234\",', 'data,', 'args,', 'files)', 'self.assertEqual(files,', '{})', 'def', 'test_invalid_content_disposition(self):', 'data', '=', 'b.replace(', 'b\"\\\\n\",', 'b\"\\\\r\\\\n\"', ')', 'args,', 'files', '=', 'form_data_args()', 'with', 'ExpectLog(gen_log,', '\"Invalid', 'multipart/form-data\"):', 'parse_multipart_form_data(b\"1234\",', 'data,', 'args,', 'files)', 'self.assertEqual(files,', '{})', 'def', 'test_line_does_not_end_with_correct_line_break(self):', 'data', '=', 'b.replace(', 'b\"\\\\n\",', 'b\"\\\\r\\\\n\"', ')', 'args,', 'files', '=', 'form_data_args()', 'with', 'ExpectLog(gen_log,', '\"Invalid', 'multipart/form-data\"):', 'parse_multipart_form_data(b\"1234\",', 'data,', 'args,', 'files)', 'self.assertEqual(files,', '{})', 'def', 'test_content_disposition_header_without_name_parameter(self):', 'data', '=', 'b.replace(', 'b\"\\\\n\",', 'b\"\\\\r\\\\n\"', ')', 'args,', 'files', '=', 'form_data_args()', 'with', 'ExpectLog(gen_log,', '\"multipart/form-data', 'value', 'missing', 'name\"):', 'parse_multipart_form_data(b\"1234\",', 'data,', 'args,', 'files)', 'self.assertEqual(files,', '{})', 'def', 'test_data_after_final_boundary(self):', 'data', '=', 'b.replace(', 'b\"\\\\n\",', 'b\"\\\\r\\\\n\"', ')', 'args,', 'files', '=', 'form_data_args()', 'parse_multipart_form_data(b\"1234\",', 'data,', 'args,', 'files)', 'file', '=', 'files[\"files\"][0]', 'self.assertEqual(file[\"filename\"],', '\"ab.txt\")', 'self.assertEqual(file[\"body\"],', 'b\"Foo\")', 'class', 'HTTPHeadersTest(unittest.TestCase):', 'def', 'test_multi_line(self):', 'data', '=', '.replace(', '\"\\\\n\",', '\"\\\\r\\\\n\"', ')', 'headers', '=', 'HTTPHeaders.parse(data)', 'self.assertEqual(headers[\"asdf\"],', '\"qwer', 'zxcv\")', 'self.assertEqual(headers.get_list(\"asdf\"),', '[\"qwer', 'zxcv\"])', 'self.assertEqual(headers[\"Foo\"],', '\"bar', 'baz,even', 'more', 'lines\")', 'self.assertEqual(headers.get_list(\"foo\"),', '[\"bar', 'baz\",', '\"even', 'more', 'lines\"])', 'self.assertEqual(', 'sorted(list(headers.get_all())),', '[(\"Asdf\",', '\"qwer', 'zxcv\"),', '(\"Foo\",', '\"bar', 'baz\"),', '(\"Foo\",', '\"even', 'more', 'lines\")],', ')', 'def', 'test_malformed_continuation(self):', 'data', '=', '\"', 'Foo:', 'bar\"', 'self.assertRaises(HTTPInputError,', 'HTTPHeaders.parse,', 'data)', 'def', 'test_unicode_newlines(self):', 'newlines', '=', '[', '\"\\\\u001b\",', '\"\\\\u001c\",', '\"\\\\u001d\",', '\"\\\\u001e\",', '\"\\\\u0085\",', '\"\\\\u2028\",', '\"\\\\u2029\",', ']', 'for', 'newline', 'in', 'newlines:', 'for', 'encoding', 'in', '[\"utf8\",', '\"latin1\"]:', 'try:', 'try:', 'encoded', '=', 'newline.encode(encoding)', 'except', 'UnicodeEncodeError:', 'continue', 'data', '=', 'b\"Cookie:', 'foo=\"', '+', 'encoded', '+', 'b\"bar\"', 'headers', '=', 'HTTPHeaders.parse(native_str(data.decode(\"latin1\")))', 'expected', '=', '[', '(', '\"Cookie\",', '\"foo=\"', '+', 'native_str(encoded.decode(\"latin1\"))', '+', '\"bar\",', ')', ']', 'self.assertEqual(expected,', 'list(headers.get_all()))', 'except', 'Exception:', 'gen_log.warning(\"failed', 'while', 'trying', '%r', 'in', '%s\",', 'newline,', 'encoding)', 'raise', 'def', 'test_optional_cr(self):', 'headers', '=', 'HTTPHeaders.parse(\"CRLF:', 'crlf\\\\r\\\\nLF:', 'lf\\\\nCR:', 'cr\\\\rMore:', 'more\\\\r\\\\n\")', 'self.assertEqual(', 'sorted(headers.get_all()),', '[(\"Cr\",', '\"cr\\\\rMore:', 'more\"),', '(\"Crlf\",', '\"crlf\"),', '(\"Lf\",', '\"lf\")],', ')', 'def', 'test_copy(self):', 'all_pairs', '=', '[(\"A\",', '\"1\"),', '(\"A\",', '\"2\"),', '(\"B\",', '\"c\")]', 'h1', '=', 'HTTPHeaders()', 'for', 'k,', 'v', 'in', 'all_pairs:', 'h1.add(k,', 'v)', 'h2', '=', 'h1.copy()', 'h3', '=', 'copy.copy(h1)', 'h4', '=', 'copy.deepcopy(h1)', 'for', 'headers', 'in', '[h1,', 'h2,', 'h3,', 'h4]:', 'self.assertEqual(list(sorted(headers.get_all())),', 'all_pairs)', 'for', 'headers', 'in', '[h2,', 'h3,', 'h4]:', 'self.assertIsNot(headers,', 'h1)', 'self.assertIsNot(headers.get_list(\"A\"),', 'h1.get_list(\"A\"))', 'def', 'test_pickle_roundtrip(self):', 'headers', '=', 'HTTPHeaders()', 'headers.add(\"Set-Cookie\",', '\"a=b\")', 'headers.add(\"Set-Cookie\",', '\"c=d\")', 'headers.add(\"Content-Type\",', '\"text/html\")', 'pickled', '=', 'pickle.dumps(headers)', 'unpickled', '=', 'pickle.loads(pickled)', 'self.assertEqual(sorted(headers.get_all()),', 'sorted(unpickled.get_all()))', 'self.assertEqual(sorted(headers.items()),', 'sorted(unpickled.items()))', 'def', 'test_setdefault(self):', 'headers', '=', 'HTTPHeaders()', 'headers[\"foo\"]', '=', '\"bar\"', 'self.assertEqual(headers.setdefault(\"foo\",', '\"baz\"),', '\"bar\")', 'self.assertEqual(headers[\"foo\"],', '\"bar\")', 'self.assertEqual(headers.setdefault(\"quux\",', '\"xyzzy\"),', '\"xyzzy\")', 'self.assertEqual(headers[\"quux\"],', '\"xyzzy\")', 'self.assertEqual(sorted(headers.get_all()),', '[(\"Foo\",', '\"bar\"),', '(\"Quux\",', '\"xyzzy\")])', 'def', 'test_string(self):', 'headers', '=', 'HTTPHeaders()', 'headers.add(\"Foo\",', '\"1\")', 'headers.add(\"Foo\",', '\"2\")', 'headers.add(\"Foo\",', '\"3\")', 'headers2', '=', 'HTTPHeaders.parse(str(headers))', 'self.assertEqual(headers,', 'headers2)', 'class', 'FormatTimestampTest(unittest.TestCase):', 'TIMESTAMP', '=', '1359312200.503611', 'EXPECTED', '=', '\"Sun,', '27', 'Jan', '2013', '18:43:20', 'GMT\"', 'def', 'check(self,', 'value):', 'self.assertEqual(format_timestamp(value),', 'self.EXPECTED)', 'def', 'test_unix_time_float(self):', 'self.check(self.TIMESTAMP)', 'def', 'test_unix_time_int(self):', 'self.check(int(self.TIMESTAMP))', 'def', 'test_struct_time(self):', 'self.check(time.gmtime(self.TIMESTAMP))', 'def', 'test_time_tuple(self):', 'tup', '=', 'tuple(time.gmtime(self.TIMESTAMP))', 'self.assertEqual(9,', 'len(tup))', 'self.check(tup)', 'def', 'test_utc_naive_datetime(self):', 'self.check(', 'datetime.datetime.fromtimestamp(', 'self.TIMESTAMP,', 'datetime.timezone.utc', ').replace(tzinfo=None)', ')', 'def', 'test_utc_naive_datetime_deprecated(self):', 'with', 'ignore_deprecation():', 'self.check(datetime.datetime.utcfromtimestamp(self.TIMESTAMP))', 'def', 'test_utc_aware_datetime(self):', 'self.check(', 'datetime.datetime.fromtimestamp(self.TIMESTAMP,', 'datetime.timezone.utc)', ')', 'def', 'test_other_aware_datetime(self):', 'self.check(', 'datetime.datetime.fromtimestamp(', 'self.TIMESTAMP,', 'datetime.timezone(datetime.timedelta(hours=-4))', ')', ')', 'class', 'HTTPServerRequestTest(unittest.TestCase):', 'def', 'test_default_constructor(self):', 'HTTPServerRequest(uri=\"/\")', 'def', 'test_body_is_a_byte_string(self):', 'requets', '=', 'HTTPServerRequest(uri=\"/\")', 'self.assertIsInstance(requets.body,', 'bytes)', 'def', 'test_repr_does_not_contain_headers(self):', 'request', '=', 'HTTPServerRequest(', 'uri=\"/\",', 'headers=HTTPHeaders({\"Canary\":', '[\"Coal', 'Mine\"]})', ')', 'self.assertTrue(\"Canary\"', 'not', 'in', 'repr(request))', 'class', 'ParseRequestStartLineTest(unittest.TestCase):', 'METHOD', '=', '\"GET\"', 'PATH', '=', '\"/foo\"', 'VERSION', '=', '\"HTTP/1.1\"', 'def', 'test_parse_request_start_line(self):', 'start_line', '=', '\"', '\".join([self.METHOD,', 'self.PATH,', 'self.VERSION])', 'parsed_start_line', '=', 'parse_request_start_line(start_line)', 'self.assertEqual(parsed_start_line.method,', 'self.METHOD)', 'self.assertEqual(parsed_start_line.path,', 'self.PATH)', 'self.assertEqual(parsed_start_line.version,', 'self.VERSION)', 'class', 'ParseCookieTest(unittest.TestCase):', 'def', 'test_python_cookies(self):', 'self.assertEqual(', 'parse_cookie(\"chips=ahoy;', 'vienna=finger\"),', '{\"chips\":', '\"ahoy\",', '\"vienna\":', '\"finger\"},', ')', 'self.assertEqual(', 'parse_cookie(\\'keebler=\"E=mc2;', 'L=\\\\\\\\\"Loves\\\\\\\\\";', 'fudge=\\\\\\\\012;\"\\'),', '{\"keebler\":', '\\'\"E=mc2\\',', '\"L\":', '\\'\\\\\\\\\"Loves\\\\\\\\\"\\',', '\"fudge\":', '\"\\\\\\\\012\",', '\"\":', '\\'\"\\'},', ')', 'self.assertEqual(parse_cookie(\"keebler=E=mc2\"),', '{\"keebler\":', '\"E=mc2\"})', 'self.assertEqual(', 'parse_cookie(\"key:term=value:term\"),', '{\"key:term\":', '\"value:term\"}', ')', 'self.assertEqual(', 'parse_cookie(\"a=b;', 'c=[;', 'd=r;', 'f=h\"),', '{\"a\":', '\"b\",', '\"c\":', '\"[\",', '\"d\":', '\"r\",', '\"f\":', '\"h\"}', ')', 'def', 'test_cookie_edgecases(self):', 'self.assertEqual(', 'parse_cookie(\"a=b;', 'Domain=example.com\"),', '{\"a\":', '\"b\",', '\"Domain\":', '\"example.com\"}', ')', 'self.assertEqual(parse_cookie(\"a=b;', 'h=i;', 'a=c\"),', '{\"a\":', '\"c\",', '\"h\":', '\"i\"})', 'def', 'test_invalid_cookies(self):', 'self.assertIn(', '\"django_language\",', 'parse_cookie(\"abc=def;', 'unnamed;', 'django_language=en\").keys(),', ')', \"self.assertEqual(parse_cookie('a=b;\", '\";', \"c=d'),\", '{\"a\":', '\"b\",', '\"\":', '\\'\"\\',', '\"c\":', '\"d\"})', 'self.assertEqual(', 'parse_cookie(\"a', 'b', 'c=d', 'e', '=', 'f;', 'gh=i\"),', '{\"a', 'b', 'c\":', '\"d', 'e', '=', 'f\",', '\"gh\":', '\"i\"}', ')', 'self.assertEqual(', \"parse_cookie('a\", 'b,c<>@:/[]?{}=d', '\"', '=e,f', \"g'),\", '{\"a', 'b,c<>@:/[]?{}\":', \"'d\", '\"', '=e,f', \"g'},\", ')', 'self.assertEqual(', 'parse_cookie(\"saint=Andr\u00e9', 'Bessette\"),', '{\"saint\":', 'native_str(\"Andr\u00e9', 'Bessette\")},', ')', 'self.assertEqual(', 'parse_cookie(\"', '=', 'b', ';', ';', '=', ';', 'c', '=', ';', '\"),', '{\"\":', '\"b\",', '\"c\":', '\"\"}', ')']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/import_test.py",
        "vector": "['import', 'subprocess', 'import', 'sys', 'import', 'unittest', '_import_everything', '=', 'b', '_import_lazy', '=', 'b', 'class', 'ImportTest(unittest.TestCase):', 'def', 'test_import_everything(self):', 'proc', '=', 'subprocess.Popen([sys.executable],', 'stdin=subprocess.PIPE)', 'proc.communicate(_import_everything)', 'self.assertEqual(proc.returncode,', '0)', 'def', 'test_lazy_import(self):', 'proc', '=', 'subprocess.Popen([sys.executable],', 'stdin=subprocess.PIPE)', 'proc.communicate(_import_lazy)', 'self.assertEqual(proc.returncode,', '0)', 'def', 'test_import_aliases(self):', 'import', 'tornado', 'import', 'asyncio', 'self.assertIs(tornado.ioloop.TimeoutError,', 'tornado.util.TimeoutError)', 'self.assertIs(tornado.gen.TimeoutError,', 'tornado.util.TimeoutError)', 'self.assertIs(tornado.util.TimeoutError,', 'asyncio.TimeoutError)']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/ioloop_test.py",
        "vector": "['import', 'asyncio', 'from', 'concurrent.futures', 'import', 'ThreadPoolExecutor', 'from', 'concurrent', 'import', 'futures', 'from', 'collections.abc', 'import', 'Generator', 'import', 'contextlib', 'import', 'datetime', 'import', 'functools', 'import', 'socket', 'import', 'subprocess', 'import', 'sys', 'import', 'threading', 'import', 'time', 'import', 'types', 'from', 'unittest', 'import', 'mock', 'import', 'unittest', 'from', 'tornado.escape', 'import', 'native_str', 'from', 'tornado', 'import', 'gen', 'from', 'tornado.ioloop', 'import', 'IOLoop,', 'TimeoutError,', 'PeriodicCallback', 'from', 'tornado.log', 'import', 'app_log', 'from', 'tornado.testing', 'import', '(', 'AsyncTestCase,', 'bind_unused_port,', 'ExpectLog,', 'gen_test,', 'setup_with_context_manager,', ')', 'from', 'tornado.test.util', 'import', '(', 'ignore_deprecation,', 'skipIfNonUnix,', 'skipOnTravis,', ')', 'from', 'tornado.concurrent', 'import', 'Future', 'import', 'typing', 'if', 'typing.TYPE_CHECKING:', 'from', 'typing', 'import', 'List', 'class', 'TestIOLoop(AsyncTestCase):', 'def', 'test_add_callback_return_sequence(self):', 'self.calls', '=', '0', 'loop', '=', 'self.io_loop', 'test', '=', 'self', 'old_add_callback', '=', 'loop.add_callback', 'def', 'add_callback(self,', 'callback,', '*args,', '**kwargs):', 'test.calls', '+=', '1', 'old_add_callback(callback,', '*args,', '**kwargs)', 'loop.add_callback', '=', 'types.MethodType(add_callback,', 'loop)', 'loop.add_callback(lambda:', '{})', 'loop.add_callback(lambda:', '[])', 'loop.add_timeout(datetime.timedelta(milliseconds=50),', 'loop.stop)', 'loop.start()', 'self.assertLess(self.calls,', '10)', '@skipOnTravis', 'def', 'test_add_callback_wakeup(self):', 'def', 'callback():', 'self.called', '=', 'True', 'self.stop()', 'def', 'schedule_callback():', 'self.called', '=', 'False', 'self.io_loop.add_callback(callback)', 'self.start_time', '=', 'time.time()', 'self.io_loop.add_timeout(self.io_loop.time(),', 'schedule_callback)', 'self.wait()', 'self.assertAlmostEqual(time.time(),', 'self.start_time,', 'places=2)', 'self.assertTrue(self.called)', '@skipOnTravis', 'def', 'test_add_callback_wakeup_other_thread(self):', 'def', 'target():', 'time.sleep(0.01)', 'self.stop_time', '=', 'time.time()', 'self.io_loop.add_callback(self.stop)', 'thread', '=', 'threading.Thread(target=target)', 'self.io_loop.add_callback(thread.start)', 'self.wait()', 'delta', '=', 'time.time()', '-', 'self.stop_time', 'self.assertLess(delta,', '0.1)', 'thread.join()', 'def', 'test_add_timeout_timedelta(self):', 'self.io_loop.add_timeout(datetime.timedelta(microseconds=1),', 'self.stop)', 'self.wait()', 'def', 'test_multiple_add(self):', 'sock,', 'port', '=', 'bind_unused_port()', 'try:', 'self.io_loop.add_handler(', 'sock.fileno(),', 'lambda', 'fd,', 'events:', 'None,', 'IOLoop.READ', ')', 'self.assertRaises(', 'Exception,', 'self.io_loop.add_handler,', 'sock.fileno(),', 'lambda', 'fd,', 'events:', 'None,', 'IOLoop.READ,', ')', 'finally:', 'self.io_loop.remove_handler(sock.fileno())', 'sock.close()', 'def', 'test_remove_without_add(self):', 'sock,', 'port', '=', 'bind_unused_port()', 'try:', 'self.io_loop.remove_handler(sock.fileno())', 'finally:', 'sock.close()', 'def', 'test_add_callback_from_signal(self):', 'with', 'ignore_deprecation():', 'self.io_loop.add_callback_from_signal(self.stop)', 'self.wait()', 'def', 'test_add_callback_from_signal_other_thread(self):', 'other_ioloop', '=', 'IOLoop()', 'thread', '=', 'threading.Thread(target=other_ioloop.start)', 'thread.start()', 'with', 'ignore_deprecation():', 'other_ioloop.add_callback_from_signal(other_ioloop.stop)', 'thread.join()', 'other_ioloop.close()', 'def', 'test_add_callback_while_closing(self):', 'closing', '=', 'threading.Event()', 'def', 'target():', 'other_ioloop.add_callback(other_ioloop.stop)', 'other_ioloop.start()', 'closing.set()', 'other_ioloop.close(all_fds=True)', 'other_ioloop', '=', 'IOLoop()', 'thread', '=', 'threading.Thread(target=target)', 'thread.start()', 'closing.wait()', 'for', 'i', 'in', 'range(1000):', 'other_ioloop.add_callback(lambda:', 'None)', '@skipIfNonUnix', 'def', 'test_read_while_writeable(self):', 'client,', 'server', '=', 'socket.socketpair()', 'try:', 'def', 'handler(fd,', 'events):', 'self.assertEqual(events,', 'IOLoop.READ)', 'self.stop()', 'self.io_loop.add_handler(client.fileno(),', 'handler,', 'IOLoop.READ)', 'self.io_loop.add_timeout(', 'self.io_loop.time()', '+', '0.01,', 'functools.partial(server.send,', 'b\"asdf\")', ')', 'self.wait()', 'self.io_loop.remove_handler(client.fileno())', 'finally:', 'client.close()', 'server.close()', 'def', 'test_remove_timeout_after_fire(self):', 'handle', '=', 'self.io_loop.add_timeout(self.io_loop.time(),', 'self.stop)', 'self.wait()', 'self.io_loop.remove_timeout(handle)', 'def', 'test_remove_timeout_cleanup(self):', 'for', 'i', 'in', 'range(2000):', 'timeout', '=', 'self.io_loop.add_timeout(self.io_loop.time()', '+', '3600,', 'lambda:', 'None)', 'self.io_loop.remove_timeout(timeout)', 'self.io_loop.add_callback(lambda:', 'self.io_loop.add_callback(self.stop))', 'self.wait()', 'def', 'test_remove_timeout_from_timeout(self):', 'calls', '=', '[False,', 'False]', 'now', '=', 'self.io_loop.time()', 'def', 't1():', 'calls[0]', '=', 'True', 'self.io_loop.remove_timeout(t2_handle)', 'self.io_loop.add_timeout(now', '+', '0.01,', 't1)', 'def', 't2():', 'calls[1]', '=', 'True', 't2_handle', '=', 'self.io_loop.add_timeout(now', '+', '0.02,', 't2)', 'self.io_loop.add_timeout(now', '+', '0.03,', 'self.stop)', 'time.sleep(0.03)', 'self.wait()', 'self.assertEqual(calls,', '[True,', 'False])', 'def', 'test_timeout_with_arguments(self):', 'results', '=', '[]', 'self.io_loop.add_timeout(self.io_loop.time(),', 'results.append,', '1)', 'self.io_loop.add_timeout(datetime.timedelta(seconds=0),', 'results.append,', '2)', 'self.io_loop.call_at(self.io_loop.time(),', 'results.append,', '3)', 'self.io_loop.call_later(0,', 'results.append,', '4)', 'self.io_loop.call_later(0,', 'self.stop)', 'self.wait()', 'self.assertEqual(sorted(results),', '[1,', '2,', '3,', '4])', 'def', 'test_add_timeout_return(self):', 'handle', '=', 'self.io_loop.add_timeout(self.io_loop.time(),', 'lambda:', 'None)', 'self.assertFalse(handle', 'is', 'None)', 'self.io_loop.remove_timeout(handle)', 'def', 'test_call_at_return(self):', 'handle', '=', 'self.io_loop.call_at(self.io_loop.time(),', 'lambda:', 'None)', 'self.assertFalse(handle', 'is', 'None)', 'self.io_loop.remove_timeout(handle)', 'def', 'test_call_later_return(self):', 'handle', '=', 'self.io_loop.call_later(0,', 'lambda:', 'None)', 'self.assertFalse(handle', 'is', 'None)', 'self.io_loop.remove_timeout(handle)', 'def', 'test_close_file_object(self):', 'class', 'SocketWrapper(object):', 'def', '__init__(self,', 'sockobj):', 'self.sockobj', '=', 'sockobj', 'self.closed', '=', 'False', 'def', 'fileno(self):', 'return', 'self.sockobj.fileno()', 'def', 'close(self):', 'self.closed', '=', 'True', 'self.sockobj.close()', 'sockobj,', 'port', '=', 'bind_unused_port()', 'socket_wrapper', '=', 'SocketWrapper(sockobj)', 'io_loop', '=', 'IOLoop()', 'io_loop.add_handler(socket_wrapper,', 'lambda', 'fd,', 'events:', 'None,', 'IOLoop.READ)', 'io_loop.close(all_fds=True)', 'self.assertTrue(socket_wrapper.closed)', 'def', 'test_handler_callback_file_object(self):', 'server_sock,', 'port', '=', 'bind_unused_port()', 'fds', '=', '[]', 'def', 'handle_connection(fd,', 'events):', 'fds.append(fd)', 'conn,', 'addr', '=', 'server_sock.accept()', 'conn.close()', 'self.stop()', 'self.io_loop.add_handler(server_sock,', 'handle_connection,', 'IOLoop.READ)', 'with', 'contextlib.closing(socket.socket())', 'as', 'client_sock:', 'client_sock.connect((\"127.0.0.1\",', 'port))', 'self.wait()', 'self.io_loop.remove_handler(server_sock)', 'self.io_loop.add_handler(server_sock.fileno(),', 'handle_connection,', 'IOLoop.READ)', 'with', 'contextlib.closing(socket.socket())', 'as', 'client_sock:', 'client_sock.connect((\"127.0.0.1\",', 'port))', 'self.wait()', 'self.assertIs(fds[0],', 'server_sock)', 'self.assertEqual(fds[1],', 'server_sock.fileno())', 'self.io_loop.remove_handler(server_sock.fileno())', 'server_sock.close()', 'def', 'test_mixed_fd_fileobj(self):', 'server_sock,', 'port', '=', 'bind_unused_port()', 'def', 'f(fd,', 'events):', 'pass', 'self.io_loop.add_handler(server_sock,', 'f,', 'IOLoop.READ)', 'with', 'self.assertRaises(Exception):', 'self.io_loop.add_handler(server_sock.fileno(),', 'f,', 'IOLoop.READ)', 'self.io_loop.remove_handler(server_sock.fileno())', 'server_sock.close()', 'def', 'test_reentrant(self):', 'returned_from_start', '=', '[False]', 'got_exception', '=', '[False]', 'def', 'callback():', 'try:', 'self.io_loop.start()', 'returned_from_start[0]', '=', 'True', 'except', 'Exception:', 'got_exception[0]', '=', 'True', 'self.stop()', 'self.io_loop.add_callback(callback)', 'self.wait()', 'self.assertTrue(got_exception[0])', 'self.assertFalse(returned_from_start[0])', 'def', 'test_exception_logging(self):', 'self.io_loop.add_callback(lambda:', '1', '/', '0)', 'self.io_loop.add_callback(self.stop)', 'with', 'ExpectLog(app_log,', '\"Exception', 'in', 'callback\"):', 'self.wait()', 'def', 'test_exception_logging_future(self):', '@gen.coroutine', 'def', 'callback():', 'self.io_loop.add_callback(self.stop)', '1', '/', '0', 'self.io_loop.add_callback(callback)', 'with', 'ExpectLog(app_log,', '\"Exception', 'in', 'callback\"):', 'self.wait()', 'def', 'test_exception_logging_native_coro(self):', 'async', 'def', 'callback():', 'self.io_loop.add_callback(self.io_loop.add_callback,', 'self.stop)', '1', '/', '0', 'self.io_loop.add_callback(callback)', 'with', 'ExpectLog(app_log,', '\"Exception', 'in', 'callback\"):', 'self.wait()', 'def', 'test_spawn_callback(self):', 'self.io_loop.add_callback(lambda:', '1', '/', '0)', 'self.io_loop.add_callback(self.stop)', 'with', 'ExpectLog(app_log,', '\"Exception', 'in', 'callback\"):', 'self.wait()', 'self.io_loop.spawn_callback(lambda:', '1', '/', '0)', 'self.io_loop.add_callback(self.stop)', 'with', 'ExpectLog(app_log,', '\"Exception', 'in', 'callback\"):', 'self.wait()', '@skipIfNonUnix', 'def', 'test_remove_handler_from_handler(self):', 'client,', 'server', '=', 'socket.socketpair()', 'try:', 'client.send(b\"abc\")', 'server.send(b\"abc\")', 'chunks', '=', '[]', 'def', 'handle_read(fd,', 'events):', 'chunks.append(fd.recv(1024))', 'if', 'fd', 'is', 'client:', 'self.io_loop.remove_handler(server)', 'else:', 'self.io_loop.remove_handler(client)', 'self.io_loop.add_handler(client,', 'handle_read,', 'self.io_loop.READ)', 'self.io_loop.add_handler(server,', 'handle_read,', 'self.io_loop.READ)', 'self.io_loop.call_later(0.1,', 'self.stop)', 'self.wait()', 'self.assertEqual(chunks,', '[b\"abc\"])', 'finally:', 'client.close()', 'server.close()', '@skipIfNonUnix', '@gen_test', 'def', 'test_init_close_race(self):', 'def', 'f():', 'for', 'i', 'in', 'range(10):', 'loop', '=', 'IOLoop(make_current=False)', 'loop.close()', 'yield', 'gen.multi([self.io_loop.run_in_executor(None,', 'f)', 'for', 'i', 'in', 'range(2)])', 'def', 'test_explicit_asyncio_loop(self):', 'asyncio_loop', '=', 'asyncio.new_event_loop()', 'loop', '=', 'IOLoop(asyncio_loop=asyncio_loop,', 'make_current=False)', 'assert', 'loop.asyncio_loop', 'is', 'asyncio_loop', 'with', 'self.assertRaises(RuntimeError):', 'IOLoop(asyncio_loop=asyncio_loop,', 'make_current=False)', 'loop.close()', 'class', 'TestIOLoopCurrent(unittest.TestCase):', 'def', 'setUp(self):', 'setup_with_context_manager(self,', 'ignore_deprecation())', 'self.io_loop', '=', 'None', 'IOLoop.clear_current()', 'def', 'tearDown(self):', 'if', 'self.io_loop', 'is', 'not', 'None:', 'self.io_loop.close()', 'def', 'test_non_current(self):', 'self.io_loop', '=', 'IOLoop(make_current=False)', 'self.assertIsNone(IOLoop.current(instance=False))', 'for', 'i', 'in', 'range(3):', 'def', 'f():', 'self.current_io_loop', '=', 'IOLoop.current()', 'assert', 'self.io_loop', 'is', 'not', 'None', 'self.io_loop.stop()', 'self.io_loop.add_callback(f)', 'self.io_loop.start()', 'self.assertIs(self.current_io_loop,', 'self.io_loop)', 'self.assertIsNone(IOLoop.current(instance=False))', 'def', 'test_force_current(self):', 'self.io_loop', '=', 'IOLoop(make_current=True)', 'self.assertIs(self.io_loop,', 'IOLoop.current())', 'class', 'TestIOLoopCurrentAsync(AsyncTestCase):', 'def', 'setUp(self):', 'super().setUp()', 'setup_with_context_manager(self,', 'ignore_deprecation())', '@gen_test', 'def', 'test_clear_without_current(self):', 'with', 'ThreadPoolExecutor(1)', 'as', 'e:', 'yield', 'e.submit(IOLoop.clear_current)', 'class', 'TestIOLoopFutures(AsyncTestCase):', 'def', 'test_add_future_threads(self):', 'with', 'futures.ThreadPoolExecutor(1)', 'as', 'pool:', 'def', 'dummy():', 'pass', 'self.io_loop.add_future(', 'pool.submit(dummy),', 'lambda', 'future:', 'self.stop(future)', ')', 'future', '=', 'self.wait()', 'self.assertTrue(future.done())', 'self.assertTrue(future.result()', 'is', 'None)', '@gen_test', 'def', 'test_run_in_executor_gen(self):', 'event1', '=', 'threading.Event()', 'event2', '=', 'threading.Event()', 'def', 'sync_func(self_event,', 'other_event):', 'self_event.set()', 'other_event.wait()', 'return', 'self_event', 'res', '=', 'yield', '[', 'IOLoop.current().run_in_executor(None,', 'sync_func,', 'event1,', 'event2),', 'IOLoop.current().run_in_executor(None,', 'sync_func,', 'event2,', 'event1),', ']', 'self.assertEqual([event1,', 'event2],', 'res)', '@gen_test', 'def', 'test_run_in_executor_native(self):', 'event1', '=', 'threading.Event()', 'event2', '=', 'threading.Event()', 'def', 'sync_func(self_event,', 'other_event):', 'self_event.set()', 'other_event.wait()', 'return', 'self_event', 'async', 'def', 'async_wrapper(self_event,', 'other_event):', 'return', 'await', 'IOLoop.current().run_in_executor(', 'None,', 'sync_func,', 'self_event,', 'other_event', ')', 'res', '=', 'yield', '[async_wrapper(event1,', 'event2),', 'async_wrapper(event2,', 'event1)]', 'self.assertEqual([event1,', 'event2],', 'res)', '@gen_test', 'def', 'test_set_default_executor(self):', 'count', '=', '[0]', 'class', 'MyExecutor(futures.ThreadPoolExecutor):', 'def', 'submit(self,', 'func,', '*args):', 'count[0]', '+=', '1', 'return', 'super().submit(func,', '*args)', 'event', '=', 'threading.Event()', 'def', 'sync_func():', 'event.set()', 'executor', '=', 'MyExecutor(1)', 'loop', '=', 'IOLoop.current()', 'loop.set_default_executor(executor)', 'yield', 'loop.run_in_executor(None,', 'sync_func)', 'self.assertEqual(1,', 'count[0])', 'self.assertTrue(event.is_set())', 'class', 'TestIOLoopRunSync(unittest.TestCase):', 'def', 'setUp(self):', 'self.io_loop', '=', 'IOLoop(make_current=False)', 'def', 'tearDown(self):', 'self.io_loop.close()', 'def', 'test_sync_result(self):', 'with', 'self.assertRaises(gen.BadYieldError):', 'self.io_loop.run_sync(lambda:', '42)', 'def', 'test_sync_exception(self):', 'with', 'self.assertRaises(ZeroDivisionError):', 'self.io_loop.run_sync(lambda:', '1', '/', '0)', 'def', 'test_async_result(self):', '@gen.coroutine', 'def', 'f():', 'yield', 'gen.moment', 'raise', 'gen.Return(42)', 'self.assertEqual(self.io_loop.run_sync(f),', '42)', 'def', 'test_async_exception(self):', '@gen.coroutine', 'def', 'f():', 'yield', 'gen.moment', '1', '/', '0', 'with', 'self.assertRaises(ZeroDivisionError):', 'self.io_loop.run_sync(f)', 'def', 'test_current(self):', 'def', 'f():', 'self.assertIs(IOLoop.current(),', 'self.io_loop)', 'self.io_loop.run_sync(f)', 'def', 'test_timeout(self):', '@gen.coroutine', 'def', 'f():', 'yield', 'gen.sleep(1)', 'self.assertRaises(TimeoutError,', 'self.io_loop.run_sync,', 'f,', 'timeout=0.01)', 'def', 'test_native_coroutine(self):', '@gen.coroutine', 'def', 'f1():', 'yield', 'gen.moment', 'async', 'def', 'f2():', 'await', 'f1()', 'self.io_loop.run_sync(f2)', 'class', 'TestPeriodicCallbackMath(unittest.TestCase):', 'def', 'simulate_calls(self,', 'pc,', 'durations):', 'calls', '=', '[]', 'now', '=', '1000', 'pc._next_timeout', '=', 'now', 'for', 'd', 'in', 'durations:', 'pc._update_next(now)', 'calls.append(pc._next_timeout)', 'now', '=', 'pc._next_timeout', '+', 'd', 'return', 'calls', 'def', 'dummy(self):', 'pass', 'def', 'test_basic(self):', 'pc', '=', 'PeriodicCallback(self.dummy,', '10000)', 'self.assertEqual(', 'self.simulate_calls(pc,', '[0]', '*', '5),', '[1010,', '1020,', '1030,', '1040,', '1050]', ')', 'def', 'test_overrun(self):', 'call_durations', '=', '[9,', '9,', '10,', '11,', '20,', '20,', '35,', '35,', '0,', '0,', '0]', 'expected', '=', '[', '1010,', '1020,', '1030,', '1050,', '1070,', '1100,', '1130,', '1170,', '1210,', '1220,', '1230,', ']', 'pc', '=', 'PeriodicCallback(self.dummy,', '10000)', 'self.assertEqual(self.simulate_calls(pc,', 'call_durations),', 'expected)', 'def', 'test_clock_backwards(self):', 'pc', '=', 'PeriodicCallback(self.dummy,', '10000)', 'self.assertEqual(', 'self.simulate_calls(pc,', '[-2,', '-1,', '-3,', '-2,', '0]),', '[1010,', '1020,', '1030,', '1040,', '1050]', ')', 'self.assertEqual(self.simulate_calls(pc,', '[-100,', '0,', '0]),', '[1010,', '1020,', '1030])', 'def', 'test_jitter(self):', 'random_times', '=', '[0.5,', '1,', '0,', '0.75]', 'expected', '=', '[1010,', '1022.5,', '1030,', '1041.25]', 'call_durations', '=', '[0]', '*', 'len(random_times)', 'pc', '=', 'PeriodicCallback(self.dummy,', '10000,', 'jitter=0.5)', 'def', 'mock_random():', 'return', 'random_times.pop(0)', 'with', 'mock.patch(\"random.random\",', 'mock_random):', 'self.assertEqual(self.simulate_calls(pc,', 'call_durations),', 'expected)', 'def', 'test_timedelta(self):', 'pc', '=', 'PeriodicCallback(lambda:', 'None,', 'datetime.timedelta(minutes=1,', 'seconds=23))', 'expected_callback_time', '=', '83000', 'self.assertEqual(pc.callback_time,', 'expected_callback_time)', 'class', 'TestPeriodicCallbackAsync(AsyncTestCase):', 'def', 'test_periodic_plain(self):', 'count', '=', '0', 'def', 'callback()', '->', 'None:', 'nonlocal', 'count', 'count', '+=', '1', 'if', 'count', '==', '3:', 'self.stop()', 'pc', '=', 'PeriodicCallback(callback,', '10)', 'pc.start()', 'self.wait()', 'pc.stop()', 'self.assertEqual(count,', '3)', 'def', 'test_periodic_coro(self)', '->', 'None:', 'counts', '=', '[0,', '0]', '@gen.coroutine', 'def', 'callback()', '->', '\"Generator[Future[None],', 'object,', 'None]\":', 'counts[0]', '+=', '1', 'yield', 'gen.sleep(0.025)', 'counts[1]', '+=', '1', 'if', 'counts[1]', '==', '3:', 'pc.stop()', 'self.io_loop.add_callback(self.stop)', 'pc', '=', 'PeriodicCallback(callback,', '10)', 'pc.start()', 'self.wait()', 'self.assertEqual(counts[0],', '3)', 'self.assertEqual(counts[1],', '3)', 'def', 'test_periodic_async(self)', '->', 'None:', 'counts', '=', '[0,', '0]', 'async', 'def', 'callback()', '->', 'None:', 'counts[0]', '+=', '1', 'await', 'gen.sleep(0.025)', 'counts[1]', '+=', '1', 'if', 'counts[1]', '==', '3:', 'pc.stop()', 'self.io_loop.add_callback(self.stop)', 'pc', '=', 'PeriodicCallback(callback,', '10)', 'pc.start()', 'self.wait()', 'self.assertEqual(counts[0],', '3)', 'self.assertEqual(counts[1],', '3)', 'class', 'TestIOLoopConfiguration(unittest.TestCase):', 'def', 'run_python(self,', '*statements):', 'stmt_list', '=', '[', '\"from', 'tornado.ioloop', 'import', 'IOLoop\",', '\"classname', '=', 'lambda', 'x:', 'x.__class__.__name__\",', ']', '+', 'list(statements)', 'args', '=', '[sys.executable,', '\"-c\",', '\";', '\".join(stmt_list)]', 'return', 'native_str(subprocess.check_output(args)).strip()', 'def', 'test_default(self):', 'cls', '=', 'self.run_python(\"print(classname(IOLoop.current()))\")', 'self.assertEqual(cls,', '\"AsyncIOMainLoop\")', 'cls', '=', 'self.run_python(\"print(classname(IOLoop()))\")', 'self.assertEqual(cls,', '\"AsyncIOLoop\")', 'def', 'test_asyncio(self):', 'cls', '=', 'self.run_python(', '\\'IOLoop.configure(\"tornado.platform.asyncio.AsyncIOLoop\")\\',', '\"print(classname(IOLoop.current()))\",', ')', 'self.assertEqual(cls,', '\"AsyncIOMainLoop\")', 'def', 'test_asyncio_main(self):', 'cls', '=', 'self.run_python(', '\"from', 'tornado.platform.asyncio', 'import', 'AsyncIOMainLoop\",', '\"AsyncIOMainLoop().install()\",', '\"print(classname(IOLoop.current()))\",', ')', 'self.assertEqual(cls,', '\"AsyncIOMainLoop\")', 'if', '__name__', '==', '\"__main__\":', 'unittest.main()']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/iostream_test.py",
        "vector": "['from', 'tornado.concurrent', 'import', 'Future', 'from', 'tornado', 'import', 'gen', 'from', 'tornado', 'import', 'netutil', 'from', 'tornado.ioloop', 'import', 'IOLoop', 'from', 'tornado.iostream', 'import', '(', 'IOStream,', 'SSLIOStream,', 'PipeIOStream,', 'StreamClosedError,', '_StreamBuffer,', ')', 'from', 'tornado.httputil', 'import', 'HTTPHeaders', 'from', 'tornado.locks', 'import', 'Condition,', 'Event', 'from', 'tornado.log', 'import', 'gen_log', 'from', 'tornado.netutil', 'import', 'ssl_options_to_context,', 'ssl_wrap_socket', 'from', 'tornado.platform.asyncio', 'import', 'AddThreadSelectorEventLoop', 'from', 'tornado.tcpserver', 'import', 'TCPServer', 'from', 'tornado.testing', 'import', '(', 'AsyncHTTPTestCase,', 'AsyncHTTPSTestCase,', 'AsyncTestCase,', 'bind_unused_port,', 'ExpectLog,', 'gen_test,', ')', 'from', 'tornado.test.util', 'import', '(', 'skipIfNonUnix,', 'refusing_port,', 'skipPypy3V58,', 'ignore_deprecation,', ')', 'from', 'tornado.web', 'import', 'RequestHandler,', 'Application', 'import', 'asyncio', 'import', 'errno', 'import', 'hashlib', 'import', 'logging', 'import', 'os', 'import', 'platform', 'import', 'random', 'import', 'socket', 'import', 'ssl', 'import', 'typing', 'from', 'unittest', 'import', 'mock', 'import', 'unittest', 'def', '_server_ssl_options():', 'return', 'dict(', 'certfile=os.path.join(os.path.dirname(__file__),', '\"test.crt\"),', 'keyfile=os.path.join(os.path.dirname(__file__),', '\"test.key\"),', ')', 'class', 'HelloHandler(RequestHandler):', 'def', 'get(self):', 'self.write(\"Hello\")', 'class', 'TestIOStreamWebMixin(object):', 'def', '_make_client_iostream(self):', 'raise', 'NotImplementedError()', 'def', 'get_app(self):', 'return', 'Application([(\"/\",', 'HelloHandler)])', 'def', 'test_connection_closed(self:', 'typing.Any):', 'response', '=', 'self.fetch(\"/\",', 'headers={\"Connection\":', '\"close\"})', 'response.rethrow()', '@gen_test', 'def', 'test_read_until_close(self:', 'typing.Any):', 'stream', '=', 'self._make_client_iostream()', 'yield', 'stream.connect((\"127.0.0.1\",', 'self.get_http_port()))', 'stream.write(b\"GET', '/', 'HTTP/1.0\\\\r\\\\n\\\\r\\\\n\")', 'data', '=', 'yield', 'stream.read_until_close()', 'self.assertTrue(data.startswith(b\"HTTP/1.1', '200\"))', 'self.assertTrue(data.endswith(b\"Hello\"))', '@gen_test', 'def', 'test_read_zero_bytes(self:', 'typing.Any):', 'self.stream', '=', 'self._make_client_iostream()', 'yield', 'self.stream.connect((\"127.0.0.1\",', 'self.get_http_port()))', 'self.stream.write(b\"GET', '/', 'HTTP/1.0\\\\r\\\\n\\\\r\\\\n\")', 'data', '=', 'yield', 'self.stream.read_bytes(9)', 'self.assertEqual(data,', 'b\"HTTP/1.1', '\")', 'data', '=', 'yield', 'self.stream.read_bytes(0)', 'self.assertEqual(data,', 'b\"\")', 'data', '=', 'yield', 'self.stream.read_bytes(3)', 'self.assertEqual(data,', 'b\"200\")', 'self.stream.close()', '@gen_test', 'def', 'test_write_while_connecting(self:', 'typing.Any):', 'stream', '=', 'self._make_client_iostream()', 'connect_fut', '=', 'stream.connect((\"127.0.0.1\",', 'self.get_http_port()))', 'write_fut', '=', 'stream.write(b\"GET', '/', 'HTTP/1.0\\\\r\\\\nConnection:', 'close\\\\r\\\\n\\\\r\\\\n\")', 'self.assertFalse(connect_fut.done())', 'it', '=', 'gen.WaitIterator(connect_fut,', 'write_fut)', 'resolved_order', '=', '[]', 'while', 'not', 'it.done():', 'yield', 'it.next()', 'resolved_order.append(it.current_future)', 'self.assertEqual(resolved_order,', '[connect_fut,', 'write_fut])', 'data', '=', 'yield', 'stream.read_until_close()', 'self.assertTrue(data.endswith(b\"Hello\"))', 'stream.close()', '@gen_test', 'def', 'test_future_interface(self:', 'typing.Any):', 'stream', '=', 'self._make_client_iostream()', 'connect_result', '=', 'yield', 'stream.connect((\"127.0.0.1\",', 'self.get_http_port()))', 'self.assertIs(connect_result,', 'stream)', 'yield', 'stream.write(b\"GET', '/', 'HTTP/1.0\\\\r\\\\n\\\\r\\\\n\")', 'first_line', '=', 'yield', 'stream.read_until(b\"\\\\r\\\\n\")', 'self.assertEqual(first_line,', 'b\"HTTP/1.1', '200', 'OK\\\\r\\\\n\")', 'header_data', '=', 'yield', 'stream.read_until(b\"\\\\r\\\\n\\\\r\\\\n\")', 'headers', '=', 'HTTPHeaders.parse(header_data.decode(\"latin1\"))', 'content_length', '=', 'int(headers[\"Content-Length\"])', 'body', '=', 'yield', 'stream.read_bytes(content_length)', 'self.assertEqual(body,', 'b\"Hello\")', 'stream.close()', '@gen_test', 'def', 'test_future_close_while_reading(self:', 'typing.Any):', 'stream', '=', 'self._make_client_iostream()', 'yield', 'stream.connect((\"127.0.0.1\",', 'self.get_http_port()))', 'yield', 'stream.write(b\"GET', '/', 'HTTP/1.0\\\\r\\\\n\\\\r\\\\n\")', 'with', 'self.assertRaises(StreamClosedError):', 'yield', 'stream.read_bytes(1024', '*', '1024)', 'stream.close()', '@gen_test', 'def', 'test_future_read_until_close(self:', 'typing.Any):', 'stream', '=', 'self._make_client_iostream()', 'yield', 'stream.connect((\"127.0.0.1\",', 'self.get_http_port()))', 'yield', 'stream.write(b\"GET', '/', 'HTTP/1.0\\\\r\\\\nConnection:', 'close\\\\r\\\\n\\\\r\\\\n\")', 'yield', 'stream.read_until(b\"\\\\r\\\\n\\\\r\\\\n\")', 'body', '=', 'yield', 'stream.read_until_close()', 'self.assertEqual(body,', 'b\"Hello\")', 'with', 'self.assertRaises(StreamClosedError):', 'stream.read_bytes(1)', 'class', 'TestReadWriteMixin(object):', 'def', 'make_iostream_pair(self,', '**kwargs):', 'raise', 'NotImplementedError', 'def', 'iostream_pair(self,', '**kwargs):', 'class', 'IOStreamPairContext:', 'def', '__init__(self,', 'test,', 'kwargs):', 'self.test', '=', 'test', 'self.kwargs', '=', 'kwargs', 'async', 'def', '__aenter__(self):', 'self.pair', '=', 'await', 'self.test.make_iostream_pair(**self.kwargs)', 'return', 'self.pair', 'async', 'def', '__aexit__(self,', 'typ,', 'value,', 'tb):', 'for', 's', 'in', 'self.pair:', 's.close()', 'return', 'IOStreamPairContext(self,', 'kwargs)', '@gen_test', 'def', 'test_write_zero_bytes(self):', 'rs,', 'ws', '=', 'yield', 'self.make_iostream_pair()', 'yield', 'ws.write(b\"\")', 'ws.close()', 'rs.close()', '@gen_test', 'def', 'test_future_delayed_close_callback(self:', 'typing.Any):', 'rs,', 'ws', '=', 'yield', 'self.make_iostream_pair()', 'try:', 'ws.write(b\"12\")', 'chunks', '=', '[]', 'chunks.append((yield', 'rs.read_bytes(1)))', 'ws.close()', 'chunks.append((yield', 'rs.read_bytes(1)))', 'self.assertEqual(chunks,', '[b\"1\",', 'b\"2\"])', 'finally:', 'ws.close()', 'rs.close()', '@gen_test', 'def', 'test_close_buffered_data(self:', 'typing.Any):', 'rs,', 'ws', '=', 'yield', 'self.make_iostream_pair(read_chunk_size=256)', 'try:', 'ws.write(b\"A\"', '*', '512)', 'data', '=', 'yield', 'rs.read_bytes(256)', 'self.assertEqual(b\"A\"', '*', '256,', 'data)', 'ws.close()', 'yield', 'gen.sleep(0.01)', 'data', '=', 'yield', 'rs.read_bytes(256)', 'self.assertEqual(b\"A\"', '*', '256,', 'data)', 'finally:', 'ws.close()', 'rs.close()', '@gen_test', 'def', 'test_read_until_close_after_close(self:', 'typing.Any):', 'rs,', 'ws', '=', 'yield', 'self.make_iostream_pair()', 'try:', 'ws.write(b\"1234\")', 'data', '=', 'yield', 'rs.read_bytes(1)', 'ws.close()', 'self.assertEqual(data,', 'b\"1\")', 'data', '=', 'yield', 'rs.read_until_close()', 'self.assertEqual(data,', 'b\"234\")', 'finally:', 'ws.close()', 'rs.close()', '@gen_test', 'def', 'test_large_read_until(self:', 'typing.Any):', 'rs,', 'ws', '=', 'yield', 'self.make_iostream_pair()', 'try:', 'if', '(', 'isinstance(rs,', 'SSLIOStream)', 'and', 'platform.python_implementation()', '==', '\"PyPy\"', '):', 'raise', 'unittest.SkipTest(\"pypy', 'gc', 'causes', 'problems', 'with', 'openssl\")', 'NUM_KB', '=', '4096', 'for', 'i', 'in', 'range(NUM_KB):', 'ws.write(b\"A\"', '*', '1024)', 'ws.write(b\"\\\\r\\\\n\")', 'data', '=', 'yield', 'rs.read_until(b\"\\\\r\\\\n\")', 'self.assertEqual(len(data),', 'NUM_KB', '*', '1024', '+', '2)', 'finally:', 'ws.close()', 'rs.close()', '@gen_test', 'async', 'def', 'test_read_until_with_close_after_second_packet(self):', 'async', 'with', 'self.iostream_pair()', 'as', '(rs,', 'ws):', 'rf', '=', 'asyncio.ensure_future(rs.read_until(b\"done\"))', 'await', 'asyncio.sleep(0.1)', 'await', 'ws.write(b\"x\"', '*', '2048)', 'ws.write(b\"done\")', 'ws.close()', 'await', 'rf', '@gen_test', 'async', 'def', 'test_read_until_unsatisfied_after_close(self:', 'typing.Any):', 'async', 'with', 'self.iostream_pair()', 'as', '(rs,', 'ws):', 'rf', '=', 'asyncio.ensure_future(rs.read_until(b\"done\"))', 'await', 'ws.write(b\"x\"', '*', '2048)', 'ws.write(b\"foo\")', 'ws.close()', 'with', 'self.assertRaises(StreamClosedError):', 'await', 'rf', '@gen_test', 'def', 'test_close_callback_with_pending_read(self:', 'typing.Any):', 'OK', '=', 'b\"OK\\\\r\\\\n\"', 'rs,', 'ws', '=', 'yield', 'self.make_iostream_pair()', 'event', '=', 'Event()', 'rs.set_close_callback(event.set)', 'try:', 'ws.write(OK)', 'res', '=', 'yield', 'rs.read_until(b\"\\\\r\\\\n\")', 'self.assertEqual(res,', 'OK)', 'ws.close()', 'rs.read_until(b\"\\\\r\\\\n\")', 'yield', 'event.wait()', 'finally:', 'ws.close()', 'rs.close()', '@gen_test', 'def', 'test_future_close_callback(self:', 'typing.Any):', 'rs,', 'ws', '=', 'yield', 'self.make_iostream_pair()', 'closed', '=', '[False]', 'cond', '=', 'Condition()', 'def', 'close_callback():', 'closed[0]', '=', 'True', 'cond.notify()', 'rs.set_close_callback(close_callback)', 'try:', 'ws.write(b\"a\")', 'res', '=', 'yield', 'rs.read_bytes(1)', 'self.assertEqual(res,', 'b\"a\")', 'self.assertFalse(closed[0])', 'ws.close()', 'yield', 'cond.wait()', 'self.assertTrue(closed[0])', 'finally:', 'rs.close()', 'ws.close()', '@gen_test', 'def', 'test_write_memoryview(self:', 'typing.Any):', 'rs,', 'ws', '=', 'yield', 'self.make_iostream_pair()', 'try:', 'fut', '=', 'rs.read_bytes(4)', 'ws.write(memoryview(b\"hello\"))', 'data', '=', 'yield', 'fut', 'self.assertEqual(data,', 'b\"hell\")', 'finally:', 'ws.close()', 'rs.close()', '@gen_test', 'def', 'test_read_bytes_partial(self:', 'typing.Any):', 'rs,', 'ws', '=', 'yield', 'self.make_iostream_pair()', 'try:', 'fut', '=', 'rs.read_bytes(50,', 'partial=True)', 'ws.write(b\"hello\")', 'data', '=', 'yield', 'fut', 'self.assertEqual(data,', 'b\"hello\")', 'fut', '=', 'rs.read_bytes(3,', 'partial=True)', 'ws.write(b\"world\")', 'data', '=', 'yield', 'fut', 'self.assertEqual(data,', 'b\"wor\")', 'data', '=', 'yield', 'rs.read_bytes(0,', 'partial=True)', 'self.assertEqual(data,', 'b\"\")', 'finally:', 'ws.close()', 'rs.close()', '@gen_test', 'def', 'test_read_until_max_bytes(self:', 'typing.Any):', 'rs,', 'ws', '=', 'yield', 'self.make_iostream_pair()', 'closed', '=', 'Event()', 'rs.set_close_callback(closed.set)', 'try:', 'fut', '=', 'rs.read_until(b\"def\",', 'max_bytes=50)', 'ws.write(b\"abcdef\")', 'data', '=', 'yield', 'fut', 'self.assertEqual(data,', 'b\"abcdef\")', 'fut', '=', 'rs.read_until(b\"def\",', 'max_bytes=6)', 'ws.write(b\"abcdef\")', 'data', '=', 'yield', 'fut', 'self.assertEqual(data,', 'b\"abcdef\")', 'with', 'ExpectLog(gen_log,', '\"Unsatisfiable', 'read\",', 'level=logging.INFO):', 'fut', '=', 'rs.read_until(b\"def\",', 'max_bytes=5)', 'ws.write(b\"123456\")', 'yield', 'closed.wait()', 'finally:', 'ws.close()', 'rs.close()', '@gen_test', 'def', 'test_read_until_max_bytes_inline(self:', 'typing.Any):', 'rs,', 'ws', '=', 'yield', 'self.make_iostream_pair()', 'closed', '=', 'Event()', 'rs.set_close_callback(closed.set)', 'try:', 'ws.write(b\"123456\")', 'with', 'ExpectLog(gen_log,', '\"Unsatisfiable', 'read\",', 'level=logging.INFO):', 'with', 'self.assertRaises(StreamClosedError):', 'yield', 'rs.read_until(b\"def\",', 'max_bytes=5)', 'yield', 'closed.wait()', 'finally:', 'ws.close()', 'rs.close()', '@gen_test', 'def', 'test_read_until_max_bytes_ignores_extra(self:', 'typing.Any):', 'rs,', 'ws', '=', 'yield', 'self.make_iostream_pair()', 'closed', '=', 'Event()', 'rs.set_close_callback(closed.set)', 'try:', 'ws.write(b\"abcdef\")', 'with', 'ExpectLog(gen_log,', '\"Unsatisfiable', 'read\",', 'level=logging.INFO):', 'rs.read_until(b\"def\",', 'max_bytes=5)', 'yield', 'closed.wait()', 'finally:', 'ws.close()', 'rs.close()', '@gen_test', 'def', 'test_read_until_regex_max_bytes(self:', 'typing.Any):', 'rs,', 'ws', '=', 'yield', 'self.make_iostream_pair()', 'closed', '=', 'Event()', 'rs.set_close_callback(closed.set)', 'try:', 'fut', '=', 'rs.read_until_regex(b\"def\",', 'max_bytes=50)', 'ws.write(b\"abcdef\")', 'data', '=', 'yield', 'fut', 'self.assertEqual(data,', 'b\"abcdef\")', 'fut', '=', 'rs.read_until_regex(b\"def\",', 'max_bytes=6)', 'ws.write(b\"abcdef\")', 'data', '=', 'yield', 'fut', 'self.assertEqual(data,', 'b\"abcdef\")', 'with', 'ExpectLog(gen_log,', '\"Unsatisfiable', 'read\",', 'level=logging.INFO):', 'rs.read_until_regex(b\"def\",', 'max_bytes=5)', 'ws.write(b\"123456\")', 'yield', 'closed.wait()', 'finally:', 'ws.close()', 'rs.close()', '@gen_test', 'def', 'test_read_until_regex_max_bytes_inline(self:', 'typing.Any):', 'rs,', 'ws', '=', 'yield', 'self.make_iostream_pair()', 'closed', '=', 'Event()', 'rs.set_close_callback(closed.set)', 'try:', 'ws.write(b\"123456\")', 'with', 'ExpectLog(gen_log,', '\"Unsatisfiable', 'read\",', 'level=logging.INFO):', 'rs.read_until_regex(b\"def\",', 'max_bytes=5)', 'yield', 'closed.wait()', 'finally:', 'ws.close()', 'rs.close()', '@gen_test', 'def', 'test_read_until_regex_max_bytes_ignores_extra(self):', 'rs,', 'ws', '=', 'yield', 'self.make_iostream_pair()', 'closed', '=', 'Event()', 'rs.set_close_callback(closed.set)', 'try:', 'ws.write(b\"abcdef\")', 'with', 'ExpectLog(gen_log,', '\"Unsatisfiable', 'read\",', 'level=logging.INFO):', 'rs.read_until_regex(b\"def\",', 'max_bytes=5)', 'yield', 'closed.wait()', 'finally:', 'ws.close()', 'rs.close()', '@gen_test', 'def', 'test_small_reads_from_large_buffer(self:', 'typing.Any):', 'rs,', 'ws', '=', 'yield', 'self.make_iostream_pair(max_buffer_size=10', '*', '1024)', 'try:', 'ws.write(b\"a\"', '*', '1024', '*', '100)', 'for', 'i', 'in', 'range(100):', 'data', '=', 'yield', 'rs.read_bytes(1024)', 'self.assertEqual(data,', 'b\"a\"', '*', '1024)', 'finally:', 'ws.close()', 'rs.close()', '@gen_test', 'def', 'test_small_read_untils_from_large_buffer(self:', 'typing.Any):', 'rs,', 'ws', '=', 'yield', 'self.make_iostream_pair(max_buffer_size=10', '*', '1024)', 'try:', 'ws.write((b\"a\"', '*', '1023', '+', 'b\"\\\\n\")', '*', '100)', 'for', 'i', 'in', 'range(100):', 'data', '=', 'yield', 'rs.read_until(b\"\\\\n\",', 'max_bytes=4096)', 'self.assertEqual(data,', 'b\"a\"', '*', '1023', '+', 'b\"\\\\n\")', 'finally:', 'ws.close()', 'rs.close()', '@gen_test', 'def', 'test_flow_control(self):', 'MB', '=', '1024', '*', '1024', 'rs,', 'ws', '=', 'yield', 'self.make_iostream_pair(max_buffer_size=5', '*', 'MB)', 'try:', 'ws.write(b\"a\"', '*', '10', '*', 'MB)', 'yield', 'rs.read_bytes(MB)', 'yield', 'gen.sleep(0.1)', 'for', 'i', 'in', 'range(9):', 'yield', 'rs.read_bytes(MB)', 'finally:', 'rs.close()', 'ws.close()', '@gen_test', 'def', 'test_read_into(self:', 'typing.Any):', 'rs,', 'ws', '=', 'yield', 'self.make_iostream_pair()', 'def', 'sleep_some():', 'self.io_loop.run_sync(lambda:', 'gen.sleep(0.05))', 'try:', 'buf', '=', 'bytearray(10)', 'fut', '=', 'rs.read_into(buf)', 'ws.write(b\"hello\")', 'yield', 'gen.sleep(0.05)', 'self.assertTrue(rs.reading())', 'ws.write(b\"world!!\")', 'data', '=', 'yield', 'fut', 'self.assertFalse(rs.reading())', 'self.assertEqual(data,', '10)', 'self.assertEqual(bytes(buf),', 'b\"helloworld\")', 'fut', '=', 'rs.read_into(buf)', 'yield', 'gen.sleep(0.05)', 'self.assertTrue(rs.reading())', 'ws.write(b\"1234567890\")', 'data', '=', 'yield', 'fut', 'self.assertFalse(rs.reading())', 'self.assertEqual(data,', '10)', 'self.assertEqual(bytes(buf),', 'b\"!!12345678\")', 'buf', '=', 'bytearray(4)', 'ws.write(b\"abcdefghi\")', 'data', '=', 'yield', 'rs.read_into(buf)', 'self.assertEqual(data,', '4)', 'self.assertEqual(bytes(buf),', 'b\"90ab\")', 'data', '=', 'yield', 'rs.read_bytes(7)', 'self.assertEqual(data,', 'b\"cdefghi\")', 'finally:', 'ws.close()', 'rs.close()', '@gen_test', 'def', 'test_read_into_partial(self:', 'typing.Any):', 'rs,', 'ws', '=', 'yield', 'self.make_iostream_pair()', 'try:', 'buf', '=', 'bytearray(10)', 'fut', '=', 'rs.read_into(buf,', 'partial=True)', 'ws.write(b\"hello\")', 'data', '=', 'yield', 'fut', 'self.assertFalse(rs.reading())', 'self.assertEqual(data,', '5)', 'self.assertEqual(bytes(buf),', 'b\"hello\\\\0\\\\0\\\\0\\\\0\\\\0\")', 'ws.write(b\"world!1234567890\")', 'data', '=', 'yield', 'rs.read_into(buf,', 'partial=True)', 'self.assertEqual(data,', '10)', 'self.assertEqual(bytes(buf),', 'b\"world!1234\")', 'data', '=', 'yield', 'rs.read_into(buf,', 'partial=True)', 'self.assertEqual(data,', '6)', 'self.assertEqual(bytes(buf),', 'b\"5678901234\")', 'finally:', 'ws.close()', 'rs.close()', '@gen_test', 'def', 'test_read_into_zero_bytes(self:', 'typing.Any):', 'rs,', 'ws', '=', 'yield', 'self.make_iostream_pair()', 'try:', 'buf', '=', 'bytearray()', 'fut', '=', 'rs.read_into(buf)', 'self.assertEqual(fut.result(),', '0)', 'finally:', 'ws.close()', 'rs.close()', '@gen_test', 'def', 'test_many_mixed_reads(self):', 'r', '=', 'random.Random(42)', 'nbytes', '=', '1000000', 'rs,', 'ws', '=', 'yield', 'self.make_iostream_pair()', 'produce_hash', '=', 'hashlib.sha1()', 'consume_hash', '=', 'hashlib.sha1()', '@gen.coroutine', 'def', 'produce():', 'remaining', '=', 'nbytes', 'while', 'remaining', '>', '0:', 'size', '=', 'r.randint(1,', 'min(1000,', 'remaining))', 'data', '=', 'os.urandom(size)', 'produce_hash.update(data)', 'yield', 'ws.write(data)', 'remaining', '-=', 'size', 'assert', 'remaining', '==', '0', '@gen.coroutine', 'def', 'consume():', 'remaining', '=', 'nbytes', 'while', 'remaining', '>', '0:', 'if', 'r.random()', '>', '0.5:', 'size', '=', 'r.randint(1,', 'min(1000,', 'remaining))', 'data', '=', 'yield', 'rs.read_bytes(size)', 'consume_hash.update(data)', 'remaining', '-=', 'size', 'else:', 'size', '=', 'r.randint(1,', 'min(1000,', 'remaining))', 'buf', '=', 'bytearray(size)', 'n', '=', 'yield', 'rs.read_into(buf)', 'assert', 'n', '==', 'size', 'consume_hash.update(buf)', 'remaining', '-=', 'size', 'assert', 'remaining', '==', '0', 'try:', 'yield', '[produce(),', 'consume()]', 'assert', 'produce_hash.hexdigest()', '==', 'consume_hash.hexdigest()', 'finally:', 'ws.close()', 'rs.close()', 'class', 'TestIOStreamMixin(TestReadWriteMixin):', 'def', '_make_server_iostream(self,', 'connection,', '**kwargs):', 'raise', 'NotImplementedError()', 'def', '_make_client_iostream(self,', 'connection,', '**kwargs):', 'raise', 'NotImplementedError()', '@gen.coroutine', 'def', 'make_iostream_pair(self:', 'typing.Any,', '**kwargs):', 'listener,', 'port', '=', 'bind_unused_port()', 'server_stream_fut', '=', 'Future()', 'def', 'accept_callback(connection,', 'address):', 'server_stream_fut.set_result(', 'self._make_server_iostream(connection,', '**kwargs)', ')', 'netutil.add_accept_handler(listener,', 'accept_callback)', 'client_stream', '=', 'self._make_client_iostream(socket.socket(),', '**kwargs)', 'connect_fut', '=', 'client_stream.connect((\"127.0.0.1\",', 'port))', 'server_stream,', 'client_stream', '=', 'yield', '[server_stream_fut,', 'connect_fut]', 'self.io_loop.remove_handler(listener.fileno())', 'listener.close()', 'raise', 'gen.Return((server_stream,', 'client_stream))', '@gen_test', 'def', 'test_connection_refused(self:', 'typing.Any):', 'cleanup_func,', 'port', '=', 'refusing_port()', 'self.addCleanup(cleanup_func)', 'stream', '=', 'IOStream(socket.socket())', 'stream.set_close_callback(self.stop)', 'with', 'ExpectLog(gen_log,', '\".*\",', 'required=False):', 'with', 'self.assertRaises(StreamClosedError):', 'yield', 'stream.connect((\"127.0.0.1\",', 'port))', 'self.assertTrue(isinstance(stream.error,', 'ConnectionRefusedError),', 'stream.error)', '@gen_test', 'def', 'test_gaierror(self:', 'typing.Any):', 's', '=', 'socket.socket(socket.AF_INET,', 'socket.SOCK_STREAM,', '0)', 'stream', '=', 'IOStream(s)', 'stream.set_close_callback(self.stop)', 'with', 'mock.patch(', '\"socket.socket.connect\",', 'side_effect=socket.gaierror(errno.EIO,', '\"boom\")', '):', 'with', 'self.assertRaises(StreamClosedError):', 'yield', 'stream.connect((\"localhost\",', '80))', 'self.assertTrue(isinstance(stream.error,', 'socket.gaierror))', '@gen_test', 'def', 'test_read_until_close_with_error(self:', 'typing.Any):', 'server,', 'client', '=', 'yield', 'self.make_iostream_pair()', 'try:', 'with', 'mock.patch(', '\"tornado.iostream.BaseIOStream._try_inline_read\",', 'side_effect=IOError(\"boom\"),', '):', 'with', 'self.assertRaisesRegex(IOError,', '\"boom\"):', 'client.read_until_close()', 'finally:', 'server.close()', 'client.close()', '@skipIfNonUnix', '@skipPypy3V58', '@gen_test', 'def', 'test_inline_read_error(self:', 'typing.Any):', 'io_loop', '=', 'IOLoop.current()', 'if', 'isinstance(', 'io_loop.selector_loop,', 'AddThreadSelectorEventLoop,', '):', 'self.skipTest(\"AddThreadSelectorEventLoop', 'not', 'supported\")', 'server,', 'client', '=', 'yield', 'self.make_iostream_pair()', 'try:', 'os.close(server.socket.fileno())', 'with', 'self.assertRaises(socket.error):', 'server.read_bytes(1)', 'finally:', 'server.close()', 'client.close()', '@skipPypy3V58', '@gen_test', 'def', 'test_async_read_error_logging(self):', 'server,', 'client', '=', 'yield', 'self.make_iostream_pair()', 'closed', '=', 'Event()', 'server.set_close_callback(closed.set)', 'try:', 'server.read_bytes(1)', 'client.write(b\"a\")', 'def', 'fake_read_from_fd():', 'os.close(server.socket.fileno())', 'server.__class__.read_from_fd(server)', 'server.read_from_fd', '=', 'fake_read_from_fd', 'with', 'ExpectLog(gen_log,', '\"error', 'on', 'read\"):', 'yield', 'closed.wait()', 'finally:', 'server.close()', 'client.close()', '@gen_test', 'def', 'test_future_write(self):', 'm,', 'n', '=', '5000,', '1000', 'nproducers', '=', '10', 'total_bytes', '=', 'm', '*', 'n', '*', 'nproducers', 'server,', 'client', '=', 'yield', 'self.make_iostream_pair(max_buffer_size=total_bytes)', '@gen.coroutine', 'def', 'produce():', 'data', '=', 'b\"x\"', '*', 'm', 'for', 'i', 'in', 'range(n):', 'yield', 'server.write(data)', '@gen.coroutine', 'def', 'consume():', 'nread', '=', '0', 'while', 'nread', '<', 'total_bytes:', 'res', '=', 'yield', 'client.read_bytes(m)', 'nread', '+=', 'len(res)', 'try:', 'yield', '[produce()', 'for', 'i', 'in', 'range(nproducers)]', '+', '[consume()]', 'finally:', 'server.close()', 'client.close()', 'class', 'TestIOStreamWebHTTP(TestIOStreamWebMixin,', 'AsyncHTTPTestCase):', 'def', '_make_client_iostream(self):', 'return', 'IOStream(socket.socket())', 'class', 'TestIOStreamWebHTTPS(TestIOStreamWebMixin,', 'AsyncHTTPSTestCase):', 'def', '_make_client_iostream(self):', 'return', 'SSLIOStream(socket.socket(),', 'ssl_options=dict(cert_reqs=ssl.CERT_NONE))', 'class', 'TestIOStream(TestIOStreamMixin,', 'AsyncTestCase):', 'def', '_make_server_iostream(self,', 'connection,', '**kwargs):', 'return', 'IOStream(connection,', '**kwargs)', 'def', '_make_client_iostream(self,', 'connection,', '**kwargs):', 'return', 'IOStream(connection,', '**kwargs)', 'class', 'TestIOStreamSSL(TestIOStreamMixin,', 'AsyncTestCase):', 'def', '_make_server_iostream(self,', 'connection,', '**kwargs):', 'ssl_ctx', '=', 'ssl_options_to_context(_server_ssl_options(),', 'server_side=True)', 'connection', '=', 'ssl_ctx.wrap_socket(', 'connection,', 'server_side=True,', 'do_handshake_on_connect=False,', ')', 'return', 'SSLIOStream(connection,', '**kwargs)', 'def', '_make_client_iostream(self,', 'connection,', '**kwargs):', 'return', 'SSLIOStream(', 'connection,', 'ssl_options=dict(cert_reqs=ssl.CERT_NONE),', '**kwargs', ')', 'class', 'TestIOStreamSSLContext(TestIOStreamMixin,', 'AsyncTestCase):', 'def', '_make_server_iostream(self,', 'connection,', '**kwargs):', 'context', '=', 'ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)', 'context.load_cert_chain(', 'os.path.join(os.path.dirname(__file__),', '\"test.crt\"),', 'os.path.join(os.path.dirname(__file__),', '\"test.key\"),', ')', 'connection', '=', 'ssl_wrap_socket(', 'connection,', 'context,', 'server_side=True,', 'do_handshake_on_connect=False', ')', 'return', 'SSLIOStream(connection,', '**kwargs)', 'def', '_make_client_iostream(self,', 'connection,', '**kwargs):', 'context', '=', 'ssl.create_default_context(ssl.Purpose.SERVER_AUTH)', 'context.check_hostname', '=', 'False', 'context.verify_mode', '=', 'ssl.CERT_NONE', 'return', 'SSLIOStream(connection,', 'ssl_options=context,', '**kwargs)', 'class', 'TestIOStreamStartTLS(AsyncTestCase):', 'def', 'setUp(self):', 'try:', 'super().setUp()', 'self.listener,', 'self.port', '=', 'bind_unused_port()', 'self.server_stream', '=', 'None', 'self.server_accepted', '=', 'Future()', 'netutil.add_accept_handler(self.listener,', 'self.accept)', 'self.client_stream', '=', 'IOStream(', 'socket.socket()', ')', 'self.io_loop.add_future(', 'self.client_stream.connect((\"127.0.0.1\",', 'self.port)),', 'self.stop', ')', 'self.wait()', 'self.io_loop.add_future(self.server_accepted,', 'self.stop)', 'self.wait()', 'except', 'Exception', 'as', 'e:', 'print(e)', 'raise', 'def', 'tearDown(self):', 'if', 'self.server_stream', 'is', 'not', 'None:', 'self.server_stream.close()', 'if', 'self.client_stream', 'is', 'not', 'None:', 'self.client_stream.close()', 'self.io_loop.remove_handler(self.listener.fileno())', 'self.listener.close()', 'super().tearDown()', 'def', 'accept(self,', 'connection,', 'address):', 'if', 'self.server_stream', 'is', 'not', 'None:', 'self.fail(\"should', 'only', 'get', 'one', 'connection\")', 'self.server_stream', '=', 'IOStream(connection)', 'self.server_accepted.set_result(None)', '@gen.coroutine', 'def', 'client_send_line(self,', 'line):', 'assert', 'self.client_stream', 'is', 'not', 'None', 'self.client_stream.write(line)', 'assert', 'self.server_stream', 'is', 'not', 'None', 'recv_line', '=', 'yield', 'self.server_stream.read_until(b\"\\\\r\\\\n\")', 'self.assertEqual(line,', 'recv_line)', '@gen.coroutine', 'def', 'server_send_line(self,', 'line):', 'assert', 'self.server_stream', 'is', 'not', 'None', 'self.server_stream.write(line)', 'assert', 'self.client_stream', 'is', 'not', 'None', 'recv_line', '=', 'yield', 'self.client_stream.read_until(b\"\\\\r\\\\n\")', 'self.assertEqual(line,', 'recv_line)', 'def', 'client_start_tls(self,', 'ssl_options=None,', 'server_hostname=None):', 'assert', 'self.client_stream', 'is', 'not', 'None', 'client_stream', '=', 'self.client_stream', 'self.client_stream', '=', 'None', 'return', 'client_stream.start_tls(False,', 'ssl_options,', 'server_hostname)', 'def', 'server_start_tls(self,', 'ssl_options=None):', 'assert', 'self.server_stream', 'is', 'not', 'None', 'server_stream', '=', 'self.server_stream', 'self.server_stream', '=', 'None', 'return', 'server_stream.start_tls(True,', 'ssl_options)', '@gen_test', 'def', 'test_start_tls_smtp(self):', 'yield', 'self.server_send_line(b\"220', 'mail.example.com', 'ready\\\\r\\\\n\")', 'yield', 'self.client_send_line(b\"EHLO', 'mail.example.com\\\\r\\\\n\")', 'yield', 'self.server_send_line(b\"250-mail.example.com', 'welcome\\\\r\\\\n\")', 'yield', 'self.server_send_line(b\"250', 'STARTTLS\\\\r\\\\n\")', 'yield', 'self.client_send_line(b\"STARTTLS\\\\r\\\\n\")', 'yield', 'self.server_send_line(b\"220', 'Go', 'ahead\\\\r\\\\n\")', 'client_future', '=', 'self.client_start_tls(dict(cert_reqs=ssl.CERT_NONE))', 'server_future', '=', 'self.server_start_tls(_server_ssl_options())', 'self.client_stream', '=', 'yield', 'client_future', 'self.server_stream', '=', 'yield', 'server_future', 'self.assertTrue(isinstance(self.client_stream,', 'SSLIOStream))', 'self.assertTrue(isinstance(self.server_stream,', 'SSLIOStream))', 'yield', 'self.client_send_line(b\"EHLO', 'mail.example.com\\\\r\\\\n\")', 'yield', 'self.server_send_line(b\"250', 'mail.example.com', 'welcome\\\\r\\\\n\")', '@gen_test', 'def', 'test_handshake_fail(self):', 'server_future', '=', 'self.server_start_tls(_server_ssl_options())', 'with', 'ExpectLog(gen_log,', '\"SSL', 'Error\"):', 'client_future', '=', 'self.client_start_tls(server_hostname=\"localhost\")', 'with', 'self.assertRaises(ssl.SSLError):', 'yield', 'client_future', 'with', 'self.assertRaises((ssl.SSLError,', 'socket.error)):', 'yield', 'server_future', '@gen_test', 'def', 'test_check_hostname(self):', 'server_future', '=', 'self.server_start_tls(_server_ssl_options())', 'with', 'ExpectLog(gen_log,', '\"SSL', 'Error\"):', 'client_future', '=', 'self.client_start_tls(', 'ssl.create_default_context(),', 'server_hostname=\"127.0.0.1\"', ')', 'with', 'self.assertRaises(ssl.SSLError):', 'yield', 'client_future', 'with', 'self.assertRaises(Exception):', 'yield', 'server_future', '@gen_test', 'def', 'test_typed_memoryview(self):', 'buf', '=', 'memoryview(bytes(80)).cast(\"L\")', 'assert', 'self.server_stream', 'is', 'not', 'None', 'yield', 'self.server_stream.write(buf)', 'assert', 'self.client_stream', 'is', 'not', 'None', 'recv', '=', 'yield', 'self.client_stream.read_bytes(buf.nbytes)', 'self.assertEqual(bytes(recv),', 'bytes(buf))', 'class', 'WaitForHandshakeTest(AsyncTestCase):', '@gen.coroutine', 'def', 'connect_to_server(self,', 'server_cls):', 'server', '=', 'client', '=', 'None', 'try:', 'sock,', 'port', '=', 'bind_unused_port()', 'server', '=', 'server_cls(ssl_options=_server_ssl_options())', 'server.add_socket(sock)', 'ssl_ctx', '=', 'ssl.create_default_context(ssl.Purpose.SERVER_AUTH)', 'ssl_ctx.check_hostname', '=', 'False', 'ssl_ctx.verify_mode', '=', 'ssl.CERT_NONE', 'with', 'ignore_deprecation():', 'ssl_ctx.options', '|=', 'getattr(ssl,', '\"OP_NO_TLSv1_3\",', '0)', 'client', '=', 'SSLIOStream(socket.socket(),', 'ssl_options=ssl_ctx)', 'yield', 'client.connect((\"127.0.0.1\",', 'port))', 'self.assertIsNotNone(client.socket.cipher())', 'finally:', 'if', 'server', 'is', 'not', 'None:', 'server.stop()', 'if', 'client', 'is', 'not', 'None:', 'client.close()', '@gen_test', 'def', 'test_wait_for_handshake_future(self):', 'test', '=', 'self', 'handshake_future', '=', 'Future()', 'class', 'TestServer(TCPServer):', 'def', 'handle_stream(self,', 'stream,', 'address):', 'test.assertIsNone(stream.socket.cipher())', 'test.io_loop.spawn_callback(self.handle_connection,', 'stream)', '@gen.coroutine', 'def', 'handle_connection(self,', 'stream):', 'yield', 'stream.wait_for_handshake()', 'handshake_future.set_result(None)', 'yield', 'self.connect_to_server(TestServer)', 'yield', 'handshake_future', '@gen_test', 'def', 'test_wait_for_handshake_already_waiting_error(self):', 'test', '=', 'self', 'handshake_future', '=', 'Future()', 'class', 'TestServer(TCPServer):', '@gen.coroutine', 'def', 'handle_stream(self,', 'stream,', 'address):', 'fut', '=', 'stream.wait_for_handshake()', 'test.assertRaises(RuntimeError,', 'stream.wait_for_handshake)', 'yield', 'fut', 'handshake_future.set_result(None)', 'yield', 'self.connect_to_server(TestServer)', 'yield', 'handshake_future', '@gen_test', 'def', 'test_wait_for_handshake_already_connected(self):', 'handshake_future', '=', 'Future()', 'class', 'TestServer(TCPServer):', '@gen.coroutine', 'def', 'handle_stream(self,', 'stream,', 'address):', 'yield', 'stream.wait_for_handshake()', 'yield', 'stream.wait_for_handshake()', 'handshake_future.set_result(None)', 'yield', 'self.connect_to_server(TestServer)', 'yield', 'handshake_future', 'class', 'TestIOStreamCheckHostname(AsyncTestCase):', 'def', 'setUp(self):', 'super().setUp()', 'self.listener,', 'self.port', '=', 'bind_unused_port()', 'def', 'accept_callback(connection,', 'address):', 'ssl_ctx', '=', 'ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)', 'ssl_ctx.load_cert_chain(', 'os.path.join(os.path.dirname(__file__),', '\"test.crt\"),', 'os.path.join(os.path.dirname(__file__),', '\"test.key\"),', ')', 'connection', '=', 'ssl_ctx.wrap_socket(', 'connection,', 'server_side=True,', 'do_handshake_on_connect=False,', ')', 'SSLIOStream(connection)', 'netutil.add_accept_handler(self.listener,', 'accept_callback)', 'self.client_ssl_ctx', '=', 'ssl.create_default_context(ssl.Purpose.SERVER_AUTH)', 'self.client_ssl_ctx.load_verify_locations(', 'os.path.join(os.path.dirname(__file__),', '\"test.crt\")', ')', 'def', 'tearDown(self):', 'self.io_loop.remove_handler(self.listener.fileno())', 'self.listener.close()', 'super().tearDown()', '@gen_test', 'async', 'def', 'test_match(self):', 'stream', '=', 'SSLIOStream(socket.socket(),', 'ssl_options=self.client_ssl_ctx)', 'await', 'stream.connect(', '(\"127.0.0.1\",', 'self.port),', 'server_hostname=\"foo.example.com\",', ')', 'stream.close()', '@gen_test', 'async', 'def', 'test_no_match(self):', 'stream', '=', 'SSLIOStream(socket.socket(),', 'ssl_options=self.client_ssl_ctx)', 'with', 'ExpectLog(', 'gen_log,', '\".*alert', 'bad', 'certificate\",', 'level=logging.WARNING,', 'required=platform.system()', '!=', '\"Windows\",', '):', 'with', 'self.assertRaises(ssl.SSLCertVerificationError):', 'with', 'ExpectLog(', 'gen_log,', '\".*(certificate', 'verify', 'failed:', 'Hostname', 'mismatch)\",', 'level=logging.WARNING,', '):', 'await', 'stream.connect(', '(\"127.0.0.1\",', 'self.port),', 'server_hostname=\"bar.example.com\",', ')', 'if', 'platform.system()', '!=', '\"Windows\":', 'await', 'asyncio.sleep(0.1)', '@gen_test', 'async', 'def', 'test_check_disabled(self):', 'self.client_ssl_ctx.check_hostname', '=', 'False', 'stream', '=', 'SSLIOStream(socket.socket(),', 'ssl_options=self.client_ssl_ctx)', 'await', 'stream.connect(', '(\"127.0.0.1\",', 'self.port),', 'server_hostname=\"bar.example.com\",', ')', '@skipIfNonUnix', 'class', 'TestPipeIOStream(TestReadWriteMixin,', 'AsyncTestCase):', '@gen.coroutine', 'def', 'make_iostream_pair(self,', '**kwargs):', 'r,', 'w', '=', 'os.pipe()', 'return', 'PipeIOStream(r,', '**kwargs),', 'PipeIOStream(w,', '**kwargs)', '@gen_test', 'def', 'test_pipe_iostream(self):', 'rs,', 'ws', '=', 'yield', 'self.make_iostream_pair()', 'ws.write(b\"hel\")', 'ws.write(b\"lo', 'world\")', 'data', '=', 'yield', 'rs.read_until(b\"', '\")', 'self.assertEqual(data,', 'b\"hello', '\")', 'data', '=', 'yield', 'rs.read_bytes(3)', 'self.assertEqual(data,', 'b\"wor\")', 'ws.close()', 'data', '=', 'yield', 'rs.read_until_close()', 'self.assertEqual(data,', 'b\"ld\")', 'rs.close()', '@gen_test', 'def', 'test_pipe_iostream_big_write(self):', 'rs,', 'ws', '=', 'yield', 'self.make_iostream_pair()', 'NUM_BYTES', '=', '1048576', 'ws.write(b\"1\"', '*', 'NUM_BYTES)', 'data', '=', 'yield', 'rs.read_bytes(NUM_BYTES)', 'self.assertEqual(data,', 'b\"1\"', '*', 'NUM_BYTES)', 'ws.close()', 'rs.close()', 'class', 'TestStreamBuffer(unittest.TestCase):', 'def', 'setUp(self):', 'self.random', '=', 'random.Random(42)', 'def', 'to_bytes(self,', 'b):', 'if', 'isinstance(b,', '(bytes,', 'bytearray)):', 'return', 'bytes(b)', 'elif', 'isinstance(b,', 'memoryview):', 'return', 'b.tobytes()', 'else:', 'raise', 'TypeError(b)', 'def', 'make_streambuffer(self,', 'large_buf_threshold=10):', 'buf', '=', '_StreamBuffer()', 'assert', 'buf._large_buf_threshold', 'buf._large_buf_threshold', '=', 'large_buf_threshold', 'return', 'buf', 'def', 'check_peek(self,', 'buf,', 'expected):', 'size', '=', '1', 'while', 'size', '<', '2', '*', 'len(expected):', 'got', '=', 'self.to_bytes(buf.peek(size))', 'self.assertTrue(got)', 'self.assertLessEqual(len(got),', 'size)', 'self.assertTrue(expected.startswith(got),', '(expected,', 'got))', 'size', '=', '(size', '*', '3', '+', '1)', '//', '2', 'def', 'check_append_all_then_skip_all(self,', 'buf,', 'objs,', 'input_type):', 'self.assertEqual(len(buf),', '0)', 'expected', '=', 'b\"\"', 'for', 'o', 'in', 'objs:', 'expected', '+=', 'o', 'buf.append(input_type(o))', 'self.assertEqual(len(buf),', 'len(expected))', 'self.check_peek(buf,', 'expected)', 'while', 'expected:', 'n', '=', 'self.random.randrange(1,', 'len(expected)', '+', '1)', 'expected', '=', 'expected[n:]', 'buf.advance(n)', 'self.assertEqual(len(buf),', 'len(expected))', 'self.check_peek(buf,', 'expected)', 'self.assertEqual(len(buf),', '0)', 'def', 'test_small(self):', 'objs', '=', '[b\"12\",', 'b\"345\",', 'b\"67\",', 'b\"89a\",', 'b\"bcde\",', 'b\"fgh\",', 'b\"ijklmn\"]', 'buf', '=', 'self.make_streambuffer()', 'self.check_append_all_then_skip_all(buf,', 'objs,', 'bytes)', 'buf', '=', 'self.make_streambuffer()', 'self.check_append_all_then_skip_all(buf,', 'objs,', 'bytearray)', 'buf', '=', 'self.make_streambuffer()', 'self.check_append_all_then_skip_all(buf,', 'objs,', 'memoryview)', 'buf', '=', 'self.make_streambuffer(10)', 'for', 'i', 'in', 'range(9):', 'buf.append(b\"x\")', 'self.assertEqual(len(buf._buffers),', '1)', 'for', 'i', 'in', 'range(9):', 'buf.append(b\"x\")', 'self.assertEqual(len(buf._buffers),', '2)', 'buf.advance(10)', 'self.assertEqual(len(buf._buffers),', '1)', 'buf.advance(8)', 'self.assertEqual(len(buf._buffers),', '0)', 'self.assertEqual(len(buf),', '0)', 'def', 'test_large(self):', 'objs', '=', '[', 'b\"12\"', '*', '5,', 'b\"345\"', '*', '2,', 'b\"67\"', '*', '20,', 'b\"89a\"', '*', '12,', 'b\"bcde\"', '*', '1,', 'b\"fgh\"', '*', '7,', 'b\"ijklmn\"', '*', '2,', ']', 'buf', '=', 'self.make_streambuffer()', 'self.check_append_all_then_skip_all(buf,', 'objs,', 'bytes)', 'buf', '=', 'self.make_streambuffer()', 'self.check_append_all_then_skip_all(buf,', 'objs,', 'bytearray)', 'buf', '=', 'self.make_streambuffer()', 'self.check_append_all_then_skip_all(buf,', 'objs,', 'memoryview)', 'buf', '=', 'self.make_streambuffer(10)', 'for', 'i', 'in', 'range(3):', 'buf.append(b\"x\"', '*', '11)', 'self.assertEqual(len(buf._buffers),', '3)', 'buf.append(b\"y\")', 'self.assertEqual(len(buf._buffers),', '4)', 'buf.append(b\"z\")', 'self.assertEqual(len(buf._buffers),', '4)', 'buf.advance(33)', 'self.assertEqual(len(buf._buffers),', '1)', 'buf.advance(2)', 'self.assertEqual(len(buf._buffers),', '0)', 'self.assertEqual(len(buf),', '0)']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/locale_test.py",
        "vector": "['import', 'datetime', 'import', 'os', 'import', 'shutil', 'import', 'tempfile', 'import', 'unittest', 'import', 'tornado.locale', 'from', 'tornado.escape', 'import', 'utf8,', 'to_unicode', 'from', 'tornado.util', 'import', 'unicode_type', 'class', 'TranslationLoaderTest(unittest.TestCase):', 'SAVE_VARS', '=', '[\"_translations\",', '\"_supported_locales\",', '\"_use_gettext\"]', 'def', 'clear_locale_cache(self):', 'tornado.locale.Locale._cache', '=', '{}', 'def', 'setUp(self):', 'self.saved', '=', '{}', 'for', 'var', 'in', 'TranslationLoaderTest.SAVE_VARS:', 'self.saved[var]', '=', 'getattr(tornado.locale,', 'var)', 'self.clear_locale_cache()', 'def', 'tearDown(self):', 'for', 'k,', 'v', 'in', 'self.saved.items():', 'setattr(tornado.locale,', 'k,', 'v)', 'self.clear_locale_cache()', 'def', 'test_csv(self):', 'tornado.locale.load_translations(', 'os.path.join(os.path.dirname(__file__),', '\"csv_translations\")', ')', 'locale', '=', 'tornado.locale.get(\"fr_FR\")', 'self.assertTrue(isinstance(locale,', 'tornado.locale.CSVLocale))', 'self.assertEqual(locale.translate(\"school\"),', '\"\\\\u00e9cole\")', 'def', 'test_csv_bom(self):', 'with', 'open(', 'os.path.join(os.path.dirname(__file__),', '\"csv_translations\",', '\"fr_FR.csv\"),', '\"rb\",', ')', 'as', 'f:', 'char_data', '=', 'to_unicode(f.read())', 'for', 'encoding', 'in', '[\"utf-8-sig\",', '\"utf-16\"]:', 'tmpdir', '=', 'tempfile.mkdtemp()', 'try:', 'with', 'open(os.path.join(tmpdir,', '\"fr_FR.csv\"),', '\"wb\")', 'as', 'f:', 'f.write(char_data.encode(encoding))', 'tornado.locale.load_translations(tmpdir)', 'locale', '=', 'tornado.locale.get(\"fr_FR\")', 'self.assertIsInstance(locale,', 'tornado.locale.CSVLocale)', 'self.assertEqual(locale.translate(\"school\"),', '\"\\\\u00e9cole\")', 'finally:', 'shutil.rmtree(tmpdir)', 'def', 'test_gettext(self):', 'tornado.locale.load_gettext_translations(', 'os.path.join(os.path.dirname(__file__),', '\"gettext_translations\"),', '\"tornado_test\",', ')', 'locale', '=', 'tornado.locale.get(\"fr_FR\")', 'self.assertTrue(isinstance(locale,', 'tornado.locale.GettextLocale))', 'self.assertEqual(locale.translate(\"school\"),', '\"\\\\u00e9cole\")', 'self.assertEqual(locale.pgettext(\"law\",', '\"right\"),', '\"le', 'droit\")', 'self.assertEqual(locale.pgettext(\"good\",', '\"right\"),', '\"le', 'bien\")', 'self.assertEqual(locale.pgettext(\"organization\",', '\"club\",', '\"clubs\",', '1),', '\"le', 'club\")', 'self.assertEqual(', 'locale.pgettext(\"organization\",', '\"club\",', '\"clubs\",', '2),', '\"les', 'clubs\"', ')', 'self.assertEqual(locale.pgettext(\"stick\",', '\"club\",', '\"clubs\",', '1),', '\"le', 'b\\\\xe2ton\")', 'self.assertEqual(locale.pgettext(\"stick\",', '\"club\",', '\"clubs\",', '2),', '\"les', 'b\\\\xe2tons\")', 'class', 'LocaleDataTest(unittest.TestCase):', 'def', 'test_non_ascii_name(self):', 'name', '=', 'tornado.locale.LOCALE_NAMES[\"es_LA\"][\"name\"]', 'self.assertTrue(isinstance(name,', 'unicode_type))', 'self.assertEqual(name,', '\"Espa\\\\u00f1ol\")', 'self.assertEqual(utf8(name),', 'b\"Espa\\\\xc3\\\\xb1ol\")', 'class', 'EnglishTest(unittest.TestCase):', 'def', 'test_format_date(self):', 'locale', '=', 'tornado.locale.get(\"en_US\")', 'date', '=', 'datetime.datetime(2013,', '4,', '28,', '18,', '35)', 'self.assertEqual(', 'locale.format_date(date,', 'full_format=True),', '\"April', '28,', '2013', 'at', '6:35', 'pm\"', ')', 'aware_dt', '=', 'datetime.datetime.now(datetime.timezone.utc)', 'naive_dt', '=', 'aware_dt.replace(tzinfo=None)', 'for', 'name,', 'now', 'in', '{\"aware\":', 'aware_dt,', '\"naive\":', 'naive_dt}.items():', 'with', 'self.subTest(dt=name):', 'self.assertEqual(', 'locale.format_date(', 'now', '-', 'datetime.timedelta(seconds=2),', 'full_format=False', '),', '\"2', 'seconds', 'ago\",', ')', 'self.assertEqual(', 'locale.format_date(', 'now', '-', 'datetime.timedelta(minutes=2),', 'full_format=False', '),', '\"2', 'minutes', 'ago\",', ')', 'self.assertEqual(', 'locale.format_date(', 'now', '-', 'datetime.timedelta(hours=2),', 'full_format=False', '),', '\"2', 'hours', 'ago\",', ')', 'self.assertEqual(', 'locale.format_date(', 'now', '-', 'datetime.timedelta(days=1),', 'full_format=False,', 'shorter=True,', '),', '\"yesterday\",', ')', 'date', '=', 'now', '-', 'datetime.timedelta(days=2)', 'self.assertEqual(', 'locale.format_date(date,', 'full_format=False,', 'shorter=True),', 'locale._weekdays[date.weekday()],', ')', 'date', '=', 'now', '-', 'datetime.timedelta(days=300)', 'self.assertEqual(', 'locale.format_date(date,', 'full_format=False,', 'shorter=True),', '\"%s', '%d\"', '%', '(locale._months[date.month', '-', '1],', 'date.day),', ')', 'date', '=', 'now', '-', 'datetime.timedelta(days=500)', 'self.assertEqual(', 'locale.format_date(date,', 'full_format=False,', 'shorter=True),', '\"%s', '%d,', '%d\"', '%', '(locale._months[date.month', '-', '1],', 'date.day,', 'date.year),', ')', 'def', 'test_friendly_number(self):', 'locale', '=', 'tornado.locale.get(\"en_US\")', 'self.assertEqual(locale.friendly_number(1000000),', '\"1,000,000\")', 'def', 'test_list(self):', 'locale', '=', 'tornado.locale.get(\"en_US\")', 'self.assertEqual(locale.list([]),', '\"\")', 'self.assertEqual(locale.list([\"A\"]),', '\"A\")', 'self.assertEqual(locale.list([\"A\",', '\"B\"]),', '\"A', 'and', 'B\")', 'self.assertEqual(locale.list([\"A\",', '\"B\",', '\"C\"]),', '\"A,', 'B', 'and', 'C\")', 'def', 'test_format_day(self):', 'locale', '=', 'tornado.locale.get(\"en_US\")', 'date', '=', 'datetime.datetime(2013,', '4,', '28,', '18,', '35)', 'self.assertEqual(locale.format_day(date=date,', 'dow=True),', '\"Sunday,', 'April', '28\")', 'self.assertEqual(locale.format_day(date=date,', 'dow=False),', '\"April', '28\")']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/locks_test.py",
        "vector": "['import', 'asyncio', 'from', 'datetime', 'import', 'timedelta', 'import', 'typing', 'import', 'unittest', 'from', 'tornado', 'import', 'gen,', 'locks', 'from', 'tornado.gen', 'import', 'TimeoutError', 'from', 'tornado.testing', 'import', 'gen_test,', 'AsyncTestCase', 'class', 'ConditionTest(AsyncTestCase):', 'def', 'setUp(self):', 'super().setUp()', 'self.history', '=', '[]', 'def', 'record_done(self,', 'future,', 'key):', 'def', 'callback(_):', 'if', 'not', 'future.result():', 'self.history.append(\"timeout\")', 'else:', 'self.history.append(key)', 'future.add_done_callback(callback)', 'def', 'loop_briefly(self):', 'self.io_loop.add_callback(self.stop)', 'self.wait()', 'def', 'test_repr(self):', 'c', '=', 'locks.Condition()', 'self.assertIn(\"Condition\",', 'repr(c))', 'self.assertNotIn(\"waiters\",', 'repr(c))', 'c.wait()', 'self.assertIn(\"waiters\",', 'repr(c))', '@gen_test', 'def', 'test_notify(self):', 'c', '=', 'locks.Condition()', 'self.io_loop.call_later(0.01,', 'c.notify)', 'yield', 'c.wait()', 'def', 'test_notify_1(self):', 'c', '=', 'locks.Condition()', 'self.record_done(c.wait(),', '\"wait1\")', 'self.record_done(c.wait(),', '\"wait2\")', 'c.notify(1)', 'self.loop_briefly()', 'self.history.append(\"notify1\")', 'c.notify(1)', 'self.loop_briefly()', 'self.history.append(\"notify2\")', 'self.assertEqual([\"wait1\",', '\"notify1\",', '\"wait2\",', '\"notify2\"],', 'self.history)', 'def', 'test_notify_n(self):', 'c', '=', 'locks.Condition()', 'for', 'i', 'in', 'range(6):', 'self.record_done(c.wait(),', 'i)', 'c.notify(3)', 'self.loop_briefly()', 'self.assertEqual(list(range(3)),', 'self.history)', 'c.notify(1)', 'self.loop_briefly()', 'self.assertEqual(list(range(4)),', 'self.history)', 'c.notify(2)', 'self.loop_briefly()', 'self.assertEqual(list(range(6)),', 'self.history)', 'def', 'test_notify_all(self):', 'c', '=', 'locks.Condition()', 'for', 'i', 'in', 'range(4):', 'self.record_done(c.wait(),', 'i)', 'c.notify_all()', 'self.loop_briefly()', 'self.history.append(\"notify_all\")', 'self.assertEqual(list(range(4))', '+', '[\"notify_all\"],', 'self.history)', '@gen_test', 'def', 'test_wait_timeout(self):', 'c', '=', 'locks.Condition()', 'wait', '=', 'c.wait(timedelta(seconds=0.01))', 'self.io_loop.call_later(0.02,', 'c.notify)', 'yield', 'gen.sleep(0.03)', 'self.assertFalse((yield', 'wait))', '@gen_test', 'def', 'test_wait_timeout_preempted(self):', 'c', '=', 'locks.Condition()', 'self.io_loop.call_later(0.01,', 'c.notify)', 'wait', '=', 'c.wait(timedelta(seconds=0.02))', 'yield', 'gen.sleep(0.03)', 'yield', 'wait', '@gen_test', 'def', 'test_notify_n_with_timeout(self):', 'c', '=', 'locks.Condition()', 'self.record_done(c.wait(),', '0)', 'self.record_done(c.wait(timedelta(seconds=0.01)),', '1)', 'self.record_done(c.wait(),', '2)', 'self.record_done(c.wait(),', '3)', 'yield', 'gen.sleep(0.02)', 'self.assertEqual([\"timeout\"],', 'self.history)', 'c.notify(2)', 'yield', 'gen.sleep(0.01)', 'self.assertEqual([\"timeout\",', '0,', '2],', 'self.history)', 'self.assertEqual([\"timeout\",', '0,', '2],', 'self.history)', 'c.notify()', 'yield', 'self.assertEqual([\"timeout\",', '0,', '2,', '3],', 'self.history)', '@gen_test', 'def', 'test_notify_all_with_timeout(self):', 'c', '=', 'locks.Condition()', 'self.record_done(c.wait(),', '0)', 'self.record_done(c.wait(timedelta(seconds=0.01)),', '1)', 'self.record_done(c.wait(),', '2)', 'yield', 'gen.sleep(0.02)', 'self.assertEqual([\"timeout\"],', 'self.history)', 'c.notify_all()', 'yield', 'self.assertEqual([\"timeout\",', '0,', '2],', 'self.history)', '@gen_test', 'def', 'test_nested_notify(self):', 'c', '=', 'locks.Condition()', 'futures', '=', '[asyncio.ensure_future(c.wait())', 'for', '_', 'in', 'range(3)]', 'futures[1].add_done_callback(lambda', '_:', 'c.notify())', 'c.notify(2)', 'yield', 'self.assertTrue(all(f.done()', 'for', 'f', 'in', 'futures))', '@gen_test', 'def', 'test_garbage_collection(self):', 'c', '=', 'locks.Condition()', 'for', '_', 'in', 'range(101):', 'c.wait(timedelta(seconds=0.01))', 'future', '=', 'asyncio.ensure_future(c.wait())', 'self.assertEqual(102,', 'len(c._waiters))', 'yield', 'gen.sleep(0.02)', 'self.assertEqual(1,', 'len(c._waiters))', 'self.assertFalse(future.done())', 'c.notify()', 'self.assertTrue(future.done())', 'class', 'EventTest(AsyncTestCase):', 'def', 'test_repr(self):', 'event', '=', 'locks.Event()', 'self.assertTrue(\"clear\"', 'in', 'str(event))', 'self.assertFalse(\"set\"', 'in', 'str(event))', 'event.set()', 'self.assertFalse(\"clear\"', 'in', 'str(event))', 'self.assertTrue(\"set\"', 'in', 'str(event))', 'def', 'test_event(self):', 'e', '=', 'locks.Event()', 'future_0', '=', 'asyncio.ensure_future(e.wait())', 'e.set()', 'future_1', '=', 'asyncio.ensure_future(e.wait())', 'e.clear()', 'future_2', '=', 'asyncio.ensure_future(e.wait())', 'self.assertTrue(future_0.done())', 'self.assertTrue(future_1.done())', 'self.assertFalse(future_2.done())', '@gen_test', 'def', 'test_event_timeout(self):', 'e', '=', 'locks.Event()', 'with', 'self.assertRaises(TimeoutError):', 'yield', 'e.wait(timedelta(seconds=0.01))', 'self.io_loop.add_timeout(timedelta(seconds=0.01),', 'e.set)', 'yield', 'e.wait(timedelta(seconds=1))', 'def', 'test_event_set_multiple(self):', 'e', '=', 'locks.Event()', 'e.set()', 'e.set()', 'self.assertTrue(e.is_set())', 'def', 'test_event_wait_clear(self):', 'e', '=', 'locks.Event()', 'f0', '=', 'asyncio.ensure_future(e.wait())', 'e.clear()', 'f1', '=', 'asyncio.ensure_future(e.wait())', 'e.set()', 'self.assertTrue(f0.done())', 'self.assertTrue(f1.done())', 'class', 'SemaphoreTest(AsyncTestCase):', 'def', 'test_negative_value(self):', 'self.assertRaises(ValueError,', 'locks.Semaphore,', 'value=-1)', 'def', 'test_repr(self):', 'sem', '=', 'locks.Semaphore()', 'self.assertIn(\"Semaphore\",', 'repr(sem))', 'self.assertIn(\"unlocked,value:1\",', 'repr(sem))', 'sem.acquire()', 'self.assertIn(\"locked\",', 'repr(sem))', 'self.assertNotIn(\"waiters\",', 'repr(sem))', 'sem.acquire()', 'self.assertIn(\"waiters\",', 'repr(sem))', 'def', 'test_acquire(self):', 'sem', '=', 'locks.Semaphore()', 'f0', '=', 'asyncio.ensure_future(sem.acquire())', 'self.assertTrue(f0.done())', 'f1', '=', 'asyncio.ensure_future(sem.acquire())', 'self.assertFalse(f1.done())', 'f2', '=', 'asyncio.ensure_future(sem.acquire())', 'sem.release()', 'self.assertTrue(f1.done())', 'self.assertFalse(f2.done())', 'sem.release()', 'self.assertTrue(f2.done())', 'sem.release()', 'self.assertTrue(asyncio.ensure_future(sem.acquire()).done())', 'self.assertEqual(0,', 'len(sem._waiters))', '@gen_test', 'def', 'test_acquire_timeout(self):', 'sem', '=', 'locks.Semaphore(2)', 'yield', 'sem.acquire()', 'yield', 'sem.acquire()', 'acquire', '=', 'sem.acquire(timedelta(seconds=0.01))', 'self.io_loop.call_later(0.02,', 'sem.release)', 'yield', 'gen.sleep(0.3)', 'with', 'self.assertRaises(gen.TimeoutError):', 'yield', 'acquire', 'sem.acquire()', 'f', '=', 'asyncio.ensure_future(sem.acquire())', 'self.assertFalse(f.done())', 'sem.release()', 'self.assertTrue(f.done())', '@gen_test', 'def', 'test_acquire_timeout_preempted(self):', 'sem', '=', 'locks.Semaphore(1)', 'yield', 'sem.acquire()', 'self.io_loop.call_later(0.01,', 'sem.release)', 'acquire', '=', 'sem.acquire(timedelta(seconds=0.02))', 'yield', 'gen.sleep(0.03)', 'yield', 'acquire', 'def', 'test_release_unacquired(self):', 'sem', '=', 'locks.Semaphore()', 'sem.release()', 'sem.release()', 'self.assertTrue(asyncio.ensure_future(sem.acquire()).done())', 'self.assertTrue(asyncio.ensure_future(sem.acquire()).done())', 'self.assertTrue(asyncio.ensure_future(sem.acquire()).done())', 'self.assertFalse(asyncio.ensure_future(sem.acquire()).done())', '@gen_test', 'def', 'test_garbage_collection(self):', 'sem', '=', 'locks.Semaphore(value=0)', 'futures', '=', '[', 'asyncio.ensure_future(sem.acquire(timedelta(seconds=0.01)))', 'for', '_', 'in', 'range(101)', ']', 'future', '=', 'asyncio.ensure_future(sem.acquire())', 'self.assertEqual(102,', 'len(sem._waiters))', 'yield', 'gen.sleep(0.02)', 'self.assertEqual(1,', 'len(sem._waiters))', 'self.assertFalse(future.done())', 'sem.release()', 'self.assertTrue(future.done())', 'for', 'future', 'in', 'futures:', 'self.assertRaises(TimeoutError,', 'future.result)', 'class', 'SemaphoreContextManagerTest(AsyncTestCase):', '@gen_test', 'def', 'test_context_manager(self):', 'sem', '=', 'locks.Semaphore()', 'with', '(yield', 'sem.acquire())', 'as', 'yielded:', 'self.assertTrue(yielded', 'is', 'None)', 'self.assertTrue(asyncio.ensure_future(sem.acquire()).done())', '@gen_test', 'def', 'test_context_manager_async_await(self):', 'sem', '=', 'locks.Semaphore()', 'async', 'def', 'f():', 'async', 'with', 'sem', 'as', 'yielded:', 'self.assertTrue(yielded', 'is', 'None)', 'yield', 'f()', 'self.assertTrue(asyncio.ensure_future(sem.acquire()).done())', '@gen_test', 'def', 'test_context_manager_exception(self):', 'sem', '=', 'locks.Semaphore()', 'with', 'self.assertRaises(ZeroDivisionError):', 'with', '(yield', 'sem.acquire()):', '1', '/', '0', 'self.assertTrue(asyncio.ensure_future(sem.acquire()).done())', '@gen_test', 'def', 'test_context_manager_timeout(self):', 'sem', '=', 'locks.Semaphore()', 'with', '(yield', 'sem.acquire(timedelta(seconds=0.01))):', 'pass', 'self.assertTrue(asyncio.ensure_future(sem.acquire()).done())', '@gen_test', 'def', 'test_context_manager_timeout_error(self):', 'sem', '=', 'locks.Semaphore(value=0)', 'with', 'self.assertRaises(gen.TimeoutError):', 'with', '(yield', 'sem.acquire(timedelta(seconds=0.01))):', 'pass', 'self.assertFalse(asyncio.ensure_future(sem.acquire()).done())', '@gen_test', 'def', 'test_context_manager_contended(self):', 'sem', '=', 'locks.Semaphore()', 'history', '=', '[]', '@gen.coroutine', 'def', 'f(index):', 'with', '(yield', 'sem.acquire()):', 'history.append(\"acquired', '%d\"', '%', 'index)', 'yield', 'gen.sleep(0.01)', 'history.append(\"release', '%d\"', '%', 'index)', 'yield', '[f(i)', 'for', 'i', 'in', 'range(2)]', 'expected_history', '=', '[]', 'for', 'i', 'in', 'range(2):', 'expected_history.extend([\"acquired', '%d\"', '%', 'i,', '\"release', '%d\"', '%', 'i])', 'self.assertEqual(expected_history,', 'history)', '@gen_test', 'def', 'test_yield_sem(self):', 'with', 'self.assertRaises(gen.BadYieldError):', 'with', '(yield', 'locks.Semaphore()):', 'pass', 'def', 'test_context_manager_misuse(self):', 'with', 'self.assertRaises(RuntimeError):', 'with', 'locks.Semaphore():', 'pass', 'class', 'BoundedSemaphoreTest(AsyncTestCase):', 'def', 'test_release_unacquired(self):', 'sem', '=', 'locks.BoundedSemaphore()', 'self.assertRaises(ValueError,', 'sem.release)', 'sem.acquire()', 'future', '=', 'asyncio.ensure_future(sem.acquire())', 'self.assertFalse(future.done())', 'sem.release()', 'self.assertTrue(future.done())', 'sem.release()', 'self.assertRaises(ValueError,', 'sem.release)', 'class', 'LockTests(AsyncTestCase):', 'def', 'test_repr(self):', 'lock', '=', 'locks.Lock()', 'repr(lock)', 'lock.acquire()', 'repr(lock)', 'def', 'test_acquire_release(self):', 'lock', '=', 'locks.Lock()', 'self.assertTrue(asyncio.ensure_future(lock.acquire()).done())', 'future', '=', 'asyncio.ensure_future(lock.acquire())', 'self.assertFalse(future.done())', 'lock.release()', 'self.assertTrue(future.done())', '@gen_test', 'def', 'test_acquire_fifo(self):', 'lock', '=', 'locks.Lock()', 'self.assertTrue(asyncio.ensure_future(lock.acquire()).done())', 'N', '=', '5', 'history', '=', '[]', '@gen.coroutine', 'def', 'f(idx):', 'with', '(yield', 'lock.acquire()):', 'history.append(idx)', 'futures', '=', '[f(i)', 'for', 'i', 'in', 'range(N)]', 'self.assertFalse(any(future.done()', 'for', 'future', 'in', 'futures))', 'lock.release()', 'yield', 'futures', 'self.assertEqual(list(range(N)),', 'history)', '@gen_test', 'def', 'test_acquire_fifo_async_with(self):', 'lock', '=', 'locks.Lock()', 'self.assertTrue(asyncio.ensure_future(lock.acquire()).done())', 'N', '=', '5', 'history', '=', '[]', 'async', 'def', 'f(idx):', 'async', 'with', 'lock:', 'history.append(idx)', 'futures', '=', '[f(i)', 'for', 'i', 'in', 'range(N)]', 'lock.release()', 'yield', 'futures', 'self.assertEqual(list(range(N)),', 'history)', '@gen_test', 'def', 'test_acquire_timeout(self):', 'lock', '=', 'locks.Lock()', 'lock.acquire()', 'with', 'self.assertRaises(gen.TimeoutError):', 'yield', 'lock.acquire(timeout=timedelta(seconds=0.01))', 'self.assertFalse(asyncio.ensure_future(lock.acquire()).done())', 'def', 'test_multi_release(self):', 'lock', '=', 'locks.Lock()', 'self.assertRaises(RuntimeError,', 'lock.release)', 'lock.acquire()', 'lock.release()', 'self.assertRaises(RuntimeError,', 'lock.release)', '@gen_test', 'def', 'test_yield_lock(self):', 'with', 'self.assertRaises(gen.BadYieldError):', 'with', '(yield', 'locks.Lock()):', 'pass', 'def', 'test_context_manager_misuse(self):', 'with', 'self.assertRaises(RuntimeError):', 'with', 'locks.Lock():', 'pass', 'if', '__name__', '==', '\"__main__\":', 'unittest.main()']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/log_test.py",
        "vector": "['import', 'contextlib', 'import', 'glob', 'import', 'logging', 'import', 'os', 'import', 're', 'import', 'subprocess', 'import', 'sys', 'import', 'tempfile', 'import', 'unittest', 'import', 'warnings', 'from', 'tornado.escape', 'import', 'utf8', 'from', 'tornado.log', 'import', 'LogFormatter,', 'define_logging_options,', 'enable_pretty_logging', 'from', 'tornado.options', 'import', 'OptionParser', 'from', 'tornado.util', 'import', 'basestring_type', '@contextlib.contextmanager', 'def', 'ignore_bytes_warning():', 'with', 'warnings.catch_warnings():', 'warnings.simplefilter(\"ignore\",', 'category=BytesWarning)', 'yield', 'class', 'LogFormatterTest(unittest.TestCase):', 'LINE_RE', '=', 're.compile(', 'b\"(?s)\\\\x01\\\\\\\\[E', '[0-9]{6}', '[0-9]{2}:[0-9]{2}:[0-9]{2}', 'log_test:[0-9]+\\\\\\\\]\\\\x02', '(.*)\"', ')', 'def', 'setUp(self):', 'self.formatter', '=', 'LogFormatter(color=False)', 'self.formatter._colors', '=', '{logging.ERROR:', '\"\\\\u0001\"}', 'self.formatter._normal', '=', '\"\\\\u0002\"', 'self.logger', '=', 'logging.Logger(\"LogFormatterTest\")', 'self.logger.propagate', '=', 'False', 'self.tempdir', '=', 'tempfile.mkdtemp()', 'self.filename', '=', 'os.path.join(self.tempdir,', '\"log.out\")', 'self.handler', '=', 'self.make_handler(self.filename)', 'self.handler.setFormatter(self.formatter)', 'self.logger.addHandler(self.handler)', 'def', 'tearDown(self):', 'self.handler.close()', 'os.unlink(self.filename)', 'os.rmdir(self.tempdir)', 'def', 'make_handler(self,', 'filename):', 'return', 'logging.FileHandler(filename,', 'encoding=\"utf-8\")', 'def', 'get_output(self):', 'with', 'open(self.filename,', '\"rb\")', 'as', 'f:', 'line', '=', 'f.read().strip()', 'm', '=', 'LogFormatterTest.LINE_RE.match(line)', 'if', 'm:', 'return', 'm.group(1)', 'else:', 'raise', 'Exception(\"output', \"didn't\", 'match', 'regex:', '%r\"', '%', 'line)', 'def', 'test_basic_logging(self):', 'self.logger.error(\"foo\")', 'self.assertEqual(self.get_output(),', 'b\"foo\")', 'def', 'test_bytes_logging(self):', 'with', 'ignore_bytes_warning():', 'self.logger.error(b\"\\\\xe9\")', 'self.assertEqual(self.get_output(),', 'utf8(repr(b\"\\\\xe9\")))', 'def', 'test_utf8_logging(self):', 'with', 'ignore_bytes_warning():', 'self.logger.error(\"\\\\u00e9\".encode(\"utf8\"))', 'if', 'issubclass(bytes,', 'basestring_type):', 'self.assertEqual(self.get_output(),', 'utf8(\"\\\\u00e9\"))', 'else:', 'self.assertEqual(self.get_output(),', 'utf8(repr(utf8(\"\\\\u00e9\"))))', 'def', 'test_bytes_exception_logging(self):', 'try:', 'raise', 'Exception(b\"\\\\xe9\")', 'except', 'Exception:', 'self.logger.exception(\"caught', 'exception\")', 'output', '=', 'self.get_output()', 'self.assertRegex(output,', 'rb\"Exception.*\\\\\\\\xe9\")', 'self.assertNotIn(rb\"\\\\n\",', 'output)', 'def', 'test_unicode_logging(self):', 'self.logger.error(\"\\\\u00e9\")', 'self.assertEqual(self.get_output(),', 'utf8(\"\\\\u00e9\"))', 'class', 'EnablePrettyLoggingTest(unittest.TestCase):', 'def', 'setUp(self):', 'super().setUp()', 'self.options', '=', 'OptionParser()', 'define_logging_options(self.options)', 'self.logger', '=', 'logging.Logger(\"tornado.test.log_test.EnablePrettyLoggingTest\")', 'self.logger.propagate', '=', 'False', 'def', 'test_log_file(self):', 'tmpdir', '=', 'tempfile.mkdtemp()', 'try:', 'self.options.log_file_prefix', '=', 'tmpdir', '+', '\"/test_log\"', 'enable_pretty_logging(options=self.options,', 'logger=self.logger)', 'self.assertEqual(1,', 'len(self.logger.handlers))', 'self.logger.error(\"hello\")', 'self.logger.handlers[0].flush()', 'filenames', '=', 'glob.glob(tmpdir', '+', '\"/test_log*\")', 'self.assertEqual(1,', 'len(filenames))', 'with', 'open(filenames[0],', 'encoding=\"utf-8\")', 'as', 'f:', 'self.assertRegex(f.read(),', 'r\"^\\\\[E', '[^]]*\\\\]', 'hello$\")', 'finally:', 'for', 'handler', 'in', 'self.logger.handlers:', 'handler.flush()', 'handler.close()', 'for', 'filename', 'in', 'glob.glob(tmpdir', '+', '\"/test_log*\"):', 'os.unlink(filename)', 'os.rmdir(tmpdir)', 'def', 'test_log_file_with_timed_rotating(self):', 'tmpdir', '=', 'tempfile.mkdtemp()', 'try:', 'self.options.log_file_prefix', '=', 'tmpdir', '+', '\"/test_log\"', 'self.options.log_rotate_mode', '=', '\"time\"', 'enable_pretty_logging(options=self.options,', 'logger=self.logger)', 'self.logger.error(\"hello\")', 'self.logger.handlers[0].flush()', 'filenames', '=', 'glob.glob(tmpdir', '+', '\"/test_log*\")', 'self.assertEqual(1,', 'len(filenames))', 'with', 'open(filenames[0],', 'encoding=\"utf-8\")', 'as', 'f:', 'self.assertRegex(f.read(),', 'r\"^\\\\[E', '[^]]*\\\\]', 'hello$\")', 'finally:', 'for', 'handler', 'in', 'self.logger.handlers:', 'handler.flush()', 'handler.close()', 'for', 'filename', 'in', 'glob.glob(tmpdir', '+', '\"/test_log*\"):', 'os.unlink(filename)', 'os.rmdir(tmpdir)', 'def', 'test_wrong_rotate_mode_value(self):', 'try:', 'self.options.log_file_prefix', '=', '\"some_path\"', 'self.options.log_rotate_mode', '=', '\"wrong_mode\"', 'self.assertRaises(', 'ValueError,', 'enable_pretty_logging,', 'options=self.options,', 'logger=self.logger,', ')', 'finally:', 'for', 'handler', 'in', 'self.logger.handlers:', 'handler.flush()', 'handler.close()', 'class', 'LoggingOptionTest(unittest.TestCase):', 'def', 'logs_present(self,', 'statement,', 'args=None):', 'IMPORT', '=', '\"from', 'tornado.options', 'import', 'options,', 'parse_command_line\"', 'LOG_INFO', '=', \"'import\", 'logging;', 'logging.info(\"hello\")\\'', 'program', '=', '\";\".join([IMPORT,', 'statement,', 'LOG_INFO])', 'proc', '=', 'subprocess.Popen(', '[sys.executable,', '\"-c\",', 'program]', '+', '(args', 'or', '[]),', 'stdout=subprocess.PIPE,', 'stderr=subprocess.STDOUT,', ')', 'stdout,', 'stderr', '=', 'proc.communicate()', 'self.assertEqual(proc.returncode,', '0,', '\"process', 'failed:', '%r\"', '%', 'stdout)', 'return', 'b\"hello\"', 'in', 'stdout', 'def', 'test_default(self):', 'self.assertFalse(self.logs_present(\"pass\"))', 'def', 'test_tornado_default(self):', 'self.assertTrue(self.logs_present(\"parse_command_line()\"))', 'def', 'test_disable_command_line(self):', 'self.assertFalse(self.logs_present(\"parse_command_line()\",', '[\"--logging=none\"]))', 'def', 'test_disable_command_line_case_insensitive(self):', 'self.assertFalse(self.logs_present(\"parse_command_line()\",', '[\"--logging=None\"]))', 'def', 'test_disable_code_string(self):', 'self.assertFalse(', \"self.logs_present('options.logging\", '=', '\"none\";', \"parse_command_line()')\", ')', 'def', 'test_disable_code_none(self):', 'self.assertFalse(', 'self.logs_present(\"options.logging', '=', 'None;', 'parse_command_line()\")', ')', 'def', 'test_disable_override(self):', 'self.assertTrue(', 'self.logs_present(', '\"options.logging', '=', 'None;', 'parse_command_line()\",', '[\"--logging=info\"]', ')', ')']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/netutil_test.py",
        "vector": "['import', 'errno', 'import', 'os', 'import', 'signal', 'import', 'socket', 'from', 'subprocess', 'import', 'Popen', 'import', 'sys', 'import', 'time', 'import', 'unittest', 'from', 'tornado.netutil', 'import', '(', 'BlockingResolver,', 'OverrideResolver,', 'ThreadedResolver,', 'is_valid_ip,', 'bind_sockets,', ')', 'from', 'tornado.testing', 'import', 'AsyncTestCase,', 'gen_test,', 'bind_unused_port', 'from', 'tornado.test.util', 'import', 'skipIfNoNetwork', 'import', 'typing', 'if', 'typing.TYPE_CHECKING:', 'from', 'typing', 'import', 'List', 'try:', 'import', 'pycares', 'except', 'ImportError:', 'pycares', '=', 'None', 'else:', 'from', 'tornado.platform.caresresolver', 'import', 'CaresResolver', 'try:', 'import', 'twisted', 'import', 'twisted.names', 'except', 'ImportError:', 'twisted', '=', 'None', 'else:', 'from', 'tornado.platform.twisted', 'import', 'TwistedResolver', 'class', '_ResolverTestMixin(object):', 'resolver', '=', 'None', '@gen_test', 'def', 'test_localhost(self:', 'typing.Any):', 'addrinfo', '=', 'yield', 'self.resolver.resolve(\"localhost\",', '80,', 'socket.AF_UNSPEC)', 'self.assertTrue(', '((socket.AF_INET,', '(\"127.0.0.1\",', '80))', 'in', 'addrinfo)', 'or', '((socket.AF_INET6,', '(\"::1\",', '80))', 'in', 'addrinfo),', 'f\"loopback', 'address', 'not', 'found', 'in', '{addrinfo}\",', ')', 'class', '_ResolverErrorTestMixin(object):', 'resolver', '=', 'None', '@gen_test', 'def', 'test_bad_host(self:', 'typing.Any):', 'with', 'self.assertRaises(IOError):', 'yield', 'self.resolver.resolve(\"an', 'invalid', 'domain\",', '80,', 'socket.AF_UNSPEC)', 'def', '_failing_getaddrinfo(*args):', 'raise', 'socket.gaierror(errno.EIO,', '\"mock:', 'lookup', 'failed\")', '@skipIfNoNetwork', 'class', 'BlockingResolverTest(AsyncTestCase,', '_ResolverTestMixin):', 'def', 'setUp(self):', 'super().setUp()', 'self.resolver', '=', 'BlockingResolver()', 'class', 'BlockingResolverErrorTest(AsyncTestCase,', '_ResolverErrorTestMixin):', 'def', 'setUp(self):', 'super().setUp()', 'self.resolver', '=', 'BlockingResolver()', 'self.real_getaddrinfo', '=', 'socket.getaddrinfo', 'socket.getaddrinfo', '=', '_failing_getaddrinfo', 'def', 'tearDown(self):', 'socket.getaddrinfo', '=', 'self.real_getaddrinfo', 'super().tearDown()', 'class', 'OverrideResolverTest(AsyncTestCase,', '_ResolverTestMixin):', 'def', 'setUp(self):', 'super().setUp()', 'mapping', '=', '{', '(\"google.com\",', '80):', '(\"1.2.3.4\",', '80),', '(\"google.com\",', '80,', 'socket.AF_INET):', '(\"1.2.3.4\",', '80),', '(\"google.com\",', '80,', 'socket.AF_INET6):', '(', '\"2a02:6b8:7c:40c:c51e:495f:e23a:3\",', '80,', '),', '}', 'self.resolver', '=', 'OverrideResolver(BlockingResolver(),', 'mapping)', '@gen_test', 'def', 'test_resolve_multiaddr(self):', 'result', '=', 'yield', 'self.resolver.resolve(\"google.com\",', '80,', 'socket.AF_INET)', 'self.assertIn((socket.AF_INET,', '(\"1.2.3.4\",', '80)),', 'result)', 'result', '=', 'yield', 'self.resolver.resolve(\"google.com\",', '80,', 'socket.AF_INET6)', 'self.assertIn(', '(socket.AF_INET6,', '(\"2a02:6b8:7c:40c:c51e:495f:e23a:3\",', '80,', '0,', '0)),', 'result', ')', '@skipIfNoNetwork', 'class', 'ThreadedResolverTest(AsyncTestCase,', '_ResolverTestMixin):', 'def', 'setUp(self):', 'super().setUp()', 'self.resolver', '=', 'ThreadedResolver()', 'def', 'tearDown(self):', 'self.resolver.close()', 'super().tearDown()', 'class', 'ThreadedResolverErrorTest(AsyncTestCase,', '_ResolverErrorTestMixin):', 'def', 'setUp(self):', 'super().setUp()', 'self.resolver', '=', 'BlockingResolver()', 'self.real_getaddrinfo', '=', 'socket.getaddrinfo', 'socket.getaddrinfo', '=', '_failing_getaddrinfo', 'def', 'tearDown(self):', 'socket.getaddrinfo', '=', 'self.real_getaddrinfo', 'super().tearDown()', '@skipIfNoNetwork', '@unittest.skipIf(sys.platform', '==', '\"win32\",', '\"preexec_fn', 'not', 'available', 'on', 'win32\")', 'class', 'ThreadedResolverImportTest(unittest.TestCase):', 'def', 'test_import(self):', 'TIMEOUT', '=', '5', 'command', '=', '[sys.executable,', '\"-c\",', '\"import', 'tornado.test.resolve_test_helper\"]', 'start', '=', 'time.time()', 'popen', '=', 'Popen(command,', 'preexec_fn=lambda:', 'signal.alarm(TIMEOUT))', 'while', 'time.time()', '-', 'start', '<', 'TIMEOUT:', 'return_code', '=', 'popen.poll()', 'if', 'return_code', 'is', 'not', 'None:', 'self.assertEqual(0,', 'return_code)', 'return', 'time.sleep(0.05)', 'self.fail(\"import', 'timed', 'out\")', '@skipIfNoNetwork', '@unittest.skipIf(pycares', 'is', 'None,', '\"pycares', 'module', 'not', 'present\")', '@unittest.skipIf(sys.platform', '==', '\"win32\",', '\"pycares', \"doesn't\", 'return', 'loopback', 'on', 'windows\")', '@unittest.skipIf(sys.platform', '==', '\"darwin\",', '\"pycares', \"doesn't\", 'return', '127.0.0.1', 'on', 'darwin\")', 'class', 'CaresResolverTest(AsyncTestCase,', '_ResolverTestMixin):', 'def', 'setUp(self):', 'super().setUp()', 'self.resolver', '=', 'CaresResolver()', '@skipIfNoNetwork', '@unittest.skipIf(twisted', 'is', 'None,', '\"twisted', 'module', 'not', 'present\")', '@unittest.skipIf(', 'getattr(twisted,', '\"__version__\",', '\"0.0\")', '<', '\"12.1\",', '\"old', 'version', 'of', 'twisted\"', ')', '@unittest.skipIf(sys.platform', '==', '\"win32\",', '\"twisted', 'resolver', 'hangs', 'on', 'windows\")', 'class', 'TwistedResolverTest(AsyncTestCase,', '_ResolverTestMixin):', 'def', 'setUp(self):', 'super().setUp()', 'self.resolver', '=', 'TwistedResolver()', 'class', 'IsValidIPTest(unittest.TestCase):', 'def', 'test_is_valid_ip(self):', 'self.assertTrue(is_valid_ip(\"127.0.0.1\"))', 'self.assertTrue(is_valid_ip(\"4.4.4.4\"))', 'self.assertTrue(is_valid_ip(\"::1\"))', 'self.assertTrue(is_valid_ip(\"2620:0:1cfe:face:b00c::3\"))', 'self.assertTrue(not', 'is_valid_ip(\"www.google.com\"))', 'self.assertTrue(not', 'is_valid_ip(\"localhost\"))', 'self.assertTrue(not', 'is_valid_ip(\"4.4.4.4<\"))', 'self.assertTrue(not', 'is_valid_ip(\"', '127.0.0.1\"))', 'self.assertTrue(not', 'is_valid_ip(\"\"))', 'self.assertTrue(not', 'is_valid_ip(\"', '\"))', 'self.assertTrue(not', 'is_valid_ip(\"\\\\n\"))', 'self.assertTrue(not', 'is_valid_ip(\"\\\\x00\"))', 'self.assertTrue(not', 'is_valid_ip(\"a\"', '*', '100))', 'class', 'TestPortAllocation(unittest.TestCase):', 'def', 'test_same_port_allocation(self):', 'if', '\"TRAVIS\"', 'in', 'os.environ:', 'self.skipTest(\"dual-stack', 'servers', 'often', 'have', 'port', 'conflicts', 'on', 'travis\")', 'sockets', '=', 'bind_sockets(0,', '\"localhost\")', 'try:', 'port', '=', 'sockets[0].getsockname()[1]', 'self.assertTrue(all(s.getsockname()[1]', '==', 'port', 'for', 's', 'in', 'sockets[1:]))', 'finally:', 'for', 'sock', 'in', 'sockets:', 'sock.close()', '@unittest.skipIf(', 'not', 'hasattr(socket,', '\"SO_REUSEPORT\"),', '\"SO_REUSEPORT', 'is', 'not', 'supported\"', ')', 'def', 'test_reuse_port(self):', 'sockets', '=', '[]', 'socket,', 'port', '=', 'bind_unused_port(reuse_port=True)', 'try:', 'sockets', '=', 'bind_sockets(port,', '\"127.0.0.1\",', 'reuse_port=True)', 'self.assertTrue(all(s.getsockname()[1]', '==', 'port', 'for', 's', 'in', 'sockets))', 'finally:', 'socket.close()', 'for', 'sock', 'in', 'sockets:', 'sock.close()']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/options_test.py",
        "vector": "['import', 'datetime', 'from', 'io', 'import', 'StringIO', 'import', 'os', 'import', 'sys', 'from', 'unittest', 'import', 'mock', 'import', 'unittest', 'from', 'tornado.options', 'import', 'OptionParser,', 'Error', 'from', 'tornado.util', 'import', 'basestring_type', 'from', 'tornado.test.util', 'import', 'subTest', 'import', 'typing', 'if', 'typing.TYPE_CHECKING:', 'from', 'typing', 'import', 'List', 'class', 'Email(object):', 'def', '__init__(self,', 'value):', 'if', 'isinstance(value,', 'str)', 'and', '\"@\"', 'in', 'value:', 'self._value', '=', 'value', 'else:', 'raise', 'ValueError()', '@property', 'def', 'value(self):', 'return', 'self._value', 'class', 'OptionsTest(unittest.TestCase):', 'def', 'test_parse_command_line(self):', 'options', '=', 'OptionParser()', 'options.define(\"port\",', 'default=80)', 'options.parse_command_line([\"main.py\",', '\"--port=443\"])', 'self.assertEqual(options.port,', '443)', 'def', 'test_parse_config_file(self):', 'options', '=', 'OptionParser()', 'options.define(\"port\",', 'default=80)', 'options.define(\"username\",', 'default=\"foo\")', 'options.define(\"my_path\")', 'config_path', '=', 'os.path.join(', 'os.path.dirname(os.path.abspath(__file__)),', '\"options_test.cfg\"', ')', 'options.parse_config_file(config_path)', 'self.assertEqual(options.port,', '443)', 'self.assertEqual(options.username,', '\"\u674e\u5eb7\")', 'self.assertEqual(options.my_path,', 'config_path)', 'def', 'test_parse_callbacks(self):', 'options', '=', 'OptionParser()', 'self.called', '=', 'False', 'def', 'callback():', 'self.called', '=', 'True', 'options.add_parse_callback(callback)', 'options.parse_command_line([\"main.py\"],', 'final=False)', 'self.assertFalse(self.called)', 'options.parse_command_line([\"main.py\"])', 'self.assertTrue(self.called)', 'self.called', '=', 'False', 'options.parse_command_line([\"main.py\"])', 'self.assertTrue(self.called)', 'def', 'test_help(self):', 'options', '=', 'OptionParser()', 'try:', 'orig_stderr', '=', 'sys.stderr', 'sys.stderr', '=', 'StringIO()', 'with', 'self.assertRaises(SystemExit):', 'options.parse_command_line([\"main.py\",', '\"--help\"])', 'usage', '=', 'sys.stderr.getvalue()', 'finally:', 'sys.stderr', '=', 'orig_stderr', 'self.assertIn(\"Usage:\",', 'usage)', 'def', 'test_subcommand(self):', 'base_options', '=', 'OptionParser()', 'base_options.define(\"verbose\",', 'default=False)', 'sub_options', '=', 'OptionParser()', 'sub_options.define(\"foo\",', 'type=str)', 'rest', '=', 'base_options.parse_command_line(', '[\"main.py\",', '\"--verbose\",', '\"subcommand\",', '\"--foo=bar\"]', ')', 'self.assertEqual(rest,', '[\"subcommand\",', '\"--foo=bar\"])', 'self.assertTrue(base_options.verbose)', 'rest2', '=', 'sub_options.parse_command_line(rest)', 'self.assertEqual(rest2,', '[])', 'self.assertEqual(sub_options.foo,', '\"bar\")', 'try:', 'orig_stderr', '=', 'sys.stderr', 'sys.stderr', '=', 'StringIO()', 'with', 'self.assertRaises(Error):', 'sub_options.parse_command_line([\"subcommand\",', '\"--verbose\"])', 'finally:', 'sys.stderr', '=', 'orig_stderr', 'def', 'test_setattr(self):', 'options', '=', 'OptionParser()', 'options.define(\"foo\",', 'default=1,', 'type=int)', 'options.foo', '=', '2', 'self.assertEqual(options.foo,', '2)', 'def', 'test_setattr_type_check(self):', 'options', '=', 'OptionParser()', 'options.define(\"foo\",', 'default=1,', 'type=int)', 'with', 'self.assertRaises(Error):', 'options.foo', '=', '\"2\"', 'def', 'test_setattr_with_callback(self):', 'values', '=', '[]', 'options', '=', 'OptionParser()', 'options.define(\"foo\",', 'default=1,', 'type=int,', 'callback=values.append)', 'options.foo', '=', '2', 'self.assertEqual(values,', '[2])', 'def', '_sample_options(self):', 'options', '=', 'OptionParser()', 'options.define(\"a\",', 'default=1)', 'options.define(\"b\",', 'default=2)', 'return', 'options', 'def', 'test_iter(self):', 'options', '=', 'self._sample_options()', 'self.assertEqual(set([\"a\",', '\"b\",', '\"help\"]),', 'set(iter(options)))', 'def', 'test_getitem(self):', 'options', '=', 'self._sample_options()', 'self.assertEqual(1,', 'options[\"a\"])', 'def', 'test_setitem(self):', 'options', '=', 'OptionParser()', 'options.define(\"foo\",', 'default=1,', 'type=int)', 'options[\"foo\"]', '=', '2', 'self.assertEqual(options[\"foo\"],', '2)', 'def', 'test_items(self):', 'options', '=', 'self._sample_options()', 'expected', '=', '[(\"a\",', '1),', '(\"b\",', '2),', '(\"help\",', 'options.help)]', 'actual', '=', 'sorted(options.items())', 'self.assertEqual(expected,', 'actual)', 'def', 'test_as_dict(self):', 'options', '=', 'self._sample_options()', 'expected', '=', '{\"a\":', '1,', '\"b\":', '2,', '\"help\":', 'options.help}', 'self.assertEqual(expected,', 'options.as_dict())', 'def', 'test_group_dict(self):', 'options', '=', 'OptionParser()', 'options.define(\"a\",', 'default=1)', 'options.define(\"b\",', 'group=\"b_group\",', 'default=2)', 'frame', '=', 'sys._getframe(0)', 'this_file', '=', 'frame.f_code.co_filename', 'self.assertEqual(set([\"b_group\",', '\"\",', 'this_file]),', 'options.groups())', 'b_group_dict', '=', 'options.group_dict(\"b_group\")', 'self.assertEqual({\"b\":', '2},', 'b_group_dict)', 'self.assertEqual({},', 'options.group_dict(\"nonexistent\"))', 'def', 'test_mock_patch(self):', 'options', '=', 'OptionParser()', 'options.define(\"foo\",', 'default=1)', 'options.parse_command_line([\"main.py\",', '\"--foo=2\"])', 'self.assertEqual(options.foo,', '2)', 'with', 'mock.patch.object(options.mockable(),', '\"foo\",', '3):', 'self.assertEqual(options.foo,', '3)', 'self.assertEqual(options.foo,', '2)', 'with', 'mock.patch.object(options.mockable(),', '\"foo\",', '4):', 'self.assertEqual(options.foo,', '4)', 'options.foo', '=', '5', 'self.assertEqual(options.foo,', '5)', 'with', 'mock.patch.object(options.mockable(),', '\"foo\",', '6):', 'self.assertEqual(options.foo,', '6)', 'self.assertEqual(options.foo,', '5)', 'self.assertEqual(options.foo,', '2)', 'def', '_define_options(self):', 'options', '=', 'OptionParser()', 'options.define(\"str\",', 'type=str)', 'options.define(\"basestring\",', 'type=basestring_type)', 'options.define(\"int\",', 'type=int)', 'options.define(\"float\",', 'type=float)', 'options.define(\"datetime\",', 'type=datetime.datetime)', 'options.define(\"timedelta\",', 'type=datetime.timedelta)', 'options.define(\"email\",', 'type=Email)', 'options.define(\"list-of-int\",', 'type=int,', 'multiple=True)', 'options.define(\"list-of-str\",', 'type=str,', 'multiple=True)', 'return', 'options', 'def', '_check_options_values(self,', 'options):', 'self.assertEqual(options.str,', '\"asdf\")', 'self.assertEqual(options.basestring,', '\"qwer\")', 'self.assertEqual(options.int,', '42)', 'self.assertEqual(options.float,', '1.5)', 'self.assertEqual(options.datetime,', 'datetime.datetime(2013,', '4,', '28,', '5,', '16))', 'self.assertEqual(options.timedelta,', 'datetime.timedelta(seconds=45))', 'self.assertEqual(options.email.value,', '\"tornado@web.com\")', 'self.assertTrue(isinstance(options.email,', 'Email))', 'self.assertEqual(options.list_of_int,', '[1,', '2,', '3])', 'self.assertEqual(options.list_of_str,', '[\"a\",', '\"b\",', '\"c\"])', 'def', 'test_types(self):', 'options', '=', 'self._define_options()', 'options.parse_command_line(', '[', '\"main.py\",', '\"--str=asdf\",', '\"--basestring=qwer\",', '\"--int=42\",', '\"--float=1.5\",', '\"--datetime=2013-04-28', '05:16\",', '\"--timedelta=45s\",', '\"--email=tornado@web.com\",', '\"--list-of-int=1,2,3\",', '\"--list-of-str=a,b,c\",', ']', ')', 'self._check_options_values(options)', 'def', 'test_types_with_conf_file(self):', 'for', 'config_file_name', 'in', '(', '\"options_test_types.cfg\",', '\"options_test_types_str.cfg\",', '):', 'options', '=', 'self._define_options()', 'options.parse_config_file(', 'os.path.join(os.path.dirname(__file__),', 'config_file_name)', ')', 'self._check_options_values(options)', 'def', 'test_multiple_string(self):', 'options', '=', 'OptionParser()', 'options.define(\"foo\",', 'type=str,', 'multiple=True)', 'options.parse_command_line([\"main.py\",', '\"--foo=a,b,c\"])', 'self.assertEqual(options.foo,', '[\"a\",', '\"b\",', '\"c\"])', 'def', 'test_multiple_int(self):', 'options', '=', 'OptionParser()', 'options.define(\"foo\",', 'type=int,', 'multiple=True)', 'options.parse_command_line([\"main.py\",', '\"--foo=1,3,5:7\"])', 'self.assertEqual(options.foo,', '[1,', '3,', '5,', '6,', '7])', 'def', 'test_error_redefine(self):', 'options', '=', 'OptionParser()', 'options.define(\"foo\")', 'with', 'self.assertRaises(Error)', 'as', 'cm:', 'options.define(\"foo\")', 'self.assertRegex(str(cm.exception),', '\"Option.*foo.*already', 'defined\")', 'def', 'test_error_redefine_underscore(self):', 'tests', '=', '[', '(\"foo-bar\",', '\"foo-bar\"),', '(\"foo_bar\",', '\"foo_bar\"),', '(\"foo-bar\",', '\"foo_bar\"),', '(\"foo_bar\",', '\"foo-bar\"),', ']', 'for', 'a,', 'b', 'in', 'tests:', 'with', 'subTest(self,', 'a=a,', 'b=b):', 'options', '=', 'OptionParser()', 'options.define(a)', 'with', 'self.assertRaises(Error)', 'as', 'cm:', 'options.define(b)', 'self.assertRegex(str(cm.exception),', '\"Option.*foo.bar.*already', 'defined\")', 'def', 'test_dash_underscore_cli(self):', 'for', 'defined_name', 'in', '[\"foo-bar\",', '\"foo_bar\"]:', 'for', 'flag', 'in', '[\"--foo-bar=a\",', '\"--foo_bar=a\"]:', 'options', '=', 'OptionParser()', 'options.define(defined_name)', 'options.parse_command_line([\"main.py\",', 'flag])', 'self.assertEqual(options.foo_bar,', '\"a\")', 'self.assertEqual(options[\"foo-bar\"],', '\"a\")', 'self.assertEqual(options[\"foo_bar\"],', '\"a\")', 'def', 'test_dash_underscore_file(self):', 'for', 'defined_name', 'in', '[\"foo-bar\",', '\"foo_bar\"]:', 'options', '=', 'OptionParser()', 'options.define(defined_name)', 'options.parse_config_file(', 'os.path.join(os.path.dirname(__file__),', '\"options_test.cfg\")', ')', 'self.assertEqual(options.foo_bar,', '\"a\")', 'def', 'test_dash_underscore_introspection(self):', 'options', '=', 'OptionParser()', 'options.define(\"with-dash\",', 'group=\"g\")', 'options.define(\"with_underscore\",', 'group=\"g\")', 'all_options', '=', '[\"help\",', '\"with-dash\",', '\"with_underscore\"]', 'self.assertEqual(sorted(options),', 'all_options)', 'self.assertEqual(sorted(k', 'for', '(k,', 'v)', 'in', 'options.items()),', 'all_options)', 'self.assertEqual(sorted(options.as_dict().keys()),', 'all_options)', 'self.assertEqual(', 'sorted(options.group_dict(\"g\")),', '[\"with-dash\",', '\"with_underscore\"]', ')', 'buf', '=', 'StringIO()', 'options.print_help(buf)', 'self.assertIn(\"--with-dash\",', 'buf.getvalue())', 'self.assertIn(\"--with-underscore\",', 'buf.getvalue())']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/process_test.py",
        "vector": "['import', 'asyncio', 'import', 'logging', 'import', 'os', 'import', 'signal', 'import', 'subprocess', 'import', 'sys', 'import', 'time', 'import', 'unittest', 'from', 'tornado.httpclient', 'import', 'HTTPClient,', 'HTTPError', 'from', 'tornado.httpserver', 'import', 'HTTPServer', 'from', 'tornado.ioloop', 'import', 'IOLoop', 'from', 'tornado.log', 'import', 'gen_log', 'from', 'tornado.process', 'import', 'fork_processes,', 'task_id,', 'Subprocess', 'from', 'tornado.simple_httpclient', 'import', 'SimpleAsyncHTTPClient', 'from', 'tornado.testing', 'import', 'bind_unused_port,', 'ExpectLog,', 'AsyncTestCase,', 'gen_test', 'from', 'tornado.test.util', 'import', 'skipIfNonUnix', 'from', 'tornado.web', 'import', 'RequestHandler,', 'Application', '@skipIfNonUnix', 'class', 'ProcessTest(unittest.TestCase):', 'def', 'get_app(self):', 'class', 'ProcessHandler(RequestHandler):', 'def', 'get(self):', 'if', 'self.get_argument(\"exit\",', 'None):', 'os._exit(int(self.get_argument(\"exit\")))', 'if', 'self.get_argument(\"signal\",', 'None):', 'os.kill(os.getpid(),', 'int(self.get_argument(\"signal\")))', 'self.write(str(os.getpid()))', 'return', 'Application([(\"/\",', 'ProcessHandler)])', 'def', 'tearDown(self):', 'if', 'task_id()', 'is', 'not', 'None:', 'logging.error(\"aborting', 'child', 'process', 'from', 'tearDown\")', 'logging.shutdown()', 'os._exit(1)', 'signal.alarm(0)', 'super().tearDown()', 'def', 'test_multi_process(self):', 'with', 'ExpectLog(', 'gen_log,', '\"(Starting', '.*', 'processes|child', '.*', 'exited|uncaught', 'exception)\"', '):', 'sock,', 'port', '=', 'bind_unused_port()', 'def', 'get_url(path):', 'return', '\"http://127.0.0.1:%d%s\"', '%', '(port,', 'path)', 'signal.alarm(5)', 'try:', 'id', '=', 'fork_processes(3,', 'max_restarts=3)', 'self.assertTrue(id', 'is', 'not', 'None)', 'signal.alarm(5)', 'except', 'SystemExit', 'as', 'e:', 'self.assertEqual(e.code,', '0)', 'self.assertTrue(task_id()', 'is', 'None)', 'sock.close()', 'return', 'try:', 'if', 'id', 'in', '(0,', '1):', 'self.assertEqual(id,', 'task_id())', 'async', 'def', 'f():', 'server', '=', 'HTTPServer(self.get_app())', 'server.add_sockets([sock])', 'await', 'asyncio.Event().wait()', 'asyncio.run(f())', 'elif', 'id', '==', '2:', 'self.assertEqual(id,', 'task_id())', 'sock.close()', 'client', '=', 'HTTPClient(SimpleAsyncHTTPClient)', 'def', 'fetch(url,', 'fail_ok=False):', 'try:', 'return', 'client.fetch(get_url(url))', 'except', 'HTTPError', 'as', 'e:', 'if', 'not', '(fail_ok', 'and', 'e.code', '==', '599):', 'raise', 'fetch(\"/?exit=2\",', 'fail_ok=True)', 'fetch(\"/?exit=3\",', 'fail_ok=True)', 'int(fetch(\"/\").body)', 'fetch(\"/?exit=0\",', 'fail_ok=True)', 'pid', '=', 'int(fetch(\"/\").body)', 'fetch(\"/?exit=4\",', 'fail_ok=True)', 'pid2', '=', 'int(fetch(\"/\").body)', 'self.assertNotEqual(pid,', 'pid2)', 'fetch(\"/?exit=0\",', 'fail_ok=True)', 'os._exit(0)', 'except', 'Exception:', 'logging.error(\"exception', 'in', 'child', 'process', '%d\",', 'id,', 'exc_info=True)', 'raise', '@skipIfNonUnix', 'class', 'SubprocessTest(AsyncTestCase):', 'def', 'term_and_wait(self,', 'subproc):', 'subproc.proc.terminate()', 'subproc.proc.wait()', '@gen_test', 'def', 'test_subprocess(self):', 'if', 'IOLoop.configured_class().__name__.endswith(\"LayeredTwistedIOLoop\"):', 'raise', 'unittest.SkipTest(', '\"Subprocess', 'tests', 'not', 'compatible', 'with', '\"', '\"LayeredTwistedIOLoop\"', ')', 'subproc', '=', 'Subprocess(', '[sys.executable,', '\"-u\",', '\"-i\"],', 'stdin=Subprocess.STREAM,', 'stdout=Subprocess.STREAM,', 'stderr=subprocess.STDOUT,', ')', 'self.addCleanup(lambda:', 'self.term_and_wait(subproc))', 'self.addCleanup(subproc.stdout.close)', 'self.addCleanup(subproc.stdin.close)', 'yield', 'subproc.stdout.read_until(b\">>>', '\")', 'subproc.stdin.write(b\"print(\\'hello\\')\\\\n\")', 'data', '=', 'yield', 'subproc.stdout.read_until(b\"\\\\n\")', 'self.assertEqual(data,', 'b\"hello\\\\n\")', 'yield', 'subproc.stdout.read_until(b\">>>', '\")', 'subproc.stdin.write(b\"raise', 'SystemExit\\\\n\")', 'data', '=', 'yield', 'subproc.stdout.read_until_close()', 'self.assertEqual(data,', 'b\"\")', '@gen_test', 'def', 'test_close_stdin(self):', 'subproc', '=', 'Subprocess(', '[sys.executable,', '\"-u\",', '\"-i\"],', 'stdin=Subprocess.STREAM,', 'stdout=Subprocess.STREAM,', 'stderr=subprocess.STDOUT,', ')', 'self.addCleanup(lambda:', 'self.term_and_wait(subproc))', 'yield', 'subproc.stdout.read_until(b\">>>', '\")', 'subproc.stdin.close()', 'data', '=', 'yield', 'subproc.stdout.read_until_close()', 'self.assertEqual(data,', 'b\"\\\\n\")', '@gen_test', 'def', 'test_stderr(self):', 'subproc', '=', 'Subprocess(', '[sys.executable,', '\"-u\",', '\"-c\",', 'r\"import', 'sys;', 'sys.stderr.write(\\'hello\\\\n\\')\"],', 'stderr=Subprocess.STREAM,', ')', 'self.addCleanup(lambda:', 'self.term_and_wait(subproc))', 'data', '=', 'yield', 'subproc.stderr.read_until(b\"\\\\n\")', 'self.assertEqual(data,', 'b\"hello\\\\n\")', 'subproc.stderr.close()', 'def', 'test_sigchild(self):', 'Subprocess.initialize()', 'self.addCleanup(Subprocess.uninitialize)', 'subproc', '=', 'Subprocess([sys.executable,', '\"-c\",', '\"pass\"])', 'subproc.set_exit_callback(self.stop)', 'ret', '=', 'self.wait()', 'self.assertEqual(ret,', '0)', 'self.assertEqual(subproc.returncode,', 'ret)', '@gen_test', 'def', 'test_sigchild_future(self):', 'Subprocess.initialize()', 'self.addCleanup(Subprocess.uninitialize)', 'subproc', '=', 'Subprocess([sys.executable,', '\"-c\",', '\"pass\"])', 'ret', '=', 'yield', 'subproc.wait_for_exit()', 'self.assertEqual(ret,', '0)', 'self.assertEqual(subproc.returncode,', 'ret)', 'def', 'test_sigchild_signal(self):', 'Subprocess.initialize()', 'self.addCleanup(Subprocess.uninitialize)', 'subproc', '=', 'Subprocess(', '[sys.executable,', '\"-c\",', '\"import', 'time;', 'time.sleep(30)\"],', 'stdout=Subprocess.STREAM,', ')', 'self.addCleanup(subproc.stdout.close)', 'subproc.set_exit_callback(self.stop)', 'time.sleep(0.1)', 'os.kill(subproc.pid,', 'signal.SIGTERM)', 'try:', 'ret', '=', 'self.wait()', 'except', 'AssertionError:', 'fut', '=', 'subproc.stdout.read_until_close()', 'fut.add_done_callback(lambda', 'f:', 'self.stop())', 'try:', 'self.wait()', 'except', 'AssertionError:', 'raise', 'AssertionError(\"subprocess', 'failed', 'to', 'terminate\")', 'else:', 'raise', 'AssertionError(', '\"subprocess', 'closed', 'stdout', 'but', 'failed', 'to', '\"', '\"get', 'termination', 'signal\"', ')', 'self.assertEqual(subproc.returncode,', 'ret)', 'self.assertEqual(ret,', '-signal.SIGTERM)', '@gen_test', 'def', 'test_wait_for_exit_raise(self):', 'Subprocess.initialize()', 'self.addCleanup(Subprocess.uninitialize)', 'subproc', '=', 'Subprocess([sys.executable,', '\"-c\",', '\"import', 'sys;', 'sys.exit(1)\"])', 'with', 'self.assertRaises(subprocess.CalledProcessError)', 'as', 'cm:', 'yield', 'subproc.wait_for_exit()', 'self.assertEqual(cm.exception.returncode,', '1)', '@gen_test', 'def', 'test_wait_for_exit_raise_disabled(self):', 'Subprocess.initialize()', 'self.addCleanup(Subprocess.uninitialize)', 'subproc', '=', 'Subprocess([sys.executable,', '\"-c\",', '\"import', 'sys;', 'sys.exit(1)\"])', 'ret', '=', 'yield', 'subproc.wait_for_exit(raise_error=False)', 'self.assertEqual(ret,', '1)']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/queues_test.py",
        "vector": "['import', 'asyncio', 'from', 'datetime', 'import', 'timedelta', 'from', 'random', 'import', 'random', 'import', 'unittest', 'from', 'tornado', 'import', 'gen,', 'queues', 'from', 'tornado.gen', 'import', 'TimeoutError', 'from', 'tornado.testing', 'import', 'gen_test,', 'AsyncTestCase', 'class', 'QueueBasicTest(AsyncTestCase):', 'def', 'test_repr_and_str(self):', 'q', '=', 'queues.Queue(maxsize=1)', 'self.assertIn(hex(id(q)),', 'repr(q))', 'self.assertNotIn(hex(id(q)),', 'str(q))', 'q.get()', 'for', 'q_str', 'in', 'repr(q),', 'str(q):', 'self.assertTrue(q_str.startswith(\"<Queue\"))', 'self.assertIn(\"maxsize=1\",', 'q_str)', 'self.assertIn(\"getters[1]\",', 'q_str)', 'self.assertNotIn(\"putters\",', 'q_str)', 'self.assertNotIn(\"tasks\",', 'q_str)', 'q.put(None)', 'q.put(None)', 'q.put(None)', 'for', 'q_str', 'in', 'repr(q),', 'str(q):', 'self.assertNotIn(\"getters\",', 'q_str)', 'self.assertIn(\"putters[1]\",', 'q_str)', 'self.assertIn(\"tasks=2\",', 'q_str)', 'def', 'test_order(self):', 'q', '=', 'queues.Queue()', 'for', 'i', 'in', '[1,', '3,', '2]:', 'q.put_nowait(i)', 'items', '=', '[q.get_nowait()', 'for', '_', 'in', 'range(3)]', 'self.assertEqual([1,', '3,', '2],', 'items)', '@gen_test', 'def', 'test_maxsize(self):', 'self.assertRaises(TypeError,', 'queues.Queue,', 'maxsize=None)', 'self.assertRaises(ValueError,', 'queues.Queue,', 'maxsize=-1)', 'q', '=', 'queues.Queue(maxsize=2)', 'self.assertTrue(q.empty())', 'self.assertFalse(q.full())', 'self.assertEqual(2,', 'q.maxsize)', 'self.assertTrue(q.put(0).done())', 'self.assertTrue(q.put(1).done())', 'self.assertFalse(q.empty())', 'self.assertTrue(q.full())', 'put2', '=', 'q.put(2)', 'self.assertFalse(put2.done())', 'self.assertEqual(0,', '(yield', 'q.get()))', 'self.assertTrue(put2.done())', 'self.assertFalse(q.empty())', 'self.assertTrue(q.full())', 'class', 'QueueGetTest(AsyncTestCase):', '@gen_test', 'def', 'test_blocking_get(self):', 'q', '=', 'queues.Queue()', 'q.put_nowait(0)', 'self.assertEqual(0,', '(yield', 'q.get()))', 'def', 'test_nonblocking_get(self):', 'q', '=', 'queues.Queue()', 'q.put_nowait(0)', 'self.assertEqual(0,', 'q.get_nowait())', 'def', 'test_nonblocking_get_exception(self):', 'q', '=', 'queues.Queue()', 'self.assertRaises(queues.QueueEmpty,', 'q.get_nowait)', '@gen_test', 'def', 'test_get_with_putters(self):', 'q', '=', 'queues.Queue(1)', 'q.put_nowait(0)', 'put', '=', 'q.put(1)', 'self.assertEqual(0,', '(yield', 'q.get()))', 'self.assertIsNone((yield', 'put))', '@gen_test', 'def', 'test_blocking_get_wait(self):', 'q', '=', 'queues.Queue()', 'q.put(0)', 'self.io_loop.call_later(0.01,', 'q.put_nowait,', '1)', 'self.io_loop.call_later(0.02,', 'q.put_nowait,', '2)', 'self.assertEqual(0,', '(yield', 'q.get(timeout=timedelta(seconds=1))))', 'self.assertEqual(1,', '(yield', 'q.get(timeout=timedelta(seconds=1))))', '@gen_test', 'def', 'test_get_timeout(self):', 'q', '=', 'queues.Queue()', 'get_timeout', '=', 'q.get(timeout=timedelta(seconds=0.01))', 'get', '=', 'q.get()', 'with', 'self.assertRaises(TimeoutError):', 'yield', 'get_timeout', 'q.put_nowait(0)', 'self.assertEqual(0,', '(yield', 'get))', '@gen_test', 'def', 'test_get_timeout_preempted(self):', 'q', '=', 'queues.Queue()', 'get', '=', 'q.get(timeout=timedelta(seconds=0.01))', 'q.put(0)', 'yield', 'gen.sleep(0.02)', 'self.assertEqual(0,', '(yield', 'get))', '@gen_test', 'def', 'test_get_clears_timed_out_putters(self):', 'q', '=', 'queues.Queue(1)', 'putters', '=', '[q.put(i,', 'timedelta(seconds=0.01))', 'for', 'i', 'in', 'range(10)]', 'put', '=', 'q.put(10)', 'self.assertEqual(10,', 'len(q._putters))', 'yield', 'gen.sleep(0.02)', 'self.assertEqual(10,', 'len(q._putters))', 'self.assertFalse(put.done())', 'q.put(11)', 'self.assertEqual(0,', '(yield', 'q.get()))', 'self.assertEqual(1,', 'len(q._putters))', 'for', 'putter', 'in', 'putters[1:]:', 'self.assertRaises(TimeoutError,', 'putter.result)', '@gen_test', 'def', 'test_get_clears_timed_out_getters(self):', 'q', '=', 'queues.Queue()', 'getters', '=', '[', 'asyncio.ensure_future(q.get(timedelta(seconds=0.01)))', 'for', '_', 'in', 'range(10)', ']', 'get', '=', 'asyncio.ensure_future(q.get())', 'self.assertEqual(11,', 'len(q._getters))', 'yield', 'gen.sleep(0.02)', 'self.assertEqual(11,', 'len(q._getters))', 'self.assertFalse(get.done())', 'q.get()', 'self.assertEqual(2,', 'len(q._getters))', 'for', 'getter', 'in', 'getters:', 'self.assertRaises(TimeoutError,', 'getter.result)', '@gen_test', 'def', 'test_async_for(self):', 'q', '=', 'queues.Queue()', 'for', 'i', 'in', 'range(5):', 'q.put(i)', 'async', 'def', 'f():', 'results', '=', '[]', 'async', 'for', 'i', 'in', 'q:', 'results.append(i)', 'if', 'i', '==', '4:', 'return', 'results', 'results', '=', 'yield', 'f()', 'self.assertEqual(results,', 'list(range(5)))', 'class', 'QueuePutTest(AsyncTestCase):', '@gen_test', 'def', 'test_blocking_put(self):', 'q', '=', 'queues.Queue()', 'q.put(0)', 'self.assertEqual(0,', 'q.get_nowait())', 'def', 'test_nonblocking_put_exception(self):', 'q', '=', 'queues.Queue(1)', 'q.put(0)', 'self.assertRaises(queues.QueueFull,', 'q.put_nowait,', '1)', '@gen_test', 'def', 'test_put_with_getters(self):', 'q', '=', 'queues.Queue()', 'get0', '=', 'q.get()', 'get1', '=', 'q.get()', 'yield', 'q.put(0)', 'self.assertEqual(0,', '(yield', 'get0))', 'yield', 'q.put(1)', 'self.assertEqual(1,', '(yield', 'get1))', '@gen_test', 'def', 'test_nonblocking_put_with_getters(self):', 'q', '=', 'queues.Queue()', 'get0', '=', 'q.get()', 'get1', '=', 'q.get()', 'q.put_nowait(0)', 'yield', 'gen.moment', 'self.assertEqual(0,', '(yield', 'get0))', 'q.put_nowait(1)', 'yield', 'gen.moment', 'self.assertEqual(1,', '(yield', 'get1))', '@gen_test', 'def', 'test_blocking_put_wait(self):', 'q', '=', 'queues.Queue(1)', 'q.put_nowait(0)', 'def', 'get_and_discard():', 'q.get()', 'self.io_loop.call_later(0.01,', 'get_and_discard)', 'self.io_loop.call_later(0.02,', 'get_and_discard)', 'futures', '=', '[q.put(0),', 'q.put(1)]', 'self.assertFalse(any(f.done()', 'for', 'f', 'in', 'futures))', 'yield', 'futures', '@gen_test', 'def', 'test_put_timeout(self):', 'q', '=', 'queues.Queue(1)', 'q.put_nowait(0)', 'put_timeout', '=', 'q.put(1,', 'timeout=timedelta(seconds=0.01))', 'put', '=', 'q.put(2)', 'with', 'self.assertRaises(TimeoutError):', 'yield', 'put_timeout', 'self.assertEqual(0,', 'q.get_nowait())', 'self.assertEqual(2,', '(yield', 'q.get()))', 'yield', 'put', '@gen_test', 'def', 'test_put_timeout_preempted(self):', 'q', '=', 'queues.Queue(1)', 'q.put_nowait(0)', 'put', '=', 'q.put(1,', 'timeout=timedelta(seconds=0.01))', 'q.get()', 'yield', 'gen.sleep(0.02)', 'yield', 'put', '@gen_test', 'def', 'test_put_clears_timed_out_putters(self):', 'q', '=', 'queues.Queue(1)', 'putters', '=', '[q.put(i,', 'timedelta(seconds=0.01))', 'for', 'i', 'in', 'range(10)]', 'put', '=', 'q.put(10)', 'self.assertEqual(10,', 'len(q._putters))', 'yield', 'gen.sleep(0.02)', 'self.assertEqual(10,', 'len(q._putters))', 'self.assertFalse(put.done())', 'q.put(11)', 'self.assertEqual(2,', 'len(q._putters))', 'for', 'putter', 'in', 'putters[1:]:', 'self.assertRaises(TimeoutError,', 'putter.result)', '@gen_test', 'def', 'test_put_clears_timed_out_getters(self):', 'q', '=', 'queues.Queue()', 'getters', '=', '[', 'asyncio.ensure_future(q.get(timedelta(seconds=0.01)))', 'for', '_', 'in', 'range(10)', ']', 'get', '=', 'asyncio.ensure_future(q.get())', 'q.get()', 'self.assertEqual(12,', 'len(q._getters))', 'yield', 'gen.sleep(0.02)', 'self.assertEqual(12,', 'len(q._getters))', 'self.assertFalse(get.done())', 'q.put(0)', 'self.assertEqual(1,', 'len(q._getters))', 'self.assertEqual(0,', '(yield', 'get))', 'for', 'getter', 'in', 'getters:', 'self.assertRaises(TimeoutError,', 'getter.result)', '@gen_test', 'def', 'test_float_maxsize(self):', 'q', '=', 'queues.Queue(maxsize=1.3)', 'self.assertTrue(q.empty())', 'self.assertFalse(q.full())', 'q.put_nowait(0)', 'q.put_nowait(1)', 'self.assertFalse(q.empty())', 'self.assertTrue(q.full())', 'self.assertRaises(queues.QueueFull,', 'q.put_nowait,', '2)', 'self.assertEqual(0,', 'q.get_nowait())', 'self.assertFalse(q.empty())', 'self.assertFalse(q.full())', 'yield', 'q.put(2)', 'put', '=', 'q.put(3)', 'self.assertFalse(put.done())', 'self.assertEqual(1,', '(yield', 'q.get()))', 'yield', 'put', 'self.assertTrue(q.full())', 'class', 'QueueJoinTest(AsyncTestCase):', 'queue_class', '=', 'queues.Queue', 'def', 'test_task_done_underflow(self):', 'q', '=', 'self.queue_class()', 'self.assertRaises(ValueError,', 'q.task_done)', '@gen_test', 'def', 'test_task_done(self):', 'q', '=', 'self.queue_class()', 'for', 'i', 'in', 'range(100):', 'q.put_nowait(i)', 'self.accumulator', '=', '0', '@gen.coroutine', 'def', 'worker():', 'while', 'True:', 'item', '=', 'yield', 'q.get()', 'self.accumulator', '+=', 'item', 'q.task_done()', 'yield', 'gen.sleep(random()', '*', '0.01)', 'worker()', 'worker()', 'yield', 'q.join()', 'self.assertEqual(sum(range(100)),', 'self.accumulator)', '@gen_test', 'def', 'test_task_done_delay(self):', 'q', '=', 'self.queue_class()', 'q.put_nowait(0)', 'join', '=', 'asyncio.ensure_future(q.join())', 'self.assertFalse(join.done())', 'yield', 'q.get()', 'self.assertFalse(join.done())', 'yield', 'gen.moment', 'self.assertFalse(join.done())', 'q.task_done()', 'self.assertTrue(join.done())', '@gen_test', 'def', 'test_join_empty_queue(self):', 'q', '=', 'self.queue_class()', 'yield', 'q.join()', 'yield', 'q.join()', '@gen_test', 'def', 'test_join_timeout(self):', 'q', '=', 'self.queue_class()', 'q.put(0)', 'with', 'self.assertRaises(TimeoutError):', 'yield', 'q.join(timeout=timedelta(seconds=0.01))', 'class', 'PriorityQueueJoinTest(QueueJoinTest):', 'queue_class', '=', 'queues.PriorityQueue', '@gen_test', 'def', 'test_order(self):', 'q', '=', 'self.queue_class(maxsize=2)', 'q.put_nowait((1,', '\"a\"))', 'q.put_nowait((0,', '\"b\"))', 'self.assertTrue(q.full())', 'q.put((3,', '\"c\"))', 'q.put((2,', '\"d\"))', 'self.assertEqual((0,', '\"b\"),', 'q.get_nowait())', 'self.assertEqual((1,', '\"a\"),', '(yield', 'q.get()))', 'self.assertEqual((2,', '\"d\"),', 'q.get_nowait())', 'self.assertEqual((3,', '\"c\"),', '(yield', 'q.get()))', 'self.assertTrue(q.empty())', 'class', 'LifoQueueJoinTest(QueueJoinTest):', 'queue_class', '=', 'queues.LifoQueue', '@gen_test', 'def', 'test_order(self):', 'q', '=', 'self.queue_class(maxsize=2)', 'q.put_nowait(1)', 'q.put_nowait(0)', 'self.assertTrue(q.full())', 'q.put(3)', 'q.put(2)', 'self.assertEqual(3,', 'q.get_nowait())', 'self.assertEqual(2,', '(yield', 'q.get()))', 'self.assertEqual(0,', 'q.get_nowait())', 'self.assertEqual(1,', '(yield', 'q.get()))', 'self.assertTrue(q.empty())', 'class', 'ProducerConsumerTest(AsyncTestCase):', '@gen_test', 'def', 'test_producer_consumer(self):', 'q', '=', 'queues.Queue(maxsize=3)', 'history', '=', '[]', '@gen.coroutine', 'def', 'consumer():', 'while', 'True:', 'history.append((yield', 'q.get()))', 'q.task_done()', '@gen.coroutine', 'def', 'producer():', 'for', 'item', 'in', 'range(10):', 'yield', 'q.put(item)', 'consumer()', 'yield', 'producer()', 'yield', 'q.join()', 'self.assertEqual(list(range(10)),', 'history)', 'if', '__name__', '==', '\"__main__\":', 'unittest.main()']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/resolve_test_helper.py",
        "vector": "['from', 'tornado.ioloop', 'import', 'IOLoop', 'from', 'tornado.netutil', 'import', 'ThreadedResolver', 'resolver', '=', 'ThreadedResolver()', 'IOLoop.current().run_sync(lambda:', 'resolver.resolve(\"localhost\",', '80))']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/routing_test.py",
        "vector": "['from', 'tornado.httputil', 'import', '(', 'HTTPHeaders,', 'HTTPMessageDelegate,', 'HTTPServerConnectionDelegate,', 'ResponseStartLine,', ')', 'from', 'tornado.routing', 'import', '(', 'HostMatches,', 'PathMatches,', 'ReversibleRouter,', 'Router,', 'Rule,', 'RuleRouter,', ')', 'from', 'tornado.testing', 'import', 'AsyncHTTPTestCase', 'from', 'tornado.web', 'import', 'Application,', 'HTTPError,', 'RequestHandler', 'from', 'tornado.wsgi', 'import', 'WSGIContainer', 'import', 'typing', 'class', 'BasicRouter(Router):', 'def', 'find_handler(self,', 'request,', '**kwargs):', 'class', 'MessageDelegate(HTTPMessageDelegate):', 'def', '__init__(self,', 'connection):', 'self.connection', '=', 'connection', 'def', 'finish(self):', 'self.connection.write_headers(', 'ResponseStartLine(\"HTTP/1.1\",', '200,', '\"OK\"),', 'HTTPHeaders({\"Content-Length\":', '\"2\"}),', 'b\"OK\",', ')', 'self.connection.finish()', 'return', 'MessageDelegate(request.connection)', 'class', 'BasicRouterTestCase(AsyncHTTPTestCase):', 'def', 'get_app(self):', 'return', 'BasicRouter()', 'def', 'test_basic_router(self):', 'response', '=', 'self.fetch(\"/any_request\")', 'self.assertEqual(response.body,', 'b\"OK\")', 'resources', '=', '{}', 'class', 'GetResource(RequestHandler):', 'def', 'get(self,', 'path):', 'if', 'path', 'not', 'in', 'resources:', 'raise', 'HTTPError(404)', 'self.finish(resources[path])', 'class', 'PostResource(RequestHandler):', 'def', 'post(self,', 'path):', 'resources[path]', '=', 'self.request.body', 'class', 'HTTPMethodRouter(Router):', 'def', '__init__(self,', 'app):', 'self.app', '=', 'app', 'def', 'find_handler(self,', 'request,', '**kwargs):', 'handler', '=', 'GetResource', 'if', 'request.method', '==', '\"GET\"', 'else', 'PostResource', 'return', 'self.app.get_handler_delegate(request,', 'handler,', 'path_args=[request.path])', 'class', 'HTTPMethodRouterTestCase(AsyncHTTPTestCase):', 'def', 'get_app(self):', 'return', 'HTTPMethodRouter(Application())', 'def', 'test_http_method_router(self):', 'response', '=', 'self.fetch(\"/post_resource\",', 'method=\"POST\",', 'body=\"data\")', 'self.assertEqual(response.code,', '200)', 'response', '=', 'self.fetch(\"/get_resource\")', 'self.assertEqual(response.code,', '404)', 'response', '=', 'self.fetch(\"/post_resource\")', 'self.assertEqual(response.code,', '200)', 'self.assertEqual(response.body,', 'b\"data\")', 'def', '_get_named_handler(handler_name):', 'class', 'Handler(RequestHandler):', 'def', 'get(self,', '*args,', '**kwargs):', 'if', 'self.application.settings.get(\"app_name\")', 'is', 'not', 'None:', 'self.write(self.application.settings[\"app_name\"]', '+', '\":', '\")', 'self.finish(handler_name', '+', '\":', '\"', '+', 'self.reverse_url(handler_name))', 'return', 'Handler', 'FirstHandler', '=', '_get_named_handler(\"first_handler\")', 'SecondHandler', '=', '_get_named_handler(\"second_handler\")', 'class', 'CustomRouter(ReversibleRouter):', 'def', '__init__(self):', 'super().__init__()', 'self.routes', '=', '{}', 'def', 'add_routes(self,', 'routes):', 'self.routes.update(routes)', 'def', 'find_handler(self,', 'request,', '**kwargs):', 'if', 'request.path', 'in', 'self.routes:', 'app,', 'handler', '=', 'self.routes[request.path]', 'return', 'app.get_handler_delegate(request,', 'handler)', 'def', 'reverse_url(self,', 'name,', '*args):', 'handler_path', '=', '\"/\"', '+', 'name', 'return', 'handler_path', 'if', 'handler_path', 'in', 'self.routes', 'else', 'None', 'class', 'CustomRouterTestCase(AsyncHTTPTestCase):', 'def', 'get_app(self):', 'router', '=', 'CustomRouter()', 'class', 'CustomApplication(Application):', 'def', 'reverse_url(self,', 'name,', '*args):', 'return', 'router.reverse_url(name,', '*args)', 'app1', '=', 'CustomApplication(app_name=\"app1\")', 'app2', '=', 'CustomApplication(app_name=\"app2\")', 'router.add_routes(', '{', '\"/first_handler\":', '(app1,', 'FirstHandler),', '\"/second_handler\":', '(app2,', 'SecondHandler),', '\"/first_handler_second_app\":', '(app2,', 'FirstHandler),', '}', ')', 'return', 'router', 'def', 'test_custom_router(self):', 'response', '=', 'self.fetch(\"/first_handler\")', 'self.assertEqual(response.body,', 'b\"app1:', 'first_handler:', '/first_handler\")', 'response', '=', 'self.fetch(\"/second_handler\")', 'self.assertEqual(response.body,', 'b\"app2:', 'second_handler:', '/second_handler\")', 'response', '=', 'self.fetch(\"/first_handler_second_app\")', 'self.assertEqual(response.body,', 'b\"app2:', 'first_handler:', '/first_handler\")', 'class', 'ConnectionDelegate(HTTPServerConnectionDelegate):', 'def', 'start_request(self,', 'server_conn,', 'request_conn):', 'class', 'MessageDelegate(HTTPMessageDelegate):', 'def', '__init__(self,', 'connection):', 'self.connection', '=', 'connection', 'def', 'finish(self):', 'response_body', '=', 'b\"OK\"', 'self.connection.write_headers(', 'ResponseStartLine(\"HTTP/1.1\",', '200,', '\"OK\"),', 'HTTPHeaders({\"Content-Length\":', 'str(len(response_body))}),', ')', 'self.connection.write(response_body)', 'self.connection.finish()', 'return', 'MessageDelegate(request_conn)', 'class', 'RuleRouterTest(AsyncHTTPTestCase):', 'def', 'get_app(self):', 'app', '=', 'Application()', 'def', 'request_callable(request):', 'request.connection.write_headers(', 'ResponseStartLine(\"HTTP/1.1\",', '200,', '\"OK\"),', 'HTTPHeaders({\"Content-Length\":', '\"2\"}),', ')', 'request.connection.write(b\"OK\")', 'request.connection.finish()', 'router', '=', 'CustomRouter()', 'router.add_routes(', '{\"/nested_handler\":', '(app,', '_get_named_handler(\"nested_handler\"))}', ')', 'app.add_handlers(', '\".*\",', '[', '(', 'HostMatches(\"www.example.com\"),', '[', '(', 'PathMatches(\"/first_handler\"),', '\"tornado.test.routing_test.SecondHandler\",', '{},', '\"second_handler\",', ')', '],', '),', 'Rule(PathMatches(\"/.*handler\"),', 'router),', 'Rule(PathMatches(\"/first_handler\"),', 'FirstHandler,', 'name=\"first_handler\"),', 'Rule(PathMatches(\"/request_callable\"),', 'request_callable),', '(\"/connection_delegate\",', 'ConnectionDelegate()),', '],', ')', 'return', 'app', 'def', 'test_rule_based_router(self):', 'response', '=', 'self.fetch(\"/first_handler\")', 'self.assertEqual(response.body,', 'b\"first_handler:', '/first_handler\")', 'response', '=', 'self.fetch(\"/first_handler\",', 'headers={\"Host\":', '\"www.example.com\"})', 'self.assertEqual(response.body,', 'b\"second_handler:', '/first_handler\")', 'response', '=', 'self.fetch(\"/nested_handler\")', 'self.assertEqual(response.body,', 'b\"nested_handler:', '/nested_handler\")', 'response', '=', 'self.fetch(\"/nested_not_found_handler\")', 'self.assertEqual(response.code,', '404)', 'response', '=', 'self.fetch(\"/connection_delegate\")', 'self.assertEqual(response.body,', 'b\"OK\")', 'response', '=', 'self.fetch(\"/request_callable\")', 'self.assertEqual(response.body,', 'b\"OK\")', 'response', '=', 'self.fetch(\"/404\")', 'self.assertEqual(response.code,', '404)', 'class', 'WSGIContainerTestCase(AsyncHTTPTestCase):', 'def', 'get_app(self):', 'wsgi_app', '=', 'WSGIContainer(self.wsgi_app)', 'class', 'Handler(RequestHandler):', 'def', 'get(self,', '*args,', '**kwargs):', 'self.finish(self.reverse_url(\"tornado\"))', 'return', 'RuleRouter(', '[', '(', 'PathMatches(\"/tornado.*\"),', 'Application([(r\"/tornado/test\",', 'Handler,', '{},', '\"tornado\")]),', '),', '(PathMatches(\"/wsgi\"),', 'wsgi_app),', ']', ')', 'def', 'wsgi_app(self,', 'environ,', 'start_response):', 'start_response(\"200', 'OK\",', '[])', 'return', '[b\"WSGI\"]', 'def', 'test_wsgi_container(self):', 'response', '=', 'self.fetch(\"/tornado/test\")', 'self.assertEqual(response.body,', 'b\"/tornado/test\")', 'response', '=', 'self.fetch(\"/wsgi\")', 'self.assertEqual(response.body,', 'b\"WSGI\")', 'def', 'test_delegate_not_found(self):', 'response', '=', 'self.fetch(\"/404\")', 'self.assertEqual(response.code,', '404)']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/runtests.py",
        "vector": "['from', 'functools', 'import', 'reduce', 'import', 'gc', 'import', 'io', 'import', 'locale', 'import', 'logging', 'import', 'operator', 'import', 'textwrap', 'import', 'sys', 'import', 'unittest', 'import', 'warnings', 'from', 'tornado.httpclient', 'import', 'AsyncHTTPClient', 'from', 'tornado.httpserver', 'import', 'HTTPServer', 'from', 'tornado.netutil', 'import', 'Resolver', 'from', 'tornado.options', 'import', 'define,', 'add_parse_callback,', 'options', 'TEST_MODULES', '=', '[', '\"tornado.httputil.doctests\",', '\"tornado.iostream.doctests\",', '\"tornado.util.doctests\",', '\"tornado.test.asyncio_test\",', '\"tornado.test.auth_test\",', '\"tornado.test.autoreload_test\",', '\"tornado.test.circlerefs_test\",', '\"tornado.test.concurrent_test\",', '\"tornado.test.curl_httpclient_test\",', '\"tornado.test.escape_test\",', '\"tornado.test.gen_test\",', '\"tornado.test.http1connection_test\",', '\"tornado.test.httpclient_test\",', '\"tornado.test.httpserver_test\",', '\"tornado.test.httputil_test\",', '\"tornado.test.import_test\",', '\"tornado.test.ioloop_test\",', '\"tornado.test.iostream_test\",', '\"tornado.test.locale_test\",', '\"tornado.test.locks_test\",', '\"tornado.test.netutil_test\",', '\"tornado.test.log_test\",', '\"tornado.test.options_test\",', '\"tornado.test.process_test\",', '\"tornado.test.queues_test\",', '\"tornado.test.routing_test\",', '\"tornado.test.simple_httpclient_test\",', '\"tornado.test.tcpclient_test\",', '\"tornado.test.tcpserver_test\",', '\"tornado.test.template_test\",', '\"tornado.test.testing_test\",', '\"tornado.test.twisted_test\",', '\"tornado.test.util_test\",', '\"tornado.test.web_test\",', '\"tornado.test.websocket_test\",', '\"tornado.test.wsgi_test\",', ']', 'def', 'all():', 'return', 'unittest.defaultTestLoader.loadTestsFromNames(TEST_MODULES)', 'def', 'test_runner_factory(stderr):', 'class', 'TornadoTextTestRunner(unittest.TextTestRunner):', 'def', '__init__(self,', '*args,', '**kwargs):', 'kwargs[\"stream\"]', '=', 'stderr', 'super().__init__(*args,', '**kwargs)', 'def', 'run(self,', 'test):', 'result', '=', 'super().run(test)', 'if', 'result.skipped:', 'skip_reasons', '=', 'set(reason', 'for', '(test,', 'reason)', 'in', 'result.skipped)', 'self.stream.write(', 'textwrap.fill(', '\"Some', 'tests', 'were', 'skipped', 'because:', '%s\"', '%', '\",', '\".join(sorted(skip_reasons))', ')', ')', 'self.stream.write(\"\\\\n\")', 'return', 'result', 'return', 'TornadoTextTestRunner', 'class', 'LogCounter(logging.Filter):', 'def', '__init__(self,', '*args,', '**kwargs):', 'super().__init__(*args,', '**kwargs)', 'self.info_count', '=', 'self.warning_count', '=', 'self.error_count', '=', '0', 'def', 'filter(self,', 'record):', 'if', 'record.levelno', '>=', 'logging.ERROR:', 'self.error_count', '+=', '1', 'elif', 'record.levelno', '>=', 'logging.WARNING:', 'self.warning_count', '+=', '1', 'elif', 'record.levelno', '>=', 'logging.INFO:', 'self.info_count', '+=', '1', 'return', 'True', 'class', 'CountingStderr(io.IOBase):', 'def', '__init__(self,', 'real):', 'self.real', '=', 'real', 'self.byte_count', '=', '0', 'def', 'write(self,', 'data):', 'self.byte_count', '+=', 'len(data)', 'return', 'self.real.write(data)', 'def', 'flush(self):', 'return', 'self.real.flush()', 'def', 'main():', 'warnings.filterwarnings(\"error\")', 'warnings.filterwarnings(\"ignore\",', 'category=ImportWarning)', 'warnings.filterwarnings(\"ignore\",', 'category=DeprecationWarning)', 'warnings.filterwarnings(\"error\",', 'category=DeprecationWarning,', 'module=r\"tornado\\\\..*\")', 'warnings.filterwarnings(\"ignore\",', 'category=PendingDeprecationWarning)', 'warnings.filterwarnings(', '\"error\",', 'category=PendingDeprecationWarning,', 'module=r\"tornado\\\\..*\"', ')', 'logging.getLogger(\"tornado.access\").setLevel(logging.CRITICAL)', 'define(', '\"httpclient\",', 'type=str,', 'default=None,', 'callback=lambda', 's:', 'AsyncHTTPClient.configure(', 's,', 'defaults=dict(allow_ipv6=False)', '),', ')', 'define(\"httpserver\",', 'type=str,', 'default=None,', 'callback=HTTPServer.configure)', 'define(\"resolver\",', 'type=str,', 'default=None,', 'callback=Resolver.configure)', 'define(', '\"debug_gc\",', 'type=str,', 'multiple=True,', 'help=\"A', 'comma-separated', 'list', 'of', 'gc', 'module', 'debug', 'constants,', '\"', '\"e.g.', 'DEBUG_STATS', 'or', 'DEBUG_COLLECTABLE,DEBUG_OBJECTS\",', 'callback=lambda', 'values:', 'gc.set_debug(', 'reduce(operator.or_,', '(getattr(gc,', 'v)', 'for', 'v', 'in', 'values))', '),', ')', 'define(', '\"fail-if-logs\",', 'default=True,', 'help=\"If', 'true,', 'fail', 'the', 'tests', 'if', 'any', 'log', 'output', 'is', 'produced', '(unless', 'captured', 'by', 'ExpectLog)\",', ')', 'def', 'set_locale(x):', 'locale.setlocale(locale.LC_ALL,', 'x)', 'define(\"locale\",', 'type=str,', 'default=None,', 'callback=set_locale)', 'log_counter', '=', 'LogCounter()', 'add_parse_callback(lambda:', 'logging.getLogger().handlers[0].addFilter(log_counter))', 'orig_stderr', '=', 'sys.stderr', 'counting_stderr', '=', 'CountingStderr(orig_stderr)', 'sys.stderr', '=', 'counting_stderr', 'import', 'tornado.testing', 'kwargs', '=', '{}', 'kwargs[\"warnings\"]', '=', 'False', 'kwargs[\"testRunner\"]', '=', 'test_runner_factory(orig_stderr)', 'try:', 'tornado.testing.main(**kwargs)', 'finally:', 'if', '(', 'log_counter.info_count', '>', '0', 'or', 'log_counter.warning_count', '>', '0', 'or', 'log_counter.error_count', '>', '0', 'or', 'counting_stderr.byte_count', '>', '0', '):', 'logging.error(', '\"logged', '%d', 'infos,', '%d', 'warnings,', '%d', 'errors,', 'and', '%d', 'bytes', 'to', 'stderr\",', 'log_counter.info_count,', 'log_counter.warning_count,', 'log_counter.error_count,', 'counting_stderr.byte_count,', ')', 'if', 'options.fail_if_logs:', 'sys.exit(1)', 'if', '__name__', '==', '\"__main__\":', 'main()']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/simple_httpclient_test.py",
        "vector": "['import', 'collections', 'from', 'contextlib', 'import', 'closing', 'import', 'errno', 'import', 'logging', 'import', 'os', 'import', 're', 'import', 'socket', 'import', 'ssl', 'import', 'sys', 'import', 'typing', 'from', 'tornado.escape', 'import', 'to_unicode,', 'utf8', 'from', 'tornado', 'import', 'gen,', 'version', 'from', 'tornado.httpclient', 'import', 'AsyncHTTPClient', 'from', 'tornado.httputil', 'import', 'HTTPHeaders,', 'ResponseStartLine', 'from', 'tornado.ioloop', 'import', 'IOLoop', 'from', 'tornado.iostream', 'import', 'UnsatisfiableReadError', 'from', 'tornado.locks', 'import', 'Event', 'from', 'tornado.log', 'import', 'gen_log', 'from', 'tornado.netutil', 'import', 'Resolver,', 'bind_sockets', 'from', 'tornado.simple_httpclient', 'import', '(', 'SimpleAsyncHTTPClient,', 'HTTPStreamClosedError,', 'HTTPTimeoutError,', ')', 'from', 'tornado.test.httpclient_test', 'import', '(', 'ChunkHandler,', 'CountdownHandler,', 'HelloWorldHandler,', 'RedirectHandler,', 'UserAgentHandler,', ')', 'from', 'tornado.test', 'import', 'httpclient_test', 'from', 'tornado.testing', 'import', '(', 'AsyncHTTPTestCase,', 'AsyncHTTPSTestCase,', 'AsyncTestCase,', 'ExpectLog,', 'gen_test,', ')', 'from', 'tornado.test.util', 'import', 'skipOnTravis,', 'skipIfNoIPv6,', 'refusing_port', 'from', 'tornado.web', 'import', 'RequestHandler,', 'Application,', 'url,', 'stream_request_body', 'class', 'SimpleHTTPClientCommonTestCase(httpclient_test.HTTPClientCommonTestCase):', 'def', 'get_http_client(self):', 'client', '=', 'SimpleAsyncHTTPClient(force_instance=True)', 'self.assertTrue(isinstance(client,', 'SimpleAsyncHTTPClient))', 'return', 'client', 'class', 'TriggerHandler(RequestHandler):', 'def', 'initialize(self,', 'queue,', 'wake_callback):', 'self.queue', '=', 'queue', 'self.wake_callback', '=', 'wake_callback', '@gen.coroutine', 'def', 'get(self):', 'logging.debug(\"queuing', 'trigger\")', 'event', '=', 'Event()', 'self.queue.append(event.set)', 'if', 'self.get_argument(\"wake\",', '\"true\")', '==', '\"true\":', 'self.wake_callback()', 'yield', 'event.wait()', 'class', 'ContentLengthHandler(RequestHandler):', 'def', 'get(self):', 'self.stream', '=', 'self.detach()', 'IOLoop.current().spawn_callback(self.write_response)', '@gen.coroutine', 'def', 'write_response(self):', 'yield', 'self.stream.write(', 'utf8(', '\"HTTP/1.0', '200', 'OK\\\\r\\\\nContent-Length:', '%s\\\\r\\\\n\\\\r\\\\nok\"', '%', 'self.get_argument(\"value\")', ')', ')', 'self.stream.close()', 'class', 'HeadHandler(RequestHandler):', 'def', 'head(self):', 'self.set_header(\"Content-Length\",', '\"7\")', 'class', 'OptionsHandler(RequestHandler):', 'def', 'options(self):', 'self.set_header(\"Access-Control-Allow-Origin\",', '\"*\")', 'self.write(\"ok\")', 'class', 'NoContentHandler(RequestHandler):', 'def', 'get(self):', 'self.set_status(204)', 'self.finish()', 'class', 'SeeOtherPostHandler(RequestHandler):', 'def', 'post(self):', 'redirect_code', '=', 'int(self.request.body)', 'assert', 'redirect_code', 'in', '(302,', '303),', '\"unexpected', 'body', '%r\"', '%', 'self.request.body', 'self.set_header(\"Location\",', '\"/see_other_get\")', 'self.set_status(redirect_code)', 'class', 'SeeOtherGetHandler(RequestHandler):', 'def', 'get(self):', 'if', 'self.request.body:', 'raise', 'Exception(\"unexpected', 'body', '%r\"', '%', 'self.request.body)', 'self.write(\"ok\")', 'class', 'HostEchoHandler(RequestHandler):', 'def', 'get(self):', 'self.write(self.request.headers[\"Host\"])', 'class', 'NoContentLengthHandler(RequestHandler):', 'def', 'get(self):', 'if', 'self.request.version.startswith(\"HTTP/1\"):', 'stream', '=', 'self.detach()', 'stream.write(b\"HTTP/1.0', '200', 'OK\\\\r\\\\n\\\\r\\\\n\"', 'b\"hello\")', 'stream.close()', 'else:', 'self.finish(\"HTTP/1', 'required\")', 'class', 'EchoPostHandler(RequestHandler):', 'def', 'post(self):', 'self.write(self.request.body)', '@stream_request_body', 'class', 'RespondInPrepareHandler(RequestHandler):', 'def', 'prepare(self):', 'self.set_status(403)', 'self.finish(\"forbidden\")', 'class', 'SimpleHTTPClientTestMixin(object):', 'def', 'create_client(self,', '**kwargs):', 'raise', 'NotImplementedError()', 'def', 'get_app(self:', 'typing.Any):', 'self.triggers', '=', '(', 'collections.deque()', ')', 'return', 'Application(', '[', 'url(', '\"/trigger\",', 'TriggerHandler,', 'dict(queue=self.triggers,', 'wake_callback=self.stop),', '),', 'url(\"/chunk\",', 'ChunkHandler),', 'url(\"/countdown/([0-9]+)\",', 'CountdownHandler,', 'name=\"countdown\"),', 'url(\"/hello\",', 'HelloWorldHandler),', 'url(\"/content_length\",', 'ContentLengthHandler),', 'url(\"/head\",', 'HeadHandler),', 'url(\"/options\",', 'OptionsHandler),', 'url(\"/no_content\",', 'NoContentHandler),', 'url(\"/see_other_post\",', 'SeeOtherPostHandler),', 'url(\"/see_other_get\",', 'SeeOtherGetHandler),', 'url(\"/host_echo\",', 'HostEchoHandler),', 'url(\"/no_content_length\",', 'NoContentLengthHandler),', 'url(\"/echo_post\",', 'EchoPostHandler),', 'url(\"/respond_in_prepare\",', 'RespondInPrepareHandler),', 'url(\"/redirect\",', 'RedirectHandler),', 'url(\"/user_agent\",', 'UserAgentHandler),', '],', 'gzip=True,', ')', 'def', 'test_singleton(self:', 'typing.Any):', 'self.assertTrue(SimpleAsyncHTTPClient()', 'is', 'SimpleAsyncHTTPClient())', 'self.assertTrue(', 'SimpleAsyncHTTPClient()', 'is', 'not', 'SimpleAsyncHTTPClient(force_instance=True)', ')', 'with', 'closing(IOLoop())', 'as', 'io_loop2:', 'async', 'def', 'make_client():', 'await', 'gen.sleep(0)', 'return', 'SimpleAsyncHTTPClient()', 'client1', '=', 'self.io_loop.run_sync(make_client)', 'client2', '=', 'io_loop2.run_sync(make_client)', 'self.assertTrue(client1', 'is', 'not', 'client2)', 'def', 'test_connection_limit(self:', 'typing.Any):', 'with', 'closing(self.create_client(max_clients=2))', 'as', 'client:', 'self.assertEqual(client.max_clients,', '2)', 'seen', '=', '[]', 'for', 'i', 'in', 'range(4):', 'def', 'cb(fut,', 'i=i):', 'seen.append(i)', 'self.stop()', 'client.fetch(self.get_url(\"/trigger\")).add_done_callback(cb)', 'self.wait(condition=lambda:', 'len(self.triggers)', '==', '2)', 'self.assertEqual(len(client.queue),', '2)', 'self.triggers.popleft()()', 'self.triggers.popleft()()', 'self.wait(condition=lambda:', '(len(self.triggers)', '==', '2', 'and', 'len(seen)', '==', '2))', 'self.assertEqual(set(seen),', 'set([0,', '1]))', 'self.assertEqual(len(client.queue),', '0)', 'self.triggers.popleft()()', 'self.triggers.popleft()()', 'self.wait(condition=lambda:', 'len(seen)', '==', '4)', 'self.assertEqual(set(seen),', 'set([0,', '1,', '2,', '3]))', 'self.assertEqual(len(self.triggers),', '0)', '@gen_test', 'def', 'test_redirect_connection_limit(self:', 'typing.Any):', 'with', 'closing(self.create_client(max_clients=1))', 'as', 'client:', 'response', '=', 'yield', 'client.fetch(self.get_url(\"/countdown/3\"),', 'max_redirects=3)', 'response.rethrow()', 'def', 'test_max_redirects(self:', 'typing.Any):', 'response', '=', 'self.fetch(\"/countdown/5\",', 'max_redirects=3)', 'self.assertEqual(302,', 'response.code)', 'self.assertTrue(response.request.url.endswith(\"/countdown/5\"))', 'self.assertTrue(response.effective_url.endswith(\"/countdown/2\"))', 'self.assertTrue(response.headers[\"Location\"].endswith(\"/countdown/1\"))', 'def', 'test_header_reuse(self:', 'typing.Any):', 'headers', '=', 'HTTPHeaders({\"User-Agent\":', '\"Foo\"})', 'self.fetch(\"/hello\",', 'headers=headers)', 'self.assertEqual(list(headers.get_all()),', '[(\"User-Agent\",', '\"Foo\")])', 'def', 'test_default_user_agent(self:', 'typing.Any):', 'response', '=', 'self.fetch(\"/user_agent\",', 'method=\"GET\")', 'self.assertEqual(200,', 'response.code)', 'self.assertEqual(response.body.decode(),', '\"Tornado/{}\".format(version))', 'def', 'test_see_other_redirect(self:', 'typing.Any):', 'for', 'code', 'in', '(302,', '303):', 'response', '=', 'self.fetch(\"/see_other_post\",', 'method=\"POST\",', 'body=\"%d\"', '%', 'code)', 'self.assertEqual(200,', 'response.code)', 'self.assertTrue(response.request.url.endswith(\"/see_other_post\"))', 'self.assertTrue(response.effective_url.endswith(\"/see_other_get\"))', 'self.assertEqual(\"POST\",', 'response.request.method)', '@skipOnTravis', '@gen_test', 'def', 'test_connect_timeout(self:', 'typing.Any):', 'timeout', '=', '0.1', 'cleanup_event', '=', 'Event()', 'test', '=', 'self', 'class', 'TimeoutResolver(Resolver):', 'async', 'def', 'resolve(self,', '*args,', '**kwargs):', 'await', 'cleanup_event.wait()', 'return', '[(socket.AF_INET,', '(\"127.0.0.1\",', 'test.get_http_port()))]', 'with', 'closing(self.create_client(resolver=TimeoutResolver()))', 'as', 'client:', 'with', 'self.assertRaises(HTTPTimeoutError):', 'yield', 'client.fetch(', 'self.get_url(\"/hello\"),', 'connect_timeout=timeout,', 'request_timeout=3600,', 'raise_error=True,', ')', 'cleanup_event.set()', 'yield', 'gen.sleep(0.2)', '@skipOnTravis', 'def', 'test_request_timeout(self:', 'typing.Any):', 'timeout', '=', '0.1', 'if', 'os.name', '==', '\"nt\":', 'timeout', '=', '0.5', 'with', 'self.assertRaises(HTTPTimeoutError):', 'self.fetch(\"/trigger?wake=false\",', 'request_timeout=timeout,', 'raise_error=True)', 'self.triggers.popleft()()', 'self.io_loop.run_sync(lambda:', 'gen.sleep(0))', '@skipIfNoIPv6', 'def', 'test_ipv6(self:', 'typing.Any):', '[sock]', '=', 'bind_sockets(0,', '\"::1\",', 'family=socket.AF_INET6)', 'port', '=', 'sock.getsockname()[1]', 'self.http_server.add_socket(sock)', 'url', '=', '\"%s://[::1]:%d/hello\"', '%', '(self.get_protocol(),', 'port)', 'with', 'self.assertRaises(Exception):', 'self.fetch(url,', 'allow_ipv6=False,', 'raise_error=True)', 'response', '=', 'self.fetch(url)', 'self.assertEqual(response.body,', 'b\"Hello', 'world!\")', 'def', 'test_multiple_content_length_accepted(self:', 'typing.Any):', 'response', '=', 'self.fetch(\"/content_length?value=2,2\")', 'self.assertEqual(response.body,', 'b\"ok\")', 'response', '=', 'self.fetch(\"/content_length?value=2,%202,2\")', 'self.assertEqual(response.body,', 'b\"ok\")', 'with', 'ExpectLog(', 'gen_log,', '\".*Multiple', 'unequal', 'Content-Lengths\",', 'level=logging.INFO', '):', 'with', 'self.assertRaises(HTTPStreamClosedError):', 'self.fetch(\"/content_length?value=2,4\",', 'raise_error=True)', 'with', 'self.assertRaises(HTTPStreamClosedError):', 'self.fetch(\"/content_length?value=2,%202,3\",', 'raise_error=True)', 'def', 'test_head_request(self:', 'typing.Any):', 'response', '=', 'self.fetch(\"/head\",', 'method=\"HEAD\")', 'self.assertEqual(response.code,', '200)', 'self.assertEqual(response.headers[\"content-length\"],', '\"7\")', 'self.assertFalse(response.body)', 'def', 'test_options_request(self:', 'typing.Any):', 'response', '=', 'self.fetch(\"/options\",', 'method=\"OPTIONS\")', 'self.assertEqual(response.code,', '200)', 'self.assertEqual(response.headers[\"content-length\"],', '\"2\")', 'self.assertEqual(response.headers[\"access-control-allow-origin\"],', '\"*\")', 'self.assertEqual(response.body,', 'b\"ok\")', 'def', 'test_no_content(self:', 'typing.Any):', 'response', '=', 'self.fetch(\"/no_content\")', 'self.assertEqual(response.code,', '204)', 'self.assertNotIn(\"Content-Length\",', 'response.headers)', 'def', 'test_host_header(self:', 'typing.Any):', 'host_re', '=', 're.compile(b\"^127.0.0.1:[0-9]+$\")', 'response', '=', 'self.fetch(\"/host_echo\")', 'self.assertTrue(host_re.match(response.body))', 'url', '=', 'self.get_url(\"/host_echo\").replace(\"http://\",', '\"http://me:secret@\")', 'response', '=', 'self.fetch(url)', 'self.assertTrue(host_re.match(response.body),', 'response.body)', 'def', 'test_connection_refused(self:', 'typing.Any):', 'cleanup_func,', 'port', '=', 'refusing_port()', 'self.addCleanup(cleanup_func)', 'with', 'ExpectLog(gen_log,', '\".*\",', 'required=False):', 'with', 'self.assertRaises(socket.error)', 'as', 'cm:', 'self.fetch(\"http://127.0.0.1:%d/\"', '%', 'port,', 'raise_error=True)', 'if', 'sys.platform', '!=', '\"cygwin\":', 'contains_errno', '=', 'str(errno.ECONNREFUSED)', 'in', 'str(cm.exception)', 'if', 'not', 'contains_errno', 'and', 'hasattr(errno,', '\"WSAECONNREFUSED\"):', 'contains_errno', '=', 'str(errno.WSAECONNREFUSED)', 'in', 'str(', 'cm.exception', ')', 'self.assertTrue(contains_errno,', 'cm.exception)', 'expected_message', '=', 'os.strerror(errno.ECONNREFUSED)', 'self.assertTrue(expected_message', 'in', 'str(cm.exception),', 'cm.exception)', 'def', 'test_queue_timeout(self:', 'typing.Any):', 'with', 'closing(self.create_client(max_clients=1))', 'as', 'client:', 'fut1', '=', 'client.fetch(self.get_url(\"/trigger\"),', 'request_timeout=10)', 'self.wait()', 'with', 'self.assertRaises(HTTPTimeoutError)', 'as', 'cm:', 'self.io_loop.run_sync(', 'lambda:', 'client.fetch(', 'self.get_url(\"/hello\"),', 'connect_timeout=0.1,', 'raise_error=True', ')', ')', 'self.assertEqual(str(cm.exception),', '\"Timeout', 'in', 'request', 'queue\")', 'self.triggers.popleft()()', 'self.io_loop.run_sync(lambda:', 'fut1)', 'def', 'test_no_content_length(self:', 'typing.Any):', 'response', '=', 'self.fetch(\"/no_content_length\")', 'if', 'response.body', '==', 'b\"HTTP/1', 'required\":', 'self.skipTest(\"requires', 'HTTP/1.x\")', 'else:', 'self.assertEqual(b\"hello\",', 'response.body)', 'def', 'sync_body_producer(self,', 'write):', 'write(b\"1234\")', 'write(b\"5678\")', '@gen.coroutine', 'def', 'async_body_producer(self,', 'write):', 'yield', 'write(b\"1234\")', 'yield', 'gen.moment', 'yield', 'write(b\"5678\")', 'def', 'test_sync_body_producer_chunked(self:', 'typing.Any):', 'response', '=', 'self.fetch(', '\"/echo_post\",', 'method=\"POST\",', 'body_producer=self.sync_body_producer', ')', 'response.rethrow()', 'self.assertEqual(response.body,', 'b\"12345678\")', 'def', 'test_sync_body_producer_content_length(self:', 'typing.Any):', 'response', '=', 'self.fetch(', '\"/echo_post\",', 'method=\"POST\",', 'body_producer=self.sync_body_producer,', 'headers={\"Content-Length\":', '\"8\"},', ')', 'response.rethrow()', 'self.assertEqual(response.body,', 'b\"12345678\")', 'def', 'test_async_body_producer_chunked(self:', 'typing.Any):', 'response', '=', 'self.fetch(', '\"/echo_post\",', 'method=\"POST\",', 'body_producer=self.async_body_producer', ')', 'response.rethrow()', 'self.assertEqual(response.body,', 'b\"12345678\")', 'def', 'test_async_body_producer_content_length(self:', 'typing.Any):', 'response', '=', 'self.fetch(', '\"/echo_post\",', 'method=\"POST\",', 'body_producer=self.async_body_producer,', 'headers={\"Content-Length\":', '\"8\"},', ')', 'response.rethrow()', 'self.assertEqual(response.body,', 'b\"12345678\")', 'def', 'test_native_body_producer_chunked(self:', 'typing.Any):', 'async', 'def', 'body_producer(write):', 'await', 'write(b\"1234\")', 'import', 'asyncio', 'await', 'asyncio.sleep(0)', 'await', 'write(b\"5678\")', 'response', '=', 'self.fetch(\"/echo_post\",', 'method=\"POST\",', 'body_producer=body_producer)', 'response.rethrow()', 'self.assertEqual(response.body,', 'b\"12345678\")', 'def', 'test_native_body_producer_content_length(self:', 'typing.Any):', 'async', 'def', 'body_producer(write):', 'await', 'write(b\"1234\")', 'import', 'asyncio', 'await', 'asyncio.sleep(0)', 'await', 'write(b\"5678\")', 'response', '=', 'self.fetch(', '\"/echo_post\",', 'method=\"POST\",', 'body_producer=body_producer,', 'headers={\"Content-Length\":', '\"8\"},', ')', 'response.rethrow()', 'self.assertEqual(response.body,', 'b\"12345678\")', 'def', 'test_100_continue(self:', 'typing.Any):', 'response', '=', 'self.fetch(', '\"/echo_post\",', 'method=\"POST\",', 'body=b\"1234\",', 'expect_100_continue=True', ')', 'self.assertEqual(response.body,', 'b\"1234\")', 'def', 'test_100_continue_early_response(self:', 'typing.Any):', 'def', 'body_producer(write):', 'raise', 'Exception(\"should', 'not', 'be', 'called\")', 'response', '=', 'self.fetch(', '\"/respond_in_prepare\",', 'method=\"POST\",', 'body_producer=body_producer,', 'expect_100_continue=True,', ')', 'self.assertEqual(response.code,', '403)', 'def', 'test_streaming_follow_redirects(self:', 'typing.Any):', 'headers', '=', '[]', 'chunk_bytes', '=', '[]', 'self.fetch(', '\"/redirect?url=/hello\",', 'header_callback=headers.append,', 'streaming_callback=chunk_bytes.append,', ')', 'chunks', '=', 'list(map(to_unicode,', 'chunk_bytes))', 'self.assertEqual(chunks,', '[\"Hello', 'world!\"])', 'num_start_lines', '=', 'len([h', 'for', 'h', 'in', 'headers', 'if', 'h.startswith(\"HTTP/\")])', 'self.assertEqual(num_start_lines,', '1)', 'class', 'SimpleHTTPClientTestCase(SimpleHTTPClientTestMixin,', 'AsyncHTTPTestCase):', 'def', 'setUp(self):', 'super().setUp()', 'self.http_client', '=', 'self.create_client()', 'def', 'create_client(self,', '**kwargs):', 'return', 'SimpleAsyncHTTPClient(force_instance=True,', '**kwargs)', 'class', 'SimpleHTTPSClientTestCase(SimpleHTTPClientTestMixin,', 'AsyncHTTPSTestCase):', 'def', 'setUp(self):', 'super().setUp()', 'self.http_client', '=', 'self.create_client()', 'def', 'create_client(self,', '**kwargs):', 'return', 'SimpleAsyncHTTPClient(', 'force_instance=True,', 'defaults=dict(validate_cert=False),', '**kwargs', ')', 'def', 'test_ssl_options(self):', 'resp', '=', 'self.fetch(\"/hello\",', 'ssl_options={\"cert_reqs\":', 'ssl.CERT_NONE})', 'self.assertEqual(resp.body,', 'b\"Hello', 'world!\")', 'def', 'test_ssl_context(self):', 'ssl_ctx', '=', 'ssl.create_default_context(ssl.Purpose.SERVER_AUTH)', 'ssl_ctx.check_hostname', '=', 'False', 'ssl_ctx.verify_mode', '=', 'ssl.CERT_NONE', 'resp', '=', 'self.fetch(\"/hello\",', 'ssl_options=ssl_ctx)', 'self.assertEqual(resp.body,', 'b\"Hello', 'world!\")', 'def', 'test_ssl_options_handshake_fail(self):', 'with', 'ExpectLog(gen_log,', '\"SSL', 'Error|Uncaught', 'exception\",', 'required=False):', 'with', 'self.assertRaises(ssl.SSLError):', 'self.fetch(', '\"/hello\",', 'ssl_options=dict(cert_reqs=ssl.CERT_REQUIRED),', 'raise_error=True,', ')', 'def', 'test_ssl_context_handshake_fail(self):', 'with', 'ExpectLog(gen_log,', '\"SSL', 'Error|Uncaught', 'exception\"):', 'ctx', '=', 'ssl.create_default_context(ssl.Purpose.SERVER_AUTH)', 'with', 'self.assertRaises(ssl.SSLError):', 'self.fetch(\"/hello\",', 'ssl_options=ctx,', 'raise_error=True)', 'def', 'test_error_logging(self):', 'with', 'ExpectLog(gen_log,', '\".*\")', 'as', 'expect_log:', 'with', 'self.assertRaises(ssl.SSLError):', 'self.fetch(\"/\",', 'validate_cert=True,', 'raise_error=True)', 'self.assertFalse(expect_log.logged_stack)', 'class', 'CreateAsyncHTTPClientTestCase(AsyncTestCase):', 'def', 'setUp(self):', 'super().setUp()', 'self.saved', '=', 'AsyncHTTPClient._save_configuration()', 'def', 'tearDown(self):', 'AsyncHTTPClient._restore_configuration(self.saved)', 'super().tearDown()', 'def', 'test_max_clients(self):', 'AsyncHTTPClient.configure(SimpleAsyncHTTPClient)', 'with', 'closing(AsyncHTTPClient(force_instance=True))', 'as', 'client:', 'self.assertEqual(client.max_clients,', '10)', 'with', 'closing(AsyncHTTPClient(max_clients=11,', 'force_instance=True))', 'as', 'client:', 'self.assertEqual(client.max_clients,', '11)', 'AsyncHTTPClient.configure(SimpleAsyncHTTPClient,', 'max_clients=12)', 'with', 'closing(AsyncHTTPClient(force_instance=True))', 'as', 'client:', 'self.assertEqual(client.max_clients,', '12)', 'with', 'closing(AsyncHTTPClient(max_clients=13,', 'force_instance=True))', 'as', 'client:', 'self.assertEqual(client.max_clients,', '13)', 'with', 'closing(AsyncHTTPClient(max_clients=14,', 'force_instance=True))', 'as', 'client:', 'self.assertEqual(client.max_clients,', '14)', 'class', 'HTTP100ContinueTestCase(AsyncHTTPTestCase):', 'def', 'respond_100(self,', 'request):', 'self.http1', '=', 'request.version.startswith(\"HTTP/1.\")', 'if', 'not', 'self.http1:', 'request.connection.write_headers(', 'ResponseStartLine(\"\",', '200,', '\"OK\"),', 'HTTPHeaders()', ')', 'request.connection.finish()', 'return', 'self.request', '=', 'request', 'fut', '=', 'self.request.connection.stream.write(b\"HTTP/1.1', '100', 'CONTINUE\\\\r\\\\n\\\\r\\\\n\")', 'fut.add_done_callback(self.respond_200)', 'def', 'respond_200(self,', 'fut):', 'fut.result()', 'fut', '=', 'self.request.connection.stream.write(', 'b\"HTTP/1.1', '200', 'OK\\\\r\\\\nContent-Length:', '1\\\\r\\\\n\\\\r\\\\nA\"', ')', 'fut.add_done_callback(lambda', 'f:', 'self.request.connection.stream.close())', 'def', 'get_app(self):', 'return', 'self.respond_100', 'def', 'test_100_continue(self):', 'res', '=', 'self.fetch(\"/\")', 'if', 'not', 'self.http1:', 'self.skipTest(\"requires', 'HTTP/1.x\")', 'self.assertEqual(res.body,', 'b\"A\")', 'class', 'HTTP204NoContentTestCase(AsyncHTTPTestCase):', 'def', 'respond_204(self,', 'request):', 'self.http1', '=', 'request.version.startswith(\"HTTP/1.\")', 'if', 'not', 'self.http1:', 'request.connection.write_headers(', 'ResponseStartLine(\"\",', '200,', '\"OK\"),', 'HTTPHeaders()', ')', 'request.connection.finish()', 'return', 'stream', '=', 'request.connection.detach()', 'stream.write(b\"HTTP/1.1', '204', 'No', 'content\\\\r\\\\n\")', 'if', 'request.arguments.get(\"error\",', '[False])[-1]:', 'stream.write(b\"Content-Length:', '5\\\\r\\\\n\")', 'else:', 'stream.write(b\"Content-Length:', '0\\\\r\\\\n\")', 'stream.write(b\"\\\\r\\\\n\")', 'stream.close()', 'def', 'get_app(self):', 'return', 'self.respond_204', 'def', 'test_204_no_content(self):', 'resp', '=', 'self.fetch(\"/\")', 'if', 'not', 'self.http1:', 'self.skipTest(\"requires', 'HTTP/1.x\")', 'self.assertEqual(resp.code,', '204)', 'self.assertEqual(resp.body,', 'b\"\")', 'def', 'test_204_invalid_content_length(self):', 'with', 'ExpectLog(', 'gen_log,', '\".*Response', 'with', 'code', '204', 'should', 'not', 'have', 'body\",', 'level=logging.INFO', '):', 'with', 'self.assertRaises(HTTPStreamClosedError):', 'self.fetch(\"/?error=1\",', 'raise_error=True)', 'if', 'not', 'self.http1:', 'self.skipTest(\"requires', 'HTTP/1.x\")', 'if', 'self.http_client.configured_class', '!=', 'SimpleAsyncHTTPClient:', 'self.skipTest(\"curl', 'client', 'accepts', 'invalid', 'headers\")', 'class', 'HostnameMappingTestCase(AsyncHTTPTestCase):', 'def', 'setUp(self):', 'super().setUp()', 'self.http_client', '=', 'SimpleAsyncHTTPClient(', 'hostname_mapping={', '\"www.example.com\":', '\"127.0.0.1\",', '(\"foo.example.com\",', '8000):', '(\"127.0.0.1\",', 'self.get_http_port()),', '}', ')', 'def', 'get_app(self):', 'return', 'Application([url(\"/hello\",', 'HelloWorldHandler)])', 'def', 'test_hostname_mapping(self):', 'response', '=', 'self.fetch(\"http://www.example.com:%d/hello\"', '%', 'self.get_http_port())', 'response.rethrow()', 'self.assertEqual(response.body,', 'b\"Hello', 'world!\")', 'def', 'test_port_mapping(self):', 'response', '=', 'self.fetch(\"http://foo.example.com:8000/hello\")', 'response.rethrow()', 'self.assertEqual(response.body,', 'b\"Hello', 'world!\")', 'class', 'ResolveTimeoutTestCase(AsyncHTTPTestCase):', 'def', 'setUp(self):', 'self.cleanup_event', '=', 'Event()', 'test', '=', 'self', 'class', 'BadResolver(Resolver):', '@gen.coroutine', 'def', 'resolve(self,', '*args,', '**kwargs):', 'yield', 'test.cleanup_event.wait()', 'return', '[(socket.AF_INET,', '(\"127.0.0.1\",', 'test.get_http_port()))]', 'super().setUp()', 'self.http_client', '=', 'SimpleAsyncHTTPClient(resolver=BadResolver())', 'def', 'get_app(self):', 'return', 'Application([url(\"/hello\",', 'HelloWorldHandler)])', 'def', 'test_resolve_timeout(self):', 'with', 'self.assertRaises(HTTPTimeoutError):', 'self.fetch(\"/hello\",', 'connect_timeout=0.1,', 'raise_error=True)', 'self.cleanup_event.set()', 'self.io_loop.run_sync(lambda:', 'gen.sleep(0))', 'class', 'MaxHeaderSizeTest(AsyncHTTPTestCase):', 'def', 'get_app(self):', 'class', 'SmallHeaders(RequestHandler):', 'def', 'get(self):', 'self.set_header(\"X-Filler\",', '\"a\"', '*', '100)', 'self.write(\"ok\")', 'class', 'LargeHeaders(RequestHandler):', 'def', 'get(self):', 'self.set_header(\"X-Filler\",', '\"a\"', '*', '1000)', 'self.write(\"ok\")', 'return', 'Application([(\"/small\",', 'SmallHeaders),', '(\"/large\",', 'LargeHeaders)])', 'def', 'get_http_client(self):', 'return', 'SimpleAsyncHTTPClient(max_header_size=1024)', 'def', 'test_small_headers(self):', 'response', '=', 'self.fetch(\"/small\")', 'response.rethrow()', 'self.assertEqual(response.body,', 'b\"ok\")', 'def', 'test_large_headers(self):', 'with', 'ExpectLog(gen_log,', '\"Unsatisfiable', 'read\",', 'level=logging.INFO):', 'with', 'self.assertRaises(UnsatisfiableReadError):', 'self.fetch(\"/large\",', 'raise_error=True)', 'class', 'MaxBodySizeTest(AsyncHTTPTestCase):', 'def', 'get_app(self):', 'class', 'SmallBody(RequestHandler):', 'def', 'get(self):', 'self.write(\"a\"', '*', '1024', '*', '64)', 'class', 'LargeBody(RequestHandler):', 'def', 'get(self):', 'self.write(\"a\"', '*', '1024', '*', '100)', 'return', 'Application([(\"/small\",', 'SmallBody),', '(\"/large\",', 'LargeBody)])', 'def', 'get_http_client(self):', 'return', 'SimpleAsyncHTTPClient(max_body_size=1024', '*', '64)', 'def', 'test_small_body(self):', 'response', '=', 'self.fetch(\"/small\")', 'response.rethrow()', 'self.assertEqual(response.body,', 'b\"a\"', '*', '1024', '*', '64)', 'def', 'test_large_body(self):', 'with', 'ExpectLog(', 'gen_log,', '\"Malformed', 'HTTP', 'message', 'from', 'None:', 'Content-Length', 'too', 'long\",', 'level=logging.INFO,', '):', 'with', 'self.assertRaises(HTTPStreamClosedError):', 'self.fetch(\"/large\",', 'raise_error=True)', 'class', 'MaxBufferSizeTest(AsyncHTTPTestCase):', 'def', 'get_app(self):', 'class', 'LargeBody(RequestHandler):', 'def', 'get(self):', 'self.write(\"a\"', '*', '1024', '*', '100)', 'return', 'Application([(\"/large\",', 'LargeBody)])', 'def', 'get_http_client(self):', 'return', 'SimpleAsyncHTTPClient(', 'max_body_size=1024', '*', '100,', 'max_buffer_size=1024', '*', '64', ')', 'def', 'test_large_body(self):', 'response', '=', 'self.fetch(\"/large\")', 'response.rethrow()', 'self.assertEqual(response.body,', 'b\"a\"', '*', '1024', '*', '100)', 'class', 'ChunkedWithContentLengthTest(AsyncHTTPTestCase):', 'def', 'get_app(self):', 'class', 'ChunkedWithContentLength(RequestHandler):', 'def', 'get(self):', 'self.set_header(\"Transfer-Encoding\",', '\"chunked\")', 'self.write(\"Hello', 'world\")', 'return', 'Application([(\"/chunkwithcl\",', 'ChunkedWithContentLength)])', 'def', 'get_http_client(self):', 'return', 'SimpleAsyncHTTPClient()', 'def', 'test_chunked_with_content_length(self):', 'with', 'ExpectLog(', 'gen_log,', '(', '\"Malformed', 'HTTP', 'message', 'from', 'None:', 'Response', '\"', '\"with', 'both', 'Transfer-Encoding', 'and', 'Content-Length\"', '),', 'level=logging.INFO,', '):', 'with', 'self.assertRaises(HTTPStreamClosedError):', 'self.fetch(\"/chunkwithcl\",', 'raise_error=True)']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/tcpclient_test.py",
        "vector": "['from', 'contextlib', 'import', 'closing', 'import', 'getpass', 'import', 'os', 'import', 'socket', 'import', 'unittest', 'from', 'tornado.concurrent', 'import', 'Future', 'from', 'tornado.netutil', 'import', 'bind_sockets,', 'Resolver', 'from', 'tornado.queues', 'import', 'Queue', 'from', 'tornado.tcpclient', 'import', 'TCPClient,', '_Connector', 'from', 'tornado.tcpserver', 'import', 'TCPServer', 'from', 'tornado.testing', 'import', 'AsyncTestCase,', 'gen_test', 'from', 'tornado.test.util', 'import', 'skipIfNoIPv6,', 'refusing_port,', 'skipIfNonUnix', 'from', 'tornado.gen', 'import', 'TimeoutError', 'import', 'typing', 'if', 'typing.TYPE_CHECKING:', 'from', 'tornado.iostream', 'import', 'IOStream', 'from', 'typing', 'import', 'List,', 'Dict,', 'Tuple', 'AF1,', 'AF2', '=', '1,', '2', 'class', 'TestTCPServer(TCPServer):', 'def', '__init__(self,', 'family):', 'super().__init__()', 'self.streams', '=', '[]', 'self.queue', '=', 'Queue()', 'sockets', '=', 'bind_sockets(0,', '\"localhost\",', 'family)', 'self.add_sockets(sockets)', 'self.port', '=', 'sockets[0].getsockname()[1]', 'def', 'handle_stream(self,', 'stream,', 'address):', 'self.streams.append(stream)', 'self.queue.put(stream)', 'def', 'stop(self):', 'super().stop()', 'for', 'stream', 'in', 'self.streams:', 'stream.close()', 'class', 'TCPClientTest(AsyncTestCase):', 'def', 'setUp(self):', 'super().setUp()', 'self.server', '=', 'None', 'self.client', '=', 'TCPClient()', 'def', 'start_server(self,', 'family):', 'if', 'family', '==', 'socket.AF_UNSPEC', 'and', '\"TRAVIS\"', 'in', 'os.environ:', 'self.skipTest(\"dual-stack', 'servers', 'often', 'have', 'port', 'conflicts', 'on', 'travis\")', 'self.server', '=', 'TestTCPServer(family)', 'return', 'self.server.port', 'def', 'stop_server(self):', 'if', 'self.server', 'is', 'not', 'None:', 'self.server.stop()', 'self.server', '=', 'None', 'def', 'tearDown(self):', 'self.client.close()', 'self.stop_server()', 'super().tearDown()', 'def', 'skipIfLocalhostV4(self):', 'addrinfo', '=', 'self.io_loop.run_sync(lambda:', 'Resolver().resolve(\"localhost\",', '80))', 'families', '=', 'set(addr[0]', 'for', 'addr', 'in', 'addrinfo)', 'if', 'socket.AF_INET6', 'not', 'in', 'families:', 'self.skipTest(\"localhost', 'does', 'not', 'resolve', 'to', 'ipv6\")', '@gen_test', 'def', 'do_test_connect(self,', 'family,', 'host,', 'source_ip=None,', 'source_port=None):', 'port', '=', 'self.start_server(family)', 'stream', '=', 'yield', 'self.client.connect(', 'host,', 'port,', 'source_ip=source_ip,', 'source_port=source_port,', 'af=family,', ')', 'assert', 'self.server', 'is', 'not', 'None', 'server_stream', '=', 'yield', 'self.server.queue.get()', 'with', 'closing(stream):', 'stream.write(b\"hello\")', 'data', '=', 'yield', 'server_stream.read_bytes(5)', 'self.assertEqual(data,', 'b\"hello\")', 'def', 'test_connect_ipv4_ipv4(self):', 'self.do_test_connect(socket.AF_INET,', '\"127.0.0.1\")', 'def', 'test_connect_ipv4_dual(self):', 'self.do_test_connect(socket.AF_INET,', '\"localhost\")', '@skipIfNoIPv6', 'def', 'test_connect_ipv6_ipv6(self):', 'self.skipIfLocalhostV4()', 'self.do_test_connect(socket.AF_INET6,', '\"::1\")', '@skipIfNoIPv6', 'def', 'test_connect_ipv6_dual(self):', 'self.skipIfLocalhostV4()', 'if', 'Resolver.configured_class().__name__.endswith(\"TwistedResolver\"):', 'self.skipTest(\"TwistedResolver', 'does', 'not', 'support', 'multiple', 'addresses\")', 'self.do_test_connect(socket.AF_INET6,', '\"localhost\")', 'def', 'test_connect_unspec_ipv4(self):', 'self.do_test_connect(socket.AF_UNSPEC,', '\"127.0.0.1\")', '@skipIfNoIPv6', 'def', 'test_connect_unspec_ipv6(self):', 'self.skipIfLocalhostV4()', 'self.do_test_connect(socket.AF_UNSPEC,', '\"::1\")', 'def', 'test_connect_unspec_dual(self):', 'self.do_test_connect(socket.AF_UNSPEC,', '\"localhost\")', '@gen_test', 'def', 'test_refused_ipv4(self):', 'cleanup_func,', 'port', '=', 'refusing_port()', 'self.addCleanup(cleanup_func)', 'with', 'self.assertRaises(IOError):', 'yield', 'self.client.connect(\"127.0.0.1\",', 'port)', 'def', 'test_source_ip_fail(self):', 'self.assertRaises(', 'socket.error,', 'self.do_test_connect,', 'socket.AF_INET,', '\"127.0.0.1\",', 'source_ip=\"8.8.8.8\",', ')', 'def', 'test_source_ip_success(self):', 'self.do_test_connect(socket.AF_INET,', '\"127.0.0.1\",', 'source_ip=\"127.0.0.1\")', '@skipIfNonUnix', 'def', 'test_source_port_fail(self):', 'if', 'getpass.getuser()', '==', '\"root\":', 'self.skipTest(\"running', 'as', 'root\")', 'self.assertRaises(', 'socket.error,', 'self.do_test_connect,', 'socket.AF_INET,', '\"127.0.0.1\",', 'source_port=1,', ')', '@gen_test', 'def', 'test_connect_timeout(self):', 'timeout', '=', '0.05', 'class', 'TimeoutResolver(Resolver):', 'def', 'resolve(self,', '*args,', '**kwargs):', 'return', 'Future()', 'with', 'self.assertRaises(TimeoutError):', 'yield', 'TCPClient(resolver=TimeoutResolver()).connect(', '\"1.2.3.4\",', '12345,', 'timeout=timeout', ')', 'class', 'TestConnectorSplit(unittest.TestCase):', 'def', 'test_one_family(self):', 'primary,', 'secondary', '=', '_Connector.split([(AF1,', '\"a\"),', '(AF1,', '\"b\")])', 'self.assertEqual(primary,', '[(AF1,', '\"a\"),', '(AF1,', '\"b\")])', 'self.assertEqual(secondary,', '[])', 'def', 'test_mixed(self):', 'primary,', 'secondary', '=', '_Connector.split(', '[(AF1,', '\"a\"),', '(AF2,', '\"b\"),', '(AF1,', '\"c\"),', '(AF2,', '\"d\")]', ')', 'self.assertEqual(primary,', '[(AF1,', '\"a\"),', '(AF1,', '\"c\")])', 'self.assertEqual(secondary,', '[(AF2,', '\"b\"),', '(AF2,', '\"d\")])', 'class', 'ConnectorTest(AsyncTestCase):', 'class', 'FakeStream(object):', 'def', '__init__(self):', 'self.closed', '=', 'False', 'def', 'close(self):', 'self.closed', '=', 'True', 'def', 'setUp(self):', 'super().setUp()', 'self.connect_futures', '=', '(', '{}', ')', 'self.streams', '=', '{}', 'self.addrinfo', '=', '[(AF1,', '\"a\"),', '(AF1,', '\"b\"),', '(AF2,', '\"c\"),', '(AF2,', '\"d\")]', 'def', 'tearDown(self):', 'for', 'stream', 'in', 'self.streams.values():', 'self.assertFalse(stream.closed)', 'super().tearDown()', 'def', 'create_stream(self,', 'af,', 'addr):', 'stream', '=', 'ConnectorTest.FakeStream()', 'self.streams[addr]', '=', 'stream', 'future', '=', 'Future()', 'self.connect_futures[(af,', 'addr)]', '=', 'future', 'return', 'stream,', 'future', 'def', 'assert_pending(self,', '*keys):', 'self.assertEqual(sorted(self.connect_futures.keys()),', 'sorted(keys))', 'def', 'resolve_connect(self,', 'af,', 'addr,', 'success):', 'future', '=', 'self.connect_futures.pop((af,', 'addr))', 'if', 'success:', 'future.set_result(self.streams[addr])', 'else:', 'self.streams.pop(addr)', 'future.set_exception(IOError())', 'self.io_loop.add_callback(self.stop)', 'self.wait()', 'def', 'assert_connector_streams_closed(self,', 'conn):', 'for', 'stream', 'in', 'conn.streams:', 'self.assertTrue(stream.closed)', 'def', 'start_connect(self,', 'addrinfo):', 'conn', '=', '_Connector(addrinfo,', 'self.create_stream)', 'future', '=', 'conn.start(3600,', 'connect_timeout=self.io_loop.time()', '+', '3600)', 'return', 'conn,', 'future', 'def', 'test_immediate_success(self):', 'conn,', 'future', '=', 'self.start_connect(self.addrinfo)', 'self.assertEqual(list(self.connect_futures.keys()),', '[(AF1,', '\"a\")])', 'self.resolve_connect(AF1,', '\"a\",', 'True)', 'self.assertEqual(future.result(),', '(AF1,', '\"a\",', 'self.streams[\"a\"]))', 'def', 'test_immediate_failure(self):', 'conn,', 'future', '=', 'self.start_connect([(AF1,', '\"a\")])', 'self.assert_pending((AF1,', '\"a\"))', 'self.resolve_connect(AF1,', '\"a\",', 'False)', 'self.assertRaises(IOError,', 'future.result)', 'def', 'test_one_family_second_try(self):', 'conn,', 'future', '=', 'self.start_connect([(AF1,', '\"a\"),', '(AF1,', '\"b\")])', 'self.assert_pending((AF1,', '\"a\"))', 'self.resolve_connect(AF1,', '\"a\",', 'False)', 'self.assert_pending((AF1,', '\"b\"))', 'self.resolve_connect(AF1,', '\"b\",', 'True)', 'self.assertEqual(future.result(),', '(AF1,', '\"b\",', 'self.streams[\"b\"]))', 'def', 'test_one_family_second_try_failure(self):', 'conn,', 'future', '=', 'self.start_connect([(AF1,', '\"a\"),', '(AF1,', '\"b\")])', 'self.assert_pending((AF1,', '\"a\"))', 'self.resolve_connect(AF1,', '\"a\",', 'False)', 'self.assert_pending((AF1,', '\"b\"))', 'self.resolve_connect(AF1,', '\"b\",', 'False)', 'self.assertRaises(IOError,', 'future.result)', 'def', 'test_one_family_second_try_timeout(self):', 'conn,', 'future', '=', 'self.start_connect([(AF1,', '\"a\"),', '(AF1,', '\"b\")])', 'self.assert_pending((AF1,', '\"a\"))', 'conn.on_timeout()', 'self.assert_pending((AF1,', '\"a\"))', 'self.resolve_connect(AF1,', '\"a\",', 'False)', 'self.assert_pending((AF1,', '\"b\"))', 'self.resolve_connect(AF1,', '\"b\",', 'True)', 'self.assertEqual(future.result(),', '(AF1,', '\"b\",', 'self.streams[\"b\"]))', 'def', 'test_two_families_immediate_failure(self):', 'conn,', 'future', '=', 'self.start_connect(self.addrinfo)', 'self.assert_pending((AF1,', '\"a\"))', 'self.resolve_connect(AF1,', '\"a\",', 'False)', 'self.assert_pending((AF1,', '\"b\"),', '(AF2,', '\"c\"))', 'self.resolve_connect(AF1,', '\"b\",', 'False)', 'self.resolve_connect(AF2,', '\"c\",', 'True)', 'self.assertEqual(future.result(),', '(AF2,', '\"c\",', 'self.streams[\"c\"]))', 'def', 'test_two_families_timeout(self):', 'conn,', 'future', '=', 'self.start_connect(self.addrinfo)', 'self.assert_pending((AF1,', '\"a\"))', 'conn.on_timeout()', 'self.assert_pending((AF1,', '\"a\"),', '(AF2,', '\"c\"))', 'self.resolve_connect(AF2,', '\"c\",', 'True)', 'self.assertEqual(future.result(),', '(AF2,', '\"c\",', 'self.streams[\"c\"]))', 'self.resolve_connect(AF1,', '\"a\",', 'False)', 'self.assert_pending()', 'def', 'test_success_after_timeout(self):', 'conn,', 'future', '=', 'self.start_connect(self.addrinfo)', 'self.assert_pending((AF1,', '\"a\"))', 'conn.on_timeout()', 'self.assert_pending((AF1,', '\"a\"),', '(AF2,', '\"c\"))', 'self.resolve_connect(AF1,', '\"a\",', 'True)', 'self.assertEqual(future.result(),', '(AF1,', '\"a\",', 'self.streams[\"a\"]))', 'self.resolve_connect(AF2,', '\"c\",', 'True)', 'self.assertTrue(self.streams.pop(\"c\").closed)', 'def', 'test_all_fail(self):', 'conn,', 'future', '=', 'self.start_connect(self.addrinfo)', 'self.assert_pending((AF1,', '\"a\"))', 'conn.on_timeout()', 'self.assert_pending((AF1,', '\"a\"),', '(AF2,', '\"c\"))', 'self.resolve_connect(AF2,', '\"c\",', 'False)', 'self.assert_pending((AF1,', '\"a\"),', '(AF2,', '\"d\"))', 'self.resolve_connect(AF2,', '\"d\",', 'False)', 'self.assert_pending((AF1,', '\"a\"))', 'self.resolve_connect(AF1,', '\"a\",', 'False)', 'self.assert_pending((AF1,', '\"b\"))', 'self.assertFalse(future.done())', 'self.resolve_connect(AF1,', '\"b\",', 'False)', 'self.assertRaises(IOError,', 'future.result)', 'def', 'test_one_family_timeout_after_connect_timeout(self):', 'conn,', 'future', '=', 'self.start_connect([(AF1,', '\"a\"),', '(AF1,', '\"b\")])', 'self.assert_pending((AF1,', '\"a\"))', 'conn.on_connect_timeout()', 'self.connect_futures.pop((AF1,', '\"a\"))', 'self.assertTrue(self.streams.pop(\"a\").closed)', 'conn.on_timeout()', 'self.assert_pending()', 'self.assertEqual(len(conn.streams),', '1)', 'self.assert_connector_streams_closed(conn)', 'self.assertRaises(TimeoutError,', 'future.result)', 'def', 'test_one_family_success_before_connect_timeout(self):', 'conn,', 'future', '=', 'self.start_connect([(AF1,', '\"a\"),', '(AF1,', '\"b\")])', 'self.assert_pending((AF1,', '\"a\"))', 'self.resolve_connect(AF1,', '\"a\",', 'True)', 'conn.on_connect_timeout()', 'self.assert_pending()', 'self.assertEqual(self.streams[\"a\"].closed,', 'False)', 'self.assertEqual(len(conn.streams),', '0)', 'self.assert_connector_streams_closed(conn)', 'self.assertEqual(future.result(),', '(AF1,', '\"a\",', 'self.streams[\"a\"]))', 'def', 'test_one_family_second_try_after_connect_timeout(self):', 'conn,', 'future', '=', 'self.start_connect([(AF1,', '\"a\"),', '(AF1,', '\"b\")])', 'self.assert_pending((AF1,', '\"a\"))', 'self.resolve_connect(AF1,', '\"a\",', 'False)', 'self.assert_pending((AF1,', '\"b\"))', 'conn.on_connect_timeout()', 'self.connect_futures.pop((AF1,', '\"b\"))', 'self.assertTrue(self.streams.pop(\"b\").closed)', 'self.assert_pending()', 'self.assertEqual(len(conn.streams),', '2)', 'self.assert_connector_streams_closed(conn)', 'self.assertRaises(TimeoutError,', 'future.result)', 'def', 'test_one_family_second_try_failure_before_connect_timeout(self):', 'conn,', 'future', '=', 'self.start_connect([(AF1,', '\"a\"),', '(AF1,', '\"b\")])', 'self.assert_pending((AF1,', '\"a\"))', 'self.resolve_connect(AF1,', '\"a\",', 'False)', 'self.assert_pending((AF1,', '\"b\"))', 'self.resolve_connect(AF1,', '\"b\",', 'False)', 'conn.on_connect_timeout()', 'self.assert_pending()', 'self.assertEqual(len(conn.streams),', '2)', 'self.assert_connector_streams_closed(conn)', 'self.assertRaises(IOError,', 'future.result)', 'def', 'test_two_family_timeout_before_connect_timeout(self):', 'conn,', 'future', '=', 'self.start_connect(self.addrinfo)', 'self.assert_pending((AF1,', '\"a\"))', 'conn.on_timeout()', 'self.assert_pending((AF1,', '\"a\"),', '(AF2,', '\"c\"))', 'conn.on_connect_timeout()', 'self.connect_futures.pop((AF1,', '\"a\"))', 'self.assertTrue(self.streams.pop(\"a\").closed)', 'self.connect_futures.pop((AF2,', '\"c\"))', 'self.assertTrue(self.streams.pop(\"c\").closed)', 'self.assert_pending()', 'self.assertEqual(len(conn.streams),', '2)', 'self.assert_connector_streams_closed(conn)', 'self.assertRaises(TimeoutError,', 'future.result)', 'def', 'test_two_family_success_after_timeout(self):', 'conn,', 'future', '=', 'self.start_connect(self.addrinfo)', 'self.assert_pending((AF1,', '\"a\"))', 'conn.on_timeout()', 'self.assert_pending((AF1,', '\"a\"),', '(AF2,', '\"c\"))', 'self.resolve_connect(AF1,', '\"a\",', 'True)', 'self.connect_futures.pop((AF2,', '\"c\"))', 'self.assertTrue(self.streams.pop(\"c\").closed)', 'self.assert_pending()', 'self.assertEqual(len(conn.streams),', '1)', 'self.assert_connector_streams_closed(conn)', 'self.assertEqual(future.result(),', '(AF1,', '\"a\",', 'self.streams[\"a\"]))', 'def', 'test_two_family_timeout_after_connect_timeout(self):', 'conn,', 'future', '=', 'self.start_connect(self.addrinfo)', 'self.assert_pending((AF1,', '\"a\"))', 'conn.on_connect_timeout()', 'self.connect_futures.pop((AF1,', '\"a\"))', 'self.assertTrue(self.streams.pop(\"a\").closed)', 'self.assert_pending()', 'conn.on_timeout()', 'self.assert_pending()', 'self.assertEqual(len(conn.streams),', '1)', 'self.assert_connector_streams_closed(conn)', 'self.assertRaises(TimeoutError,', 'future.result)']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/tcpserver_test.py",
        "vector": "['import', 'socket', 'import', 'subprocess', 'import', 'sys', 'import', 'textwrap', 'import', 'unittest', 'from', 'tornado', 'import', 'gen', 'from', 'tornado.iostream', 'import', 'IOStream', 'from', 'tornado.log', 'import', 'app_log', 'from', 'tornado.tcpserver', 'import', 'TCPServer', 'from', 'tornado.test.util', 'import', 'skipIfNonUnix', 'from', 'tornado.testing', 'import', 'AsyncTestCase,', 'ExpectLog,', 'bind_unused_port,', 'gen_test', 'from', 'typing', 'import', 'Tuple', 'class', 'TCPServerTest(AsyncTestCase):', '@gen_test', 'def', 'test_handle_stream_coroutine_logging(self):', 'class', 'TestServer(TCPServer):', '@gen.coroutine', 'def', 'handle_stream(self,', 'stream,', 'address):', 'yield', 'stream.read_bytes(len(b\"hello\"))', 'stream.close()', '1', '/', '0', 'server', '=', 'client', '=', 'None', 'try:', 'sock,', 'port', '=', 'bind_unused_port()', 'server', '=', 'TestServer()', 'server.add_socket(sock)', 'client', '=', 'IOStream(socket.socket())', 'with', 'ExpectLog(app_log,', '\"Exception', 'in', 'callback\"):', 'yield', 'client.connect((\"localhost\",', 'port))', 'yield', 'client.write(b\"hello\")', 'yield', 'client.read_until_close()', 'yield', 'gen.moment', 'finally:', 'if', 'server', 'is', 'not', 'None:', 'server.stop()', 'if', 'client', 'is', 'not', 'None:', 'client.close()', '@gen_test', 'def', 'test_handle_stream_native_coroutine(self):', 'class', 'TestServer(TCPServer):', 'async', 'def', 'handle_stream(self,', 'stream,', 'address):', 'stream.write(b\"data\")', 'stream.close()', 'sock,', 'port', '=', 'bind_unused_port()', 'server', '=', 'TestServer()', 'server.add_socket(sock)', 'client', '=', 'IOStream(socket.socket())', 'yield', 'client.connect((\"localhost\",', 'port))', 'result', '=', 'yield', 'client.read_until_close()', 'self.assertEqual(result,', 'b\"data\")', 'server.stop()', 'client.close()', 'def', 'test_stop_twice(self):', 'sock,', 'port', '=', 'bind_unused_port()', 'server', '=', 'TCPServer()', 'server.add_socket(sock)', 'server.stop()', 'server.stop()', '@gen_test', 'def', 'test_stop_in_callback(self):', 'class', 'TestServer(TCPServer):', '@gen.coroutine', 'def', 'handle_stream(self,', 'stream,', 'address):', 'server.stop()', 'yield', 'stream.read_until_close()', 'sock,', 'port', '=', 'bind_unused_port()', 'server', '=', 'TestServer()', 'server.add_socket(sock)', 'server_addr', '=', '(\"localhost\",', 'port)', 'N', '=', '40', 'clients', '=', '[IOStream(socket.socket())', 'for', 'i', 'in', 'range(N)]', 'connected_clients', '=', '[]', '@gen.coroutine', 'def', 'connect(c):', 'try:', 'yield', 'c.connect(server_addr)', 'except', 'EnvironmentError:', 'pass', 'else:', 'connected_clients.append(c)', 'yield', '[connect(c)', 'for', 'c', 'in', 'clients]', 'self.assertGreater(len(connected_clients),', '0,', '\"all', 'clients', 'failed', 'connecting\")', 'try:', 'if', 'len(connected_clients)', '==', 'N:', 'self.skipTest(', '\"at', 'least', 'one', 'client', 'should', 'fail', 'connecting', '\"', '\"for', 'the', 'test', 'to', 'be', 'meaningful\"', ')', 'finally:', 'for', 'c', 'in', 'connected_clients:', 'c.close()', '@skipIfNonUnix', 'class', 'TestMultiprocess(unittest.TestCase):', 'def', 'run_subproc(self,', 'code:', 'str)', '->', 'Tuple[str,', 'str]:', 'try:', 'result', '=', 'subprocess.run(', '[sys.executable,', '\"-Werror::DeprecationWarning\"],', 'capture_output=True,', 'input=code,', 'encoding=\"utf8\",', 'check=True,', ')', 'except', 'subprocess.CalledProcessError', 'as', 'e:', 'raise', 'RuntimeError(', 'f\"Process', 'returned', '{e.returncode}', 'stdout={e.stdout}', 'stderr={e.stderr}\"', ')', 'from', 'e', 'return', 'result.stdout,', 'result.stderr', 'def', 'test_listen_single(self):', 'code', '=', 'textwrap.dedent(', ')', 'out,', 'err', '=', 'self.run_subproc(code)', 'self.assertEqual(\"\".join(sorted(out)),', '\"012\")', 'self.assertEqual(err,', '\"\")', 'def', 'test_bind_start(self):', 'code', '=', 'textwrap.dedent(', ')', 'out,', 'err', '=', 'self.run_subproc(code)', 'self.assertEqual(\"\".join(sorted(out)),', '\"012\")', 'self.assertEqual(err,', '\"\")', 'def', 'test_add_sockets(self):', 'code', '=', 'textwrap.dedent(', ')', 'out,', 'err', '=', 'self.run_subproc(code)', 'self.assertEqual(\"\".join(sorted(out)),', '\"012\")', 'self.assertEqual(err,', '\"\")', 'def', 'test_listen_multi_reuse_port(self):', 'code', '=', 'textwrap.dedent(', ')', 'out,', 'err', '=', 'self.run_subproc(code)', 'self.assertEqual(\"\".join(sorted(out)),', '\"012\")', 'self.assertEqual(err,', '\"\")']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/template_test.py",
        "vector": "['import', 'os', 'import', 'traceback', 'import', 'unittest', 'from', 'tornado.escape', 'import', 'utf8,', 'native_str,', 'to_unicode', 'from', 'tornado.template', 'import', 'Template,', 'DictLoader,', 'ParseError,', 'Loader', 'from', 'tornado.util', 'import', 'ObjectDict', 'import', 'typing', 'class', 'TemplateTest(unittest.TestCase):', 'def', 'test_simple(self):', 'template', '=', 'Template(\"Hello', '{{', 'name', '}}!\")', 'self.assertEqual(template.generate(name=\"Ben\"),', 'b\"Hello', 'Ben!\")', 'def', 'test_bytes(self):', 'template', '=', 'Template(\"Hello', '{{', 'name', '}}!\")', 'self.assertEqual(template.generate(name=utf8(\"Ben\")),', 'b\"Hello', 'Ben!\")', 'def', 'test_expressions(self):', 'template', '=', 'Template(\"2', '+', '2', '=', '{{', '2', '+', '2', '}}\")', 'self.assertEqual(template.generate(),', 'b\"2', '+', '2', '=', '4\")', 'def', 'test_comment(self):', 'template', '=', 'Template(\"Hello{', 'self.assertEqual(template.generate(name=utf8(\"Ben\")),', 'b\"Hello', 'Ben!\")', 'def', 'test_include(self):', 'loader', '=', 'DictLoader(', '{', '\"index.html\":', \"'{%\", 'include', '\"header.html\"', '%}\\\\nbody', \"text',\", '\"header.html\":', '\"header', 'text\",', '}', ')', 'self.assertEqual(', 'loader.load(\"index.html\").generate(),', 'b\"header', 'text\\\\nbody', 'text\"', ')', 'def', 'test_extends(self):', 'loader', '=', 'DictLoader(', '{', '\"base.html\":', ',', '\"page.html\":', ',', '}', ')', 'self.assertEqual(', 'loader.load(\"page.html\").generate(),', 'b\"<title>page', 'title</title>\\\\n<body>page', 'body</body>\\\\n\",', ')', 'def', 'test_relative_load(self):', 'loader', '=', 'DictLoader(', '{', '\"a/1.html\":', '\"{%', 'include', \"'2.html'\", '%}\",', '\"a/2.html\":', '\"{%', 'include', \"'../b/3.html'\", '%}\",', '\"b/3.html\":', '\"ok\",', '}', ')', 'self.assertEqual(loader.load(\"a/1.html\").generate(),', 'b\"ok\")', 'def', 'test_escaping(self):', 'self.assertRaises(ParseError,', 'lambda:', 'Template(\"{{\"))', 'self.assertRaises(ParseError,', 'lambda:', 'Template(\"{%\"))', 'self.assertEqual(Template(\"{{!\").generate(),', 'b\"{{\")', 'self.assertEqual(Template(\"{%!\").generate(),', 'b\"{%\")', 'self.assertEqual(Template(\"{', 'self.assertEqual(', 'Template(\"{{', \"'expr'\", '}}', '{{!jquery', 'expr}}\").generate(),', 'b\"expr', '{{jquery', 'expr}}\",', ')', 'def', 'test_unicode_template(self):', 'template', '=', 'Template(utf8(\"\\\\u00e9\"))', 'self.assertEqual(template.generate(),', 'utf8(\"\\\\u00e9\"))', 'def', 'test_unicode_literal_expression(self):', 'template', '=', \"Template(utf8('{{\", '\"\\\\u00e9\"', \"}}'))\", 'self.assertEqual(template.generate(),', 'utf8(\"\\\\u00e9\"))', 'def', 'test_custom_namespace(self):', 'loader', '=', 'DictLoader(', '{\"test.html\":', '\"{{', 'inc(5)', '}}\"},', 'namespace={\"inc\":', 'lambda', 'x:', 'x', '+', '1}', ')', 'self.assertEqual(loader.load(\"test.html\").generate(),', 'b\"6\")', 'def', 'test_apply(self):', 'def', 'upper(s):', 'return', 's.upper()', 'template', '=', 'Template(utf8(\"{%', 'apply', 'upper', '%}foo{%', 'end', '%}\"))', 'self.assertEqual(template.generate(upper=upper),', 'b\"FOO\")', 'def', 'test_unicode_apply(self):', 'def', 'upper(s):', 'return', 'to_unicode(s).upper()', 'template', '=', 'Template(utf8(\"{%', 'apply', 'upper', '%}foo', '\\\\u00e9{%', 'end', '%}\"))', 'self.assertEqual(template.generate(upper=upper),', 'utf8(\"FOO', '\\\\u00c9\"))', 'def', 'test_bytes_apply(self):', 'def', 'upper(s):', 'return', 'utf8(to_unicode(s).upper())', 'template', '=', 'Template(utf8(\"{%', 'apply', 'upper', '%}foo', '\\\\u00e9{%', 'end', '%}\"))', 'self.assertEqual(template.generate(upper=upper),', 'utf8(\"FOO', '\\\\u00c9\"))', 'def', 'test_if(self):', 'template', '=', 'Template(utf8(\"{%', 'if', 'x', '>', '4', '%}yes{%', 'else', '%}no{%', 'end', '%}\"))', 'self.assertEqual(template.generate(x=5),', 'b\"yes\")', 'self.assertEqual(template.generate(x=3),', 'b\"no\")', 'def', 'test_if_empty_body(self):', 'template', '=', 'Template(utf8(\"{%', 'if', 'True', '%}{%', 'else', '%}{%', 'end', '%}\"))', 'self.assertEqual(template.generate(),', 'b\"\")', 'def', 'test_try(self):', 'template', '=', 'Template(', 'utf8(', ')', ')', 'self.assertEqual(template.generate(x=1),', 'b\"\\\\ntry\\\\n-else\\\\n-finally\\\\n\")', 'self.assertEqual(template.generate(x=0),', 'b\"\\\\ntry-except\\\\n-finally\\\\n\")', 'def', 'test_comment_directive(self):', 'template', '=', 'Template(utf8(\"{%', 'comment', 'blah', 'blah', '%}foo\"))', 'self.assertEqual(template.generate(),', 'b\"foo\")', 'def', 'test_break_continue(self):', 'template', '=', 'Template(', 'utf8(', ')', ')', 'result', '=', 'template.generate()', 'result', '=', 'b\"\".join(result.split())', 'self.assertEqual(result,', 'b\"013456\")', 'def', 'test_break_outside_loop(self):', 'try:', 'Template(utf8(\"{%', 'break', '%}\"))', 'raise', 'Exception(\"Did', 'not', 'get', 'expected', 'exception\")', 'except', 'ParseError:', 'pass', 'def', 'test_break_in_apply(self):', 'try:', 'Template(', 'utf8(\"{%', 'for', 'i', 'in', '[]', '%}{%', 'apply', 'foo', '%}{%', 'break', '%}{%', 'end', '%}{%', 'end', '%}\")', ')', 'raise', 'Exception(\"Did', 'not', 'get', 'expected', 'exception\")', 'except', 'ParseError:', 'pass', '@unittest.skip(\"no', 'testable', 'future', 'imports\")', 'def', 'test_no_inherit_future(self):', 'self.assertEqual(1', '/', '2,', '0.5)', 'template', '=', 'Template(\"{{', '1', '/', '2', '}}\")', 'self.assertEqual(template.generate(),', '\"0\")', 'def', 'test_non_ascii_name(self):', 'loader', '=', 'DictLoader({\"t\\\\u00e9st.html\":', '\"hello\"})', 'self.assertEqual(loader.load(\"t\\\\u00e9st.html\").generate(),', 'b\"hello\")', 'class', 'StackTraceTest(unittest.TestCase):', 'def', 'test_error_line_number_expression(self):', 'loader', '=', 'DictLoader(', '{', '\"test.html\":', '}', ')', 'try:', 'loader.load(\"test.html\").generate()', 'self.fail(\"did', 'not', 'get', 'expected', 'exception\")', 'except', 'ZeroDivisionError:', 'self.assertTrue(\"', 'def', 'test_error_line_number_directive(self):', 'loader', '=', 'DictLoader(', '{', '\"test.html\":', '}', ')', 'try:', 'loader.load(\"test.html\").generate()', 'self.fail(\"did', 'not', 'get', 'expected', 'exception\")', 'except', 'ZeroDivisionError:', 'self.assertTrue(\"', 'def', 'test_error_line_number_module(self):', 'loader', '=', 'None', 'def', 'load_generate(path,', '**kwargs):', 'assert', 'loader', 'is', 'not', 'None', 'return', 'loader.load(path).generate(**kwargs)', 'loader', '=', 'DictLoader(', '{\"base.html\":', '\"{%', 'module', \"Template('sub.html')\", '%}\",', '\"sub.html\":', '\"{{1/0}}\"},', 'namespace={\"_tt_modules\":', 'ObjectDict(Template=load_generate)},', ')', 'try:', 'loader.load(\"base.html\").generate()', 'self.fail(\"did', 'not', 'get', 'expected', 'exception\")', 'except', 'ZeroDivisionError:', 'exc_stack', '=', 'traceback.format_exc()', 'self.assertTrue(\"', 'self.assertTrue(\"', 'def', 'test_error_line_number_include(self):', 'loader', '=', 'DictLoader(', '{\"base.html\":', '\"{%', 'include', \"'sub.html'\", '%}\",', '\"sub.html\":', '\"{{1/0}}\"}', ')', 'try:', 'loader.load(\"base.html\").generate()', 'self.fail(\"did', 'not', 'get', 'expected', 'exception\")', 'except', 'ZeroDivisionError:', 'self.assertTrue(\"', 'def', 'test_error_line_number_extends_base_error(self):', 'loader', '=', 'DictLoader(', '{\"base.html\":', '\"{{1/0}}\",', '\"sub.html\":', '\"{%', 'extends', \"'base.html'\", '%}\"}', ')', 'try:', 'loader.load(\"sub.html\").generate()', 'self.fail(\"did', 'not', 'get', 'expected', 'exception\")', 'except', 'ZeroDivisionError:', 'exc_stack', '=', 'traceback.format_exc()', 'self.assertTrue(\"', 'def', 'test_error_line_number_extends_sub_error(self):', 'loader', '=', 'DictLoader(', '{', '\"base.html\":', '\"{%', 'block', \"'block'\", '%}{%', 'end', '%}\",', '\"sub.html\":', ',', '}', ')', 'try:', 'loader.load(\"sub.html\").generate()', 'self.fail(\"did', 'not', 'get', 'expected', 'exception\")', 'except', 'ZeroDivisionError:', 'self.assertTrue(\"', 'def', 'test_multi_includes(self):', 'loader', '=', 'DictLoader(', '{', '\"a.html\":', '\"{%', 'include', \"'b.html'\", '%}\",', '\"b.html\":', '\"{%', 'include', \"'c.html'\", '%}\",', '\"c.html\":', '\"{{1/0}}\",', '}', ')', 'try:', 'loader.load(\"a.html\").generate()', 'self.fail(\"did', 'not', 'get', 'expected', 'exception\")', 'except', 'ZeroDivisionError:', 'self.assertTrue(', '\"', ')', 'class', 'ParseErrorDetailTest(unittest.TestCase):', 'def', 'test_details(self):', 'loader', '=', 'DictLoader({\"foo.html\":', '\"\\\\n\\\\n{{\"})', 'with', 'self.assertRaises(ParseError)', 'as', 'cm:', 'loader.load(\"foo.html\")', 'self.assertEqual(\"Missing', 'end', 'expression', '}}', 'at', 'foo.html:3\",', 'str(cm.exception))', 'self.assertEqual(\"foo.html\",', 'cm.exception.filename)', 'self.assertEqual(3,', 'cm.exception.lineno)', 'def', 'test_custom_parse_error(self):', 'self.assertEqual(\"asdf', 'at', 'None:0\",', 'str(ParseError(\"asdf\")))', 'class', 'AutoEscapeTest(unittest.TestCase):', 'def', 'setUp(self):', 'self.templates', '=', '{', '\"escaped.html\":', '\"{%', 'autoescape', 'xhtml_escape', '%}{{', 'name', '}}\",', '\"unescaped.html\":', '\"{%', 'autoescape', 'None', '%}{{', 'name', '}}\",', '\"default.html\":', '\"{{', 'name', '}}\",', '\"include.html\":', ',', '\"escaped_block.html\":', ',', '\"unescaped_block.html\":', ',', '\"escaped_extends_unescaped.html\":', ',', '\"escaped_overrides_unescaped.html\":', ',', '\"unescaped_extends_escaped.html\":', ',', '\"unescaped_overrides_escaped.html\":', ',', '\"raw_expression.html\":', ',', '}', 'def', 'test_default_off(self):', 'loader', '=', 'DictLoader(self.templates,', 'autoescape=None)', 'name', '=', '\"Bobby', '<table>s\"', 'self.assertEqual(', 'loader.load(\"escaped.html\").generate(name=name),', 'b\"Bobby', '&lt;table&gt;s\"', ')', 'self.assertEqual(', 'loader.load(\"unescaped.html\").generate(name=name),', 'b\"Bobby', '<table>s\"', ')', 'self.assertEqual(', 'loader.load(\"default.html\").generate(name=name),', 'b\"Bobby', '<table>s\"', ')', 'self.assertEqual(', 'loader.load(\"include.html\").generate(name=name),', 'b\"escaped:', 'Bobby', '&lt;table&gt;s\\\\n\"', 'b\"unescaped:', 'Bobby', '<table>s\\\\n\"', 'b\"default:', 'Bobby', '<table>s\\\\n\",', ')', 'def', 'test_default_on(self):', 'loader', '=', 'DictLoader(self.templates,', 'autoescape=\"xhtml_escape\")', 'name', '=', '\"Bobby', '<table>s\"', 'self.assertEqual(', 'loader.load(\"escaped.html\").generate(name=name),', 'b\"Bobby', '&lt;table&gt;s\"', ')', 'self.assertEqual(', 'loader.load(\"unescaped.html\").generate(name=name),', 'b\"Bobby', '<table>s\"', ')', 'self.assertEqual(', 'loader.load(\"default.html\").generate(name=name),', 'b\"Bobby', '&lt;table&gt;s\"', ')', 'self.assertEqual(', 'loader.load(\"include.html\").generate(name=name),', 'b\"escaped:', 'Bobby', '&lt;table&gt;s\\\\n\"', 'b\"unescaped:', 'Bobby', '<table>s\\\\n\"', 'b\"default:', 'Bobby', '&lt;table&gt;s\\\\n\",', ')', 'def', 'test_unextended_block(self):', 'loader', '=', 'DictLoader(self.templates)', 'name', '=', '\"<script>\"', 'self.assertEqual(', 'loader.load(\"escaped_block.html\").generate(name=name),', 'b\"base:', '&lt;script&gt;\",', ')', 'self.assertEqual(', 'loader.load(\"unescaped_block.html\").generate(name=name),', 'b\"base:', '<script>\"', ')', 'def', 'test_extended_block(self):', 'loader', '=', 'DictLoader(self.templates)', 'def', 'render(name):', 'return', 'loader.load(name).generate(name=\"<script>\")', 'self.assertEqual(render(\"escaped_extends_unescaped.html\"),', 'b\"base:', '<script>\")', 'self.assertEqual(', 'render(\"escaped_overrides_unescaped.html\"),', 'b\"extended:', '&lt;script&gt;\"', ')', 'self.assertEqual(', 'render(\"unescaped_extends_escaped.html\"),', 'b\"base:', '&lt;script&gt;\"', ')', 'self.assertEqual(', 'render(\"unescaped_overrides_escaped.html\"),', 'b\"extended:', '<script>\"', ')', 'def', 'test_raw_expression(self):', 'loader', '=', 'DictLoader(self.templates)', 'def', 'render(name):', 'return', 'loader.load(name).generate(name=\\'<>&\"\\')', 'self.assertEqual(', 'render(\"raw_expression.html\"),', 'b\"expr:', '&lt;&gt;&amp;&quot;\\\\n\"', \"b'raw:\", '<>&\"\\'', ')', 'def', 'test_custom_escape(self):', 'loader', '=', 'DictLoader({\"foo.py\":', '\"{%', 'autoescape', 'py_escape', '%}s', '=', '{{', 'name', '}}\\\\n\"})', 'def', 'py_escape(s):', 'self.assertEqual(type(s),', 'bytes)', 'return', 'repr(native_str(s))', 'def', 'render(template,', 'name):', 'return', 'loader.load(template).generate(py_escape=py_escape,', 'name=name)', 'self.assertEqual(render(\"foo.py\",', '\"<html>\"),', 'b\"s', '=', '\\'<html>\\'\\\\n\")', 'self.assertEqual(render(\"foo.py\",', '\"\\';sys.exit()\"),', 'b)', 'self.assertEqual(', 'render(\"foo.py\",', '[\"not', 'a', 'string\"]),', 'b', ')', 'def', 'test_manual_minimize_whitespace(self):', 'loader', '=', 'DictLoader(', '{', '\"foo.txt\":', '}', ')', 'self.assertEqual(', 'loader.load(\"foo.txt\").generate(items=range(5)),', 'b\"0,', '1,', '2,', '3,', '4\"', ')', 'def', 'test_whitespace_by_filename(self):', 'loader', '=', 'DictLoader(', '{', '\"foo.html\":', '\"', '\\\\n\\\\t\\\\n', 'asdf\\\\t', '\",', '\"bar.js\":', '\"', '\\\\n\\\\n\\\\n\\\\t', 'qwer', '\",', '\"baz.txt\":', '\"\\\\t', 'zxcv\\\\n\\\\n\",', '\"include.html\":', '\"', '{%', 'include', 'baz.txt', '%}', '\\\\n', '\",', '\"include.txt\":', '\"\\\\t\\\\t{%', 'include', 'foo.html', '%}', '\",', '}', ')', 'self.assertEqual(loader.load(\"foo.html\").generate(),', 'b\"\\\\nasdf', '\")', 'self.assertEqual(loader.load(\"bar.js\").generate(),', 'b\"\\\\nqwer', '\")', 'self.assertEqual(loader.load(\"baz.txt\").generate(),', 'b\"\\\\t', 'zxcv\\\\n\\\\n\")', 'self.assertEqual(loader.load(\"include.html\").generate(),', 'b\"', '\\\\t', 'zxcv\\\\n\\\\n\\\\n\")', 'self.assertEqual(loader.load(\"include.txt\").generate(),', 'b\"\\\\t\\\\t\\\\nasdf', '\")', 'def', 'test_whitespace_by_loader(self):', 'templates', '=', '{\"foo.html\":', '\"\\\\t\\\\tfoo\\\\n\\\\n\",', '\"bar.txt\":', '\"\\\\t\\\\tbar\\\\n\\\\n\"}', 'loader', '=', 'DictLoader(templates,', 'whitespace=\"all\")', 'self.assertEqual(loader.load(\"foo.html\").generate(),', 'b\"\\\\t\\\\tfoo\\\\n\\\\n\")', 'self.assertEqual(loader.load(\"bar.txt\").generate(),', 'b\"\\\\t\\\\tbar\\\\n\\\\n\")', 'loader', '=', 'DictLoader(templates,', 'whitespace=\"single\")', 'self.assertEqual(loader.load(\"foo.html\").generate(),', 'b\"', 'foo\\\\n\")', 'self.assertEqual(loader.load(\"bar.txt\").generate(),', 'b\"', 'bar\\\\n\")', 'loader', '=', 'DictLoader(templates,', 'whitespace=\"oneline\")', 'self.assertEqual(loader.load(\"foo.html\").generate(),', 'b\"', 'foo', '\")', 'self.assertEqual(loader.load(\"bar.txt\").generate(),', 'b\"', 'bar', '\")', 'def', 'test_whitespace_directive(self):', 'loader', '=', 'DictLoader(', '{', '\"foo.html\":', '}', ')', 'self.assertEqual(', 'loader.load(\"foo.html\").generate(),', 'b\"', '0', '1', '2', '\\\\n', 'pre\\\\tformatted\\\\n\"', ')', 'class', 'TemplateLoaderTest(unittest.TestCase):', 'def', 'setUp(self):', 'self.loader', '=', 'Loader(os.path.join(os.path.dirname(__file__),', '\"templates\"))', 'def', 'test_utf8_in_file(self):', 'tmpl', '=', 'self.loader.load(\"utf8.html\")', 'result', '=', 'tmpl.generate()', 'self.assertEqual(to_unicode(result).strip(),', '\"H\\\\u00e9llo\")']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/testing_test.py",
        "vector": "['from', 'tornado', 'import', 'gen,', 'ioloop', 'from', 'tornado.httpserver', 'import', 'HTTPServer', 'from', 'tornado.locks', 'import', 'Event', 'from', 'tornado.testing', 'import', 'AsyncHTTPTestCase,', 'AsyncTestCase,', 'bind_unused_port,', 'gen_test', 'from', 'tornado.web', 'import', 'Application', 'import', 'asyncio', 'import', 'contextlib', 'import', 'inspect', 'import', 'gc', 'import', 'os', 'import', 'platform', 'import', 'sys', 'import', 'traceback', 'import', 'unittest', 'import', 'warnings', '@contextlib.contextmanager', 'def', 'set_environ(name,', 'value):', 'old_value', '=', 'os.environ.get(name)', 'os.environ[name]', '=', 'value', 'try:', 'yield', 'finally:', 'if', 'old_value', 'is', 'None:', 'del', 'os.environ[name]', 'else:', 'os.environ[name]', '=', 'old_value', 'class', 'AsyncTestCaseTest(AsyncTestCase):', 'def', 'test_wait_timeout(self):', 'time', '=', 'self.io_loop.time', 'self.io_loop.add_timeout(time()', '+', '0.01,', 'self.stop)', 'self.wait()', 'self.io_loop.add_timeout(time()', '+', '1,', 'self.stop)', 'with', 'self.assertRaises(self.failureException):', 'self.wait(timeout=0.01)', 'self.io_loop.add_timeout(time()', '+', '1,', 'self.stop)', 'with', 'set_environ(\"ASYNC_TEST_TIMEOUT\",', '\"0.01\"):', 'with', 'self.assertRaises(self.failureException):', 'self.wait()', 'def', 'test_subsequent_wait_calls(self):', 'self.io_loop.add_timeout(self.io_loop.time()', '+', '0.00,', 'self.stop)', 'self.wait(timeout=0.1)', 'self.io_loop.add_timeout(self.io_loop.time()', '+', '0.2,', 'self.stop)', 'self.wait(timeout=0.4)', 'class', 'LeakTest(AsyncTestCase):', 'def', 'tearDown(self):', 'super().tearDown()', 'gc.collect()', 'def', 'test_leaked_coroutine(self):', 'event', '=', 'Event()', 'async', 'def', 'callback():', 'try:', 'await', 'event.wait()', 'except', 'asyncio.CancelledError:', 'pass', 'self.io_loop.add_callback(callback)', 'self.io_loop.add_callback(self.stop)', 'self.wait()', 'class', 'AsyncHTTPTestCaseTest(AsyncHTTPTestCase):', 'def', 'setUp(self):', 'super().setUp()', 'sock,', 'port', '=', 'bind_unused_port()', 'app', '=', 'Application()', 'server', '=', 'HTTPServer(app,', '**self.get_httpserver_options())', 'server.add_socket(sock)', 'self.second_port', '=', 'port', 'self.second_server', '=', 'server', 'def', 'get_app(self):', 'return', 'Application()', 'def', 'test_fetch_segment(self):', 'path', '=', '\"/path\"', 'response', '=', 'self.fetch(path)', 'self.assertEqual(response.request.url,', 'self.get_url(path))', 'def', 'test_fetch_full_http_url(self):', 'path', '=', '\"http://127.0.0.1:%d/path\"', '%', 'self.second_port', 'response', '=', 'self.fetch(path)', 'self.assertEqual(response.request.url,', 'path)', 'def', 'tearDown(self):', 'self.second_server.stop()', 'super().tearDown()', 'class', 'AsyncTestCaseWrapperTest(unittest.TestCase):', 'def', 'test_undecorated_generator(self):', 'class', 'Test(AsyncTestCase):', 'def', 'test_gen(self):', 'yield', 'test', '=', 'Test(\"test_gen\")', 'result', '=', 'unittest.TestResult()', 'test.run(result)', 'self.assertEqual(len(result.errors),', '1)', 'self.assertIn(\"should', 'be', 'decorated\",', 'result.errors[0][1])', '@unittest.skipIf(', 'platform.python_implementation()', '==', '\"PyPy\",', '\"pypy', 'destructor', 'warnings', 'cannot', 'be', 'silenced\",', ')', '@unittest.skipIf(', 'sys.version_info', '>=', '(3,', '12),', '\"py312', 'has', 'its', 'own', 'check', 'for', 'test', 'case', 'returns\"', ')', 'def', 'test_undecorated_coroutine(self):', 'class', 'Test(AsyncTestCase):', 'async', 'def', 'test_coro(self):', 'pass', 'test', '=', 'Test(\"test_coro\")', 'result', '=', 'unittest.TestResult()', 'with', 'warnings.catch_warnings():', 'warnings.simplefilter(\"ignore\")', 'test.run(result)', 'self.assertEqual(len(result.errors),', '1)', 'self.assertIn(\"should', 'be', 'decorated\",', 'result.errors[0][1])', 'def', 'test_undecorated_generator_with_skip(self):', 'class', 'Test(AsyncTestCase):', '@unittest.skip(\"don\\'t', 'run', 'this\")', 'def', 'test_gen(self):', 'yield', 'test', '=', 'Test(\"test_gen\")', 'result', '=', 'unittest.TestResult()', 'test.run(result)', 'self.assertEqual(len(result.errors),', '0)', 'self.assertEqual(len(result.skipped),', '1)', 'def', 'test_other_return(self):', 'class', 'Test(AsyncTestCase):', 'def', 'test_other_return(self):', 'return', '42', 'test', '=', 'Test(\"test_other_return\")', 'result', '=', 'unittest.TestResult()', 'test.run(result)', 'self.assertEqual(len(result.errors),', '1)', 'self.assertIn(\"Return', 'value', 'from', 'test', 'method', 'ignored\",', 'result.errors[0][1])', 'def', 'test_unwrap(self):', 'class', 'Test(AsyncTestCase):', 'def', 'test_foo(self):', 'pass', 'test', '=', 'Test(\"test_foo\")', 'self.assertIs(', 'inspect.unwrap(test.test_foo),', 'test.test_foo.orig_method,', ')', 'class', 'SetUpTearDownTest(unittest.TestCase):', 'def', 'test_set_up_tear_down(self):', 'events', '=', '[]', 'result', '=', 'unittest.TestResult()', 'class', 'SetUpTearDown(unittest.TestCase):', 'def', 'setUp(self):', 'events.append(\"setUp\")', 'def', 'tearDown(self):', 'events.append(\"tearDown\")', 'class', 'InheritBoth(AsyncTestCase,', 'SetUpTearDown):', 'def', 'test(self):', 'events.append(\"test\")', 'InheritBoth(\"test\").run(result)', 'expected', '=', '[\"setUp\",', '\"test\",', '\"tearDown\"]', 'self.assertEqual(expected,', 'events)', 'class', 'AsyncHTTPTestCaseSetUpTearDownTest(unittest.TestCase):', 'def', 'test_tear_down_releases_app_and_http_server(self):', 'result', '=', 'unittest.TestResult()', 'class', 'SetUpTearDown(AsyncHTTPTestCase):', 'def', 'get_app(self):', 'return', 'Application()', 'def', 'test(self):', 'self.assertTrue(hasattr(self,', '\"_app\"))', 'self.assertTrue(hasattr(self,', '\"http_server\"))', 'test', '=', 'SetUpTearDown(\"test\")', 'test.run(result)', 'self.assertFalse(hasattr(test,', '\"_app\"))', 'self.assertFalse(hasattr(test,', '\"http_server\"))', 'class', 'GenTest(AsyncTestCase):', 'def', 'setUp(self):', 'super().setUp()', 'self.finished', '=', 'False', 'def', 'tearDown(self):', 'self.assertTrue(self.finished)', 'super().tearDown()', '@gen_test', 'def', 'test_sync(self):', 'self.finished', '=', 'True', '@gen_test', 'def', 'test_async(self):', 'yield', 'gen.moment', 'self.finished', '=', 'True', 'def', 'test_timeout(self):', '@gen_test(timeout=0.1)', 'def', 'test(self):', 'yield', 'gen.sleep(1)', 'try:', 'test(self)', 'self.fail(\"did', 'not', 'get', 'expected', 'exception\")', 'except', 'ioloop.TimeoutError:', 'self.assertIn(\"gen.sleep(1)\",', 'traceback.format_exc())', 'self.finished', '=', 'True', 'def', 'test_no_timeout(self):', '@gen_test(timeout=1)', 'def', 'test(self):', 'yield', 'gen.sleep(0.1)', 'test(self)', 'self.finished', '=', 'True', 'def', 'test_timeout_environment_variable(self):', '@gen_test(timeout=0.5)', 'def', 'test_long_timeout(self):', 'yield', 'gen.sleep(0.25)', 'with', 'set_environ(\"ASYNC_TEST_TIMEOUT\",', '\"0.1\"):', 'test_long_timeout(self)', 'self.finished', '=', 'True', 'def', 'test_no_timeout_environment_variable(self):', '@gen_test(timeout=0.01)', 'def', 'test_short_timeout(self):', 'yield', 'gen.sleep(1)', 'with', 'set_environ(\"ASYNC_TEST_TIMEOUT\",', '\"0.1\"):', 'with', 'self.assertRaises(ioloop.TimeoutError):', 'test_short_timeout(self)', 'self.finished', '=', 'True', 'def', 'test_with_method_args(self):', '@gen_test', 'def', 'test_with_args(self,', '*args):', 'self.assertEqual(args,', '(\"test\",))', 'yield', 'gen.moment', 'test_with_args(self,', '\"test\")', 'self.finished', '=', 'True', 'def', 'test_with_method_kwargs(self):', '@gen_test', 'def', 'test_with_kwargs(self,', '**kwargs):', 'self.assertDictEqual(kwargs,', '{\"test\":', '\"test\"})', 'yield', 'gen.moment', 'test_with_kwargs(self,', 'test=\"test\")', 'self.finished', '=', 'True', 'def', 'test_native_coroutine(self):', '@gen_test', 'async', 'def', 'test(self):', 'self.finished', '=', 'True', 'test(self)', 'def', 'test_native_coroutine_timeout(self):', '@gen_test(timeout=0.1)', 'async', 'def', 'test(self):', 'await', 'gen.sleep(1)', 'try:', 'test(self)', 'self.fail(\"did', 'not', 'get', 'expected', 'exception\")', 'except', 'ioloop.TimeoutError:', 'self.finished', '=', 'True', 'if', '__name__', '==', '\"__main__\":', 'unittest.main()']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/twisted_test.py",
        "vector": "['import', 'unittest', 'from', 'tornado.testing', 'import', 'AsyncTestCase,', 'gen_test', 'try:', 'from', 'twisted.internet.defer', 'import', '(', 'inlineCallbacks,', 'returnValue,', ')', 'have_twisted', '=', 'True', 'except', 'ImportError:', 'have_twisted', '=', 'False', 'else:', 'import', 'tornado.platform.twisted', 'skipIfNoTwisted', '=', 'unittest.skipUnless(have_twisted,', '\"twisted', 'module', 'not', 'present\")', '@skipIfNoTwisted', 'class', 'ConvertDeferredTest(AsyncTestCase):', '@gen_test', 'def', 'test_success(self):', '@inlineCallbacks', 'def', 'fn():', 'if', 'False:', 'yield', 'returnValue(42)', 'res', '=', 'yield', 'fn()', 'self.assertEqual(res,', '42)', '@gen_test', 'def', 'test_failure(self):', '@inlineCallbacks', 'def', 'fn():', 'if', 'False:', 'yield', '1', '/', '0', 'with', 'self.assertRaises(ZeroDivisionError):', 'yield', 'fn()', 'if', '__name__', '==', '\"__main__\":', 'unittest.main()']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/util.py",
        "vector": "['import', 'contextlib', 'import', 'os', 'import', 'platform', 'import', 'socket', 'import', 'sys', 'import', 'textwrap', 'import', 'typing', 'import', 'unittest', 'import', 'warnings', 'from', 'tornado.testing', 'import', 'bind_unused_port', 'skipIfNonUnix', '=', 'unittest.skipIf(', 'os.name', '!=', '\"posix\"', 'or', 'sys.platform', '==', '\"cygwin\",', '\"non-unix', 'platform\"', ')', 'skipOnTravis', '=', 'unittest.skipIf(', '\"TRAVIS\"', 'in', 'os.environ,', '\"timing', 'tests', 'unreliable', 'on', 'travis\"', ')', 'skipIfNoNetwork', '=', 'unittest.skipIf(\"NO_NETWORK\"', 'in', 'os.environ,', '\"network', 'access', 'disabled\")', 'skipNotCPython', '=', 'unittest.skipIf(', 'platform.python_implementation()', '!=', '\"CPython\",', '\"Not', 'CPython', 'implementation\"', ')', 'skipPypy3V58', '=', 'unittest.skipIf(', 'platform.python_implementation()', '==', '\"PyPy\"', 'and', 'sys.version_info', '>', '(3,)', 'and', 'sys.pypy_version_info', '<', '(5,', '9),', '\"pypy3', '5.8', 'has', 'buggy', 'ssl', 'module\",', ')', 'def', '_detect_ipv6():', 'if', 'not', 'socket.has_ipv6:', 'return', 'False', 'sock', '=', 'None', 'try:', 'sock', '=', 'socket.socket(socket.AF_INET6)', 'sock.bind((\"::1\",', '0))', 'except', 'socket.error:', 'return', 'False', 'finally:', 'if', 'sock', 'is', 'not', 'None:', 'sock.close()', 'return', 'True', 'skipIfNoIPv6', '=', 'unittest.skipIf(not', '_detect_ipv6(),', '\"ipv6', 'support', 'not', 'present\")', 'def', 'refusing_port():', 'server_socket,', 'port', '=', 'bind_unused_port()', 'server_socket.setblocking(True)', 'client_socket', '=', 'socket.socket()', 'client_socket.connect((\"127.0.0.1\",', 'port))', 'conn,', 'client_addr', '=', 'server_socket.accept()', 'conn.close()', 'server_socket.close()', 'return', '(client_socket.close,', 'client_addr[1])', 'def', 'exec_test(caller_globals,', 'caller_locals,', 's):', 'global_namespace', '=', 'dict(caller_globals,', '**caller_locals)', 'local_namespace', '=', '{}', 'exec(textwrap.dedent(s),', 'global_namespace,', 'local_namespace)', 'return', 'local_namespace', 'def', 'subTest(test,', '*args,', '**kwargs):', 'try:', 'subTest', '=', 'test.subTest', 'except', 'AttributeError:', 'subTest', '=', 'contextlib.contextmanager(lambda', '*a,', '**kw:', '(yield))', 'return', 'subTest(*args,', '**kwargs)', '@contextlib.contextmanager', 'def', 'ignore_deprecation():', 'with', 'warnings.catch_warnings():', 'warnings.simplefilter(\"ignore\",', 'DeprecationWarning)', 'yield']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/util_test.py",
        "vector": "['from', 'io', 'import', 'StringIO', 'import', 're', 'import', 'sys', 'import', 'datetime', 'import', 'unittest', 'import', 'tornado', 'from', 'tornado.escape', 'import', 'utf8', 'from', 'tornado.util', 'import', '(', 'raise_exc_info,', 'Configurable,', 'exec_in,', 'ArgReplacer,', 'timedelta_to_seconds,', 'import_object,', 're_unescape,', 'is_finalizing,', ')', 'import', 'typing', 'from', 'typing', 'import', 'cast', 'if', 'typing.TYPE_CHECKING:', 'from', 'typing', 'import', 'Dict,', 'Any', 'class', 'RaiseExcInfoTest(unittest.TestCase):', 'def', 'test_two_arg_exception(self):', 'class', 'TwoArgException(Exception):', 'def', '__init__(self,', 'a,', 'b):', 'super().__init__()', 'self.a,', 'self.b', '=', 'a,', 'b', 'try:', 'raise', 'TwoArgException(1,', '2)', 'except', 'TwoArgException:', 'exc_info', '=', 'sys.exc_info()', 'try:', 'raise_exc_info(exc_info)', 'self.fail(\"didn\\'t', 'get', 'expected', 'exception\")', 'except', 'TwoArgException', 'as', 'e:', 'self.assertIs(e,', 'exc_info[1])', 'class', 'TestConfigurable(Configurable):', '@classmethod', 'def', 'configurable_base(cls):', 'return', 'TestConfigurable', '@classmethod', 'def', 'configurable_default(cls):', 'return', 'TestConfig1', 'class', 'TestConfig1(TestConfigurable):', 'def', 'initialize(self,', 'pos_arg=None,', 'a=None):', 'self.a', '=', 'a', 'self.pos_arg', '=', 'pos_arg', 'class', 'TestConfig2(TestConfigurable):', 'def', 'initialize(self,', 'pos_arg=None,', 'b=None):', 'self.b', '=', 'b', 'self.pos_arg', '=', 'pos_arg', 'class', 'TestConfig3(TestConfigurable):', '@classmethod', 'def', 'configurable_base(cls):', 'return', 'TestConfig3', '@classmethod', 'def', 'configurable_default(cls):', 'return', 'TestConfig3A', 'class', 'TestConfig3A(TestConfig3):', 'def', 'initialize(self,', 'a=None):', 'self.a', '=', 'a', 'class', 'TestConfig3B(TestConfig3):', 'def', 'initialize(self,', 'b=None):', 'self.b', '=', 'b', 'class', 'ConfigurableTest(unittest.TestCase):', 'def', 'setUp(self):', 'self.saved', '=', 'TestConfigurable._save_configuration()', 'self.saved3', '=', 'TestConfig3._save_configuration()', 'def', 'tearDown(self):', 'TestConfigurable._restore_configuration(self.saved)', 'TestConfig3._restore_configuration(self.saved3)', 'def', 'checkSubclasses(self):', 'self.assertIsInstance(TestConfig1(),', 'TestConfig1)', 'self.assertIsInstance(TestConfig2(),', 'TestConfig2)', 'obj', '=', 'TestConfig1(a=1)', 'self.assertEqual(obj.a,', '1)', 'obj2', '=', 'TestConfig2(b=2)', 'self.assertEqual(obj2.b,', '2)', 'def', 'test_default(self):', 'obj', '=', 'cast(TestConfig1,', 'TestConfigurable())', 'self.assertIsInstance(obj,', 'TestConfig1)', 'self.assertIs(obj.a,', 'None)', 'obj', '=', 'cast(TestConfig1,', 'TestConfigurable(a=1))', 'self.assertIsInstance(obj,', 'TestConfig1)', 'self.assertEqual(obj.a,', '1)', 'self.checkSubclasses()', 'def', 'test_config_class(self):', 'TestConfigurable.configure(TestConfig2)', 'obj', '=', 'cast(TestConfig2,', 'TestConfigurable())', 'self.assertIsInstance(obj,', 'TestConfig2)', 'self.assertIs(obj.b,', 'None)', 'obj', '=', 'cast(TestConfig2,', 'TestConfigurable(b=2))', 'self.assertIsInstance(obj,', 'TestConfig2)', 'self.assertEqual(obj.b,', '2)', 'self.checkSubclasses()', 'def', 'test_config_str(self):', 'TestConfigurable.configure(\"tornado.test.util_test.TestConfig2\")', 'obj', '=', 'cast(TestConfig2,', 'TestConfigurable())', 'self.assertIsInstance(obj,', 'TestConfig2)', 'self.assertIs(obj.b,', 'None)', 'obj', '=', 'cast(TestConfig2,', 'TestConfigurable(b=2))', 'self.assertIsInstance(obj,', 'TestConfig2)', 'self.assertEqual(obj.b,', '2)', 'self.checkSubclasses()', 'def', 'test_config_args(self):', 'TestConfigurable.configure(None,', 'a=3)', 'obj', '=', 'cast(TestConfig1,', 'TestConfigurable())', 'self.assertIsInstance(obj,', 'TestConfig1)', 'self.assertEqual(obj.a,', '3)', 'obj', '=', 'cast(TestConfig1,', 'TestConfigurable(42,', 'a=4))', 'self.assertIsInstance(obj,', 'TestConfig1)', 'self.assertEqual(obj.a,', '4)', 'self.assertEqual(obj.pos_arg,', '42)', 'self.checkSubclasses()', 'obj', '=', 'TestConfig1()', 'self.assertIs(obj.a,', 'None)', 'def', 'test_config_class_args(self):', 'TestConfigurable.configure(TestConfig2,', 'b=5)', 'obj', '=', 'cast(TestConfig2,', 'TestConfigurable())', 'self.assertIsInstance(obj,', 'TestConfig2)', 'self.assertEqual(obj.b,', '5)', 'obj', '=', 'cast(TestConfig2,', 'TestConfigurable(42,', 'b=6))', 'self.assertIsInstance(obj,', 'TestConfig2)', 'self.assertEqual(obj.b,', '6)', 'self.assertEqual(obj.pos_arg,', '42)', 'self.checkSubclasses()', 'obj', '=', 'TestConfig2()', 'self.assertIs(obj.b,', 'None)', 'def', 'test_config_multi_level(self):', 'TestConfigurable.configure(TestConfig3,', 'a=1)', 'obj', '=', 'cast(TestConfig3A,', 'TestConfigurable())', 'self.assertIsInstance(obj,', 'TestConfig3A)', 'self.assertEqual(obj.a,', '1)', 'TestConfigurable.configure(TestConfig3)', 'TestConfig3.configure(TestConfig3B,', 'b=2)', 'obj2', '=', 'cast(TestConfig3B,', 'TestConfigurable())', 'self.assertIsInstance(obj2,', 'TestConfig3B)', 'self.assertEqual(obj2.b,', '2)', 'def', 'test_config_inner_level(self):', 'obj', '=', 'TestConfig3()', 'self.assertIsInstance(obj,', 'TestConfig3A)', 'TestConfig3.configure(TestConfig3B)', 'obj', '=', 'TestConfig3()', 'self.assertIsInstance(obj,', 'TestConfig3B)', 'obj2', '=', 'TestConfigurable()', 'self.assertIsInstance(obj2,', 'TestConfig1)', 'TestConfigurable.configure(TestConfig2)', 'obj3', '=', 'TestConfigurable()', 'self.assertIsInstance(obj3,', 'TestConfig2)', 'obj', '=', 'TestConfig3()', 'self.assertIsInstance(obj,', 'TestConfig3B)', 'class', 'UnicodeLiteralTest(unittest.TestCase):', 'def', 'test_unicode_escapes(self):', 'self.assertEqual(utf8(\"\\\\u00e9\"),', 'b\"\\\\xc3\\\\xa9\")', 'class', 'ExecInTest(unittest.TestCase):', '@unittest.skip(\"no', 'testable', 'future', 'imports\")', 'def', 'test_no_inherit_future(self):', 'f', '=', 'StringIO()', 'print(\"hello\",', 'file=f)', \"exec_in('print\", '>>', 'f,', '\"world\"\\',', 'dict(f=f))', 'self.assertEqual(f.getvalue(),', '\"hello\\\\nworld\\\\n\")', 'class', 'ArgReplacerTest(unittest.TestCase):', 'def', 'setUp(self):', 'def', 'function(x,', 'y,', 'callback=None,', 'z=None):', 'pass', 'self.replacer', '=', 'ArgReplacer(function,', '\"callback\")', 'def', 'test_omitted(self):', 'args', '=', '(1,', '2)', 'kwargs', '=', 'dict()', 'self.assertIs(self.replacer.get_old_value(args,', 'kwargs),', 'None)', 'self.assertEqual(', 'self.replacer.replace(\"new\",', 'args,', 'kwargs),', '(None,', '(1,', '2),', 'dict(callback=\"new\")),', ')', 'def', 'test_position(self):', 'args', '=', '(1,', '2,', '\"old\",', '3)', 'kwargs', '=', 'dict()', 'self.assertEqual(self.replacer.get_old_value(args,', 'kwargs),', '\"old\")', 'self.assertEqual(', 'self.replacer.replace(\"new\",', 'args,', 'kwargs),', '(\"old\",', '[1,', '2,', '\"new\",', '3],', 'dict()),', ')', 'def', 'test_keyword(self):', 'args', '=', '(1,)', 'kwargs', '=', 'dict(y=2,', 'callback=\"old\",', 'z=3)', 'self.assertEqual(self.replacer.get_old_value(args,', 'kwargs),', '\"old\")', 'self.assertEqual(', 'self.replacer.replace(\"new\",', 'args,', 'kwargs),', '(\"old\",', '(1,),', 'dict(y=2,', 'callback=\"new\",', 'z=3)),', ')', 'class', 'TimedeltaToSecondsTest(unittest.TestCase):', 'def', 'test_timedelta_to_seconds(self):', 'time_delta', '=', 'datetime.timedelta(hours=1)', 'self.assertEqual(timedelta_to_seconds(time_delta),', '3600.0)', 'class', 'ImportObjectTest(unittest.TestCase):', 'def', 'test_import_member(self):', 'self.assertIs(import_object(\"tornado.escape.utf8\"),', 'utf8)', 'def', 'test_import_member_unicode(self):', 'self.assertIs(import_object(\"tornado.escape.utf8\"),', 'utf8)', 'def', 'test_import_module(self):', 'self.assertIs(import_object(\"tornado.escape\"),', 'tornado.escape)', 'def', 'test_import_module_unicode(self):', 'self.assertIs(import_object(\"tornado.escape\"),', 'tornado.escape)', 'class', 'ReUnescapeTest(unittest.TestCase):', 'def', 'test_re_unescape(self):', 'test_strings', '=', '(\"/favicon.ico\",', '\"index.html\",', '\"Hello,', 'World!\",', '\"!$@', 'for', 'string', 'in', 'test_strings:', 'self.assertEqual(string,', 're_unescape(re.escape(string)))', 'def', 'test_re_unescape_raises_error_on_invalid_input(self):', 'with', 'self.assertRaises(ValueError):', 're_unescape(\"\\\\\\\\d\")', 'with', 'self.assertRaises(ValueError):', 're_unescape(\"\\\\\\\\b\")', 'with', 'self.assertRaises(ValueError):', 're_unescape(\"\\\\\\\\Z\")', 'class', 'IsFinalizingTest(unittest.TestCase):', 'def', 'test_basic(self):', 'self.assertFalse(is_finalizing())']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/web_test.py",
        "vector": "['from', 'tornado.concurrent', 'import', 'Future', 'from', 'tornado', 'import', 'gen', 'from', 'tornado.escape', 'import', '(', 'json_decode,', 'utf8,', 'to_unicode,', 'recursive_unicode,', 'native_str,', 'to_basestring,', ')', 'from', 'tornado.httpclient', 'import', 'HTTPClientError', 'from', 'tornado.httputil', 'import', 'format_timestamp', 'from', 'tornado.iostream', 'import', 'IOStream', 'from', 'tornado', 'import', 'locale', 'from', 'tornado.locks', 'import', 'Event', 'from', 'tornado.log', 'import', 'app_log,', 'gen_log', 'from', 'tornado.simple_httpclient', 'import', 'SimpleAsyncHTTPClient', 'from', 'tornado.template', 'import', 'DictLoader', 'from', 'tornado.testing', 'import', 'AsyncHTTPTestCase,', 'AsyncTestCase,', 'ExpectLog,', 'gen_test', 'from', 'tornado.test.util', 'import', 'ignore_deprecation', 'from', 'tornado.util', 'import', 'ObjectDict,', 'unicode_type', 'from', 'tornado.web', 'import', '(', 'Application,', 'RequestHandler,', 'StaticFileHandler,', 'RedirectHandler', 'as', 'WebRedirectHandler,', 'HTTPError,', 'MissingArgumentError,', 'ErrorHandler,', 'authenticated,', 'url,', '_create_signature_v1,', 'create_signed_value,', 'decode_signed_value,', 'get_signature_key_version,', 'UIModule,', 'Finish,', 'stream_request_body,', 'removeslash,', 'addslash,', 'GZipContentEncoding,', ')', 'import', 'binascii', 'import', 'contextlib', 'import', 'copy', 'import', 'datetime', 'import', 'email.utils', 'import', 'gzip', 'from', 'io', 'import', 'BytesIO', 'import', 'itertools', 'import', 'logging', 'import', 'os', 'import', 're', 'import', 'socket', 'import', 'typing', 'import', 'unittest', 'import', 'urllib.parse', 'def', 'relpath(*a):', 'return', 'os.path.join(os.path.dirname(__file__),', '*a)', 'class', 'WebTestCase(AsyncHTTPTestCase):', 'def', 'get_app(self):', 'self.app', '=', 'Application(self.get_handlers(),', '**self.get_app_kwargs())', 'return', 'self.app', 'def', 'get_handlers(self):', 'raise', 'NotImplementedError()', 'def', 'get_app_kwargs(self):', 'return', '{}', 'class', 'SimpleHandlerTestCase(WebTestCase):', 'Handler', '=', 'None', 'def', 'get_handlers(self):', 'return', '[(\"/\",', 'self.Handler)]', 'class', 'HelloHandler(RequestHandler):', 'def', 'get(self):', 'self.write(\"hello\")', 'class', 'CookieTestRequestHandler(RequestHandler):', 'def', '__init__(self,', 'cookie_secret=\"0123456789\",', 'key_version=None):', 'self._cookies', '=', '{}', 'if', 'key_version', 'is', 'None:', 'self.application', '=', 'ObjectDict(', 'settings=dict(cookie_secret=cookie_secret)', ')', 'else:', 'self.application', '=', 'ObjectDict(', 'settings=dict(cookie_secret=cookie_secret,', 'key_version=key_version)', ')', 'def', 'get_cookie(self,', 'name):', 'return', 'self._cookies.get(name)', 'def', 'set_cookie(self,', 'name,', 'value,', 'expires_days=None):', 'self._cookies[name]', '=', 'value', 'class', 'SecureCookieV1Test(unittest.TestCase):', 'def', 'test_round_trip(self):', 'handler', '=', 'CookieTestRequestHandler()', 'handler.set_signed_cookie(\"foo\",', 'b\"bar\",', 'version=1)', 'self.assertEqual(handler.get_signed_cookie(\"foo\",', 'min_version=1),', 'b\"bar\")', 'def', 'test_cookie_tampering_future_timestamp(self):', 'handler', '=', 'CookieTestRequestHandler()', 'handler.set_signed_cookie(\"foo\",', 'binascii.a2b_hex(b\"d76df8e7aefc\"),', 'version=1)', 'cookie', '=', 'handler._cookies[\"foo\"]', 'match', '=', 're.match(rb\"12345678\\\\|([0-9]+)\\\\|([0-9a-f]+)\",', 'cookie)', 'assert', 'match', 'is', 'not', 'None', 'timestamp', '=', 'match.group(1)', 'sig', '=', 'match.group(2)', 'self.assertEqual(', '_create_signature_v1(', 'handler.application.settings[\"cookie_secret\"],', '\"foo\",', '\"12345678\",', 'timestamp,', '),', 'sig,', ')', 'self.assertEqual(', '_create_signature_v1(', 'handler.application.settings[\"cookie_secret\"],', '\"foo\",', '\"1234\",', 'b\"5678\"', '+', 'timestamp,', '),', 'sig,', ')', 'handler._cookies[\"foo\"]', '=', 'utf8(', '\"1234|5678%s|%s\"', '%', '(to_basestring(timestamp),', 'to_basestring(sig))', ')', 'with', 'ExpectLog(gen_log,', '\"Cookie', 'timestamp', 'in', 'future\"):', 'self.assertTrue(handler.get_signed_cookie(\"foo\",', 'min_version=1)', 'is', 'None)', 'def', 'test_arbitrary_bytes(self):', 'handler', '=', 'CookieTestRequestHandler()', 'handler.set_signed_cookie(\"foo\",', 'b\"\\\\xe9\",', 'version=1)', 'self.assertEqual(handler.get_signed_cookie(\"foo\",', 'min_version=1),', 'b\"\\\\xe9\")', 'class', 'SecureCookieV2Test(unittest.TestCase):', 'KEY_VERSIONS', '=', '{0:', '\"ajklasdf0ojaisdf\",', '1:', '\"aslkjasaolwkjsdf\"}', 'def', 'test_round_trip(self):', 'handler', '=', 'CookieTestRequestHandler()', 'handler.set_signed_cookie(\"foo\",', 'b\"bar\",', 'version=2)', 'self.assertEqual(handler.get_signed_cookie(\"foo\",', 'min_version=2),', 'b\"bar\")', 'def', 'test_key_version_roundtrip(self):', 'handler', '=', 'CookieTestRequestHandler(', 'cookie_secret=self.KEY_VERSIONS,', 'key_version=0', ')', 'handler.set_signed_cookie(\"foo\",', 'b\"bar\")', 'self.assertEqual(handler.get_signed_cookie(\"foo\"),', 'b\"bar\")', 'def', 'test_key_version_roundtrip_differing_version(self):', 'handler', '=', 'CookieTestRequestHandler(', 'cookie_secret=self.KEY_VERSIONS,', 'key_version=1', ')', 'handler.set_signed_cookie(\"foo\",', 'b\"bar\")', 'self.assertEqual(handler.get_signed_cookie(\"foo\"),', 'b\"bar\")', 'def', 'test_key_version_increment_version(self):', 'handler', '=', 'CookieTestRequestHandler(', 'cookie_secret=self.KEY_VERSIONS,', 'key_version=0', ')', 'handler.set_signed_cookie(\"foo\",', 'b\"bar\")', 'new_handler', '=', 'CookieTestRequestHandler(', 'cookie_secret=self.KEY_VERSIONS,', 'key_version=1', ')', 'new_handler._cookies', '=', 'handler._cookies', 'self.assertEqual(new_handler.get_signed_cookie(\"foo\"),', 'b\"bar\")', 'def', 'test_key_version_invalidate_version(self):', 'handler', '=', 'CookieTestRequestHandler(', 'cookie_secret=self.KEY_VERSIONS,', 'key_version=0', ')', 'handler.set_signed_cookie(\"foo\",', 'b\"bar\")', 'new_key_versions', '=', 'self.KEY_VERSIONS.copy()', 'new_key_versions.pop(0)', 'new_handler', '=', 'CookieTestRequestHandler(', 'cookie_secret=new_key_versions,', 'key_version=1', ')', 'new_handler._cookies', '=', 'handler._cookies', 'self.assertEqual(new_handler.get_signed_cookie(\"foo\"),', 'None)', 'class', 'FinalReturnTest(WebTestCase):', 'final_return', '=', 'None', 'def', 'get_handlers(self):', 'test', '=', 'self', 'class', 'FinishHandler(RequestHandler):', '@gen.coroutine', 'def', 'get(self):', 'test.final_return', '=', 'self.finish()', 'yield', 'test.final_return', '@gen.coroutine', 'def', 'post(self):', 'self.write(\"hello,\")', 'yield', 'self.flush()', 'test.final_return', '=', 'self.finish(\"world\")', 'yield', 'test.final_return', 'class', 'RenderHandler(RequestHandler):', 'def', 'create_template_loader(self,', 'path):', 'return', 'DictLoader({\"foo.html\":', '\"hi\"})', '@gen.coroutine', 'def', 'get(self):', 'test.final_return', '=', 'self.render(\"foo.html\")', 'return', '[(\"/finish\",', 'FinishHandler),', '(\"/render\",', 'RenderHandler)]', 'def', 'get_app_kwargs(self):', 'return', 'dict(template_path=\"FinalReturnTest\")', 'def', 'test_finish_method_return_future(self):', 'response', '=', 'self.fetch(self.get_url(\"/finish\"))', 'self.assertEqual(response.code,', '200)', 'self.assertIsInstance(self.final_return,', 'Future)', 'self.assertTrue(self.final_return.done())', 'response', '=', 'self.fetch(self.get_url(\"/finish\"),', 'method=\"POST\",', 'body=b\"\")', 'self.assertEqual(response.code,', '200)', 'self.assertIsInstance(self.final_return,', 'Future)', 'self.assertTrue(self.final_return.done())', 'def', 'test_render_method_return_future(self):', 'response', '=', 'self.fetch(self.get_url(\"/render\"))', 'self.assertEqual(response.code,', '200)', 'self.assertIsInstance(self.final_return,', 'Future)', 'class', 'CookieTest(WebTestCase):', 'def', 'get_handlers(self):', 'class', 'SetCookieHandler(RequestHandler):', 'def', 'get(self):', 'self.set_cookie(\"str\",', '\"asdf\")', 'self.set_cookie(\"unicode\",', '\"qwer\")', 'self.set_cookie(\"bytes\",', 'b\"zxcv\")', 'class', 'GetCookieHandler(RequestHandler):', 'def', 'get(self):', 'cookie', '=', 'self.get_cookie(\"foo\",', '\"default\")', 'assert', 'cookie', 'is', 'not', 'None', 'self.write(cookie)', 'class', 'SetCookieDomainHandler(RequestHandler):', 'def', 'get(self):', 'self.set_cookie(\"unicode_args\",', '\"blah\",', 'domain=\"foo.com\",', 'path=\"/foo\")', 'class', 'SetCookieSpecialCharHandler(RequestHandler):', 'def', 'get(self):', 'self.set_cookie(\"equals\",', '\"a=b\")', 'self.set_cookie(\"semicolon\",', '\"a;b\")', 'self.set_cookie(\"quote\",', '\\'a\"b\\')', 'class', 'SetCookieOverwriteHandler(RequestHandler):', 'def', 'get(self):', 'self.set_cookie(\"a\",', '\"b\",', 'domain=\"example.com\")', 'self.set_cookie(\"c\",', '\"d\",', 'domain=\"example.com\")', 'self.set_cookie(\"a\",', '\"e\")', 'class', 'SetCookieMaxAgeHandler(RequestHandler):', 'def', 'get(self):', 'self.set_cookie(\"foo\",', '\"bar\",', 'max_age=10)', 'class', 'SetCookieExpiresDaysHandler(RequestHandler):', 'def', 'get(self):', 'self.set_cookie(\"foo\",', '\"bar\",', 'expires_days=10)', 'class', 'SetCookieFalsyFlags(RequestHandler):', 'def', 'get(self):', 'self.set_cookie(\"a\",', '\"1\",', 'secure=True)', 'self.set_cookie(\"b\",', '\"1\",', 'secure=False)', 'self.set_cookie(\"c\",', '\"1\",', 'httponly=True)', 'self.set_cookie(\"d\",', '\"1\",', 'httponly=False)', 'class', 'SetCookieDeprecatedArgs(RequestHandler):', 'def', 'get(self):', 'self.set_cookie(\"a\",', '\"b\",', 'HttpOnly=True,', 'pATH=\"/foo\")', 'return', '[', '(\"/set\",', 'SetCookieHandler),', '(\"/get\",', 'GetCookieHandler),', '(\"/set_domain\",', 'SetCookieDomainHandler),', '(\"/special_char\",', 'SetCookieSpecialCharHandler),', '(\"/set_overwrite\",', 'SetCookieOverwriteHandler),', '(\"/set_max_age\",', 'SetCookieMaxAgeHandler),', '(\"/set_expires_days\",', 'SetCookieExpiresDaysHandler),', '(\"/set_falsy_flags\",', 'SetCookieFalsyFlags),', '(\"/set_deprecated\",', 'SetCookieDeprecatedArgs),', ']', 'def', 'test_set_cookie(self):', 'response', '=', 'self.fetch(\"/set\")', 'self.assertEqual(', 'sorted(response.headers.get_list(\"Set-Cookie\")),', '[\"bytes=zxcv;', 'Path=/\",', '\"str=asdf;', 'Path=/\",', '\"unicode=qwer;', 'Path=/\"],', ')', 'def', 'test_get_cookie(self):', 'response', '=', 'self.fetch(\"/get\",', 'headers={\"Cookie\":', '\"foo=bar\"})', 'self.assertEqual(response.body,', 'b\"bar\")', 'response', '=', 'self.fetch(\"/get\",', 'headers={\"Cookie\":', '\\'foo=\"bar\"\\'})', 'self.assertEqual(response.body,', 'b\"bar\")', 'response', '=', 'self.fetch(\"/get\",', 'headers={\"Cookie\":', '\"/=exception;\"})', 'self.assertEqual(response.body,', 'b\"default\")', 'def', 'test_set_cookie_domain(self):', 'response', '=', 'self.fetch(\"/set_domain\")', 'self.assertEqual(', 'response.headers.get_list(\"Set-Cookie\"),', '[\"unicode_args=blah;', 'Domain=foo.com;', 'Path=/foo\"],', ')', 'def', 'test_cookie_special_char(self):', 'response', '=', 'self.fetch(\"/special_char\")', 'headers', '=', 'sorted(response.headers.get_list(\"Set-Cookie\"))', 'self.assertEqual(len(headers),', '3)', 'self.assertEqual(headers[0],', '\\'equals=\"a=b\";', \"Path=/')\", 'self.assertEqual(headers[1],', '\\'quote=\"a\\\\\\\\\"b\";', \"Path=/')\", 'self.assertTrue(', 'headers[2]', 'in', '(\\'semicolon=\"a;b\";', \"Path=/',\", '\\'semicolon=\"a\\\\\\\\073b\";', \"Path=/'),\", 'headers[2],', ')', 'data', '=', '[', '(\"foo=a=b\",', '\"a=b\"),', '(\\'foo=\"a=b\"\\',', '\"a=b\"),', '(\\'foo=\"a;b\"\\',', '\\'\"a\\'),', '(\"foo=a\\\\\\\\073b\",', '\"a\\\\\\\\073b\"),', '(\\'foo=\"a\\\\\\\\073b\"\\',', '\"a;b\"),', '(\\'foo=\"a\\\\\\\\\"b\"\\',', '\\'a\"b\\'),', ']', 'for', 'header,', 'expected', 'in', 'data:', 'logging.debug(\"trying', '%r\",', 'header)', 'response', '=', 'self.fetch(\"/get\",', 'headers={\"Cookie\":', 'header})', 'self.assertEqual(response.body,', 'utf8(expected))', 'def', 'test_set_cookie_overwrite(self):', 'response', '=', 'self.fetch(\"/set_overwrite\")', 'headers', '=', 'response.headers.get_list(\"Set-Cookie\")', 'self.assertEqual(', 'sorted(headers),', '[\"a=e;', 'Path=/\",', '\"c=d;', 'Domain=example.com;', 'Path=/\"]', ')', 'def', 'test_set_cookie_max_age(self):', 'response', '=', 'self.fetch(\"/set_max_age\")', 'headers', '=', 'response.headers.get_list(\"Set-Cookie\")', 'self.assertEqual(sorted(headers),', '[\"foo=bar;', 'Max-Age=10;', 'Path=/\"])', 'def', 'test_set_cookie_expires_days(self):', 'response', '=', 'self.fetch(\"/set_expires_days\")', 'header', '=', 'response.headers.get(\"Set-Cookie\")', 'assert', 'header', 'is', 'not', 'None', 'match', '=', 're.match(\"foo=bar;', 'expires=(?P<expires>.+);', 'Path=/\",', 'header)', 'assert', 'match', 'is', 'not', 'None', 'expires', '=', 'datetime.datetime.now(datetime.timezone.utc)', '+', 'datetime.timedelta(', 'days=10', ')', 'header_expires', '=', 'email.utils.parsedate_to_datetime(match.groupdict()[\"expires\"])', 'self.assertTrue(abs((expires', '-', 'header_expires).total_seconds())', '<', '10)', 'def', 'test_set_cookie_false_flags(self):', 'response', '=', 'self.fetch(\"/set_falsy_flags\")', 'headers', '=', 'sorted(response.headers.get_list(\"Set-Cookie\"))', 'self.assertEqual(headers[0].lower(),', '\"a=1;', 'path=/;', 'secure\")', 'self.assertEqual(headers[1].lower(),', '\"b=1;', 'path=/\")', 'self.assertEqual(headers[2].lower(),', '\"c=1;', 'httponly;', 'path=/\")', 'self.assertEqual(headers[3].lower(),', '\"d=1;', 'path=/\")', 'def', 'test_set_cookie_deprecated(self):', 'with', 'ignore_deprecation():', 'response', '=', 'self.fetch(\"/set_deprecated\")', 'header', '=', 'response.headers.get(\"Set-Cookie\")', 'self.assertEqual(header,', '\"a=b;', 'HttpOnly;', 'Path=/foo\")', 'class', 'AuthRedirectRequestHandler(RequestHandler):', 'def', 'initialize(self,', 'login_url):', 'self.login_url', '=', 'login_url', 'def', 'get_login_url(self):', 'return', 'self.login_url', '@authenticated', 'def', 'get(self):', 'self.send_error(500)', 'class', 'AuthRedirectTest(WebTestCase):', 'def', 'get_handlers(self):', 'return', '[', '(\"/relative\",', 'AuthRedirectRequestHandler,', 'dict(login_url=\"/login\")),', '(', '\"/absolute\",', 'AuthRedirectRequestHandler,', 'dict(login_url=\"http://example.com/login\"),', '),', ']', 'def', 'test_relative_auth_redirect(self):', 'response', '=', 'self.fetch(self.get_url(\"/relative\"),', 'follow_redirects=False)', 'self.assertEqual(response.code,', '302)', 'self.assertEqual(response.headers[\"Location\"],', '\"/login?next=%2Frelative\")', 'def', 'test_absolute_auth_redirect(self):', 'response', '=', 'self.fetch(self.get_url(\"/absolute\"),', 'follow_redirects=False)', 'self.assertEqual(response.code,', '302)', 'self.assertTrue(', 're.match(', 'r\"http://example.com/login\\\\?next=http%3A%2F%2F127.0.0.1%3A[0-9]+%2Fabsolute\",', 'response.headers[\"Location\"],', '),', 'response.headers[\"Location\"],', ')', 'class', 'ConnectionCloseHandler(RequestHandler):', 'def', 'initialize(self,', 'test):', 'self.test', '=', 'test', '@gen.coroutine', 'def', 'get(self):', 'self.test.on_handler_waiting()', 'yield', 'self.test.cleanup_event.wait()', 'def', 'on_connection_close(self):', 'self.test.on_connection_close()', 'class', 'ConnectionCloseTest(WebTestCase):', 'def', 'get_handlers(self):', 'self.cleanup_event', '=', 'Event()', 'return', '[(\"/\",', 'ConnectionCloseHandler,', 'dict(test=self))]', 'def', 'test_connection_close(self):', 's', '=', 'socket.socket(socket.AF_INET,', 'socket.SOCK_STREAM,', '0)', 's.connect((\"127.0.0.1\",', 'self.get_http_port()))', 'self.stream', '=', 'IOStream(s)', 'self.stream.write(b\"GET', '/', 'HTTP/1.0\\\\r\\\\n\\\\r\\\\n\")', 'self.wait()', 'self.cleanup_event.set()', 'self.io_loop.run_sync(lambda:', 'gen.sleep(0))', 'def', 'on_handler_waiting(self):', 'logging.debug(\"handler', 'waiting\")', 'self.stream.close()', 'def', 'on_connection_close(self):', 'logging.debug(\"connection', 'closed\")', 'self.stop()', 'class', 'EchoHandler(RequestHandler):', 'def', 'get(self,', '*path_args):', 'for', 'key', 'in', 'self.request.arguments:', 'if', 'type(key)', '!=', 'str:', 'raise', 'Exception(\"incorrect', 'type', 'for', 'key:', '%r\"', '%', 'type(key))', 'for', 'bvalue', 'in', 'self.request.arguments[key]:', 'if', 'type(bvalue)', '!=', 'bytes:', 'raise', 'Exception(\"incorrect', 'type', 'for', 'value:', '%r\"', '%', 'type(bvalue))', 'for', 'svalue', 'in', 'self.get_arguments(key):', 'if', 'type(svalue)', '!=', 'unicode_type:', 'raise', 'Exception(\"incorrect', 'type', 'for', 'value:', '%r\"', '%', 'type(svalue))', 'for', 'arg', 'in', 'path_args:', 'if', 'type(arg)', '!=', 'unicode_type:', 'raise', 'Exception(\"incorrect', 'type', 'for', 'path', 'arg:', '%r\"', '%', 'type(arg))', 'self.write(', 'dict(', 'path=self.request.path,', 'path_args=path_args,', 'args=recursive_unicode(self.request.arguments),', ')', ')', 'class', 'RequestEncodingTest(WebTestCase):', 'def', 'get_handlers(self):', 'return', '[(\"/group/(.*)\",', 'EchoHandler),', '(\"/slashes/([^/]*)/([^/]*)\",', 'EchoHandler)]', 'def', 'fetch_json(self,', 'path):', 'return', 'json_decode(self.fetch(path).body)', 'def', 'test_group_question_mark(self):', 'self.assertEqual(', 'self.fetch_json(\"/group/%3F\"),', 'dict(path=\"/group/%3F\",', 'path_args=[\"?\"],', 'args={}),', ')', 'self.assertEqual(', 'self.fetch_json(\"/group/%3F?%3F=%3F\"),', 'dict(path=\"/group/%3F\",', 'path_args=[\"?\"],', 'args={\"?\":', '[\"?\"]}),', ')', 'def', 'test_group_encoding(self):', 'self.assertEqual(', 'self.fetch_json(\"/group/%C3%A9?arg=%C3%A9\"),', '{', '\"path\":', '\"/group/%C3%A9\",', '\"path_args\":', '[\"\\\\u00e9\"],', '\"args\":', '{\"arg\":', '[\"\\\\u00e9\"]},', '},', ')', 'def', 'test_slashes(self):', 'self.assertEqual(', 'self.fetch_json(\"/slashes/foo/bar\"),', 'dict(path=\"/slashes/foo/bar\",', 'path_args=[\"foo\",', '\"bar\"],', 'args={}),', ')', 'self.assertEqual(', 'self.fetch_json(\"/slashes/a%2Fb/c%2Fd\"),', 'dict(path=\"/slashes/a%2Fb/c%2Fd\",', 'path_args=[\"a/b\",', '\"c/d\"],', 'args={}),', ')', 'def', 'test_error(self):', 'with', 'ExpectLog(gen_log,', '\".*Invalid', 'unicode\"):', 'self.fetch(\"/group/?arg=%25%e9\")', 'class', 'TypeCheckHandler(RequestHandler):', 'def', 'prepare(self):', 'self.errors', '=', '{}', 'self.check_type(\"status\",', 'self.get_status(),', 'int)', 'self.check_type(\"argument\",', 'self.get_argument(\"foo\"),', 'unicode_type)', 'self.check_type(\"cookie_key\",', 'list(self.cookies.keys())[0],', 'str)', 'self.check_type(\"cookie_value\",', 'list(self.cookies.values())[0].value,', 'str)', 'if', 'list(self.cookies.keys())', '!=', '[\"asdf\"]:', 'raise', 'Exception(', '\"unexpected', 'values', 'for', 'cookie', 'keys:', '%r\"', '%', 'self.cookies.keys()', ')', 'self.check_type(\"get_signed_cookie\",', 'self.get_signed_cookie(\"asdf\"),', 'bytes)', 'self.check_type(\"get_cookie\",', 'self.get_cookie(\"asdf\"),', 'str)', 'self.check_type(\"xsrf_token\",', 'self.xsrf_token,', 'bytes)', 'self.check_type(\"xsrf_form_html\",', 'self.xsrf_form_html(),', 'str)', 'self.check_type(\"reverse_url\",', 'self.reverse_url(\"typecheck\",', '\"foo\"),', 'str)', 'self.check_type(\"request_summary\",', 'self._request_summary(),', 'str)', 'def', 'get(self,', 'path_component):', 'self.check_type(\"path_component\",', 'path_component,', 'unicode_type)', 'self.write(self.errors)', 'def', 'post(self,', 'path_component):', 'self.check_type(\"path_component\",', 'path_component,', 'unicode_type)', 'self.write(self.errors)', 'def', 'check_type(self,', 'name,', 'obj,', 'expected_type):', 'actual_type', '=', 'type(obj)', 'if', 'expected_type', '!=', 'actual_type:', 'self.errors[name]', '=', '\"expected', '%s,', 'got', '%s\"', '%', '(expected_type,', 'actual_type)', 'class', 'DecodeArgHandler(RequestHandler):', 'def', 'decode_argument(self,', 'value,', 'name=None):', 'if', 'type(value)', '!=', 'bytes:', 'raise', 'Exception(\"unexpected', 'type', 'for', 'value:', '%r\"', '%', 'type(value))', 'if', '\"encoding\"', 'in', 'self.request.arguments:', 'return', 'value.decode(to_unicode(self.request.arguments[\"encoding\"][0]))', 'else:', 'return', 'value', 'def', 'get(self,', 'arg):', 'def', 'describe(s):', 'if', 'type(s)', '==', 'bytes:', 'return', '[\"bytes\",', 'native_str(binascii.b2a_hex(s))]', 'elif', 'type(s)', '==', 'unicode_type:', 'return', '[\"unicode\",', 's]', 'raise', 'Exception(\"unknown', 'type\")', 'self.write({\"path\":', 'describe(arg),', '\"query\":', 'describe(self.get_argument(\"foo\"))})', 'class', 'LinkifyHandler(RequestHandler):', 'def', 'get(self):', 'self.render(\"linkify.html\",', 'message=\"http://example.com\")', 'class', 'UIModuleResourceHandler(RequestHandler):', 'def', 'get(self):', 'self.render(\"page.html\",', 'entries=[1,', '2])', 'class', 'OptionalPathHandler(RequestHandler):', 'def', 'get(self,', 'path):', 'self.write({\"path\":', 'path})', 'class', 'MultiHeaderHandler(RequestHandler):', 'def', 'get(self):', 'self.set_header(\"x-overwrite\",', '\"1\")', 'self.set_header(\"X-Overwrite\",', '2)', 'self.add_header(\"x-multi\",', '3)', 'self.add_header(\"X-Multi\",', '\"4\")', 'class', 'RedirectHandler(RequestHandler):', 'def', 'get(self):', 'if', 'self.get_argument(\"permanent\",', 'None)', 'is', 'not', 'None:', 'self.redirect(\"/\",', 'permanent=bool(int(self.get_argument(\"permanent\"))))', 'elif', 'self.get_argument(\"status\",', 'None)', 'is', 'not', 'None:', 'self.redirect(\"/\",', 'status=int(self.get_argument(\"status\")))', 'else:', 'raise', 'Exception(\"didn\\'t', 'get', 'permanent', 'or', 'status', 'arguments\")', 'class', 'EmptyFlushCallbackHandler(RequestHandler):', '@gen.coroutine', 'def', 'get(self):', 'yield', 'self.flush()', 'yield', 'self.flush()', 'self.write(\"o\")', 'yield', 'self.flush()', 'yield', 'self.flush()', 'self.finish(\"k\")', 'class', 'HeaderInjectionHandler(RequestHandler):', 'def', 'get(self):', 'try:', 'self.set_header(\"X-Foo\",', '\"foo\\\\r\\\\nX-Bar:', 'baz\")', 'raise', 'Exception(\"Didn\\'t', 'get', 'expected', 'exception\")', 'except', 'ValueError', 'as', 'e:', 'if', '\"Unsafe', 'header', 'value\"', 'in', 'str(e):', 'self.finish(b\"ok\")', 'else:', 'raise', 'class', 'GetArgumentHandler(RequestHandler):', 'def', 'prepare(self):', 'if', 'self.get_argument(\"source\",', 'None)', '==', '\"query\":', 'method', '=', 'self.get_query_argument', 'elif', 'self.get_argument(\"source\",', 'None)', '==', '\"body\":', 'method', '=', 'self.get_body_argument', 'else:', 'method', '=', 'self.get_argument', 'self.finish(method(\"foo\",', '\"default\"))', 'class', 'GetArgumentsHandler(RequestHandler):', 'def', 'prepare(self):', 'self.finish(', 'dict(', 'default=self.get_arguments(\"foo\"),', 'query=self.get_query_arguments(\"foo\"),', 'body=self.get_body_arguments(\"foo\"),', ')', ')', 'class', 'WSGISafeWebTest(WebTestCase):', 'COOKIE_SECRET', '=', '\"WebTest.COOKIE_SECRET\"', 'def', 'get_app_kwargs(self):', 'loader', '=', 'DictLoader(', '{', '\"linkify.html\":', '\"{%', 'module', 'linkify(message)', '%}\",', '\"page.html\":', ',', '\"entry.html\":', ',', '}', ')', 'return', 'dict(', 'template_loader=loader,', 'autoescape=\"xhtml_escape\",', 'cookie_secret=self.COOKIE_SECRET,', ')', 'def', 'tearDown(self):', 'super().tearDown()', 'RequestHandler._template_loaders.clear()', 'def', 'get_handlers(self):', 'urls', '=', '[', 'url(\"/typecheck/(.*)\",', 'TypeCheckHandler,', 'name=\"typecheck\"),', 'url(\"/decode_arg/(.*)\",', 'DecodeArgHandler,', 'name=\"decode_arg\"),', 'url(\"/decode_arg_kw/(?P<arg>.*)\",', 'DecodeArgHandler),', 'url(\"/linkify\",', 'LinkifyHandler),', 'url(\"/uimodule_resources\",', 'UIModuleResourceHandler),', 'url(\"/optional_path/(.+)?\",', 'OptionalPathHandler),', 'url(\"/multi_header\",', 'MultiHeaderHandler),', 'url(\"/redirect\",', 'RedirectHandler),', 'url(', '\"/web_redirect_permanent\",', 'WebRedirectHandler,', '{\"url\":', '\"/web_redirect_newpath\"},', '),', 'url(', '\"/web_redirect\",', 'WebRedirectHandler,', '{\"url\":', '\"/web_redirect_newpath\",', '\"permanent\":', 'False},', '),', 'url(', '\"//web_redirect_double_slash\",', 'WebRedirectHandler,', '{\"url\":', '\"/web_redirect_newpath\"},', '),', 'url(\"/header_injection\",', 'HeaderInjectionHandler),', 'url(\"/get_argument\",', 'GetArgumentHandler),', 'url(\"/get_arguments\",', 'GetArgumentsHandler),', ']', 'return', 'urls', 'def', 'fetch_json(self,', '*args,', '**kwargs):', 'response', '=', 'self.fetch(*args,', '**kwargs)', 'response.rethrow()', 'return', 'json_decode(response.body)', 'def', 'test_types(self):', 'cookie_value', '=', 'to_unicode(', 'create_signed_value(self.COOKIE_SECRET,', '\"asdf\",', '\"qwer\")', ')', 'response', '=', 'self.fetch(', '\"/typecheck/asdf?foo=bar\",', 'headers={\"Cookie\":', '\"asdf=\"', '+', 'cookie_value}', ')', 'data', '=', 'json_decode(response.body)', 'self.assertEqual(data,', '{})', 'response', '=', 'self.fetch(', '\"/typecheck/asdf?foo=bar\",', 'method=\"POST\",', 'headers={\"Cookie\":', '\"asdf=\"', '+', 'cookie_value},', 'body=\"foo=bar\",', ')', 'def', 'test_decode_argument(self):', 'urls', '=', '[', '\"/decode_arg/%C3%A9?foo=%C3%A9&encoding=utf-8\",', '\"/decode_arg/%E9?foo=%E9&encoding=latin1\",', '\"/decode_arg_kw/%E9?foo=%E9&encoding=latin1\",', ']', 'for', 'req_url', 'in', 'urls:', 'response', '=', 'self.fetch(req_url)', 'response.rethrow()', 'data', '=', 'json_decode(response.body)', 'self.assertEqual(', 'data,', '{\"path\":', '[\"unicode\",', '\"\\\\u00e9\"],', '\"query\":', '[\"unicode\",', '\"\\\\u00e9\"]},', ')', 'response', '=', 'self.fetch(\"/decode_arg/%C3%A9?foo=%C3%A9\")', 'response.rethrow()', 'data', '=', 'json_decode(response.body)', 'self.assertEqual(data,', '{\"path\":', '[\"bytes\",', '\"c3a9\"],', '\"query\":', '[\"bytes\",', '\"c3a9\"]})', 'def', 'test_decode_argument_invalid_unicode(self):', 'with', 'ExpectLog(gen_log,', '\".*Invalid', 'unicode.*\"):', 'response', '=', 'self.fetch(\"/typecheck/invalid%FF\")', 'self.assertEqual(response.code,', '400)', 'response', '=', 'self.fetch(\"/typecheck/invalid?foo=%FF\")', 'self.assertEqual(response.code,', '400)', 'def', 'test_decode_argument_plus(self):', 'urls', '=', '[', '\"/decode_arg/1%20%2B%201?foo=1%20%2B%201&encoding=utf-8\",', '\"/decode_arg/1%20+%201?foo=1+%2B+1&encoding=utf-8\",', ']', 'for', 'req_url', 'in', 'urls:', 'response', '=', 'self.fetch(req_url)', 'response.rethrow()', 'data', '=', 'json_decode(response.body)', 'self.assertEqual(', 'data,', '{\"path\":', '[\"unicode\",', '\"1', '+', '1\"],', '\"query\":', '[\"unicode\",', '\"1', '+', '1\"]},', ')', 'def', 'test_reverse_url(self):', 'self.assertEqual(self.app.reverse_url(\"decode_arg\",', '\"foo\"),', '\"/decode_arg/foo\")', 'self.assertEqual(self.app.reverse_url(\"decode_arg\",', '42),', '\"/decode_arg/42\")', 'self.assertEqual(self.app.reverse_url(\"decode_arg\",', 'b\"\\\\xe9\"),', '\"/decode_arg/%E9\")', 'self.assertEqual(', 'self.app.reverse_url(\"decode_arg\",', '\"\\\\u00e9\"),', '\"/decode_arg/%C3%A9\"', ')', 'self.assertEqual(', 'self.app.reverse_url(\"decode_arg\",', '\"1', '+', '1\"),', '\"/decode_arg/1%20%2B%201\"', ')', 'def', 'test_uimodule_unescaped(self):', 'response', '=', 'self.fetch(\"/linkify\")', 'self.assertEqual(', 'response.body,', \"b'<a\", 'href=\"http://example.com\">http://example.com</a>\\'', ')', 'def', 'test_uimodule_resources(self):', 'response', '=', 'self.fetch(\"/uimodule_resources\")', 'self.assertEqual(', 'response.body,', 'b,', ')', 'def', 'test_optional_path(self):', 'self.assertEqual(self.fetch_json(\"/optional_path/foo\"),', '{\"path\":', '\"foo\"})', 'self.assertEqual(self.fetch_json(\"/optional_path/\"),', '{\"path\":', 'None})', 'def', 'test_multi_header(self):', 'response', '=', 'self.fetch(\"/multi_header\")', 'self.assertEqual(response.headers[\"x-overwrite\"],', '\"2\")', 'self.assertEqual(response.headers.get_list(\"x-multi\"),', '[\"3\",', '\"4\"])', 'def', 'test_redirect(self):', 'response', '=', 'self.fetch(\"/redirect?permanent=1\",', 'follow_redirects=False)', 'self.assertEqual(response.code,', '301)', 'response', '=', 'self.fetch(\"/redirect?permanent=0\",', 'follow_redirects=False)', 'self.assertEqual(response.code,', '302)', 'response', '=', 'self.fetch(\"/redirect?status=307\",', 'follow_redirects=False)', 'self.assertEqual(response.code,', '307)', 'def', 'test_web_redirect(self):', 'response', '=', 'self.fetch(\"/web_redirect_permanent\",', 'follow_redirects=False)', 'self.assertEqual(response.code,', '301)', 'self.assertEqual(response.headers[\"Location\"],', '\"/web_redirect_newpath\")', 'response', '=', 'self.fetch(\"/web_redirect\",', 'follow_redirects=False)', 'self.assertEqual(response.code,', '302)', 'self.assertEqual(response.headers[\"Location\"],', '\"/web_redirect_newpath\")', 'def', 'test_web_redirect_double_slash(self):', 'response', '=', 'self.fetch(\"//web_redirect_double_slash\",', 'follow_redirects=False)', 'self.assertEqual(response.code,', '301)', 'self.assertEqual(response.headers[\"Location\"],', '\"/web_redirect_newpath\")', 'def', 'test_header_injection(self):', 'response', '=', 'self.fetch(\"/header_injection\")', 'self.assertEqual(response.body,', 'b\"ok\")', 'def', 'test_get_argument(self):', 'response', '=', 'self.fetch(\"/get_argument?foo=bar\")', 'self.assertEqual(response.body,', 'b\"bar\")', 'response', '=', 'self.fetch(\"/get_argument?foo=\")', 'self.assertEqual(response.body,', 'b\"\")', 'response', '=', 'self.fetch(\"/get_argument\")', 'self.assertEqual(response.body,', 'b\"default\")', 'body', '=', 'urllib.parse.urlencode(dict(foo=\"hello\"))', 'response', '=', 'self.fetch(\"/get_argument?foo=bar\",', 'method=\"POST\",', 'body=body)', 'self.assertEqual(response.body,', 'b\"hello\")', 'response', '=', 'self.fetch(\"/get_arguments?foo=bar\",', 'method=\"POST\",', 'body=body)', 'self.assertEqual(', 'json_decode(response.body),', 'dict(default=[\"bar\",', '\"hello\"],', 'query=[\"bar\"],', 'body=[\"hello\"]),', ')', 'def', 'test_get_query_arguments(self):', 'body', '=', 'urllib.parse.urlencode(dict(foo=\"hello\"))', 'response', '=', 'self.fetch(', '\"/get_argument?source=query&foo=bar\",', 'method=\"POST\",', 'body=body', ')', 'self.assertEqual(response.body,', 'b\"bar\")', 'response', '=', 'self.fetch(', '\"/get_argument?source=query&foo=\",', 'method=\"POST\",', 'body=body', ')', 'self.assertEqual(response.body,', 'b\"\")', 'response', '=', 'self.fetch(\"/get_argument?source=query\",', 'method=\"POST\",', 'body=body)', 'self.assertEqual(response.body,', 'b\"default\")', 'def', 'test_get_body_arguments(self):', 'body', '=', 'urllib.parse.urlencode(dict(foo=\"bar\"))', 'response', '=', 'self.fetch(', '\"/get_argument?source=body&foo=hello\",', 'method=\"POST\",', 'body=body', ')', 'self.assertEqual(response.body,', 'b\"bar\")', 'body', '=', 'urllib.parse.urlencode(dict(foo=\"\"))', 'response', '=', 'self.fetch(', '\"/get_argument?source=body&foo=hello\",', 'method=\"POST\",', 'body=body', ')', 'self.assertEqual(response.body,', 'b\"\")', 'body', '=', 'urllib.parse.urlencode(dict())', 'response', '=', 'self.fetch(', '\"/get_argument?source=body&foo=hello\",', 'method=\"POST\",', 'body=body', ')', 'self.assertEqual(response.body,', 'b\"default\")', 'def', 'test_no_gzip(self):', 'response', '=', 'self.fetch(\"/get_argument\")', 'self.assertNotIn(\"Accept-Encoding\",', 'response.headers.get(\"Vary\",', '\"\"))', 'self.assertNotIn(\"gzip\",', 'response.headers.get(\"Content-Encoding\",', '\"\"))', 'class', 'NonWSGIWebTests(WebTestCase):', 'def', 'get_handlers(self):', 'return', '[(\"/empty_flush\",', 'EmptyFlushCallbackHandler)]', 'def', 'test_empty_flush(self):', 'response', '=', 'self.fetch(\"/empty_flush\")', 'self.assertEqual(response.body,', 'b\"ok\")', 'class', 'ErrorResponseTest(WebTestCase):', 'def', 'get_handlers(self):', 'class', 'DefaultHandler(RequestHandler):', 'def', 'get(self):', 'if', 'self.get_argument(\"status\",', 'None):', 'raise', 'HTTPError(int(self.get_argument(\"status\")))', '1', '/', '0', 'class', 'WriteErrorHandler(RequestHandler):', 'def', 'get(self):', 'if', 'self.get_argument(\"status\",', 'None):', 'self.send_error(int(self.get_argument(\"status\")))', 'else:', '1', '/', '0', 'def', 'write_error(self,', 'status_code,', '**kwargs):', 'self.set_header(\"Content-Type\",', '\"text/plain\")', 'if', '\"exc_info\"', 'in', 'kwargs:', 'self.write(\"Exception:', '%s\"', '%', 'kwargs[\"exc_info\"][0].__name__)', 'else:', 'self.write(\"Status:', '%d\"', '%', 'status_code)', 'class', 'FailedWriteErrorHandler(RequestHandler):', 'def', 'get(self):', '1', '/', '0', 'def', 'write_error(self,', 'status_code,', '**kwargs):', 'raise', 'Exception(\"exception', 'in', 'write_error\")', 'return', '[', 'url(\"/default\",', 'DefaultHandler),', 'url(\"/write_error\",', 'WriteErrorHandler),', 'url(\"/failed_write_error\",', 'FailedWriteErrorHandler),', ']', 'def', 'test_default(self):', 'with', 'ExpectLog(app_log,', '\"Uncaught', 'exception\"):', 'response', '=', 'self.fetch(\"/default\")', 'self.assertEqual(response.code,', '500)', 'self.assertTrue(b\"500:', 'Internal', 'Server', 'Error\"', 'in', 'response.body)', 'response', '=', 'self.fetch(\"/default?status=503\")', 'self.assertEqual(response.code,', '503)', 'self.assertTrue(b\"503:', 'Service', 'Unavailable\"', 'in', 'response.body)', 'response', '=', 'self.fetch(\"/default?status=435\")', 'self.assertEqual(response.code,', '435)', 'self.assertTrue(b\"435:', 'Unknown\"', 'in', 'response.body)', 'def', 'test_write_error(self):', 'with', 'ExpectLog(app_log,', '\"Uncaught', 'exception\"):', 'response', '=', 'self.fetch(\"/write_error\")', 'self.assertEqual(response.code,', '500)', 'self.assertEqual(b\"Exception:', 'ZeroDivisionError\",', 'response.body)', 'response', '=', 'self.fetch(\"/write_error?status=503\")', 'self.assertEqual(response.code,', '503)', 'self.assertEqual(b\"Status:', '503\",', 'response.body)', 'def', 'test_failed_write_error(self):', 'with', 'ExpectLog(app_log,', '\"Uncaught', 'exception\"):', 'response', '=', 'self.fetch(\"/failed_write_error\")', 'self.assertEqual(response.code,', '500)', 'self.assertEqual(b\"\",', 'response.body)', 'class', 'StaticFileTest(WebTestCase):', 'robots_txt_hash', '=', '(', 'b\"63a36e950e134b5217e33c763e88840c10a07d80e6057d92b9ac97508de7fb1f\"', 'b\"a6f0e9b7531e169657165ea764e8963399cb6d921ffe6078425aaafe54c04563\"', ')', 'static_dir', '=', 'os.path.join(os.path.dirname(__file__),', '\"static\")', 'def', 'get_handlers(self):', 'class', 'StaticUrlHandler(RequestHandler):', 'def', 'get(self,', 'path):', 'with_v', '=', 'int(self.get_argument(\"include_version\",', '\"1\"))', 'self.write(self.static_url(path,', 'include_version=with_v))', 'class', 'AbsoluteStaticUrlHandler(StaticUrlHandler):', 'include_host', '=', 'True', 'class', 'OverrideStaticUrlHandler(RequestHandler):', 'def', 'get(self,', 'path):', 'do_include', '=', 'bool(self.get_argument(\"include_host\"))', 'self.include_host', '=', 'not', 'do_include', 'regular_url', '=', 'self.static_url(path)', 'override_url', '=', 'self.static_url(path,', 'include_host=do_include)', 'if', 'override_url', '==', 'regular_url:', 'return', 'self.write(str(False))', 'protocol', '=', 'self.request.protocol', '+', '\"://\"', 'protocol_length', '=', 'len(protocol)', 'check_regular', '=', 'regular_url.find(protocol,', '0,', 'protocol_length)', 'check_override', '=', 'override_url.find(protocol,', '0,', 'protocol_length)', 'if', 'do_include:', 'result', '=', 'check_override', '==', '0', 'and', 'check_regular', '==', '-1', 'else:', 'result', '=', 'check_override', '==', '-1', 'and', 'check_regular', '==', '0', 'self.write(str(result))', 'return', '[', '(\"/static_url/(.*)\",', 'StaticUrlHandler),', '(\"/abs_static_url/(.*)\",', 'AbsoluteStaticUrlHandler),', '(\"/override_static_url/(.*)\",', 'OverrideStaticUrlHandler),', '(\"/root_static/(.*)\",', 'StaticFileHandler,', 'dict(path=\"/\")),', ']', 'def', 'get_app_kwargs(self):', 'return', 'dict(static_path=relpath(\"static\"))', 'def', 'test_static_files(self):', 'response', '=', 'self.fetch(\"/robots.txt\")', 'self.assertTrue(b\"Disallow:', '/\"', 'in', 'response.body)', 'response', '=', 'self.fetch(\"/static/robots.txt\")', 'self.assertTrue(b\"Disallow:', '/\"', 'in', 'response.body)', 'self.assertEqual(response.headers.get(\"Content-Type\"),', '\"text/plain\")', 'def', 'test_static_files_cacheable(self):', 'response', '=', 'self.fetch(\"/robots.txt?v=12345\")', 'self.assertTrue(b\"Disallow:', '/\"', 'in', 'response.body)', 'self.assertIn(\"Cache-Control\",', 'response.headers)', 'self.assertIn(\"Expires\",', 'response.headers)', 'def', 'test_static_compressed_files(self):', 'response', '=', 'self.fetch(\"/static/sample.xml.gz\")', 'self.assertEqual(response.headers.get(\"Content-Type\"),', '\"application/gzip\")', 'response', '=', 'self.fetch(\"/static/sample.xml.bz2\")', 'self.assertEqual(', 'response.headers.get(\"Content-Type\"),', '\"application/octet-stream\"', ')', 'response', '=', 'self.fetch(\"/static/sample.xml\")', 'self.assertTrue(', 'response.headers.get(\"Content-Type\")', 'in', 'set((\"text/xml\",', '\"application/xml\"))', ')', 'def', 'test_static_url(self):', 'response', '=', 'self.fetch(\"/static_url/robots.txt\")', 'self.assertEqual(response.body,', 'b\"/static/robots.txt?v=\"', '+', 'self.robots_txt_hash)', 'def', 'test_absolute_static_url(self):', 'response', '=', 'self.fetch(\"/abs_static_url/robots.txt\")', 'self.assertEqual(', 'response.body,', '(utf8(self.get_url(\"/\"))', '+', 'b\"static/robots.txt?v=\"', '+', 'self.robots_txt_hash),', ')', 'def', 'test_relative_version_exclusion(self):', 'response', '=', 'self.fetch(\"/static_url/robots.txt?include_version=0\")', 'self.assertEqual(response.body,', 'b\"/static/robots.txt\")', 'def', 'test_absolute_version_exclusion(self):', 'response', '=', 'self.fetch(\"/abs_static_url/robots.txt?include_version=0\")', 'self.assertEqual(response.body,', 'utf8(self.get_url(\"/\")', '+', '\"static/robots.txt\"))', 'def', 'test_include_host_override(self):', 'self._trigger_include_host_check(False)', 'self._trigger_include_host_check(True)', 'def', '_trigger_include_host_check(self,', 'include_host):', 'path', '=', '\"/override_static_url/robots.txt?include_host=%s\"', 'response', '=', 'self.fetch(path', '%', 'int(include_host))', 'self.assertEqual(response.body,', 'utf8(str(True)))', 'def', 'get_and_head(self,', '*args,', '**kwargs):', 'head_response', '=', 'self.fetch(*args,', 'method=\"HEAD\",', '**kwargs)', 'get_response', '=', 'self.fetch(*args,', 'method=\"GET\",', '**kwargs)', 'content_headers', '=', 'set()', 'for', 'h', 'in', 'itertools.chain(head_response.headers,', 'get_response.headers):', 'if', 'h.startswith(\"Content-\"):', 'content_headers.add(h)', 'for', 'h', 'in', 'content_headers:', 'self.assertEqual(', 'head_response.headers.get(h),', 'get_response.headers.get(h),', '\"%s', 'differs', 'between', 'GET', '(%s)', 'and', 'HEAD', '(%s)\"', '%', '(h,', 'head_response.headers.get(h),', 'get_response.headers.get(h)),', ')', 'return', 'get_response', 'def', 'test_static_304_if_modified_since(self):', 'response1', '=', 'self.get_and_head(\"/static/robots.txt\")', 'response2', '=', 'self.get_and_head(', '\"/static/robots.txt\",', 'headers={\"If-Modified-Since\":', 'response1.headers[\"Last-Modified\"]},', ')', 'self.assertEqual(response2.code,', '304)', 'self.assertTrue(\"Content-Length\"', 'not', 'in', 'response2.headers)', 'def', 'test_static_304_if_none_match(self):', 'response1', '=', 'self.get_and_head(\"/static/robots.txt\")', 'response2', '=', 'self.get_and_head(', '\"/static/robots.txt\",', 'headers={\"If-None-Match\":', 'response1.headers[\"Etag\"]}', ')', 'self.assertEqual(response2.code,', '304)', 'def', 'test_static_304_etag_modified_bug(self):', 'response1', '=', 'self.get_and_head(\"/static/robots.txt\")', 'response2', '=', 'self.get_and_head(', '\"/static/robots.txt\",', 'headers={', '\"If-None-Match\":', '\\'\"MISMATCH\"\\',', '\"If-Modified-Since\":', 'response1.headers[\"Last-Modified\"],', '},', ')', 'self.assertEqual(response2.code,', '200)', 'def', 'test_static_if_modified_since_pre_epoch(self):', 'response', '=', 'self.get_and_head(', '\"/static/robots.txt\",', 'headers={\"If-Modified-Since\":', '\"Fri,', '01', 'Jan', '1960', '00:00:00', 'GMT\"},', ')', 'self.assertEqual(response.code,', '200)', 'def', 'test_static_if_modified_since_time_zone(self):', 'stat', '=', 'os.stat(relpath(\"static/robots.txt\"))', 'response', '=', 'self.get_and_head(', '\"/static/robots.txt\",', 'headers={\"If-Modified-Since\":', 'format_timestamp(stat.st_mtime', '-', '1)},', ')', 'self.assertEqual(response.code,', '200)', 'response', '=', 'self.get_and_head(', '\"/static/robots.txt\",', 'headers={\"If-Modified-Since\":', 'format_timestamp(stat.st_mtime', '+', '1)},', ')', 'self.assertEqual(response.code,', '304)', 'def', 'test_static_etag(self):', 'response', '=', 'self.get_and_head(\"/static/robots.txt\")', 'self.assertEqual(', 'utf8(response.headers.get(\"Etag\")),', 'b\\'\"\\'', '+', 'self.robots_txt_hash', '+', 'b\\'\"\\'', ')', 'def', 'test_static_with_range(self):', 'response', '=', 'self.get_and_head(', '\"/static/robots.txt\",', 'headers={\"Range\":', '\"bytes=0-9\"}', ')', 'self.assertEqual(response.code,', '206)', 'self.assertEqual(response.body,', 'b\"User-agent\")', 'self.assertEqual(', 'utf8(response.headers.get(\"Etag\")),', 'b\\'\"\\'', '+', 'self.robots_txt_hash', '+', 'b\\'\"\\'', ')', 'self.assertEqual(response.headers.get(\"Content-Length\"),', '\"10\")', 'self.assertEqual(response.headers.get(\"Content-Range\"),', '\"bytes', '0-9/26\")', 'def', 'test_static_with_range_full_file(self):', 'response', '=', 'self.get_and_head(', '\"/static/robots.txt\",', 'headers={\"Range\":', '\"bytes=0-\"}', ')', 'self.assertEqual(response.code,', '200)', 'robots_file_path', '=', 'os.path.join(self.static_dir,', '\"robots.txt\")', 'with', 'open(robots_file_path,', 'encoding=\"utf-8\")', 'as', 'f:', 'self.assertEqual(response.body,', 'utf8(f.read()))', 'self.assertEqual(response.headers.get(\"Content-Length\"),', '\"26\")', 'self.assertEqual(response.headers.get(\"Content-Range\"),', 'None)', 'def', 'test_static_with_range_full_past_end(self):', 'response', '=', 'self.get_and_head(', '\"/static/robots.txt\",', 'headers={\"Range\":', '\"bytes=0-10000000\"}', ')', 'self.assertEqual(response.code,', '200)', 'robots_file_path', '=', 'os.path.join(self.static_dir,', '\"robots.txt\")', 'with', 'open(robots_file_path,', 'encoding=\"utf-8\")', 'as', 'f:', 'self.assertEqual(response.body,', 'utf8(f.read()))', 'self.assertEqual(response.headers.get(\"Content-Length\"),', '\"26\")', 'self.assertEqual(response.headers.get(\"Content-Range\"),', 'None)', 'def', 'test_static_with_range_partial_past_end(self):', 'response', '=', 'self.get_and_head(', '\"/static/robots.txt\",', 'headers={\"Range\":', '\"bytes=1-10000000\"}', ')', 'self.assertEqual(response.code,', '206)', 'robots_file_path', '=', 'os.path.join(self.static_dir,', '\"robots.txt\")', 'with', 'open(robots_file_path,', 'encoding=\"utf-8\")', 'as', 'f:', 'self.assertEqual(response.body,', 'utf8(f.read()[1:]))', 'self.assertEqual(response.headers.get(\"Content-Length\"),', '\"25\")', 'self.assertEqual(response.headers.get(\"Content-Range\"),', '\"bytes', '1-25/26\")', 'def', 'test_static_with_range_end_edge(self):', 'response', '=', 'self.get_and_head(', '\"/static/robots.txt\",', 'headers={\"Range\":', '\"bytes=22-\"}', ')', 'self.assertEqual(response.body,', 'b\":', '/\\\\n\")', 'self.assertEqual(response.headers.get(\"Content-Length\"),', '\"4\")', 'self.assertEqual(response.headers.get(\"Content-Range\"),', '\"bytes', '22-25/26\")', 'def', 'test_static_with_range_neg_end(self):', 'response', '=', 'self.get_and_head(', '\"/static/robots.txt\",', 'headers={\"Range\":', '\"bytes=-4\"}', ')', 'self.assertEqual(response.body,', 'b\":', '/\\\\n\")', 'self.assertEqual(response.headers.get(\"Content-Length\"),', '\"4\")', 'self.assertEqual(response.headers.get(\"Content-Range\"),', '\"bytes', '22-25/26\")', 'def', 'test_static_with_range_neg_past_start(self):', 'response', '=', 'self.get_and_head(', '\"/static/robots.txt\",', 'headers={\"Range\":', '\"bytes=-1000000\"}', ')', 'self.assertEqual(response.code,', '200)', 'robots_file_path', '=', 'os.path.join(self.static_dir,', '\"robots.txt\")', 'with', 'open(robots_file_path,', 'encoding=\"utf-8\")', 'as', 'f:', 'self.assertEqual(response.body,', 'utf8(f.read()))', 'self.assertEqual(response.headers.get(\"Content-Length\"),', '\"26\")', 'self.assertEqual(response.headers.get(\"Content-Range\"),', 'None)', 'def', 'test_static_invalid_range(self):', 'response', '=', 'self.get_and_head(\"/static/robots.txt\",', 'headers={\"Range\":', '\"asdf\"})', 'self.assertEqual(response.code,', '200)', 'def', 'test_static_unsatisfiable_range_zero_suffix(self):', 'response', '=', 'self.get_and_head(', '\"/static/robots.txt\",', 'headers={\"Range\":', '\"bytes=-0\"}', ')', 'self.assertEqual(response.headers.get(\"Content-Range\"),', '\"bytes', '*/26\")', 'self.assertEqual(response.code,', '416)', 'def', 'test_static_unsatisfiable_range_invalid_start(self):', 'response', '=', 'self.get_and_head(', '\"/static/robots.txt\",', 'headers={\"Range\":', '\"bytes=26\"}', ')', 'self.assertEqual(response.code,', '416)', 'self.assertEqual(response.headers.get(\"Content-Range\"),', '\"bytes', '*/26\")', 'def', 'test_static_unsatisfiable_range_end_less_than_start(self):', 'response', '=', 'self.get_and_head(', '\"/static/robots.txt\",', 'headers={\"Range\":', '\"bytes=10-3\"}', ')', 'self.assertEqual(response.code,', '416)', 'self.assertEqual(response.headers.get(\"Content-Range\"),', '\"bytes', '*/26\")', 'def', 'test_static_head(self):', 'response', '=', 'self.fetch(\"/static/robots.txt\",', 'method=\"HEAD\")', 'self.assertEqual(response.code,', '200)', 'self.assertEqual(response.body,', 'b\"\")', 'self.assertEqual(response.headers[\"Content-Length\"],', '\"26\")', 'self.assertEqual(', 'utf8(response.headers[\"Etag\"]),', 'b\\'\"\\'', '+', 'self.robots_txt_hash', '+', 'b\\'\"\\'', ')', 'def', 'test_static_head_range(self):', 'response', '=', 'self.fetch(', '\"/static/robots.txt\",', 'method=\"HEAD\",', 'headers={\"Range\":', '\"bytes=1-4\"}', ')', 'self.assertEqual(response.code,', '206)', 'self.assertEqual(response.body,', 'b\"\")', 'self.assertEqual(response.headers[\"Content-Length\"],', '\"4\")', 'self.assertEqual(', 'utf8(response.headers[\"Etag\"]),', 'b\\'\"\\'', '+', 'self.robots_txt_hash', '+', 'b\\'\"\\'', ')', 'def', 'test_static_range_if_none_match(self):', 'response', '=', 'self.get_and_head(', '\"/static/robots.txt\",', 'headers={', '\"Range\":', '\"bytes=1-4\",', '\"If-None-Match\":', 'b\\'\"\\'', '+', 'self.robots_txt_hash', '+', 'b\\'\"\\',', '},', ')', 'self.assertEqual(response.code,', '304)', 'self.assertEqual(response.body,', 'b\"\")', 'self.assertTrue(\"Content-Length\"', 'not', 'in', 'response.headers)', 'self.assertEqual(', 'utf8(response.headers[\"Etag\"]),', 'b\\'\"\\'', '+', 'self.robots_txt_hash', '+', 'b\\'\"\\'', ')', 'def', 'test_static_404(self):', 'response', '=', 'self.get_and_head(\"/static/blarg\")', 'self.assertEqual(response.code,', '404)', 'def', 'test_path_traversal_protection(self):', 'self.http_client.close()', 'self.http_client', '=', 'SimpleAsyncHTTPClient()', 'with', 'ExpectLog(gen_log,', '\".*not', 'in', 'root', 'static', 'directory\"):', 'response', '=', 'self.get_and_head(\"/static/../static_foo.txt\")', 'self.assertEqual(response.code,', '403)', '@unittest.skipIf(os.name', '!=', '\"posix\",', '\"non-posix', 'OS\")', 'def', 'test_root_static_path(self):', 'path', '=', 'os.path.join(', 'os.path.dirname(os.path.abspath(__file__)),', '\"static/robots.txt\"', ')', 'response', '=', 'self.get_and_head(\"/root_static\"', '+', 'urllib.parse.quote(path))', 'self.assertEqual(response.code,', '200)', 'class', 'StaticDefaultFilenameTest(WebTestCase):', 'def', 'get_app_kwargs(self):', 'return', 'dict(', 'static_path=relpath(\"static\"),', 'static_handler_args=dict(default_filename=\"index.html\"),', ')', 'def', 'get_handlers(self):', 'return', '[]', 'def', 'test_static_default_filename(self):', 'response', '=', 'self.fetch(\"/static/dir/\",', 'follow_redirects=False)', 'self.assertEqual(response.code,', '200)', 'self.assertEqual(b\"this', 'is', 'the', 'index\\\\n\",', 'response.body)', 'def', 'test_static_default_redirect(self):', 'response', '=', 'self.fetch(\"/static/dir\",', 'follow_redirects=False)', 'self.assertEqual(response.code,', '301)', 'self.assertTrue(response.headers[\"Location\"].endswith(\"/static/dir/\"))', 'class', 'StaticDefaultFilenameRootTest(WebTestCase):', 'def', 'get_app_kwargs(self):', 'return', 'dict(', 'static_path=os.path.abspath(relpath(\"static\")),', 'static_handler_args=dict(default_filename=\"index.html\"),', 'static_url_prefix=\"/\",', ')', 'def', 'get_handlers(self):', 'return', '[]', 'def', 'get_http_client(self):', 'return', 'SimpleAsyncHTTPClient()', 'def', 'test_no_open_redirect(self):', 'test_dir', '=', 'os.path.dirname(__file__)', 'drive,', 'tail', '=', 'os.path.splitdrive(test_dir)', 'if', 'os.name', '==', '\"posix\":', 'self.assertEqual(tail,', 'test_dir)', 'else:', 'test_dir', '=', 'tail', 'with', 'ExpectLog(gen_log,', '\".*cannot', 'redirect', 'path', 'with', 'two', 'initial', 'slashes\"):', 'response', '=', 'self.fetch(', 'f\"//evil.com/../{test_dir}/static/dir\",', 'follow_redirects=False,', ')', 'self.assertEqual(response.code,', '403)', 'class', 'StaticFileWithPathTest(WebTestCase):', 'def', 'get_app_kwargs(self):', 'return', 'dict(', 'static_path=relpath(\"static\"),', 'static_handler_args=dict(default_filename=\"index.html\"),', ')', 'def', 'get_handlers(self):', 'return', '[(\"/foo/(.*)\",', 'StaticFileHandler,', '{\"path\":', 'relpath(\"templates/\")})]', 'def', 'test_serve(self):', 'response', '=', 'self.fetch(\"/foo/utf8.html\")', 'self.assertEqual(response.body,', 'b\"H\\\\xc3\\\\xa9llo\\\\n\")', 'class', 'CustomStaticFileTest(WebTestCase):', 'def', 'get_handlers(self):', 'class', 'MyStaticFileHandler(StaticFileHandler):', '@classmethod', 'def', 'make_static_url(cls,', 'settings,', 'path):', 'version_hash', '=', 'cls.get_version(settings,', 'path)', 'extension_index', '=', 'path.rindex(\".\")', 'before_version', '=', 'path[:extension_index]', 'after_version', '=', 'path[(extension_index', '+', '1)', ':]', 'return', '\"/static/%s.%s.%s\"', '%', '(', 'before_version,', 'version_hash,', 'after_version,', ')', 'def', 'parse_url_path(self,', 'url_path):', 'extension_index', '=', 'url_path.rindex(\".\")', 'version_index', '=', 'url_path.rindex(\".\",', '0,', 'extension_index)', 'return', '\"%s%s\"', '%', '(url_path[:version_index],', 'url_path[extension_index:])', '@classmethod', 'def', 'get_absolute_path(cls,', 'settings,', 'path):', 'return', '\"CustomStaticFileTest:\"', '+', 'path', 'def', 'validate_absolute_path(self,', 'root,', 'absolute_path):', 'return', 'absolute_path', '@classmethod', 'def', 'get_content(self,', 'path,', 'start=None,', 'end=None):', 'assert', 'start', 'is', 'None', 'and', 'end', 'is', 'None', 'if', 'path', '==', '\"CustomStaticFileTest:foo.txt\":', 'return', 'b\"bar\"', 'raise', 'Exception(\"unexpected', 'path', '%r\"', '%', 'path)', 'def', 'get_content_size(self):', 'if', 'self.absolute_path', '==', '\"CustomStaticFileTest:foo.txt\":', 'return', '3', 'raise', 'Exception(\"unexpected', 'path', '%r\"', '%', 'self.absolute_path)', 'def', 'get_modified_time(self):', 'return', 'None', '@classmethod', 'def', 'get_version(cls,', 'settings,', 'path):', 'return', '\"42\"', 'class', 'StaticUrlHandler(RequestHandler):', 'def', 'get(self,', 'path):', 'self.write(self.static_url(path))', 'self.static_handler_class', '=', 'MyStaticFileHandler', 'return', '[(\"/static_url/(.*)\",', 'StaticUrlHandler)]', 'def', 'get_app_kwargs(self):', 'return', 'dict(static_path=\"dummy\",', 'static_handler_class=self.static_handler_class)', 'def', 'test_serve(self):', 'response', '=', 'self.fetch(\"/static/foo.42.txt\")', 'self.assertEqual(response.body,', 'b\"bar\")', 'def', 'test_static_url(self):', 'with', 'ExpectLog(gen_log,', '\"Could', 'not', 'open', 'static', 'file\",', 'required=False):', 'response', '=', 'self.fetch(\"/static_url/foo.txt\")', 'self.assertEqual(response.body,', 'b\"/static/foo.42.txt\")', 'class', 'HostMatchingTest(WebTestCase):', 'class', 'Handler(RequestHandler):', 'def', 'initialize(self,', 'reply):', 'self.reply', '=', 'reply', 'def', 'get(self):', 'self.write(self.reply)', 'def', 'get_handlers(self):', 'return', '[(\"/foo\",', 'HostMatchingTest.Handler,', '{\"reply\":', '\"wildcard\"})]', 'def', 'test_host_matching(self):', 'self.app.add_handlers(', '\"www.example.com\",', '[(\"/foo\",', 'HostMatchingTest.Handler,', '{\"reply\":', '\"[0]\"})]', ')', 'self.app.add_handlers(', 'r\"www\\\\.example\\\\.com\",', '[(\"/bar\",', 'HostMatchingTest.Handler,', '{\"reply\":', '\"[1]\"})]', ')', 'self.app.add_handlers(', '\"www.example.com\",', '[(\"/baz\",', 'HostMatchingTest.Handler,', '{\"reply\":', '\"[2]\"})]', ')', 'self.app.add_handlers(', '\"www.e.*e.com\",', '[(\"/baz\",', 'HostMatchingTest.Handler,', '{\"reply\":', '\"[3]\"})]', ')', 'response', '=', 'self.fetch(\"/foo\")', 'self.assertEqual(response.body,', 'b\"wildcard\")', 'response', '=', 'self.fetch(\"/bar\")', 'self.assertEqual(response.code,', '404)', 'response', '=', 'self.fetch(\"/baz\")', 'self.assertEqual(response.code,', '404)', 'response', '=', 'self.fetch(\"/foo\",', 'headers={\"Host\":', '\"www.example.com\"})', 'self.assertEqual(response.body,', 'b\"[0]\")', 'response', '=', 'self.fetch(\"/bar\",', 'headers={\"Host\":', '\"www.example.com\"})', 'self.assertEqual(response.body,', 'b\"[1]\")', 'response', '=', 'self.fetch(\"/baz\",', 'headers={\"Host\":', '\"www.example.com\"})', 'self.assertEqual(response.body,', 'b\"[2]\")', 'response', '=', 'self.fetch(\"/baz\",', 'headers={\"Host\":', '\"www.exe.com\"})', 'self.assertEqual(response.body,', 'b\"[3]\")', 'class', 'DefaultHostMatchingTest(WebTestCase):', 'def', 'get_handlers(self):', 'return', '[]', 'def', 'get_app_kwargs(self):', 'return', '{\"default_host\":', '\"www.example.com\"}', 'def', 'test_default_host_matching(self):', 'self.app.add_handlers(', '\"www.example.com\",', '[(\"/foo\",', 'HostMatchingTest.Handler,', '{\"reply\":', '\"[0]\"})]', ')', 'self.app.add_handlers(', 'r\"www\\\\.example\\\\.com\",', '[(\"/bar\",', 'HostMatchingTest.Handler,', '{\"reply\":', '\"[1]\"})]', ')', 'self.app.add_handlers(', '\"www.test.com\",', '[(\"/baz\",', 'HostMatchingTest.Handler,', '{\"reply\":', '\"[2]\"})]', ')', 'response', '=', 'self.fetch(\"/foo\")', 'self.assertEqual(response.body,', 'b\"[0]\")', 'response', '=', 'self.fetch(\"/bar\")', 'self.assertEqual(response.body,', 'b\"[1]\")', 'response', '=', 'self.fetch(\"/baz\")', 'self.assertEqual(response.code,', '404)', 'response', '=', 'self.fetch(\"/foo\",', 'headers={\"X-Real-Ip\":', '\"127.0.0.1\"})', 'self.assertEqual(response.code,', '404)', 'self.app.default_host', '=', '\"www.test.com\"', 'response', '=', 'self.fetch(\"/baz\")', 'self.assertEqual(response.body,', 'b\"[2]\")', 'class', 'NamedURLSpecGroupsTest(WebTestCase):', 'def', 'get_handlers(self):', 'class', 'EchoHandler(RequestHandler):', 'def', 'get(self,', 'path):', 'self.write(path)', 'return', '[', '(\"/str/(?P<path>.*)\",', 'EchoHandler),', '(\"/unicode/(?P<path>.*)\",', 'EchoHandler),', ']', 'def', 'test_named_urlspec_groups(self):', 'response', '=', 'self.fetch(\"/str/foo\")', 'self.assertEqual(response.body,', 'b\"foo\")', 'response', '=', 'self.fetch(\"/unicode/bar\")', 'self.assertEqual(response.body,', 'b\"bar\")', 'class', 'ClearHeaderTest(SimpleHandlerTestCase):', 'class', 'Handler(RequestHandler):', 'def', 'get(self):', 'self.set_header(\"h1\",', '\"foo\")', 'self.set_header(\"h2\",', '\"bar\")', 'self.clear_header(\"h1\")', 'self.clear_header(\"nonexistent\")', 'def', 'test_clear_header(self):', 'response', '=', 'self.fetch(\"/\")', 'self.assertTrue(\"h1\"', 'not', 'in', 'response.headers)', 'self.assertEqual(response.headers[\"h2\"],', '\"bar\")', 'class', 'Header204Test(SimpleHandlerTestCase):', 'class', 'Handler(RequestHandler):', 'def', 'get(self):', 'self.set_status(204)', 'self.finish()', 'def', 'test_204_headers(self):', 'response', '=', 'self.fetch(\"/\")', 'self.assertEqual(response.code,', '204)', 'self.assertNotIn(\"Content-Length\",', 'response.headers)', 'self.assertNotIn(\"Transfer-Encoding\",', 'response.headers)', 'class', 'Header304Test(SimpleHandlerTestCase):', 'class', 'Handler(RequestHandler):', 'def', 'get(self):', 'self.set_header(\"Content-Language\",', '\"en_US\")', 'self.write(\"hello\")', 'def', 'test_304_headers(self):', 'response1', '=', 'self.fetch(\"/\")', 'self.assertEqual(response1.headers[\"Content-Length\"],', '\"5\")', 'self.assertEqual(response1.headers[\"Content-Language\"],', '\"en_US\")', 'response2', '=', 'self.fetch(', '\"/\",', 'headers={\"If-None-Match\":', 'response1.headers[\"Etag\"]}', ')', 'self.assertEqual(response2.code,', '304)', 'self.assertTrue(\"Content-Length\"', 'not', 'in', 'response2.headers)', 'self.assertTrue(\"Content-Language\"', 'not', 'in', 'response2.headers)', 'self.assertTrue(\"Transfer-Encoding\"', 'not', 'in', 'response2.headers)', 'class', 'StatusReasonTest(SimpleHandlerTestCase):', 'class', 'Handler(RequestHandler):', 'def', 'get(self):', 'reason', '=', 'self.request.arguments.get(\"reason\",', '[])', 'self.set_status(', 'int(self.get_argument(\"code\")),', 'reason=to_unicode(reason[0])', 'if', 'reason', 'else', 'None,', ')', 'def', 'get_http_client(self):', 'return', 'SimpleAsyncHTTPClient()', 'def', 'test_status(self):', 'response', '=', 'self.fetch(\"/?code=304\")', 'self.assertEqual(response.code,', '304)', 'self.assertEqual(response.reason,', '\"Not', 'Modified\")', 'response', '=', 'self.fetch(\"/?code=304&reason=Foo\")', 'self.assertEqual(response.code,', '304)', 'self.assertEqual(response.reason,', '\"Foo\")', 'response', '=', 'self.fetch(\"/?code=682&reason=Bar\")', 'self.assertEqual(response.code,', '682)', 'self.assertEqual(response.reason,', '\"Bar\")', 'response', '=', 'self.fetch(\"/?code=682\")', 'self.assertEqual(response.code,', '682)', 'self.assertEqual(response.reason,', '\"Unknown\")', 'class', 'DateHeaderTest(SimpleHandlerTestCase):', 'class', 'Handler(RequestHandler):', 'def', 'get(self):', 'self.write(\"hello\")', 'def', 'test_date_header(self):', 'response', '=', 'self.fetch(\"/\")', 'header_date', '=', 'email.utils.parsedate_to_datetime(response.headers[\"Date\"])', 'self.assertTrue(', 'header_date', '-', 'datetime.datetime.now(datetime.timezone.utc)', '<', 'datetime.timedelta(seconds=2)', ')', 'class', 'RaiseWithReasonTest(SimpleHandlerTestCase):', 'class', 'Handler(RequestHandler):', 'def', 'get(self):', 'raise', 'HTTPError(682,', 'reason=\"Foo\")', 'def', 'get_http_client(self):', 'return', 'SimpleAsyncHTTPClient()', 'def', 'test_raise_with_reason(self):', 'response', '=', 'self.fetch(\"/\")', 'self.assertEqual(response.code,', '682)', 'self.assertEqual(response.reason,', '\"Foo\")', 'self.assertIn(b\"682:', 'Foo\",', 'response.body)', 'def', 'test_httperror_str(self):', 'self.assertEqual(str(HTTPError(682,', 'reason=\"Foo\")),', '\"HTTP', '682:', 'Foo\")', 'def', 'test_httperror_str_from_httputil(self):', 'self.assertEqual(str(HTTPError(682)),', '\"HTTP', '682:', 'Unknown\")', 'class', 'ErrorHandlerXSRFTest(WebTestCase):', 'def', 'get_handlers(self):', 'return', '[(\"/error\",', 'ErrorHandler,', 'dict(status_code=417))]', 'def', 'get_app_kwargs(self):', 'return', 'dict(xsrf_cookies=True)', 'def', 'test_error_xsrf(self):', 'response', '=', 'self.fetch(\"/error\",', 'method=\"POST\",', 'body=\"\")', 'self.assertEqual(response.code,', '417)', 'def', 'test_404_xsrf(self):', 'response', '=', 'self.fetch(\"/404\",', 'method=\"POST\",', 'body=\"\")', 'self.assertEqual(response.code,', '404)', 'class', 'GzipTestCase(SimpleHandlerTestCase):', 'class', 'Handler(RequestHandler):', 'def', 'get(self):', 'for', 'v', 'in', 'self.get_arguments(\"vary\"):', 'self.add_header(\"Vary\",', 'v)', 'self.write(\"hello', 'world\"', '+', '(\"!\"', '*', 'GZipContentEncoding.MIN_LENGTH))', 'def', 'get_app_kwargs(self):', 'return', 'dict(', 'gzip=True,', 'static_path=os.path.join(os.path.dirname(__file__),', '\"static\")', ')', 'def', 'assert_compressed(self,', 'response):', 'self.assertEqual(', 'response.headers.get(', '\"Content-Encoding\",', 'response.headers.get(\"X-Consumed-Content-Encoding\")', '),', '\"gzip\",', ')', 'def', 'test_gzip(self):', 'response', '=', 'self.fetch(\"/\")', 'self.assert_compressed(response)', 'self.assertEqual(response.headers[\"Vary\"],', '\"Accept-Encoding\")', 'def', 'test_gzip_static(self):', 'response', '=', 'self.fetch(\"/robots.txt\")', 'self.assert_compressed(response)', 'self.assertEqual(response.headers[\"Vary\"],', '\"Accept-Encoding\")', 'def', 'test_gzip_not_requested(self):', 'response', '=', 'self.fetch(\"/\",', 'use_gzip=False)', 'self.assertNotIn(\"Content-Encoding\",', 'response.headers)', 'self.assertEqual(response.headers[\"Vary\"],', '\"Accept-Encoding\")', 'def', 'test_vary_already_present(self):', 'response', '=', 'self.fetch(\"/?vary=Accept-Language\")', 'self.assert_compressed(response)', 'self.assertEqual(', '[s.strip()', 'for', 's', 'in', 'response.headers[\"Vary\"].split(\",\")],', '[\"Accept-Language\",', '\"Accept-Encoding\"],', ')', 'def', 'test_vary_already_present_multiple(self):', 'response', '=', 'self.fetch(\"/?vary=Accept-Language&vary=Cookie\")', 'self.assert_compressed(response)', 'self.assertEqual(', '[s.strip()', 'for', 's', 'in', 'response.headers[\"Vary\"].split(\",\")],', '[\"Accept-Language\",', '\"Cookie\",', '\"Accept-Encoding\"],', ')', 'class', 'PathArgsInPrepareTest(WebTestCase):', 'class', 'Handler(RequestHandler):', 'def', 'prepare(self):', 'self.write(dict(args=self.path_args,', 'kwargs=self.path_kwargs))', 'def', 'get(self,', 'path):', 'assert', 'path', '==', '\"foo\"', 'self.finish()', 'def', 'get_handlers(self):', 'return', '[(\"/pos/(.*)\",', 'self.Handler),', '(\"/kw/(?P<path>.*)\",', 'self.Handler)]', 'def', 'test_pos(self):', 'response', '=', 'self.fetch(\"/pos/foo\")', 'response.rethrow()', 'data', '=', 'json_decode(response.body)', 'self.assertEqual(data,', '{\"args\":', '[\"foo\"],', '\"kwargs\":', '{}})', 'def', 'test_kw(self):', 'response', '=', 'self.fetch(\"/kw/foo\")', 'response.rethrow()', 'data', '=', 'json_decode(response.body)', 'self.assertEqual(data,', '{\"args\":', '[],', '\"kwargs\":', '{\"path\":', '\"foo\"}})', 'class', 'ClearAllCookiesTest(SimpleHandlerTestCase):', 'class', 'Handler(RequestHandler):', 'def', 'get(self):', 'self.clear_all_cookies()', 'self.write(\"ok\")', 'def', 'test_clear_all_cookies(self):', 'response', '=', 'self.fetch(\"/\",', 'headers={\"Cookie\":', '\"foo=bar;', 'baz=xyzzy\"})', 'set_cookies', '=', 'sorted(response.headers.get_list(\"Set-Cookie\"))', 'self.assertTrue(', 'set_cookies[0].startswith(\"baz=;\")', 'or', 'set_cookies[0].startswith(\\'baz=\"\";\\')', ')', 'self.assertTrue(', 'set_cookies[1].startswith(\"foo=;\")', 'or', 'set_cookies[1].startswith(\\'foo=\"\";\\')', ')', 'class', 'PermissionError(Exception):', 'pass', 'class', 'ExceptionHandlerTest(SimpleHandlerTestCase):', 'class', 'Handler(RequestHandler):', 'def', 'get(self):', 'exc', '=', 'self.get_argument(\"exc\")', 'if', 'exc', '==', '\"http\":', 'raise', 'HTTPError(410,', '\"no', 'longer', 'here\")', 'elif', 'exc', '==', '\"zero\":', '1', '/', '0', 'elif', 'exc', '==', '\"permission\":', 'raise', 'PermissionError(\"not', 'allowed\")', 'def', 'write_error(self,', 'status_code,', '**kwargs):', 'if', '\"exc_info\"', 'in', 'kwargs:', 'typ,', 'value,', 'tb', '=', 'kwargs[\"exc_info\"]', 'if', 'isinstance(value,', 'PermissionError):', 'self.set_status(403)', 'self.write(\"PermissionError\")', 'return', 'RequestHandler.write_error(self,', 'status_code,', '**kwargs)', 'def', 'log_exception(self,', 'typ,', 'value,', 'tb):', 'if', 'isinstance(value,', 'PermissionError):', 'app_log.warning(\"custom', 'logging', 'for', 'PermissionError:', '%s\",', 'value.args[0])', 'else:', 'RequestHandler.log_exception(self,', 'typ,', 'value,', 'tb)', 'def', 'test_http_error(self):', 'with', 'ExpectLog(gen_log,', '\".*no', 'longer', 'here\"):', 'response', '=', 'self.fetch(\"/?exc=http\")', 'self.assertEqual(response.code,', '410)', 'def', 'test_unknown_error(self):', 'with', 'ExpectLog(app_log,', '\"Uncaught', 'exception\"):', 'response', '=', 'self.fetch(\"/?exc=zero\")', 'self.assertEqual(response.code,', '500)', 'def', 'test_known_error(self):', 'with', 'ExpectLog(app_log,', '\"custom', 'logging', 'for', 'PermissionError:', 'not', 'allowed\"):', 'response', '=', 'self.fetch(\"/?exc=permission\")', 'self.assertEqual(response.code,', '403)', 'class', 'BuggyLoggingTest(SimpleHandlerTestCase):', 'class', 'Handler(RequestHandler):', 'def', 'get(self):', '1', '/', '0', 'def', 'log_exception(self,', 'typ,', 'value,', 'tb):', '1', '/', '0', 'def', 'test_buggy_log_exception(self):', 'with', 'ExpectLog(app_log,', '\".*\"):', 'self.fetch(\"/\")', 'class', 'UIMethodUIModuleTest(SimpleHandlerTestCase):', 'class', 'Handler(RequestHandler):', 'def', 'get(self):', 'self.render(\"foo.html\")', 'def', 'value(self):', 'return', 'self.get_argument(\"value\")', 'def', 'get_app_kwargs(self):', 'def', 'my_ui_method(handler,', 'x):', 'return', '\"In', 'my_ui_method(%s)', 'with', 'handler', 'value', '%s.\"', '%', '(x,', 'handler.value())', 'class', 'MyModule(UIModule):', 'def', 'render(self,', 'x):', 'return', '\"In', 'MyModule(%s)', 'with', 'handler', 'value', '%s.\"', '%', '(', 'x,', 'typing.cast(UIMethodUIModuleTest.Handler,', 'self.handler).value(),', ')', 'loader', '=', 'DictLoader(', '{\"foo.html\":', '\"{{', 'my_ui_method(42)', '}}', '{%', 'module', 'MyModule(123)', '%}\"}', ')', 'return', 'dict(', 'template_loader=loader,', 'ui_methods={\"my_ui_method\":', 'my_ui_method},', 'ui_modules={\"MyModule\":', 'MyModule},', ')', 'def', 'tearDown(self):', 'super().tearDown()', 'RequestHandler._template_loaders.clear()', 'def', 'test_ui_method(self):', 'response', '=', 'self.fetch(\"/?value=asdf\")', 'self.assertEqual(', 'response.body,', 'b\"In', 'my_ui_method(42)', 'with', 'handler', 'value', 'asdf.', '\"', 'b\"In', 'MyModule(123)', 'with', 'handler', 'value', 'asdf.\",', ')', 'class', 'GetArgumentErrorTest(SimpleHandlerTestCase):', 'class', 'Handler(RequestHandler):', 'def', 'get(self):', 'try:', 'self.get_argument(\"foo\")', 'self.write({})', 'except', 'MissingArgumentError', 'as', 'e:', 'self.write({\"arg_name\":', 'e.arg_name,', '\"log_message\":', 'e.log_message})', 'def', 'test_catch_error(self):', 'response', '=', 'self.fetch(\"/\")', 'self.assertEqual(', 'json_decode(response.body),', '{\"arg_name\":', '\"foo\",', '\"log_message\":', '\"Missing', 'argument', 'foo\"},', ')', 'class', 'SetLazyPropertiesTest(SimpleHandlerTestCase):', 'class', 'Handler(RequestHandler):', 'def', 'prepare(self):', 'self.current_user', '=', '\"Ben\"', 'self.locale', '=', 'locale.get(\"en_US\")', 'def', 'get_user_locale(self):', 'raise', 'NotImplementedError()', 'def', 'get_current_user(self):', 'raise', 'NotImplementedError()', 'def', 'get(self):', 'self.write(\"Hello', '%s', '(%s)\"', '%', '(self.current_user,', 'self.locale.code))', 'def', 'test_set_properties(self):', 'response', '=', 'self.fetch(\"/\")', 'self.assertEqual(response.body,', 'b\"Hello', 'Ben', '(en_US)\")', 'class', 'GetCurrentUserTest(WebTestCase):', 'def', 'get_app_kwargs(self):', 'class', 'WithoutUserModule(UIModule):', 'def', 'render(self):', 'return', '\"\"', 'class', 'WithUserModule(UIModule):', 'def', 'render(self):', 'return', 'str(self.current_user)', 'loader', '=', 'DictLoader(', '{', '\"without_user.html\":', '\"\",', '\"with_user.html\":', '\"{{', 'current_user', '}}\",', '\"without_user_module.html\":', '\"{%', 'module', 'WithoutUserModule()', '%}\",', '\"with_user_module.html\":', '\"{%', 'module', 'WithUserModule()', '%}\",', '}', ')', 'return', 'dict(', 'template_loader=loader,', 'ui_modules={', '\"WithUserModule\":', 'WithUserModule,', '\"WithoutUserModule\":', 'WithoutUserModule,', '},', ')', 'def', 'tearDown(self):', 'super().tearDown()', 'RequestHandler._template_loaders.clear()', 'def', 'get_handlers(self):', 'class', 'CurrentUserHandler(RequestHandler):', 'def', 'prepare(self):', 'self.has_loaded_current_user', '=', 'False', 'def', 'get_current_user(self):', 'self.has_loaded_current_user', '=', 'True', 'return', '\"\"', 'class', 'WithoutUserHandler(CurrentUserHandler):', 'def', 'get(self):', 'self.render_string(\"without_user.html\")', 'self.finish(str(self.has_loaded_current_user))', 'class', 'WithUserHandler(CurrentUserHandler):', 'def', 'get(self):', 'self.render_string(\"with_user.html\")', 'self.finish(str(self.has_loaded_current_user))', 'class', 'CurrentUserModuleHandler(CurrentUserHandler):', 'def', 'get_template_namespace(self):', 'return', 'self.ui', 'class', 'WithoutUserModuleHandler(CurrentUserModuleHandler):', 'def', 'get(self):', 'self.render_string(\"without_user_module.html\")', 'self.finish(str(self.has_loaded_current_user))', 'class', 'WithUserModuleHandler(CurrentUserModuleHandler):', 'def', 'get(self):', 'self.render_string(\"with_user_module.html\")', 'self.finish(str(self.has_loaded_current_user))', 'return', '[', '(\"/without_user\",', 'WithoutUserHandler),', '(\"/with_user\",', 'WithUserHandler),', '(\"/without_user_module\",', 'WithoutUserModuleHandler),', '(\"/with_user_module\",', 'WithUserModuleHandler),', ']', '@unittest.skip(\"needs', 'fix\")', 'def', 'test_get_current_user_is_lazy(self):', 'response', '=', 'self.fetch(\"/without_user\")', 'self.assertEqual(response.body,', 'b\"False\")', 'def', 'test_get_current_user_works(self):', 'response', '=', 'self.fetch(\"/with_user\")', 'self.assertEqual(response.body,', 'b\"True\")', 'def', 'test_get_current_user_from_ui_module_is_lazy(self):', 'response', '=', 'self.fetch(\"/without_user_module\")', 'self.assertEqual(response.body,', 'b\"False\")', 'def', 'test_get_current_user_from_ui_module_works(self):', 'response', '=', 'self.fetch(\"/with_user_module\")', 'self.assertEqual(response.body,', 'b\"True\")', 'class', 'UnimplementedHTTPMethodsTest(SimpleHandlerTestCase):', 'class', 'Handler(RequestHandler):', 'pass', 'def', 'test_unimplemented_standard_methods(self):', 'for', 'method', 'in', '[\"HEAD\",', '\"GET\",', '\"DELETE\",', '\"OPTIONS\"]:', 'response', '=', 'self.fetch(\"/\",', 'method=method)', 'self.assertEqual(response.code,', '405)', 'for', 'method', 'in', '[\"POST\",', '\"PUT\"]:', 'response', '=', 'self.fetch(\"/\",', 'method=method,', 'body=b\"\")', 'self.assertEqual(response.code,', '405)', 'class', 'UnimplementedNonStandardMethodsTest(SimpleHandlerTestCase):', 'class', 'Handler(RequestHandler):', 'def', 'other(self):', 'self.write(\"other\")', 'def', 'test_unimplemented_patch(self):', 'response', '=', 'self.fetch(\"/\",', 'method=\"PATCH\",', 'body=b\"\")', 'self.assertEqual(response.code,', '405)', 'def', 'test_unimplemented_other(self):', 'response', '=', 'self.fetch(\"/\",', 'method=\"OTHER\",', 'allow_nonstandard_methods=True)', 'self.assertEqual(response.code,', '405)', 'class', 'AllHTTPMethodsTest(SimpleHandlerTestCase):', 'class', 'Handler(RequestHandler):', 'def', 'method(self):', 'assert', 'self.request.method', 'is', 'not', 'None', 'self.write(self.request.method)', 'get', '=', 'delete', '=', 'options', '=', 'post', '=', 'put', '=', 'method', 'def', 'test_standard_methods(self):', 'response', '=', 'self.fetch(\"/\",', 'method=\"HEAD\")', 'self.assertEqual(response.body,', 'b\"\")', 'for', 'method', 'in', '[\"GET\",', '\"DELETE\",', '\"OPTIONS\"]:', 'response', '=', 'self.fetch(\"/\",', 'method=method)', 'self.assertEqual(response.body,', 'utf8(method))', 'for', 'method', 'in', '[\"POST\",', '\"PUT\"]:', 'response', '=', 'self.fetch(\"/\",', 'method=method,', 'body=b\"\")', 'self.assertEqual(response.body,', 'utf8(method))', 'class', 'PatchMethodTest(SimpleHandlerTestCase):', 'class', 'Handler(RequestHandler):', 'SUPPORTED_METHODS', '=', 'RequestHandler.SUPPORTED_METHODS', '+', '(', '\"OTHER\",', ')', 'def', 'patch(self):', 'self.write(\"patch\")', 'def', 'other(self):', 'self.write(\"other\")', 'def', 'test_patch(self):', 'response', '=', 'self.fetch(\"/\",', 'method=\"PATCH\",', 'body=b\"\")', 'self.assertEqual(response.body,', 'b\"patch\")', 'def', 'test_other(self):', 'response', '=', 'self.fetch(\"/\",', 'method=\"OTHER\",', 'allow_nonstandard_methods=True)', 'self.assertEqual(response.body,', 'b\"other\")', 'class', 'FinishInPrepareTest(SimpleHandlerTestCase):', 'class', 'Handler(RequestHandler):', 'def', 'prepare(self):', 'self.finish(\"done\")', 'def', 'get(self):', 'raise', 'Exception(\"should', 'not', 'reach', 'this', 'method\")', 'def', 'test_finish_in_prepare(self):', 'response', '=', 'self.fetch(\"/\")', 'self.assertEqual(response.body,', 'b\"done\")', 'class', 'Default404Test(WebTestCase):', 'def', 'get_handlers(self):', 'return', '[(\"/foo\",', 'RequestHandler)]', 'def', 'test_404(self):', 'response', '=', 'self.fetch(\"/\")', 'self.assertEqual(response.code,', '404)', 'self.assertEqual(', 'response.body,', 'b\"<html><title>404:', 'Not', 'Found</title>\"', 'b\"<body>404:', 'Not', 'Found</body></html>\",', ')', 'class', 'Custom404Test(WebTestCase):', 'def', 'get_handlers(self):', 'return', '[(\"/foo\",', 'RequestHandler)]', 'def', 'get_app_kwargs(self):', 'class', 'Custom404Handler(RequestHandler):', 'def', 'get(self):', 'self.set_status(404)', 'self.write(\"custom', '404', 'response\")', 'return', 'dict(default_handler_class=Custom404Handler)', 'def', 'test_404(self):', 'response', '=', 'self.fetch(\"/\")', 'self.assertEqual(response.code,', '404)', 'self.assertEqual(response.body,', 'b\"custom', '404', 'response\")', 'class', 'DefaultHandlerArgumentsTest(WebTestCase):', 'def', 'get_handlers(self):', 'return', '[(\"/foo\",', 'RequestHandler)]', 'def', 'get_app_kwargs(self):', 'return', 'dict(', 'default_handler_class=ErrorHandler,', 'default_handler_args=dict(status_code=403),', ')', 'def', 'test_403(self):', 'response', '=', 'self.fetch(\"/\")', 'self.assertEqual(response.code,', '403)', 'class', 'HandlerByNameTest(WebTestCase):', 'def', 'get_handlers(self):', 'return', '[', '(\"/hello1\",', 'HelloHandler),', '(\"/hello2\",', '\"tornado.test.web_test.HelloHandler\"),', 'url(\"/hello3\",', '\"tornado.test.web_test.HelloHandler\"),', ']', 'def', 'test_handler_by_name(self):', 'resp', '=', 'self.fetch(\"/hello1\")', 'self.assertEqual(resp.body,', 'b\"hello\")', 'resp', '=', 'self.fetch(\"/hello2\")', 'self.assertEqual(resp.body,', 'b\"hello\")', 'resp', '=', 'self.fetch(\"/hello3\")', 'self.assertEqual(resp.body,', 'b\"hello\")', 'class', 'StreamingRequestBodyTest(WebTestCase):', 'def', 'get_handlers(self):', '@stream_request_body', 'class', 'StreamingBodyHandler(RequestHandler):', 'def', 'initialize(self,', 'test):', 'self.test', '=', 'test', 'def', 'prepare(self):', 'self.test.prepared.set_result(None)', 'def', 'data_received(self,', 'data):', 'self.test.data.set_result(data)', 'def', 'get(self):', 'self.test.finished.set_result(None)', 'self.write({})', '@stream_request_body', 'class', 'EarlyReturnHandler(RequestHandler):', 'def', 'prepare(self):', 'raise', 'HTTPError(401)', '@stream_request_body', 'class', 'CloseDetectionHandler(RequestHandler):', 'def', 'initialize(self,', 'test):', 'self.test', '=', 'test', 'def', 'on_connection_close(self):', 'super().on_connection_close()', 'self.test.close_future.set_result(None)', 'return', '[', '(\"/stream_body\",', 'StreamingBodyHandler,', 'dict(test=self)),', '(\"/early_return\",', 'EarlyReturnHandler),', '(\"/close_detection\",', 'CloseDetectionHandler,', 'dict(test=self)),', ']', 'def', 'connect(self,', 'url,', 'connection_close):', 's', '=', 'socket.socket(socket.AF_INET,', 'socket.SOCK_STREAM,', '0)', 's.connect((\"127.0.0.1\",', 'self.get_http_port()))', 'stream', '=', 'IOStream(s)', 'stream.write(b\"GET', '\"', '+', 'url', '+', 'b\"', 'HTTP/1.1\\\\r\\\\n\")', 'if', 'connection_close:', 'stream.write(b\"Connection:', 'close\\\\r\\\\n\")', 'stream.write(b\"Transfer-Encoding:', 'chunked\\\\r\\\\n\\\\r\\\\n\")', 'return', 'stream', '@gen_test', 'def', 'test_streaming_body(self):', 'self.prepared', '=', 'Future()', 'self.data', '=', 'Future()', 'self.finished', '=', 'Future()', 'stream', '=', 'self.connect(b\"/stream_body\",', 'connection_close=True)', 'yield', 'self.prepared', 'stream.write(b\"4\\\\r\\\\nasdf\\\\r\\\\n\")', 'data', '=', 'yield', 'self.data', 'self.assertEqual(data,', 'b\"asdf\")', 'self.data', '=', 'Future()', 'stream.write(b\"4\\\\r\\\\nqwer\\\\r\\\\n\")', 'data', '=', 'yield', 'self.data', 'self.assertEqual(data,', 'b\"qwer\")', 'stream.write(b\"0\\\\r\\\\n\\\\r\\\\n\")', 'yield', 'self.finished', 'data', '=', 'yield', 'stream.read_until_close()', 'self.assertTrue(data.endswith(b\"{}\"))', 'stream.close()', '@gen_test', 'def', 'test_early_return(self):', 'stream', '=', 'self.connect(b\"/early_return\",', 'connection_close=False)', 'data', '=', 'yield', 'stream.read_until_close()', 'self.assertTrue(data.startswith(b\"HTTP/1.1', '401\"))', '@gen_test', 'def', 'test_early_return_with_data(self):', 'stream', '=', 'self.connect(b\"/early_return\",', 'connection_close=False)', 'stream.write(b\"4\\\\r\\\\nasdf\\\\r\\\\n\")', 'data', '=', 'yield', 'stream.read_until_close()', 'self.assertTrue(data.startswith(b\"HTTP/1.1', '401\"))', '@gen_test', 'def', 'test_close_during_upload(self):', 'self.close_future', '=', 'Future()', 'stream', '=', 'self.connect(b\"/close_detection\",', 'connection_close=False)', 'stream.close()', 'yield', 'self.close_future', '@stream_request_body', 'class', 'BaseFlowControlHandler(RequestHandler):', 'def', 'initialize(self,', 'test):', 'self.test', '=', 'test', 'self.method', '=', 'None', 'self.methods', '=', '[]', '@contextlib.contextmanager', 'def', 'in_method(self,', 'method):', 'if', 'self.method', 'is', 'not', 'None:', 'self.test.fail(\"entered', 'method', '%s', 'while', 'in', '%s\"', '%', '(method,', 'self.method))', 'self.method', '=', 'method', 'self.methods.append(method)', 'try:', 'yield', 'finally:', 'self.method', '=', 'None', '@gen.coroutine', 'def', 'prepare(self):', 'self.methods.append(\"prepare\")', 'yield', 'gen.moment', '@gen.coroutine', 'def', 'post(self):', 'with', 'self.in_method(\"post\"):', 'yield', 'gen.moment', 'self.write(dict(methods=self.methods))', 'class', 'BaseStreamingRequestFlowControlTest(object):', 'def', 'get_httpserver_options(self):', 'return', 'dict(chunk_size=10,', 'decompress_request=True)', 'def', 'get_http_client(self):', 'return', 'SimpleAsyncHTTPClient()', 'def', 'test_flow_control_fixed_body(self:', 'typing.Any):', 'response', '=', 'self.fetch(\"/\",', 'body=\"abcdefghijklmnopqrstuvwxyz\",', 'method=\"POST\")', 'response.rethrow()', 'self.assertEqual(', 'json_decode(response.body),', 'dict(', 'methods=[', '\"prepare\",', '\"data_received\",', '\"data_received\",', '\"data_received\",', '\"post\",', ']', '),', ')', 'def', 'test_flow_control_chunked_body(self:', 'typing.Any):', 'chunks', '=', '[b\"abcd\",', 'b\"efgh\",', 'b\"ijkl\"]', '@gen.coroutine', 'def', 'body_producer(write):', 'for', 'i', 'in', 'chunks:', 'yield', 'write(i)', 'response', '=', 'self.fetch(\"/\",', 'body_producer=body_producer,', 'method=\"POST\")', 'response.rethrow()', 'self.assertEqual(', 'json_decode(response.body),', 'dict(', 'methods=[', '\"prepare\",', '\"data_received\",', '\"data_received\",', '\"data_received\",', '\"post\",', ']', '),', ')', 'def', 'test_flow_control_compressed_body(self:', 'typing.Any):', 'bytesio', '=', 'BytesIO()', 'gzip_file', '=', 'gzip.GzipFile(mode=\"w\",', 'fileobj=bytesio)', 'gzip_file.write(b\"abcdefghijklmnopqrstuvwxyz\")', 'gzip_file.close()', 'compressed_body', '=', 'bytesio.getvalue()', 'response', '=', 'self.fetch(', '\"/\",', 'body=compressed_body,', 'method=\"POST\",', 'headers={\"Content-Encoding\":', '\"gzip\"},', ')', 'response.rethrow()', 'self.assertEqual(', 'json_decode(response.body),', 'dict(', 'methods=[', '\"prepare\",', '\"data_received\",', '\"data_received\",', '\"data_received\",', '\"post\",', ']', '),', ')', 'class', 'DecoratedStreamingRequestFlowControlTest(', 'BaseStreamingRequestFlowControlTest,', 'WebTestCase', '):', 'def', 'get_handlers(self):', 'class', 'DecoratedFlowControlHandler(BaseFlowControlHandler):', '@gen.coroutine', 'def', 'data_received(self,', 'data):', 'with', 'self.in_method(\"data_received\"):', 'yield', 'gen.moment', 'return', '[(\"/\",', 'DecoratedFlowControlHandler,', 'dict(test=self))]', 'class', 'NativeStreamingRequestFlowControlTest(', 'BaseStreamingRequestFlowControlTest,', 'WebTestCase', '):', 'def', 'get_handlers(self):', 'class', 'NativeFlowControlHandler(BaseFlowControlHandler):', 'async', 'def', 'data_received(self,', 'data):', 'with', 'self.in_method(\"data_received\"):', 'import', 'asyncio', 'await', 'asyncio.sleep(0)', 'return', '[(\"/\",', 'NativeFlowControlHandler,', 'dict(test=self))]', 'class', 'IncorrectContentLengthTest(SimpleHandlerTestCase):', 'def', 'get_handlers(self):', 'test', '=', 'self', 'self.server_error', '=', 'None', 'class', 'TooHigh(RequestHandler):', 'def', 'get(self):', 'self.set_header(\"Content-Length\",', '\"42\")', 'try:', 'self.finish(\"ok\")', 'except', 'Exception', 'as', 'e:', 'test.server_error', '=', 'e', 'raise', 'class', 'TooLow(RequestHandler):', 'def', 'get(self):', 'self.set_header(\"Content-Length\",', '\"2\")', 'try:', 'self.finish(\"hello\")', 'except', 'Exception', 'as', 'e:', 'test.server_error', '=', 'e', 'raise', 'return', '[(\"/high\",', 'TooHigh),', '(\"/low\",', 'TooLow)]', 'def', 'test_content_length_too_high(self):', 'with', 'ExpectLog(app_log,', '\"(Uncaught', 'exception|Exception', 'in', 'callback)\"):', 'with', 'ExpectLog(', 'gen_log,', '\"(Cannot', 'send', 'error', 'response', 'after', 'headers', 'written\"', '\"|Failed', 'to', 'flush', 'partial', 'response)\",', '):', 'with', 'self.assertRaises(HTTPClientError):', 'self.fetch(\"/high\",', 'raise_error=True)', 'self.assertEqual(', 'str(self.server_error),', '\"Tried', 'to', 'write', '40', 'bytes', 'less', 'than', 'Content-Length\"', ')', 'def', 'test_content_length_too_low(self):', 'with', 'ExpectLog(app_log,', '\"(Uncaught', 'exception|Exception', 'in', 'callback)\"):', 'with', 'ExpectLog(', 'gen_log,', '\"(Cannot', 'send', 'error', 'response', 'after', 'headers', 'written\"', '\"|Failed', 'to', 'flush', 'partial', 'response)\",', '):', 'with', 'self.assertRaises(HTTPClientError):', 'self.fetch(\"/low\",', 'raise_error=True)', 'self.assertEqual(', 'str(self.server_error),', '\"Tried', 'to', 'write', 'more', 'data', 'than', 'Content-Length\"', ')', 'class', 'ClientCloseTest(SimpleHandlerTestCase):', 'class', 'Handler(RequestHandler):', 'def', 'get(self):', 'if', 'self.request.version.startswith(\"HTTP/1\"):', 'self.request.connection.stream.close()', 'self.write(\"hello\")', 'else:', 'self.write(\"requires', 'HTTP/1.x\")', 'def', 'test_client_close(self):', 'with', 'self.assertRaises((HTTPClientError,', 'unittest.SkipTest)):', 'response', '=', 'self.fetch(\"/\",', 'raise_error=True)', 'if', 'response.body', '==', 'b\"requires', 'HTTP/1.x\":', 'self.skipTest(\"requires', 'HTTP/1.x\")', 'self.assertEqual(response.code,', '599)', 'class', 'SignedValueTest(unittest.TestCase):', 'SECRET', '=', '\"It\\'s', 'a', 'secret', 'to', 'everybody\"', 'SECRET_DICT', '=', '{0:', '\"asdfbasdf\",', '1:', '\"12312312\",', '2:', '\"2342342\"}', 'def', 'past(self):', 'return', 'self.present()', '-', '86400', '*', '32', 'def', 'present(self):', 'return', '1300000000', 'def', 'test_known_values(self):', 'signed_v1', '=', 'create_signed_value(', 'SignedValueTest.SECRET,', '\"key\",', '\"value\",', 'version=1,', 'clock=self.present', ')', 'self.assertEqual(', 'signed_v1,', 'b\"dmFsdWU=|1300000000|31c934969f53e48164c50768b40cbd7e2daaaa4f\"', ')', 'signed_v2', '=', 'create_signed_value(', 'SignedValueTest.SECRET,', '\"key\",', '\"value\",', 'version=2,', 'clock=self.present', ')', 'self.assertEqual(', 'signed_v2,', 'b\"2|1:0|10:1300000000|3:key|8:dmFsdWU=|\"', 'b\"3d4e60b996ff9c5d5788e333a0cba6f238a22c6c0f94788870e1a9ecd482e152\",', ')', 'signed_default', '=', 'create_signed_value(', 'SignedValueTest.SECRET,', '\"key\",', '\"value\",', 'clock=self.present', ')', 'self.assertEqual(signed_default,', 'signed_v2)', 'decoded_v1', '=', 'decode_signed_value(', 'SignedValueTest.SECRET,', '\"key\",', 'signed_v1,', 'min_version=1,', 'clock=self.present', ')', 'self.assertEqual(decoded_v1,', 'b\"value\")', 'decoded_v2', '=', 'decode_signed_value(', 'SignedValueTest.SECRET,', '\"key\",', 'signed_v2,', 'min_version=2,', 'clock=self.present', ')', 'self.assertEqual(decoded_v2,', 'b\"value\")', 'def', 'test_name_swap(self):', 'signed1', '=', 'create_signed_value(', 'SignedValueTest.SECRET,', '\"key1\",', '\"value\",', 'clock=self.present', ')', 'signed2', '=', 'create_signed_value(', 'SignedValueTest.SECRET,', '\"key2\",', '\"value\",', 'clock=self.present', ')', 'decoded1', '=', 'decode_signed_value(', 'SignedValueTest.SECRET,', '\"key2\",', 'signed1,', 'clock=self.present', ')', 'self.assertIs(decoded1,', 'None)', 'decoded2', '=', 'decode_signed_value(', 'SignedValueTest.SECRET,', '\"key1\",', 'signed2,', 'clock=self.present', ')', 'self.assertIs(decoded2,', 'None)', 'def', 'test_expired(self):', 'signed', '=', 'create_signed_value(', 'SignedValueTest.SECRET,', '\"key1\",', '\"value\",', 'clock=self.past', ')', 'decoded_past', '=', 'decode_signed_value(', 'SignedValueTest.SECRET,', '\"key1\",', 'signed,', 'clock=self.past', ')', 'self.assertEqual(decoded_past,', 'b\"value\")', 'decoded_present', '=', 'decode_signed_value(', 'SignedValueTest.SECRET,', '\"key1\",', 'signed,', 'clock=self.present', ')', 'self.assertIs(decoded_present,', 'None)', 'def', 'test_payload_tampering(self):', 'sig', '=', '\"3d4e60b996ff9c5d5788e333a0cba6f238a22c6c0f94788870e1a9ecd482e152\"', 'def', 'validate(prefix):', 'return', 'b\"value\"', '==', 'decode_signed_value(', 'SignedValueTest.SECRET,', '\"key\",', 'prefix', '+', 'sig,', 'clock=self.present', ')', 'self.assertTrue(validate(\"2|1:0|10:1300000000|3:key|8:dmFsdWU=|\"))', 'self.assertFalse(validate(\"2|1:1|10:1300000000|3:key|8:dmFsdWU=|\"))', 'self.assertFalse(validate(\"2|1:0|10:130000000|3:key|8:dmFsdWU=|\"))', 'self.assertFalse(validate(\"2|1:0|10:1300000000|3:keey|8:dmFsdWU=|\"))', 'def', 'test_signature_tampering(self):', 'prefix', '=', '\"2|1:0|10:1300000000|3:key|8:dmFsdWU=|\"', 'def', 'validate(sig):', 'return', 'b\"value\"', '==', 'decode_signed_value(', 'SignedValueTest.SECRET,', '\"key\",', 'prefix', '+', 'sig,', 'clock=self.present', ')', 'self.assertTrue(', 'validate(\"3d4e60b996ff9c5d5788e333a0cba6f238a22c6c0f94788870e1a9ecd482e152\")', ')', 'self.assertFalse(validate(\"0\"', '*', '32))', 'self.assertFalse(', 'validate(\"4d4e60b996ff9c5d5788e333a0cba6f238a22c6c0f94788870e1a9ecd482e152\")', ')', 'self.assertFalse(', 'validate(\"3d4e60b996ff9c5d5788e333a0cba6f238a22c6c0f94788870e1a9ecd482e153\")', ')', 'self.assertFalse(', 'validate(\"3d4e60b996ff9c5d5788e333a0cba6f238a22c6c0f94788870e1a9ecd482e15\")', ')', 'self.assertFalse(', 'validate(', '\"3d4e60b996ff9c5d5788e333a0cba6f238a22c6c0f94788870e1a9ecd482e1538\"', ')', ')', 'def', 'test_non_ascii(self):', 'value', '=', 'b\"\\\\xe9\"', 'signed', '=', 'create_signed_value(', 'SignedValueTest.SECRET,', '\"key\",', 'value,', 'clock=self.present', ')', 'decoded', '=', 'decode_signed_value(', 'SignedValueTest.SECRET,', '\"key\",', 'signed,', 'clock=self.present', ')', 'self.assertEqual(value,', 'decoded)', 'def', 'test_key_versioning_read_write_default_key(self):', 'value', '=', 'b\"\\\\xe9\"', 'signed', '=', 'create_signed_value(', 'SignedValueTest.SECRET_DICT,', '\"key\",', 'value,', 'clock=self.present,', 'key_version=0', ')', 'decoded', '=', 'decode_signed_value(', 'SignedValueTest.SECRET_DICT,', '\"key\",', 'signed,', 'clock=self.present', ')', 'self.assertEqual(value,', 'decoded)', 'def', 'test_key_versioning_read_write_non_default_key(self):', 'value', '=', 'b\"\\\\xe9\"', 'signed', '=', 'create_signed_value(', 'SignedValueTest.SECRET_DICT,', '\"key\",', 'value,', 'clock=self.present,', 'key_version=1', ')', 'decoded', '=', 'decode_signed_value(', 'SignedValueTest.SECRET_DICT,', '\"key\",', 'signed,', 'clock=self.present', ')', 'self.assertEqual(value,', 'decoded)', 'def', 'test_key_versioning_invalid_key(self):', 'value', '=', 'b\"\\\\xe9\"', 'signed', '=', 'create_signed_value(', 'SignedValueTest.SECRET_DICT,', '\"key\",', 'value,', 'clock=self.present,', 'key_version=0', ')', 'newkeys', '=', 'SignedValueTest.SECRET_DICT.copy()', 'newkeys.pop(0)', 'decoded', '=', 'decode_signed_value(newkeys,', '\"key\",', 'signed,', 'clock=self.present)', 'self.assertEqual(None,', 'decoded)', 'def', 'test_key_version_retrieval(self):', 'value', '=', 'b\"\\\\xe9\"', 'signed', '=', 'create_signed_value(', 'SignedValueTest.SECRET_DICT,', '\"key\",', 'value,', 'clock=self.present,', 'key_version=1', ')', 'key_version', '=', 'get_signature_key_version(signed)', 'self.assertEqual(1,', 'key_version)', 'class', 'XSRFTest(SimpleHandlerTestCase):', 'class', 'Handler(RequestHandler):', 'def', 'get(self):', 'version', '=', 'int(self.get_argument(\"version\",', '\"2\"))', 'self.settings[\"xsrf_cookie_version\"]', '=', 'version', 'self.write(self.xsrf_token)', 'def', 'post(self):', 'self.write(\"ok\")', 'def', 'get_app_kwargs(self):', 'return', 'dict(xsrf_cookies=True)', 'def', 'setUp(self):', 'super().setUp()', 'self.xsrf_token', '=', 'self.get_token()', 'def', 'get_token(self,', 'old_token=None,', 'version=None):', 'if', 'old_token', 'is', 'not', 'None:', 'headers', '=', 'self.cookie_headers(old_token)', 'else:', 'headers', '=', 'None', 'response', '=', 'self.fetch(', '\"/\"', 'if', 'version', 'is', 'None', 'else', '(\"/?version=%d\"', '%', 'version),', 'headers=headers', ')', 'response.rethrow()', 'return', 'native_str(response.body)', 'def', 'cookie_headers(self,', 'token=None):', 'if', 'token', 'is', 'None:', 'token', '=', 'self.xsrf_token', 'return', '{\"Cookie\":', '\"_xsrf=\"', '+', 'token}', 'def', 'test_xsrf_fail_no_token(self):', 'with', 'ExpectLog(gen_log,', '\".*\\'_xsrf\\'', 'argument', 'missing\"):', 'response', '=', 'self.fetch(\"/\",', 'method=\"POST\",', 'body=b\"\")', 'self.assertEqual(response.code,', '403)', 'def', 'test_xsrf_fail_body_no_cookie(self):', 'with', 'ExpectLog(gen_log,', '\".*XSRF', 'cookie', 'does', 'not', 'match', 'POST\"):', 'response', '=', 'self.fetch(', '\"/\",', 'method=\"POST\",', 'body=urllib.parse.urlencode(dict(_xsrf=self.xsrf_token)),', ')', 'self.assertEqual(response.code,', '403)', 'def', 'test_xsrf_fail_argument_invalid_format(self):', 'with', 'ExpectLog(gen_log,', '\".*\\'_xsrf\\'', 'argument', 'has', 'invalid', 'format\"):', 'response', '=', 'self.fetch(', '\"/\",', 'method=\"POST\",', 'headers=self.cookie_headers(),', 'body=urllib.parse.urlencode(dict(_xsrf=\"3|\")),', ')', 'self.assertEqual(response.code,', '403)', 'def', 'test_xsrf_fail_cookie_invalid_format(self):', 'with', 'ExpectLog(gen_log,', '\".*XSRF', 'cookie', 'does', 'not', 'match', 'POST\"):', 'response', '=', 'self.fetch(', '\"/\",', 'method=\"POST\",', 'headers=self.cookie_headers(token=\"3|\"),', 'body=urllib.parse.urlencode(dict(_xsrf=self.xsrf_token)),', ')', 'self.assertEqual(response.code,', '403)', 'def', 'test_xsrf_fail_cookie_no_body(self):', 'with', 'ExpectLog(gen_log,', '\".*\\'_xsrf\\'', 'argument', 'missing\"):', 'response', '=', 'self.fetch(', '\"/\",', 'method=\"POST\",', 'body=b\"\",', 'headers=self.cookie_headers()', ')', 'self.assertEqual(response.code,', '403)', 'def', 'test_xsrf_success_short_token(self):', 'response', '=', 'self.fetch(', '\"/\",', 'method=\"POST\",', 'body=urllib.parse.urlencode(dict(_xsrf=\"deadbeef\")),', 'headers=self.cookie_headers(token=\"deadbeef\"),', ')', 'self.assertEqual(response.code,', '200)', 'def', 'test_xsrf_success_non_hex_token(self):', 'response', '=', 'self.fetch(', '\"/\",', 'method=\"POST\",', 'body=urllib.parse.urlencode(dict(_xsrf=\"xoxo\")),', 'headers=self.cookie_headers(token=\"xoxo\"),', ')', 'self.assertEqual(response.code,', '200)', 'def', 'test_xsrf_success_post_body(self):', 'response', '=', 'self.fetch(', '\"/\",', 'method=\"POST\",', 'body=urllib.parse.urlencode(dict(_xsrf=self.xsrf_token)),', 'headers=self.cookie_headers(),', ')', 'self.assertEqual(response.code,', '200)', 'def', 'test_xsrf_success_query_string(self):', 'response', '=', 'self.fetch(', '\"/?\"', '+', 'urllib.parse.urlencode(dict(_xsrf=self.xsrf_token)),', 'method=\"POST\",', 'body=b\"\",', 'headers=self.cookie_headers(),', ')', 'self.assertEqual(response.code,', '200)', 'def', 'test_xsrf_success_header(self):', 'response', '=', 'self.fetch(', '\"/\",', 'method=\"POST\",', 'body=b\"\",', 'headers=dict(', '{\"X-Xsrftoken\":', 'self.xsrf_token},', '**self.cookie_headers(),', '),', ')', 'self.assertEqual(response.code,', '200)', 'def', 'test_distinct_tokens(self):', 'NUM_TOKENS', '=', '10', 'tokens', '=', 'set()', 'for', 'i', 'in', 'range(NUM_TOKENS):', 'tokens.add(self.get_token())', 'self.assertEqual(len(tokens),', 'NUM_TOKENS)', 'def', 'test_cross_user(self):', 'token2', '=', 'self.get_token()', 'for', 'token', 'in', '(self.xsrf_token,', 'token2):', 'response', '=', 'self.fetch(', '\"/\",', 'method=\"POST\",', 'body=urllib.parse.urlencode(dict(_xsrf=token)),', 'headers=self.cookie_headers(token),', ')', 'self.assertEqual(response.code,', '200)', 'for', 'cookie_token,', 'body_token', 'in', '(', '(self.xsrf_token,', 'token2),', '(token2,', 'self.xsrf_token),', '):', 'with', 'ExpectLog(gen_log,', '\".*XSRF', 'cookie', 'does', 'not', 'match', 'POST\"):', 'response', '=', 'self.fetch(', '\"/\",', 'method=\"POST\",', 'body=urllib.parse.urlencode(dict(_xsrf=body_token)),', 'headers=self.cookie_headers(cookie_token),', ')', 'self.assertEqual(response.code,', '403)', 'def', 'test_refresh_token(self):', 'token', '=', 'self.xsrf_token', 'tokens_seen', '=', 'set([token])', 'for', 'i', 'in', 'range(5):', 'token', '=', 'self.get_token(token)', 'tokens_seen.add(token)', 'response', '=', 'self.fetch(', '\"/\",', 'method=\"POST\",', 'body=urllib.parse.urlencode(dict(_xsrf=self.xsrf_token)),', 'headers=self.cookie_headers(token),', ')', 'self.assertEqual(response.code,', '200)', 'self.assertEqual(len(tokens_seen),', '6)', 'def', 'test_versioning(self):', 'self.assertNotEqual(self.get_token(version=1),', 'self.get_token(version=1))', 'v1_token', '=', 'self.get_token(version=1)', 'for', 'i', 'in', 'range(5):', 'self.assertEqual(self.get_token(v1_token,', 'version=1),', 'v1_token)', 'v2_token', '=', 'self.get_token(v1_token)', 'self.assertNotEqual(v1_token,', 'v2_token)', 'self.assertNotEqual(v2_token,', 'self.get_token(v1_token))', 'for', 'cookie_token,', 'body_token', 'in', '((v1_token,', 'v2_token),', '(v2_token,', 'v1_token)):', 'response', '=', 'self.fetch(', '\"/\",', 'method=\"POST\",', 'body=urllib.parse.urlencode(dict(_xsrf=body_token)),', 'headers=self.cookie_headers(cookie_token),', ')', 'self.assertEqual(response.code,', '200)', 'class', 'XSRFCookieNameTest(SimpleHandlerTestCase):', 'class', 'Handler(RequestHandler):', 'def', 'get(self):', 'self.write(self.xsrf_token)', 'def', 'post(self):', 'self.write(\"ok\")', 'def', 'get_app_kwargs(self):', 'return', 'dict(', 'xsrf_cookies=True,', 'xsrf_cookie_name=\"__Host-xsrf\",', 'xsrf_cookie_kwargs={\"secure\":', 'True},', ')', 'def', 'setUp(self):', 'super().setUp()', 'self.xsrf_token', '=', 'self.get_token()', 'def', 'get_token(self,', 'old_token=None):', 'if', 'old_token', 'is', 'not', 'None:', 'headers', '=', 'self.cookie_headers(old_token)', 'else:', 'headers', '=', 'None', 'response', '=', 'self.fetch(\"/\",', 'headers=headers)', 'response.rethrow()', 'return', 'native_str(response.body)', 'def', 'cookie_headers(self,', 'token=None):', 'if', 'token', 'is', 'None:', 'token', '=', 'self.xsrf_token', 'return', '{\"Cookie\":', '\"__Host-xsrf=\"', '+', 'token}', 'def', 'test_xsrf_fail_no_token(self):', 'with', 'ExpectLog(gen_log,', '\".*\\'_xsrf\\'', 'argument', 'missing\"):', 'response', '=', 'self.fetch(\"/\",', 'method=\"POST\",', 'body=b\"\")', 'self.assertEqual(response.code,', '403)', 'def', 'test_xsrf_fail_body_no_cookie(self):', 'with', 'ExpectLog(gen_log,', '\".*XSRF', 'cookie', 'does', 'not', 'match', 'POST\"):', 'response', '=', 'self.fetch(', '\"/\",', 'method=\"POST\",', 'body=urllib.parse.urlencode(dict(_xsrf=self.xsrf_token)),', ')', 'self.assertEqual(response.code,', '403)', 'def', 'test_xsrf_success_post_body(self):', 'response', '=', 'self.fetch(', '\"/\",', 'method=\"POST\",', 'body=urllib.parse.urlencode(dict(_xsrf=self.xsrf_token)),', 'headers=self.cookie_headers(),', ')', 'self.assertEqual(response.code,', '200)', 'class', 'XSRFCookieKwargsTest(SimpleHandlerTestCase):', 'class', 'Handler(RequestHandler):', 'def', 'get(self):', 'self.write(self.xsrf_token)', 'def', 'get_app_kwargs(self):', 'return', 'dict(', 'xsrf_cookies=True,', 'xsrf_cookie_kwargs=dict(httponly=True,', 'expires_days=2)', ')', 'def', 'test_xsrf_httponly(self):', 'response', '=', 'self.fetch(\"/\")', 'self.assertIn(\"httponly;\",', 'response.headers[\"Set-Cookie\"].lower())', 'self.assertIn(\"expires=\",', 'response.headers[\"Set-Cookie\"].lower())', 'header', '=', 'response.headers.get(\"Set-Cookie\")', 'assert', 'header', 'is', 'not', 'None', 'match', '=', 're.match(\".*;', 'expires=(?P<expires>.+);.*\",', 'header)', 'assert', 'match', 'is', 'not', 'None', 'expires', '=', 'datetime.datetime.now(datetime.timezone.utc)', '+', 'datetime.timedelta(', 'days=2', ')', 'header_expires', '=', 'email.utils.parsedate_to_datetime(match.groupdict()[\"expires\"])', 'if', 'header_expires.tzinfo', 'is', 'None:', 'header_expires', '=', 'header_expires.replace(tzinfo=datetime.timezone.utc)', 'self.assertTrue(abs((expires', '-', 'header_expires).total_seconds())', '<', '10)', 'class', 'FinishExceptionTest(SimpleHandlerTestCase):', 'class', 'Handler(RequestHandler):', 'def', 'get(self):', 'self.set_status(401)', 'self.set_header(\"WWW-Authenticate\",', \"'Basic\", 'realm=\"something\"\\')', 'if', 'self.get_argument(\"finish_value\",', '\"\"):', 'raise', 'Finish(\"authentication', 'required\")', 'else:', 'self.write(\"authentication', 'required\")', 'raise', 'Finish()', 'def', 'test_finish_exception(self):', 'for', 'u', 'in', '[\"/\",', '\"/?finish_value=1\"]:', 'response', '=', 'self.fetch(u)', 'self.assertEqual(response.code,', '401)', 'self.assertEqual(', \"'Basic\", 'realm=\"something\"\\',', 'response.headers.get(\"WWW-Authenticate\")', ')', 'self.assertEqual(b\"authentication', 'required\",', 'response.body)', 'class', 'DecoratorTest(WebTestCase):', 'def', 'get_handlers(self):', 'class', 'RemoveSlashHandler(RequestHandler):', '@removeslash', 'def', 'get(self):', 'pass', 'class', 'AddSlashHandler(RequestHandler):', '@addslash', 'def', 'get(self):', 'pass', 'return', '[(\"/removeslash/\",', 'RemoveSlashHandler),', '(\"/addslash\",', 'AddSlashHandler)]', 'def', 'test_removeslash(self):', 'response', '=', 'self.fetch(\"/removeslash/\",', 'follow_redirects=False)', 'self.assertEqual(response.code,', '301)', 'self.assertEqual(response.headers[\"Location\"],', '\"/removeslash\")', 'response', '=', 'self.fetch(\"/removeslash/?foo=bar\",', 'follow_redirects=False)', 'self.assertEqual(response.code,', '301)', 'self.assertEqual(response.headers[\"Location\"],', '\"/removeslash?foo=bar\")', 'def', 'test_addslash(self):', 'response', '=', 'self.fetch(\"/addslash\",', 'follow_redirects=False)', 'self.assertEqual(response.code,', '301)', 'self.assertEqual(response.headers[\"Location\"],', '\"/addslash/\")', 'response', '=', 'self.fetch(\"/addslash?foo=bar\",', 'follow_redirects=False)', 'self.assertEqual(response.code,', '301)', 'self.assertEqual(response.headers[\"Location\"],', '\"/addslash/?foo=bar\")', 'class', 'CacheTest(WebTestCase):', 'def', 'get_handlers(self):', 'class', 'EtagHandler(RequestHandler):', 'def', 'get(self,', 'computed_etag):', 'self.write(computed_etag)', 'def', 'compute_etag(self):', 'return', 'self._write_buffer[0]', 'return', '[(\"/etag/(.*)\",', 'EtagHandler)]', 'def', 'test_wildcard_etag(self):', 'computed_etag', '=', '\\'\"xyzzy\"\\'', 'etags', '=', '\"*\"', 'self._test_etag(computed_etag,', 'etags,', '304)', 'def', 'test_strong_etag_match(self):', 'computed_etag', '=', '\\'\"xyzzy\"\\'', 'etags', '=', '\\'\"xyzzy\"\\'', 'self._test_etag(computed_etag,', 'etags,', '304)', 'def', 'test_multiple_strong_etag_match(self):', 'computed_etag', '=', '\\'\"xyzzy1\"\\'', 'etags', '=', '\\'\"xyzzy1\",', '\"xyzzy2\"\\'', 'self._test_etag(computed_etag,', 'etags,', '304)', 'def', 'test_strong_etag_not_match(self):', 'computed_etag', '=', '\\'\"xyzzy\"\\'', 'etags', '=', '\\'\"xyzzy1\"\\'', 'self._test_etag(computed_etag,', 'etags,', '200)', 'def', 'test_multiple_strong_etag_not_match(self):', 'computed_etag', '=', '\\'\"xyzzy\"\\'', 'etags', '=', '\\'\"xyzzy1\",', '\"xyzzy2\"\\'', 'self._test_etag(computed_etag,', 'etags,', '200)', 'def', 'test_weak_etag_match(self):', 'computed_etag', '=', '\\'\"xyzzy1\"\\'', 'etags', '=', '\\'W/\"xyzzy1\"\\'', 'self._test_etag(computed_etag,', 'etags,', '304)', 'def', 'test_multiple_weak_etag_match(self):', 'computed_etag', '=', '\\'\"xyzzy2\"\\'', 'etags', '=', '\\'W/\"xyzzy1\",', 'W/\"xyzzy2\"\\'', 'self._test_etag(computed_etag,', 'etags,', '304)', 'def', 'test_weak_etag_not_match(self):', 'computed_etag', '=', '\\'\"xyzzy2\"\\'', 'etags', '=', '\\'W/\"xyzzy1\"\\'', 'self._test_etag(computed_etag,', 'etags,', '200)', 'def', 'test_multiple_weak_etag_not_match(self):', 'computed_etag', '=', '\\'\"xyzzy3\"\\'', 'etags', '=', '\\'W/\"xyzzy1\",', 'W/\"xyzzy2\"\\'', 'self._test_etag(computed_etag,', 'etags,', '200)', 'def', '_test_etag(self,', 'computed_etag,', 'etags,', 'status_code):', 'response', '=', 'self.fetch(', '\"/etag/\"', '+', 'computed_etag,', 'headers={\"If-None-Match\":', 'etags}', ')', 'self.assertEqual(response.code,', 'status_code)', 'class', 'RequestSummaryTest(SimpleHandlerTestCase):', 'class', 'Handler(RequestHandler):', 'def', 'get(self):', 'self.request.remote_ip', '=', 'None', 'self.finish(self._request_summary())', 'def', 'test_missing_remote_ip(self):', 'resp', '=', 'self.fetch(\"/\")', 'self.assertEqual(resp.body,', 'b\"GET', '/', '(None)\")', 'class', 'HTTPErrorTest(unittest.TestCase):', 'def', 'test_copy(self):', 'e', '=', 'HTTPError(403,', 'reason=\"Go', 'away\")', 'e2', '=', 'copy.copy(e)', 'self.assertIsNot(e,', 'e2)', 'self.assertEqual(e.status_code,', 'e2.status_code)', 'self.assertEqual(e.reason,', 'e2.reason)', 'class', 'ApplicationTest(AsyncTestCase):', 'def', 'test_listen(self):', 'app', '=', 'Application([])', 'server', '=', 'app.listen(0,', 'address=\"127.0.0.1\")', 'server.stop()', 'class', 'URLSpecReverseTest(unittest.TestCase):', 'def', 'test_reverse(self):', 'self.assertEqual(\"/favicon.ico\",', 'url(r\"/favicon\\\\.ico\",', 'None).reverse())', 'self.assertEqual(\"/favicon.ico\",', 'url(r\"^/favicon\\\\.ico$\",', 'None).reverse())', 'def', 'test_non_reversible(self):', 'paths', '=', '[r\"^/api/v\\\\d+/foo/(\\\\w+)$\"]', 'for', 'path', 'in', 'paths:', 'url_spec', '=', 'url(path,', 'None)', 'try:', 'result', '=', 'url_spec.reverse()', 'self.fail(', '\"did', 'not', 'get', 'expected', 'exception', 'when', 'reversing', '%s.', '\"', '\"result:', '%s\"', '%', '(path,', 'result)', ')', 'except', 'ValueError:', 'pass', 'def', 'test_reverse_arguments(self):', 'self.assertEqual(', '\"/api/v1/foo/bar\",', 'url(r\"^/api/v1/foo/(\\\\w+)$\",', 'None).reverse(\"bar\")', ')', 'self.assertEqual(', '\"/api.v1/foo/5/icon.png\",', 'url(r\"/api\\\\.v1/foo/([0-9]+)/icon\\\\.png\",', 'None).reverse(5),', ')', 'class', 'RedirectHandlerTest(WebTestCase):', 'def', 'get_handlers(self):', 'return', '[', '(\"/src\",', 'WebRedirectHandler,', '{\"url\":', '\"/dst\"}),', '(\"/src2\",', 'WebRedirectHandler,', '{\"url\":', '\"/dst2?foo=bar\"}),', '(r\"/(.*?)/(.*?)/(.*)\",', 'WebRedirectHandler,', '{\"url\":', '\"/{1}/{0}/{2}\"}),', ']', 'def', 'test_basic_redirect(self):', 'response', '=', 'self.fetch(\"/src\",', 'follow_redirects=False)', 'self.assertEqual(response.code,', '301)', 'self.assertEqual(response.headers[\"Location\"],', '\"/dst\")', 'def', 'test_redirect_with_argument(self):', 'response', '=', 'self.fetch(\"/src?foo=bar\",', 'follow_redirects=False)', 'self.assertEqual(response.code,', '301)', 'self.assertEqual(response.headers[\"Location\"],', '\"/dst?foo=bar\")', 'def', 'test_redirect_with_appending_argument(self):', 'response', '=', 'self.fetch(\"/src2?foo2=bar2\",', 'follow_redirects=False)', 'self.assertEqual(response.code,', '301)', 'self.assertEqual(response.headers[\"Location\"],', '\"/dst2?foo=bar&foo2=bar2\")', 'def', 'test_redirect_pattern(self):', 'response', '=', 'self.fetch(\"/a/b/c\",', 'follow_redirects=False)', 'self.assertEqual(response.code,', '301)', 'self.assertEqual(response.headers[\"Location\"],', '\"/b/a/c\")', 'class', 'AcceptLanguageTest(WebTestCase):', 'def', 'get_handlers(self):', 'locale.load_gettext_translations(', 'os.path.join(os.path.dirname(__file__),', '\"gettext_translations\"),', '\"tornado_test\",', ')', 'class', 'AcceptLanguageHandler(RequestHandler):', 'def', 'get(self):', 'self.set_header(', '\"Content-Language\",', 'self.get_browser_locale().code.replace(\"_\",', '\"-\")', ')', 'self.finish(b\"\")', 'return', '[', '(\"/\",', 'AcceptLanguageHandler),', ']', 'def', 'test_accept_language(self):', 'response', '=', 'self.fetch(\"/\",', 'headers={\"Accept-Language\":', '\"fr-FR;q=0.9\"})', 'self.assertEqual(response.headers[\"Content-Language\"],', '\"fr-FR\")', 'response', '=', 'self.fetch(\"/\",', 'headers={\"Accept-Language\":', '\"fr-FR;', 'q=0.9\"})', 'self.assertEqual(response.headers[\"Content-Language\"],', '\"fr-FR\")', 'def', 'test_accept_language_ignore(self):', 'response', '=', 'self.fetch(\"/\",', 'headers={\"Accept-Language\":', '\"fr-FR;q=0\"})', 'self.assertEqual(response.headers[\"Content-Language\"],', '\"en-US\")', 'def', 'test_accept_language_invalid(self):', 'response', '=', 'self.fetch(\"/\",', 'headers={\"Accept-Language\":', '\"fr-FR;q=-1\"})', 'self.assertEqual(response.headers[\"Content-Language\"],', '\"en-US\")']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/websocket_test.py",
        "vector": "['import', 'asyncio', 'import', 'contextlib', 'import', 'functools', 'import', 'socket', 'import', 'traceback', 'import', 'typing', 'import', 'unittest', 'from', 'tornado.concurrent', 'import', 'Future', 'from', 'tornado', 'import', 'gen', 'from', 'tornado.httpclient', 'import', 'HTTPError,', 'HTTPRequest', 'from', 'tornado.locks', 'import', 'Event', 'from', 'tornado.log', 'import', 'gen_log,', 'app_log', 'from', 'tornado.netutil', 'import', 'Resolver', 'from', 'tornado.simple_httpclient', 'import', 'SimpleAsyncHTTPClient', 'from', 'tornado.template', 'import', 'DictLoader', 'from', 'tornado.testing', 'import', 'AsyncHTTPTestCase,', 'gen_test,', 'bind_unused_port,', 'ExpectLog', 'from', 'tornado.web', 'import', 'Application,', 'RequestHandler', 'try:', 'import', 'tornado.websocket', 'from', 'tornado.util', 'import', '_websocket_mask_python', 'except', 'ImportError:', 'traceback.print_exc()', 'raise', 'from', 'tornado.websocket', 'import', '(', 'WebSocketHandler,', 'websocket_connect,', 'WebSocketError,', 'WebSocketClosedError,', ')', 'try:', 'from', 'tornado', 'import', 'speedups', 'except', 'ImportError:', 'speedups', '=', 'None', 'class', 'TestWebSocketHandler(WebSocketHandler):', 'def', 'initialize(self,', 'close_future=None,', 'compression_options=None):', 'self.close_future', '=', 'close_future', 'self.compression_options', '=', 'compression_options', 'def', 'get_compression_options(self):', 'return', 'self.compression_options', 'def', 'on_close(self):', 'if', 'self.close_future', 'is', 'not', 'None:', 'self.close_future.set_result((self.close_code,', 'self.close_reason))', 'class', 'EchoHandler(TestWebSocketHandler):', '@gen.coroutine', 'def', 'on_message(self,', 'message):', 'try:', 'yield', 'self.write_message(message,', 'isinstance(message,', 'bytes))', 'except', 'asyncio.CancelledError:', 'pass', 'except', 'WebSocketClosedError:', 'pass', 'class', 'ErrorInOnMessageHandler(TestWebSocketHandler):', 'def', 'on_message(self,', 'message):', '1', '/', '0', 'class', 'HeaderHandler(TestWebSocketHandler):', 'def', 'open(self):', 'methods_to_test', '=', '[', 'functools.partial(self.write,', '\"This', 'should', 'not', 'work\"),', 'functools.partial(self.redirect,', '\"http://localhost/elsewhere\"),', 'functools.partial(self.set_header,', '\"X-Test\",', '\"\"),', 'functools.partial(self.set_cookie,', '\"Chocolate\",', '\"Chip\"),', 'functools.partial(self.set_status,', '503),', 'self.flush,', 'self.finish,', ']', 'for', 'method', 'in', 'methods_to_test:', 'try:', 'method()', 'raise', 'Exception(\"did', 'not', 'get', 'expected', 'exception\")', 'except', 'RuntimeError:', 'pass', 'self.write_message(self.request.headers.get(\"X-Test\",', '\"\"))', 'class', 'HeaderEchoHandler(TestWebSocketHandler):', 'def', 'set_default_headers(self):', 'self.set_header(\"X-Extra-Response-Header\",', '\"Extra-Response-Value\")', 'def', 'prepare(self):', 'for', 'k,', 'v', 'in', 'self.request.headers.get_all():', 'if', 'k.lower().startswith(\"x-test\"):', 'self.set_header(k,', 'v)', 'class', 'NonWebSocketHandler(RequestHandler):', 'def', 'get(self):', 'self.write(\"ok\")', 'class', 'RedirectHandler(RequestHandler):', 'def', 'get(self):', 'self.redirect(\"/echo\")', 'class', 'CloseReasonHandler(TestWebSocketHandler):', 'def', 'open(self):', 'self.on_close_called', '=', 'False', 'self.close(1001,', '\"goodbye\")', 'class', 'AsyncPrepareHandler(TestWebSocketHandler):', '@gen.coroutine', 'def', 'prepare(self):', 'yield', 'gen.moment', 'def', 'on_message(self,', 'message):', 'self.write_message(message)', 'class', 'PathArgsHandler(TestWebSocketHandler):', 'def', 'open(self,', 'arg):', 'self.write_message(arg)', 'class', 'CoroutineOnMessageHandler(TestWebSocketHandler):', 'def', 'initialize(self,', '**kwargs):', 'super().initialize(**kwargs)', 'self.sleeping', '=', '0', '@gen.coroutine', 'def', 'on_message(self,', 'message):', 'if', 'self.sleeping', '>', '0:', 'self.write_message(\"another', 'coroutine', 'is', 'already', 'sleeping\")', 'self.sleeping', '+=', '1', 'yield', 'gen.sleep(0.01)', 'self.sleeping', '-=', '1', 'self.write_message(message)', 'class', 'RenderMessageHandler(TestWebSocketHandler):', 'def', 'on_message(self,', 'message):', 'self.write_message(self.render_string(\"message.html\",', 'message=message))', 'class', 'SubprotocolHandler(TestWebSocketHandler):', 'def', 'initialize(self,', '**kwargs):', 'super().initialize(**kwargs)', 'self.select_subprotocol_called', '=', 'False', 'def', 'select_subprotocol(self,', 'subprotocols):', 'if', 'self.select_subprotocol_called:', 'raise', 'Exception(\"select_subprotocol', 'called', 'twice\")', 'self.select_subprotocol_called', '=', 'True', 'if', '\"goodproto\"', 'in', 'subprotocols:', 'return', '\"goodproto\"', 'return', 'None', 'def', 'open(self):', 'if', 'not', 'self.select_subprotocol_called:', 'raise', 'Exception(\"select_subprotocol', 'not', 'called\")', 'self.write_message(\"subprotocol=%s\"', '%', 'self.selected_subprotocol)', 'class', 'OpenCoroutineHandler(TestWebSocketHandler):', 'def', 'initialize(self,', 'test,', '**kwargs):', 'super().initialize(**kwargs)', 'self.test', '=', 'test', 'self.open_finished', '=', 'False', '@gen.coroutine', 'def', 'open(self):', 'yield', 'self.test.message_sent.wait()', 'yield', 'gen.sleep(0.010)', 'self.open_finished', '=', 'True', 'def', 'on_message(self,', 'message):', 'if', 'not', 'self.open_finished:', 'raise', 'Exception(\"on_message', 'called', 'before', 'open', 'finished\")', 'self.write_message(\"ok\")', 'class', 'ErrorInOpenHandler(TestWebSocketHandler):', 'def', 'open(self):', 'raise', 'Exception(\"boom\")', 'class', 'ErrorInAsyncOpenHandler(TestWebSocketHandler):', 'async', 'def', 'open(self):', 'await', 'asyncio.sleep(0)', 'raise', 'Exception(\"boom\")', 'class', 'NoDelayHandler(TestWebSocketHandler):', 'def', 'open(self):', 'self.set_nodelay(True)', 'self.write_message(\"hello\")', 'class', 'WebSocketBaseTestCase(AsyncHTTPTestCase):', 'def', 'setUp(self):', 'super().setUp()', 'self.conns_to_close', '=', '[]', 'def', 'tearDown(self):', 'for', 'conn', 'in', 'self.conns_to_close:', 'conn.close()', 'super().tearDown()', '@gen.coroutine', 'def', 'ws_connect(self,', 'path,', '**kwargs):', 'ws', '=', 'yield', 'websocket_connect(', '\"ws://127.0.0.1:%d%s\"', '%', '(self.get_http_port(),', 'path),', '**kwargs', ')', 'self.conns_to_close.append(ws)', 'raise', 'gen.Return(ws)', 'class', 'WebSocketTest(WebSocketBaseTestCase):', 'def', 'get_app(self):', 'self.close_future', '=', 'Future()', 'return', 'Application(', '[', '(\"/echo\",', 'EchoHandler,', 'dict(close_future=self.close_future)),', '(\"/non_ws\",', 'NonWebSocketHandler),', '(\"/redirect\",', 'RedirectHandler),', '(\"/header\",', 'HeaderHandler,', 'dict(close_future=self.close_future)),', '(', '\"/header_echo\",', 'HeaderEchoHandler,', 'dict(close_future=self.close_future),', '),', '(', '\"/close_reason\",', 'CloseReasonHandler,', 'dict(close_future=self.close_future),', '),', '(', '\"/error_in_on_message\",', 'ErrorInOnMessageHandler,', 'dict(close_future=self.close_future),', '),', '(', '\"/async_prepare\",', 'AsyncPrepareHandler,', 'dict(close_future=self.close_future),', '),', '(', '\"/path_args/(.*)\",', 'PathArgsHandler,', 'dict(close_future=self.close_future),', '),', '(', '\"/coroutine\",', 'CoroutineOnMessageHandler,', 'dict(close_future=self.close_future),', '),', '(\"/render\",', 'RenderMessageHandler,', 'dict(close_future=self.close_future)),', '(', '\"/subprotocol\",', 'SubprotocolHandler,', 'dict(close_future=self.close_future),', '),', '(', '\"/open_coroutine\",', 'OpenCoroutineHandler,', 'dict(close_future=self.close_future,', 'test=self),', '),', '(\"/error_in_open\",', 'ErrorInOpenHandler),', '(\"/error_in_async_open\",', 'ErrorInAsyncOpenHandler),', '(\"/nodelay\",', 'NoDelayHandler),', '],', 'template_loader=DictLoader({\"message.html\":', '\"<b>{{', 'message', '}}</b>\"}),', ')', 'def', 'get_http_client(self):', 'return', 'SimpleAsyncHTTPClient()', 'def', 'tearDown(self):', 'super().tearDown()', 'RequestHandler._template_loaders.clear()', 'def', 'test_http_request(self):', 'response', '=', 'self.fetch(\"/echo\")', 'self.assertEqual(response.code,', '400)', 'def', 'test_missing_websocket_key(self):', 'response', '=', 'self.fetch(', '\"/echo\",', 'headers={', '\"Connection\":', '\"Upgrade\",', '\"Upgrade\":', '\"WebSocket\",', '\"Sec-WebSocket-Version\":', '\"13\",', '},', ')', 'self.assertEqual(response.code,', '400)', 'def', 'test_bad_websocket_version(self):', 'response', '=', 'self.fetch(', '\"/echo\",', 'headers={', '\"Connection\":', '\"Upgrade\",', '\"Upgrade\":', '\"WebSocket\",', '\"Sec-WebSocket-Version\":', '\"12\",', '},', ')', 'self.assertEqual(response.code,', '426)', '@gen_test', 'def', 'test_websocket_gen(self):', 'ws', '=', 'yield', 'self.ws_connect(\"/echo\")', 'yield', 'ws.write_message(\"hello\")', 'response', '=', 'yield', 'ws.read_message()', 'self.assertEqual(response,', '\"hello\")', 'def', 'test_websocket_callbacks(self):', 'websocket_connect(', '\"ws://127.0.0.1:%d/echo\"', '%', 'self.get_http_port(),', 'callback=self.stop', ')', 'ws', '=', 'self.wait().result()', 'ws.write_message(\"hello\")', 'ws.read_message(self.stop)', 'response', '=', 'self.wait().result()', 'self.assertEqual(response,', '\"hello\")', 'self.close_future.add_done_callback(lambda', 'f:', 'self.stop())', 'ws.close()', 'self.wait()', '@gen_test', 'def', 'test_binary_message(self):', 'ws', '=', 'yield', 'self.ws_connect(\"/echo\")', 'ws.write_message(b\"hello', '\\\\xe9\",', 'binary=True)', 'response', '=', 'yield', 'ws.read_message()', 'self.assertEqual(response,', 'b\"hello', '\\\\xe9\")', '@gen_test', 'def', 'test_unicode_message(self):', 'ws', '=', 'yield', 'self.ws_connect(\"/echo\")', 'ws.write_message(\"hello', '\\\\u00e9\")', 'response', '=', 'yield', 'ws.read_message()', 'self.assertEqual(response,', '\"hello', '\\\\u00e9\")', '@gen_test', 'def', 'test_error_in_closed_client_write_message(self):', 'ws', '=', 'yield', 'self.ws_connect(\"/echo\")', 'ws.close()', 'with', 'self.assertRaises(WebSocketClosedError):', 'ws.write_message(\"hello', '\\\\u00e9\")', '@gen_test', 'def', 'test_render_message(self):', 'ws', '=', 'yield', 'self.ws_connect(\"/render\")', 'ws.write_message(\"hello\")', 'response', '=', 'yield', 'ws.read_message()', 'self.assertEqual(response,', '\"<b>hello</b>\")', '@gen_test', 'def', 'test_error_in_on_message(self):', 'ws', '=', 'yield', 'self.ws_connect(\"/error_in_on_message\")', 'ws.write_message(\"hello\")', 'with', 'ExpectLog(app_log,', '\"Uncaught', 'exception\"):', 'response', '=', 'yield', 'ws.read_message()', 'self.assertIs(response,', 'None)', '@gen_test', 'def', 'test_websocket_http_fail(self):', 'with', 'self.assertRaises(HTTPError)', 'as', 'cm:', 'yield', 'self.ws_connect(\"/notfound\")', 'self.assertEqual(cm.exception.code,', '404)', '@gen_test', 'def', 'test_websocket_http_success(self):', 'with', 'self.assertRaises(WebSocketError):', 'yield', 'self.ws_connect(\"/non_ws\")', '@gen_test', 'def', 'test_websocket_http_redirect(self):', 'with', 'self.assertRaises(HTTPError):', 'yield', 'self.ws_connect(\"/redirect\")', '@gen_test', 'def', 'test_websocket_network_fail(self):', 'sock,', 'port', '=', 'bind_unused_port()', 'sock.close()', 'with', 'self.assertRaises(IOError):', 'with', 'ExpectLog(gen_log,', '\".*\",', 'required=False):', 'yield', 'websocket_connect(', '\"ws://127.0.0.1:%d/\"', '%', 'port,', 'connect_timeout=3600', ')', '@gen_test', 'def', 'test_websocket_close_buffered_data(self):', 'with', 'contextlib.closing(', '(yield', 'websocket_connect(\"ws://127.0.0.1:%d/echo\"', '%', 'self.get_http_port()))', ')', 'as', 'ws:', 'ws.write_message(\"hello\")', 'ws.write_message(\"world\")', 'ws.stream.close()', '@gen_test', 'def', 'test_websocket_headers(self):', 'with', 'contextlib.closing(', '(', 'yield', 'websocket_connect(', 'HTTPRequest(', '\"ws://127.0.0.1:%d/header\"', '%', 'self.get_http_port(),', 'headers={\"X-Test\":', '\"hello\"},', ')', ')', ')', ')', 'as', 'ws:', 'response', '=', 'yield', 'ws.read_message()', 'self.assertEqual(response,', '\"hello\")', '@gen_test', 'def', 'test_websocket_header_echo(self):', 'with', 'contextlib.closing(', '(', 'yield', 'websocket_connect(', 'HTTPRequest(', '\"ws://127.0.0.1:%d/header_echo\"', '%', 'self.get_http_port(),', 'headers={\"X-Test-Hello\":', '\"hello\"},', ')', ')', ')', ')', 'as', 'ws:', 'self.assertEqual(ws.headers.get(\"X-Test-Hello\"),', '\"hello\")', 'self.assertEqual(', 'ws.headers.get(\"X-Extra-Response-Header\"),', '\"Extra-Response-Value\"', ')', '@gen_test', 'def', 'test_server_close_reason(self):', 'ws', '=', 'yield', 'self.ws_connect(\"/close_reason\")', 'msg', '=', 'yield', 'ws.read_message()', 'self.assertIs(msg,', 'None)', 'self.assertEqual(ws.close_code,', '1001)', 'self.assertEqual(ws.close_reason,', '\"goodbye\")', 'code,', 'reason', '=', 'yield', 'self.close_future', 'self.assertEqual(code,', '1001)', '@gen_test', 'def', 'test_client_close_reason(self):', 'ws', '=', 'yield', 'self.ws_connect(\"/echo\")', 'ws.close(1001,', '\"goodbye\")', 'code,', 'reason', '=', 'yield', 'self.close_future', 'self.assertEqual(code,', '1001)', 'self.assertEqual(reason,', '\"goodbye\")', '@gen_test', 'def', 'test_write_after_close(self):', 'ws', '=', 'yield', 'self.ws_connect(\"/close_reason\")', 'msg', '=', 'yield', 'ws.read_message()', 'self.assertIs(msg,', 'None)', 'with', 'self.assertRaises(WebSocketClosedError):', 'ws.write_message(\"hello\")', '@gen_test', 'def', 'test_async_prepare(self):', 'ws', '=', 'yield', 'self.ws_connect(\"/async_prepare\")', 'ws.write_message(\"hello\")', 'res', '=', 'yield', 'ws.read_message()', 'self.assertEqual(res,', '\"hello\")', '@gen_test', 'def', 'test_path_args(self):', 'ws', '=', 'yield', 'self.ws_connect(\"/path_args/hello\")', 'res', '=', 'yield', 'ws.read_message()', 'self.assertEqual(res,', '\"hello\")', '@gen_test', 'def', 'test_coroutine(self):', 'ws', '=', 'yield', 'self.ws_connect(\"/coroutine\")', 'yield', 'ws.write_message(\"hello1\")', 'yield', 'ws.write_message(\"hello2\")', 'res', '=', 'yield', 'ws.read_message()', 'self.assertEqual(res,', '\"hello1\")', 'res', '=', 'yield', 'ws.read_message()', 'self.assertEqual(res,', '\"hello2\")', '@gen_test', 'def', 'test_check_origin_valid_no_path(self):', 'port', '=', 'self.get_http_port()', 'url', '=', '\"ws://127.0.0.1:%d/echo\"', '%', 'port', 'headers', '=', '{\"Origin\":', '\"http://127.0.0.1:%d\"', '%', 'port}', 'with', 'contextlib.closing(', '(yield', 'websocket_connect(HTTPRequest(url,', 'headers=headers)))', ')', 'as', 'ws:', 'ws.write_message(\"hello\")', 'response', '=', 'yield', 'ws.read_message()', 'self.assertEqual(response,', '\"hello\")', '@gen_test', 'def', 'test_check_origin_valid_with_path(self):', 'port', '=', 'self.get_http_port()', 'url', '=', '\"ws://127.0.0.1:%d/echo\"', '%', 'port', 'headers', '=', '{\"Origin\":', '\"http://127.0.0.1:%d/something\"', '%', 'port}', 'with', 'contextlib.closing(', '(yield', 'websocket_connect(HTTPRequest(url,', 'headers=headers)))', ')', 'as', 'ws:', 'ws.write_message(\"hello\")', 'response', '=', 'yield', 'ws.read_message()', 'self.assertEqual(response,', '\"hello\")', '@gen_test', 'def', 'test_check_origin_invalid_partial_url(self):', 'port', '=', 'self.get_http_port()', 'url', '=', '\"ws://127.0.0.1:%d/echo\"', '%', 'port', 'headers', '=', '{\"Origin\":', '\"127.0.0.1:%d\"', '%', 'port}', 'with', 'self.assertRaises(HTTPError)', 'as', 'cm:', 'yield', 'websocket_connect(HTTPRequest(url,', 'headers=headers))', 'self.assertEqual(cm.exception.code,', '403)', '@gen_test', 'def', 'test_check_origin_invalid(self):', 'port', '=', 'self.get_http_port()', 'url', '=', '\"ws://127.0.0.1:%d/echo\"', '%', 'port', 'headers', '=', '{\"Origin\":', '\"http://somewhereelse.com\"}', 'with', 'self.assertRaises(HTTPError)', 'as', 'cm:', 'yield', 'websocket_connect(HTTPRequest(url,', 'headers=headers))', 'self.assertEqual(cm.exception.code,', '403)', '@gen_test', 'def', 'test_check_origin_invalid_subdomains(self):', 'port', '=', 'self.get_http_port()', 'addrinfo', '=', 'yield', 'Resolver().resolve(\"localhost\",', 'port)', 'families', '=', 'set(addr[0]', 'for', 'addr', 'in', 'addrinfo)', 'if', 'socket.AF_INET', 'not', 'in', 'families:', 'self.skipTest(\"localhost', 'does', 'not', 'resolve', 'to', 'ipv4\")', 'return', 'url', '=', '\"ws://localhost:%d/echo\"', '%', 'port', 'headers', '=', '{\"Origin\":', '\"http://subtenant.localhost\"}', 'with', 'self.assertRaises(HTTPError)', 'as', 'cm:', 'yield', 'websocket_connect(HTTPRequest(url,', 'headers=headers))', 'self.assertEqual(cm.exception.code,', '403)', '@gen_test', 'def', 'test_subprotocols(self):', 'ws', '=', 'yield', 'self.ws_connect(', '\"/subprotocol\",', 'subprotocols=[\"badproto\",', '\"goodproto\"]', ')', 'self.assertEqual(ws.selected_subprotocol,', '\"goodproto\")', 'res', '=', 'yield', 'ws.read_message()', 'self.assertEqual(res,', '\"subprotocol=goodproto\")', '@gen_test', 'def', 'test_subprotocols_not_offered(self):', 'ws', '=', 'yield', 'self.ws_connect(\"/subprotocol\")', 'self.assertIs(ws.selected_subprotocol,', 'None)', 'res', '=', 'yield', 'ws.read_message()', 'self.assertEqual(res,', '\"subprotocol=None\")', '@gen_test', 'def', 'test_open_coroutine(self):', 'self.message_sent', '=', 'Event()', 'ws', '=', 'yield', 'self.ws_connect(\"/open_coroutine\")', 'yield', 'ws.write_message(\"hello\")', 'self.message_sent.set()', 'res', '=', 'yield', 'ws.read_message()', 'self.assertEqual(res,', '\"ok\")', '@gen_test', 'def', 'test_error_in_open(self):', 'with', 'ExpectLog(app_log,', '\"Uncaught', 'exception\"):', 'ws', '=', 'yield', 'self.ws_connect(\"/error_in_open\")', 'res', '=', 'yield', 'ws.read_message()', 'self.assertIsNone(res)', '@gen_test', 'def', 'test_error_in_async_open(self):', 'with', 'ExpectLog(app_log,', '\"Uncaught', 'exception\"):', 'ws', '=', 'yield', 'self.ws_connect(\"/error_in_async_open\")', 'res', '=', 'yield', 'ws.read_message()', 'self.assertIsNone(res)', '@gen_test', 'def', 'test_nodelay(self):', 'ws', '=', 'yield', 'self.ws_connect(\"/nodelay\")', 'res', '=', 'yield', 'ws.read_message()', 'self.assertEqual(res,', '\"hello\")', 'class', 'NativeCoroutineOnMessageHandler(TestWebSocketHandler):', 'def', 'initialize(self,', '**kwargs):', 'super().initialize(**kwargs)', 'self.sleeping', '=', '0', 'async', 'def', 'on_message(self,', 'message):', 'if', 'self.sleeping', '>', '0:', 'self.write_message(\"another', 'coroutine', 'is', 'already', 'sleeping\")', 'self.sleeping', '+=', '1', 'await', 'gen.sleep(0.01)', 'self.sleeping', '-=', '1', 'self.write_message(message)', 'class', 'WebSocketNativeCoroutineTest(WebSocketBaseTestCase):', 'def', 'get_app(self):', 'return', 'Application([(\"/native\",', 'NativeCoroutineOnMessageHandler)])', '@gen_test', 'def', 'test_native_coroutine(self):', 'ws', '=', 'yield', 'self.ws_connect(\"/native\")', 'yield', 'ws.write_message(\"hello1\")', 'yield', 'ws.write_message(\"hello2\")', 'res', '=', 'yield', 'ws.read_message()', 'self.assertEqual(res,', '\"hello1\")', 'res', '=', 'yield', 'ws.read_message()', 'self.assertEqual(res,', '\"hello2\")', 'class', 'CompressionTestMixin(object):', 'MESSAGE', '=', '\"Hello', 'world.', 'Testing', '123', '123\"', 'def', 'get_app(self):', 'class', 'LimitedHandler(TestWebSocketHandler):', '@property', 'def', 'max_message_size(self):', 'return', '1024', 'def', 'on_message(self,', 'message):', 'self.write_message(str(len(message)))', 'return', 'Application(', '[', '(', '\"/echo\",', 'EchoHandler,', 'dict(compression_options=self.get_server_compression_options()),', '),', '(', '\"/limited\",', 'LimitedHandler,', 'dict(compression_options=self.get_server_compression_options()),', '),', ']', ')', 'def', 'get_server_compression_options(self):', 'return', 'None', 'def', 'get_client_compression_options(self):', 'return', 'None', 'def', 'verify_wire_bytes(self,', 'bytes_in:', 'int,', 'bytes_out:', 'int)', '->', 'None:', 'raise', 'NotImplementedError()', '@gen_test', 'def', 'test_message_sizes(self:', 'typing.Any):', 'ws', '=', 'yield', 'self.ws_connect(', '\"/echo\",', 'compression_options=self.get_client_compression_options()', ')', 'for', 'i', 'in', 'range(3):', 'ws.write_message(self.MESSAGE)', 'response', '=', 'yield', 'ws.read_message()', 'self.assertEqual(response,', 'self.MESSAGE)', 'self.assertEqual(ws.protocol._message_bytes_out,', 'len(self.MESSAGE)', '*', '3)', 'self.assertEqual(ws.protocol._message_bytes_in,', 'len(self.MESSAGE)', '*', '3)', 'self.verify_wire_bytes(ws.protocol._wire_bytes_in,', 'ws.protocol._wire_bytes_out)', '@gen_test', 'def', 'test_size_limit(self:', 'typing.Any):', 'ws', '=', 'yield', 'self.ws_connect(', '\"/limited\",', 'compression_options=self.get_client_compression_options()', ')', 'ws.write_message(\"a\"', '*', '128)', 'response', '=', 'yield', 'ws.read_message()', 'self.assertEqual(response,', '\"128\")', 'ws.write_message(\"a\"', '*', '2048)', 'response', '=', 'yield', 'ws.read_message()', 'self.assertIsNone(response)', 'class', 'UncompressedTestMixin(CompressionTestMixin):', 'def', 'verify_wire_bytes(self:', 'typing.Any,', 'bytes_in,', 'bytes_out):', 'self.assertEqual(bytes_out,', '3', '*', '(len(self.MESSAGE)', '+', '6))', 'self.assertEqual(bytes_in,', '3', '*', '(len(self.MESSAGE)', '+', '2))', 'class', 'NoCompressionTest(UncompressedTestMixin,', 'WebSocketBaseTestCase):', 'pass', 'class', 'ServerOnlyCompressionTest(UncompressedTestMixin,', 'WebSocketBaseTestCase):', 'def', 'get_server_compression_options(self):', 'return', '{}', 'class', 'ClientOnlyCompressionTest(UncompressedTestMixin,', 'WebSocketBaseTestCase):', 'def', 'get_client_compression_options(self):', 'return', '{}', 'class', 'DefaultCompressionTest(CompressionTestMixin,', 'WebSocketBaseTestCase):', 'def', 'get_server_compression_options(self):', 'return', '{}', 'def', 'get_client_compression_options(self):', 'return', '{}', 'def', 'verify_wire_bytes(self,', 'bytes_in,', 'bytes_out):', 'self.assertLess(bytes_out,', '3', '*', '(len(self.MESSAGE)', '+', '6))', 'self.assertLess(bytes_in,', '3', '*', '(len(self.MESSAGE)', '+', '2))', 'self.assertEqual(bytes_out,', 'bytes_in', '+', '12)', 'class', 'MaskFunctionMixin(object):', 'def', 'mask(self,', 'mask:', 'bytes,', 'data:', 'bytes)', '->', 'bytes:', 'raise', 'NotImplementedError()', 'def', 'test_mask(self:', 'typing.Any):', 'self.assertEqual(self.mask(b\"abcd\",', 'b\"\"),', 'b\"\")', 'self.assertEqual(self.mask(b\"abcd\",', 'b\"b\"),', 'b\"\\\\x03\")', 'self.assertEqual(self.mask(b\"abcd\",', 'b\"54321\"),', 'b\"TVPVP\")', 'self.assertEqual(self.mask(b\"ZXCV\",', 'b\"98765432\"),', 'b\"c`t`olpd\")', 'self.assertEqual(', 'self.mask(b\"\\\\x00\\\\x01\\\\x02\\\\x03\",', 'b\"\\\\xff\\\\xfb\\\\xfd\\\\xfc\\\\xfe\\\\xfa\"),', 'b\"\\\\xff\\\\xfa\\\\xff\\\\xff\\\\xfe\\\\xfb\",', ')', 'self.assertEqual(', 'self.mask(b\"\\\\xff\\\\xfb\\\\xfd\\\\xfc\",', 'b\"\\\\x00\\\\x01\\\\x02\\\\x03\\\\x04\\\\x05\"),', 'b\"\\\\xff\\\\xfa\\\\xff\\\\xff\\\\xfb\\\\xfe\",', ')', 'class', 'PythonMaskFunctionTest(MaskFunctionMixin,', 'unittest.TestCase):', 'def', 'mask(self,', 'mask,', 'data):', 'return', '_websocket_mask_python(mask,', 'data)', '@unittest.skipIf(speedups', 'is', 'None,', '\"tornado.speedups', 'module', 'not', 'present\")', 'class', 'CythonMaskFunctionTest(MaskFunctionMixin,', 'unittest.TestCase):', 'def', 'mask(self,', 'mask,', 'data):', 'return', 'speedups.websocket_mask(mask,', 'data)', 'class', 'ServerPeriodicPingTest(WebSocketBaseTestCase):', 'def', 'get_app(self):', 'class', 'PingHandler(TestWebSocketHandler):', 'def', 'on_pong(self,', 'data):', 'self.write_message(\"got', 'pong\")', 'return', 'Application([(\"/\",', 'PingHandler)],', 'websocket_ping_interval=0.01)', '@gen_test', 'def', 'test_server_ping(self):', 'ws', '=', 'yield', 'self.ws_connect(\"/\")', 'for', 'i', 'in', 'range(3):', 'response', '=', 'yield', 'ws.read_message()', 'self.assertEqual(response,', '\"got', 'pong\")', 'class', 'ClientPeriodicPingTest(WebSocketBaseTestCase):', 'def', 'get_app(self):', 'class', 'PingHandler(TestWebSocketHandler):', 'def', 'on_ping(self,', 'data):', 'self.write_message(\"got', 'ping\")', 'return', 'Application([(\"/\",', 'PingHandler)])', '@gen_test', 'def', 'test_client_ping(self):', 'ws', '=', 'yield', 'self.ws_connect(\"/\",', 'ping_interval=0.01)', 'for', 'i', 'in', 'range(3):', 'response', '=', 'yield', 'ws.read_message()', 'self.assertEqual(response,', '\"got', 'ping\")', 'ws.close()', 'class', 'ManualPingTest(WebSocketBaseTestCase):', 'def', 'get_app(self):', 'class', 'PingHandler(TestWebSocketHandler):', 'def', 'on_ping(self,', 'data):', 'self.write_message(data,', 'binary=isinstance(data,', 'bytes))', 'return', 'Application([(\"/\",', 'PingHandler)])', '@gen_test', 'def', 'test_manual_ping(self):', 'ws', '=', 'yield', 'self.ws_connect(\"/\")', 'self.assertRaises(ValueError,', 'ws.ping,', '\"a\"', '*', '126)', 'ws.ping(\"hello\")', 'resp', '=', 'yield', 'ws.read_message()', 'self.assertEqual(resp,', 'b\"hello\")', 'ws.ping(b\"binary', 'hello\")', 'resp', '=', 'yield', 'ws.read_message()', 'self.assertEqual(resp,', 'b\"binary', 'hello\")', 'class', 'MaxMessageSizeTest(WebSocketBaseTestCase):', 'def', 'get_app(self):', 'return', 'Application([(\"/\",', 'EchoHandler)],', 'websocket_max_message_size=1024)', '@gen_test', 'def', 'test_large_message(self):', 'ws', '=', 'yield', 'self.ws_connect(\"/\")', 'msg', '=', '\"a\"', '*', '1024', 'ws.write_message(msg)', 'resp', '=', 'yield', 'ws.read_message()', 'self.assertEqual(resp,', 'msg)', 'ws.write_message(msg', '+', '\"b\")', 'resp', '=', 'yield', 'ws.read_message()', 'self.assertIs(resp,', 'None)', 'self.assertEqual(ws.close_code,', '1009)', 'self.assertEqual(ws.close_reason,', '\"message', 'too', 'big\")']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/test/wsgi_test.py",
        "vector": "['import', 'asyncio', 'import', 'concurrent.futures', 'import', 'threading', 'from', 'wsgiref.validate', 'import', 'validator', 'from', 'tornado.routing', 'import', 'RuleRouter', 'from', 'tornado.testing', 'import', 'AsyncHTTPTestCase,', 'gen_test', 'from', 'tornado.wsgi', 'import', 'WSGIContainer', 'class', 'WSGIAppMixin:', 'def', 'get_executor(self):', 'raise', 'NotImplementedError()', 'def', 'get_app(self):', 'executor', '=', 'self.get_executor()', 'self.barrier', '=', 'threading.Barrier(2,', 'timeout=0.3)', 'def', 'make_container(app):', 'return', 'WSGIContainer(validator(app),', 'executor=executor)', 'return', 'RuleRouter(', '[', '(\"/simple\",', 'make_container(self.simple_wsgi_app)),', '(\"/barrier\",', 'make_container(self.barrier_wsgi_app)),', '(\"/streaming_barrier\",', 'make_container(self.streaming_barrier_wsgi_app)),', ']', ')', 'def', 'respond_plain(self,', 'start_response):', 'status', '=', '\"200', 'OK\"', 'response_headers', '=', '[(\"Content-Type\",', '\"text/plain\")]', 'start_response(status,', 'response_headers)', 'def', 'simple_wsgi_app(self,', 'environ,', 'start_response):', 'self.respond_plain(start_response)', 'return', '[b\"Hello', 'world!\"]', 'def', 'barrier_wsgi_app(self,', 'environ,', 'start_response):', 'self.respond_plain(start_response)', 'try:', 'n', '=', 'self.barrier.wait()', 'except', 'threading.BrokenBarrierError:', 'return', '[b\"broken', 'barrier\"]', 'else:', 'return', '[b\"ok', '%d\"', '%', 'n]', 'def', 'streaming_barrier_wsgi_app(self,', 'environ,', 'start_response):', 'self.respond_plain(start_response)', 'yield', 'b\"ok', '\"', 'try:', 'n', '=', 'self.barrier.wait()', 'except', 'threading.BrokenBarrierError:', 'yield', 'b\"broken', 'barrier\"', 'else:', 'yield', 'b\"%d\"', '%', 'n', 'class', 'WSGIContainerDummyExecutorTest(WSGIAppMixin,', 'AsyncHTTPTestCase):', 'def', 'get_executor(self):', 'return', 'None', 'def', 'test_simple(self):', 'response', '=', 'self.fetch(\"/simple\")', 'self.assertEqual(response.body,', 'b\"Hello', 'world!\")', '@gen_test', 'async', 'def', 'test_concurrent_barrier(self):', 'self.barrier.reset()', 'resps', '=', 'await', 'asyncio.gather(', 'self.http_client.fetch(self.get_url(\"/barrier\")),', 'self.http_client.fetch(self.get_url(\"/barrier\")),', ')', 'for', 'resp', 'in', 'resps:', 'self.assertEqual(resp.body,', 'b\"broken', 'barrier\")', '@gen_test', 'async', 'def', 'test_concurrent_streaming_barrier(self):', 'self.barrier.reset()', 'resps', '=', 'await', 'asyncio.gather(', 'self.http_client.fetch(self.get_url(\"/streaming_barrier\")),', 'self.http_client.fetch(self.get_url(\"/streaming_barrier\")),', ')', 'for', 'resp', 'in', 'resps:', 'self.assertEqual(resp.body,', 'b\"ok', 'broken', 'barrier\")', 'class', 'WSGIContainerThreadPoolTest(WSGIAppMixin,', 'AsyncHTTPTestCase):', 'def', 'get_executor(self):', 'return', 'concurrent.futures.ThreadPoolExecutor()', 'def', 'test_simple(self):', 'response', '=', 'self.fetch(\"/simple\")', 'self.assertEqual(response.body,', 'b\"Hello', 'world!\")', '@gen_test', 'async', 'def', 'test_concurrent_barrier(self):', 'self.barrier.reset()', 'resps', '=', 'await', 'asyncio.gather(', 'self.http_client.fetch(self.get_url(\"/barrier\")),', 'self.http_client.fetch(self.get_url(\"/barrier\")),', ')', 'self.assertEqual([b\"ok', '0\",', 'b\"ok', '1\"],', 'sorted([resp.body', 'for', 'resp', 'in', 'resps]))', '@gen_test', 'async', 'def', 'test_concurrent_streaming_barrier(self):', 'self.barrier.reset()', 'resps', '=', 'await', 'asyncio.gather(', 'self.http_client.fetch(self.get_url(\"/streaming_barrier\")),', 'self.http_client.fetch(self.get_url(\"/streaming_barrier\")),', ')', 'self.assertEqual([b\"ok', '0\",', 'b\"ok', '1\"],', 'sorted([resp.body', 'for', 'resp', 'in', 'resps]))']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/testing.py",
        "vector": "['import', 'asyncio', 'from', 'collections.abc', 'import', 'Generator', 'import', 'functools', 'import', 'inspect', 'import', 'logging', 'import', 'os', 'import', 're', 'import', 'signal', 'import', 'socket', 'import', 'sys', 'import', 'unittest', 'import', 'warnings', 'from', 'tornado', 'import', 'gen', 'from', 'tornado.httpclient', 'import', 'AsyncHTTPClient,', 'HTTPResponse', 'from', 'tornado.httpserver', 'import', 'HTTPServer', 'from', 'tornado.ioloop', 'import', 'IOLoop,', 'TimeoutError', 'from', 'tornado', 'import', 'netutil', 'from', 'tornado.platform.asyncio', 'import', 'AsyncIOMainLoop', 'from', 'tornado.process', 'import', 'Subprocess', 'from', 'tornado.log', 'import', 'app_log', 'from', 'tornado.util', 'import', 'raise_exc_info,', 'basestring_type', 'from', 'tornado.web', 'import', 'Application', 'import', 'typing', 'from', 'typing', 'import', 'Tuple,', 'Any,', 'Callable,', 'Type,', 'Dict,', 'Union,', 'Optional,', 'Coroutine', 'from', 'types', 'import', 'TracebackType', 'if', 'typing.TYPE_CHECKING:', '_ExcInfoTuple', '=', 'Tuple[', 'Optional[Type[BaseException]],', 'Optional[BaseException],', 'Optional[TracebackType]', ']', '_NON_OWNED_IOLOOPS', '=', 'AsyncIOMainLoop', 'def', 'bind_unused_port(', 'reuse_port:', 'bool', '=', 'False,', 'address:', 'str', '=', '\"127.0.0.1\"', ')', '->', 'Tuple[socket.socket,', 'int]:', 'sock', '=', 'netutil.bind_sockets(', '0,', 'address,', 'family=socket.AF_INET,', 'reuse_port=reuse_port', ')[0]', 'port', '=', 'sock.getsockname()[1]', 'return', 'sock,', 'port', 'def', 'get_async_test_timeout()', '->', 'float:', 'env', '=', 'os.environ.get(\"ASYNC_TEST_TIMEOUT\")', 'if', 'env', 'is', 'not', 'None:', 'try:', 'return', 'float(env)', 'except', 'ValueError:', 'pass', 'return', '5', 'class', '_TestMethodWrapper(object):', 'def', '__init__(self,', 'orig_method:', 'Callable)', '->', 'None:', 'self.orig_method', '=', 'orig_method', 'self.__wrapped__', '=', 'orig_method', 'def', '__call__(self,', '*args:', 'Any,', '**kwargs:', 'Any)', '->', 'None:', 'result', '=', 'self.orig_method(*args,', '**kwargs)', 'if', 'isinstance(result,', 'Generator)', 'or', 'inspect.iscoroutine(result):', 'raise', 'TypeError(', '\"Generator', 'and', 'coroutine', 'test', 'methods', 'should', 'be\"', '\"', 'decorated', 'with', 'tornado.testing.gen_test\"', ')', 'elif', 'result', 'is', 'not', 'None:', 'raise', 'ValueError(\"Return', 'value', 'from', 'test', 'method', 'ignored:', '%r\"', '%', 'result)', 'def', '__getattr__(self,', 'name:', 'str)', '->', 'Any:', 'return', 'getattr(self.orig_method,', 'name)', 'class', 'AsyncTestCase(unittest.TestCase):', 'def', '__init__(self,', 'methodName:', 'str', '=', '\"runTest\")', '->', 'None:', 'super().__init__(methodName)', 'self.__stopped', '=', 'False', 'self.__running', '=', 'False', 'self.__failure', '=', 'None', 'self.__stop_args', '=', 'None', 'self.__timeout', '=', 'None', 'setattr(self,', 'methodName,', '_TestMethodWrapper(getattr(self,', 'methodName)))', 'self._test_generator', '=', 'None', 'def', 'setUp(self)', '->', 'None:', 'py_ver', '=', 'sys.version_info', 'if', '((3,', '10,', '0)', '<=', 'py_ver', '<', '(3,', '10,', '9))', 'or', '((3,', '11,', '0)', '<=', 'py_ver', '<=', '(3,', '11,', '1)):', 'setup_with_context_manager(self,', 'warnings.catch_warnings())', 'warnings.filterwarnings(', '\"ignore\",', 'message=\"There', 'is', 'no', 'current', 'event', 'loop\",', 'category=DeprecationWarning,', 'module=r\"tornado\\\\..*\",', ')', 'super().setUp()', 'if', 'type(self).get_new_ioloop', 'is', 'not', 'AsyncTestCase.get_new_ioloop:', 'warnings.warn(\"get_new_ioloop', 'is', 'deprecated\",', 'DeprecationWarning)', 'self.io_loop', '=', 'self.get_new_ioloop()', 'asyncio.set_event_loop(self.io_loop.asyncio_loop)', 'def', 'tearDown(self)', '->', 'None:', 'asyncio_loop', '=', 'self.io_loop.asyncio_loop', 'tasks', '=', 'asyncio.all_tasks(asyncio_loop)', 'tasks', '=', '[t', 'for', 't', 'in', 'tasks', 'if', 'not', 't.done()]', 'for', 't', 'in', 'tasks:', 't.cancel()', 'if', 'tasks:', 'done,', 'pending', '=', 'self.io_loop.run_sync(lambda:', 'asyncio.wait(tasks))', 'assert', 'not', 'pending', 'for', 'f', 'in', 'done:', 'try:', 'f.result()', 'except', 'asyncio.CancelledError:', 'pass', 'Subprocess.uninitialize()', 'asyncio.set_event_loop(None)', 'if', 'not', 'isinstance(self.io_loop,', '_NON_OWNED_IOLOOPS):', 'self.io_loop.close(all_fds=True)', 'super().tearDown()', 'self.__rethrow()', 'def', 'get_new_ioloop(self)', '->', 'IOLoop:', 'return', 'IOLoop(make_current=False)', 'def', '_handle_exception(', 'self,', 'typ:', 'Type[Exception],', 'value:', 'Exception,', 'tb:', 'TracebackType', ')', '->', 'bool:', 'if', 'self.__failure', 'is', 'None:', 'self.__failure', '=', '(typ,', 'value,', 'tb)', 'else:', 'app_log.error(', '\"multiple', 'unhandled', 'exceptions', 'in', 'test\",', 'exc_info=(typ,', 'value,', 'tb)', ')', 'self.stop()', 'return', 'True', 'def', '__rethrow(self)', '->', 'None:', 'if', 'self.__failure', 'is', 'not', 'None:', 'failure', '=', 'self.__failure', 'self.__failure', '=', 'None', 'raise_exc_info(failure)', 'def', 'run(', 'self,', 'result:', 'Optional[unittest.TestResult]', '=', 'None', ')', '->', 'Optional[unittest.TestResult]:', 'ret', '=', 'super().run(result)', 'self.__rethrow()', 'return', 'ret', 'def', 'stop(self,', '_arg:', 'Any', '=', 'None,', '**kwargs:', 'Any)', '->', 'None:', 'assert', '_arg', 'is', 'None', 'or', 'not', 'kwargs', 'self.__stop_args', '=', 'kwargs', 'or', '_arg', 'if', 'self.__running:', 'self.io_loop.stop()', 'self.__running', '=', 'False', 'self.__stopped', '=', 'True', 'def', 'wait(', 'self,', 'condition:', 'Optional[Callable[...,', 'bool]]', '=', 'None,', 'timeout:', 'Optional[float]', '=', 'None,', ')', '->', 'Any:', 'if', 'timeout', 'is', 'None:', 'timeout', '=', 'get_async_test_timeout()', 'if', 'not', 'self.__stopped:', 'if', 'timeout:', 'def', 'timeout_func()', '->', 'None:', 'try:', 'raise', 'self.failureException(', '\"Async', 'operation', 'timed', 'out', 'after', '%s', 'seconds\"', '%', 'timeout', ')', 'except', 'Exception:', 'self.__failure', '=', 'sys.exc_info()', 'self.stop()', 'self.__timeout', '=', 'self.io_loop.add_timeout(', 'self.io_loop.time()', '+', 'timeout,', 'timeout_func', ')', 'while', 'True:', 'self.__running', '=', 'True', 'self.io_loop.start()', 'if', 'self.__failure', 'is', 'not', 'None', 'or', 'condition', 'is', 'None', 'or', 'condition():', 'break', 'if', 'self.__timeout', 'is', 'not', 'None:', 'self.io_loop.remove_timeout(self.__timeout)', 'self.__timeout', '=', 'None', 'assert', 'self.__stopped', 'self.__stopped', '=', 'False', 'self.__rethrow()', 'result', '=', 'self.__stop_args', 'self.__stop_args', '=', 'None', 'return', 'result', 'class', 'AsyncHTTPTestCase(AsyncTestCase):', 'def', 'setUp(self)', '->', 'None:', 'super().setUp()', 'sock,', 'port', '=', 'bind_unused_port()', 'self.__port', '=', 'port', 'self.http_client', '=', 'self.get_http_client()', 'self._app', '=', 'self.get_app()', 'self.http_server', '=', 'self.get_http_server()', 'self.http_server.add_sockets([sock])', 'def', 'get_http_client(self)', '->', 'AsyncHTTPClient:', 'return', 'AsyncHTTPClient()', 'def', 'get_http_server(self)', '->', 'HTTPServer:', 'return', 'HTTPServer(self._app,', '**self.get_httpserver_options())', 'def', 'get_app(self)', '->', 'Application:', 'raise', 'NotImplementedError()', 'def', 'fetch(', 'self,', 'path:', 'str,', 'raise_error:', 'bool', '=', 'False,', '**kwargs:', 'Any', ')', '->', 'HTTPResponse:', 'if', 'path.lower().startswith((\"http://\",', '\"https://\")):', 'url', '=', 'path', 'else:', 'url', '=', 'self.get_url(path)', 'return', 'self.io_loop.run_sync(', 'lambda:', 'self.http_client.fetch(url,', 'raise_error=raise_error,', '**kwargs),', 'timeout=get_async_test_timeout(),', ')', 'def', 'get_httpserver_options(self)', '->', 'Dict[str,', 'Any]:', 'return', '{}', 'def', 'get_http_port(self)', '->', 'int:', 'return', 'self.__port', 'def', 'get_protocol(self)', '->', 'str:', 'return', '\"http\"', 'def', 'get_url(self,', 'path:', 'str)', '->', 'str:', 'return', '\"%s://127.0.0.1:%s%s\"', '%', '(self.get_protocol(),', 'self.get_http_port(),', 'path)', 'def', 'tearDown(self)', '->', 'None:', 'self.http_server.stop()', 'self.io_loop.run_sync(', 'self.http_server.close_all_connections,', 'timeout=get_async_test_timeout()', ')', 'self.http_client.close()', 'del', 'self.http_server', 'del', 'self._app', 'super().tearDown()', 'class', 'AsyncHTTPSTestCase(AsyncHTTPTestCase):', 'def', 'get_http_client(self)', '->', 'AsyncHTTPClient:', 'return', 'AsyncHTTPClient(force_instance=True,', 'defaults=dict(validate_cert=False))', 'def', 'get_httpserver_options(self)', '->', 'Dict[str,', 'Any]:', 'return', 'dict(ssl_options=self.get_ssl_options())', 'def', 'get_ssl_options(self)', '->', 'Dict[str,', 'Any]:', 'return', 'AsyncHTTPSTestCase.default_ssl_options()', '@staticmethod', 'def', 'default_ssl_options()', '->', 'Dict[str,', 'Any]:', 'module_dir', '=', 'os.path.dirname(__file__)', 'return', 'dict(', 'certfile=os.path.join(module_dir,', '\"test\",', '\"test.crt\"),', 'keyfile=os.path.join(module_dir,', '\"test\",', '\"test.key\"),', ')', 'def', 'get_protocol(self)', '->', 'str:', 'return', '\"https\"', '@typing.overload', 'def', 'gen_test(', '*,', 'timeout:', 'Optional[float]', '=', 'None', ')', '->', 'Callable[[Callable[...,', 'Union[Generator,', '\"Coroutine\"]]],', 'Callable[...,', 'None]]:', 'pass', '@typing.overload', 'def', 'gen_test(func:', 'Callable[...,', 'Union[Generator,', '\"Coroutine\"]])', '->', 'Callable[...,', 'None]:', 'pass', 'def', 'gen_test(', 'func:', 'Optional[Callable[...,', 'Union[Generator,', '\"Coroutine\"]]]', '=', 'None,', 'timeout:', 'Optional[float]', '=', 'None,', ')', '->', 'Union[', 'Callable[...,', 'None],', 'Callable[[Callable[...,', 'Union[Generator,', '\"Coroutine\"]]],', 'Callable[...,', 'None]],', ']:', 'if', 'timeout', 'is', 'None:', 'timeout', '=', 'get_async_test_timeout()', 'def', 'wrap(f:', 'Callable[...,', 'Union[Generator,', '\"Coroutine\"]])', '->', 'Callable[...,', 'None]:', '@functools.wraps(f)', 'def', 'pre_coroutine(self,', '*args,', '**kwargs):', 'result', '=', 'f(self,', '*args,', '**kwargs)', 'if', 'isinstance(result,', 'Generator)', 'or', 'inspect.iscoroutine(result):', 'self._test_generator', '=', 'result', 'else:', 'self._test_generator', '=', 'None', 'return', 'result', 'if', 'inspect.iscoroutinefunction(f):', 'coro', '=', 'pre_coroutine', 'else:', 'coro', '=', 'gen.coroutine(pre_coroutine)', '@functools.wraps(coro)', 'def', 'post_coroutine(self,', '*args,', '**kwargs):', 'try:', 'return', 'self.io_loop.run_sync(', 'functools.partial(coro,', 'self,', '*args,', '**kwargs),', 'timeout=timeout', ')', 'except', 'TimeoutError', 'as', 'e:', 'if', 'self._test_generator', 'is', 'not', 'None', 'and', 'getattr(', 'self._test_generator,', '\"cr_running\",', 'True', '):', 'self._test_generator.throw(e)', 'raise', 'return', 'post_coroutine', 'if', 'func', 'is', 'not', 'None:', 'return', 'wrap(func)', 'else:', 'return', 'wrap', 'gen_test.__test__', '=', 'False', 'class', 'ExpectLog(logging.Filter):', 'def', '__init__(', 'self,', 'logger:', 'Union[logging.Logger,', 'basestring_type],', 'regex:', 'str,', 'required:', 'bool', '=', 'True,', 'level:', 'Optional[int]', '=', 'None,', ')', '->', 'None:', 'if', 'isinstance(logger,', 'basestring_type):', 'logger', '=', 'logging.getLogger(logger)', 'self.logger', '=', 'logger', 'self.regex', '=', 're.compile(regex)', 'self.required', '=', 'required', 'self.matched', '=', '0', 'self.deprecated_level_matched', '=', '0', 'self.logged_stack', '=', 'False', 'self.level', '=', 'level', 'self.orig_level', '=', 'None', 'def', 'filter(self,', 'record:', 'logging.LogRecord)', '->', 'bool:', 'if', 'record.exc_info:', 'self.logged_stack', '=', 'True', 'message', '=', 'record.getMessage()', 'if', 'self.regex.match(message):', 'if', 'self.level', 'is', 'None', 'and', 'record.levelno', '<', 'logging.WARNING:', 'self.deprecated_level_matched', '+=', '1', 'if', 'self.level', 'is', 'not', 'None', 'and', 'record.levelno', '!=', 'self.level:', 'app_log.warning(', '\"Got', 'expected', 'log', 'message', '%r', 'at', 'unexpected', 'level', '(%s', 'vs', '%s)\"', '%', '(message,', 'logging.getLevelName(self.level),', 'record.levelname)', ')', 'return', 'True', 'self.matched', '+=', '1', 'return', 'False', 'return', 'True', 'def', '__enter__(self)', '->', '\"ExpectLog\":', 'if', 'self.level', 'is', 'not', 'None', 'and', 'self.level', '<', 'self.logger.getEffectiveLevel():', 'self.orig_level', '=', 'self.logger.level', 'self.logger.setLevel(self.level)', 'self.logger.addFilter(self)', 'return', 'self', 'def', '__exit__(', 'self,', 'typ:', '\"Optional[Type[BaseException]]\",', 'value:', 'Optional[BaseException],', 'tb:', 'Optional[TracebackType],', ')', '->', 'None:', 'if', 'self.orig_level', 'is', 'not', 'None:', 'self.logger.setLevel(self.orig_level)', 'self.logger.removeFilter(self)', 'if', 'not', 'typ', 'and', 'self.required', 'and', 'not', 'self.matched:', 'raise', 'Exception(\"did', 'not', 'get', 'expected', 'log', 'message\")', 'if', '(', 'not', 'typ', 'and', 'self.required', 'and', '(self.deprecated_level_matched', '>=', 'self.matched)', '):', 'warnings.warn(', '\"ExpectLog', 'matched', 'at', 'INFO', 'or', 'below', 'without', 'level', 'argument\",', 'DeprecationWarning,', ')', 'def', 'setup_with_context_manager(testcase:', 'unittest.TestCase,', 'cm:', 'Any)', '->', 'Any:', 'val', '=', 'cm.__enter__()', 'testcase.addCleanup(cm.__exit__,', 'None,', 'None,', 'None)', 'return', 'val', 'def', 'main(**kwargs:', 'Any)', '->', 'None:', 'from', 'tornado.options', 'import', 'define,', 'options,', 'parse_command_line', 'define(', '\"exception_on_interrupt\",', 'type=bool,', 'default=True,', 'help=(', '\"If', 'true', '(default),', 'ctrl-c', 'raises', 'a', 'KeyboardInterrupt', '\"', '\"exception.', 'This', 'prints', 'a', 'stack', 'trace', 'but', 'cannot', 'interrupt', '\"', '\"certain', 'operations.', 'If', 'false,', 'the', 'process', 'is', 'more', 'reliably', '\"', '\"killed,', 'but', 'does', 'not', 'print', 'a', 'stack', 'trace.\"', '),', ')', 'define(\"verbose\",', 'type=bool)', 'define(\"quiet\",', 'type=bool)', 'define(\"failfast\",', 'type=bool)', 'define(\"catch\",', 'type=bool)', 'define(\"buffer\",', 'type=bool)', 'argv', '=', '[sys.argv[0]]', '+', 'parse_command_line(sys.argv)', 'if', 'not', 'options.exception_on_interrupt:', 'signal.signal(signal.SIGINT,', 'signal.SIG_DFL)', 'if', 'options.verbose', 'is', 'not', 'None:', 'kwargs[\"verbosity\"]', '=', '2', 'if', 'options.quiet', 'is', 'not', 'None:', 'kwargs[\"verbosity\"]', '=', '0', 'if', 'options.failfast', 'is', 'not', 'None:', 'kwargs[\"failfast\"]', '=', 'True', 'if', 'options.catch', 'is', 'not', 'None:', 'kwargs[\"catchbreak\"]', '=', 'True', 'if', 'options.buffer', 'is', 'not', 'None:', 'kwargs[\"buffer\"]', '=', 'True', 'if', '__name__', '==', '\"__main__\"', 'and', 'len(argv)', '==', '1:', 'print(\"No', 'tests', 'specified\",', 'file=sys.stderr)', 'sys.exit(1)', 'if', 'len(argv)', '>', '1:', 'unittest.main(module=None,', 'argv=argv,', '**kwargs)', 'else:', 'unittest.main(defaultTest=\"all\",', 'argv=argv,', '**kwargs)', 'if', '__name__', '==', '\"__main__\":', 'main()']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/util.py",
        "vector": "['import', 'array', 'import', 'asyncio', 'import', 'atexit', 'from', 'inspect', 'import', 'getfullargspec', 'import', 'os', 'import', 're', 'import', 'typing', 'import', 'zlib', 'from', 'typing', 'import', '(', 'Any,', 'Optional,', 'Dict,', 'Mapping,', 'List,', 'Tuple,', 'Match,', 'Callable,', 'Type,', 'Sequence,', ')', 'if', 'typing.TYPE_CHECKING:', 'import', 'datetime', 'from', 'types', 'import', 'TracebackType', 'from', 'typing', 'import', 'Union', 'import', 'unittest', 'bytes_type', '=', 'bytes', 'unicode_type', '=', 'str', 'basestring_type', '=', 'str', 'try:', 'from', 'sys', 'import', 'is_finalizing', 'except', 'ImportError:', 'def', '_get_emulated_is_finalizing()', '->', 'Callable[[],', 'bool]:', 'L', '=', '[]', 'atexit.register(lambda:', 'L.append(None))', 'def', 'is_finalizing()', '->', 'bool:', 'return', 'L', '!=', '[]', 'return', 'is_finalizing', 'is_finalizing', '=', '_get_emulated_is_finalizing()', 'TimeoutError', '=', 'asyncio.TimeoutError', 'class', 'ObjectDict(Dict[str,', 'Any]):', 'def', '__getattr__(self,', 'name:', 'str)', '->', 'Any:', 'try:', 'return', 'self[name]', 'except', 'KeyError:', 'raise', 'AttributeError(name)', 'def', '__setattr__(self,', 'name:', 'str,', 'value:', 'Any)', '->', 'None:', 'self[name]', '=', 'value', 'class', 'GzipDecompressor(object):', 'def', '__init__(self)', '->', 'None:', 'self.decompressobj', '=', 'zlib.decompressobj(16', '+', 'zlib.MAX_WBITS)', 'def', 'decompress(self,', 'value:', 'bytes,', 'max_length:', 'int', '=', '0)', '->', 'bytes:', 'return', 'self.decompressobj.decompress(value,', 'max_length)', '@property', 'def', 'unconsumed_tail(self)', '->', 'bytes:', 'return', 'self.decompressobj.unconsumed_tail', 'def', 'flush(self)', '->', 'bytes:', 'return', 'self.decompressobj.flush()', 'def', 'import_object(name:', 'str)', '->', 'Any:', 'if', 'name.count(\".\")', '==', '0:', 'return', '__import__(name)', 'parts', '=', 'name.split(\".\")', 'obj', '=', '__import__(\".\".join(parts[:-1]),', 'fromlist=[parts[-1]])', 'try:', 'return', 'getattr(obj,', 'parts[-1])', 'except', 'AttributeError:', 'raise', 'ImportError(\"No', 'module', 'named', '%s\"', '%', 'parts[-1])', 'def', 'exec_in(', 'code:', 'Any,', 'glob:', 'Dict[str,', 'Any],', 'loc:', 'Optional[Optional[Mapping[str,', 'Any]]]', '=', 'None', ')', '->', 'None:', 'if', 'isinstance(code,', 'str):', 'code', '=', 'compile(code,', '\"<string>\",', '\"exec\",', 'dont_inherit=True)', 'exec(code,', 'glob,', 'loc)', 'def', 'raise_exc_info(', 'exc_info:', 'Tuple[Optional[type],', 'Optional[BaseException],', 'Optional[\"TracebackType\"]]', ')', '->', 'typing.NoReturn:', 'try:', 'if', 'exc_info[1]', 'is', 'not', 'None:', 'raise', 'exc_info[1].with_traceback(exc_info[2])', 'else:', 'raise', 'TypeError(\"raise_exc_info', 'called', 'with', 'no', 'exception\")', 'finally:', 'exc_info', '=', '(None,', 'None,', 'None)', 'def', 'errno_from_exception(e:', 'BaseException)', '->', 'Optional[int]:', 'if', 'hasattr(e,', '\"errno\"):', 'return', 'e.errno', 'elif', 'e.args:', 'return', 'e.args[0]', 'else:', 'return', 'None', '_alphanum', '=', 'frozenset(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\")', 'def', '_re_unescape_replacement(match:', 'Match[str])', '->', 'str:', 'group', '=', 'match.group(1)', 'if', 'group[0]', 'in', '_alphanum:', 'raise', 'ValueError(\"cannot', 'unescape', '\\'\\\\\\\\\\\\\\\\%s\\'\"', '%', 'group[0])', 'return', 'group', '_re_unescape_pattern', '=', 're.compile(r\"\\\\\\\\(.)\",', 're.DOTALL)', 'def', 're_unescape(s:', 'str)', '->', 'str:', 'r', 'return', '_re_unescape_pattern.sub(_re_unescape_replacement,', 's)', 'class', 'Configurable(object):', '__impl_class', '=', 'None', '__impl_kwargs', '=', 'None', 'def', '__new__(cls,', '*args:', 'Any,', '**kwargs:', 'Any)', '->', 'Any:', 'base', '=', 'cls.configurable_base()', 'init_kwargs', '=', '{}', 'if', 'cls', 'is', 'base:', 'impl', '=', 'cls.configured_class()', 'if', 'base.__impl_kwargs:', 'init_kwargs.update(base.__impl_kwargs)', 'else:', 'impl', '=', 'cls', 'init_kwargs.update(kwargs)', 'if', 'impl.configurable_base()', 'is', 'not', 'base:', 'return', 'impl(*args,', '**init_kwargs)', 'instance', '=', 'super(Configurable,', 'cls).__new__(impl)', 'instance.initialize(*args,', '**init_kwargs)', 'return', 'instance', '@classmethod', 'def', 'configurable_base(cls):', 'raise', 'NotImplementedError()', '@classmethod', 'def', 'configurable_default(cls):', 'raise', 'NotImplementedError()', 'def', '_initialize(self)', '->', 'None:', 'pass', 'initialize', '=', '_initialize', '@classmethod', 'def', 'configure(cls,', 'impl,', '**kwargs):', 'base', '=', 'cls.configurable_base()', 'if', 'isinstance(impl,', 'str):', 'impl', '=', 'typing.cast(Type[Configurable],', 'import_object(impl))', 'if', 'impl', 'is', 'not', 'None', 'and', 'not', 'issubclass(impl,', 'cls):', 'raise', 'ValueError(\"Invalid', 'subclass', 'of', '%s\"', '%', 'cls)', 'base.__impl_class', '=', 'impl', 'base.__impl_kwargs', '=', 'kwargs', '@classmethod', 'def', 'configured_class(cls):', 'base', '=', 'cls.configurable_base()', 'if', 'base.__dict__.get(\"_Configurable__impl_class\")', 'is', 'None:', 'base.__impl_class', '=', 'cls.configurable_default()', 'if', 'base.__impl_class', 'is', 'not', 'None:', 'return', 'base.__impl_class', 'else:', 'raise', 'ValueError(\"configured', 'class', 'not', 'found\")', '@classmethod', 'def', '_save_configuration(cls):', 'base', '=', 'cls.configurable_base()', 'return', '(base.__impl_class,', 'base.__impl_kwargs)', '@classmethod', 'def', '_restore_configuration(cls,', 'saved):', 'base', '=', 'cls.configurable_base()', 'base.__impl_class', '=', 'saved[0]', 'base.__impl_kwargs', '=', 'saved[1]', 'class', 'ArgReplacer(object):', 'def', '__init__(self,', 'func:', 'Callable,', 'name:', 'str)', '->', 'None:', 'self.name', '=', 'name', 'try:', 'self.arg_pos', '=', 'self._getargnames(func).index(name)', 'except', 'ValueError:', 'self.arg_pos', '=', 'None', 'def', '_getargnames(self,', 'func:', 'Callable)', '->', 'List[str]:', 'try:', 'return', 'getfullargspec(func).args', 'except', 'TypeError:', 'if', 'hasattr(func,', '\"func_code\"):', 'code', '=', 'func.func_code', 'return', 'code.co_varnames[:', 'code.co_argcount]', 'raise', 'def', 'get_old_value(', 'self,', 'args:', 'Sequence[Any],', 'kwargs:', 'Dict[str,', 'Any],', 'default:', 'Any', '=', 'None', ')', '->', 'Any:', 'if', 'self.arg_pos', 'is', 'not', 'None', 'and', 'len(args)', '>', 'self.arg_pos:', 'return', 'args[self.arg_pos]', 'else:', 'return', 'kwargs.get(self.name,', 'default)', 'def', 'replace(', 'self,', 'new_value:', 'Any,', 'args:', 'Sequence[Any],', 'kwargs:', 'Dict[str,', 'Any]', ')', '->', 'Tuple[Any,', 'Sequence[Any],', 'Dict[str,', 'Any]]:', 'if', 'self.arg_pos', 'is', 'not', 'None', 'and', 'len(args)', '>', 'self.arg_pos:', 'old_value', '=', 'args[self.arg_pos]', 'args', '=', 'list(args)', 'args[self.arg_pos]', '=', 'new_value', 'else:', 'old_value', '=', 'kwargs.get(self.name)', 'kwargs[self.name]', '=', 'new_value', 'return', 'old_value,', 'args,', 'kwargs', 'def', 'timedelta_to_seconds(td):', 'return', 'td.total_seconds()', 'def', '_websocket_mask_python(mask:', 'bytes,', 'data:', 'bytes)', '->', 'bytes:', 'mask_arr', '=', 'array.array(\"B\",', 'mask)', 'unmasked_arr', '=', 'array.array(\"B\",', 'data)', 'for', 'i', 'in', 'range(len(data)):', 'unmasked_arr[i]', '=', 'unmasked_arr[i]', '^', 'mask_arr[i', '%', '4]', 'return', 'unmasked_arr.tobytes()', 'if', 'os.environ.get(\"TORNADO_NO_EXTENSION\")', 'or', 'os.environ.get(\"TORNADO_EXTENSION\")', '==', '\"0\":', '_websocket_mask', '=', '_websocket_mask_python', 'else:', 'try:', 'from', 'tornado.speedups', 'import', 'websocket_mask', 'as', '_websocket_mask', 'except', 'ImportError:', 'if', 'os.environ.get(\"TORNADO_EXTENSION\")', '==', '\"1\":', 'raise', '_websocket_mask', '=', '_websocket_mask_python', 'def', 'doctests():', 'import', 'doctest', 'return', 'doctest.DocTestSuite()']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/web.py",
        "vector": "['import', 'base64', 'import', 'binascii', 'import', 'datetime', 'import', 'email.utils', 'import', 'functools', 'import', 'gzip', 'import', 'hashlib', 'import', 'hmac', 'import', 'http.cookies', 'from', 'inspect', 'import', 'isclass', 'from', 'io', 'import', 'BytesIO', 'import', 'mimetypes', 'import', 'numbers', 'import', 'os.path', 'import', 're', 'import', 'socket', 'import', 'sys', 'import', 'threading', 'import', 'time', 'import', 'warnings', 'import', 'tornado', 'import', 'traceback', 'import', 'types', 'import', 'urllib.parse', 'from', 'urllib.parse', 'import', 'urlencode', 'from', 'tornado.concurrent', 'import', 'Future,', 'future_set_result_unless_cancelled', 'from', 'tornado', 'import', 'escape', 'from', 'tornado', 'import', 'gen', 'from', 'tornado.httpserver', 'import', 'HTTPServer', 'from', 'tornado', 'import', 'httputil', 'from', 'tornado', 'import', 'iostream', 'from', 'tornado', 'import', 'locale', 'from', 'tornado.log', 'import', 'access_log,', 'app_log,', 'gen_log', 'from', 'tornado', 'import', 'template', 'from', 'tornado.escape', 'import', 'utf8,', '_unicode', 'from', 'tornado.routing', 'import', '(', 'AnyMatches,', 'DefaultHostMatches,', 'HostMatches,', 'ReversibleRouter,', 'Rule,', 'ReversibleRuleRouter,', 'URLSpec,', '_RuleList,', ')', 'from', 'tornado.util', 'import', 'ObjectDict,', 'unicode_type,', '_websocket_mask', 'url', '=', 'URLSpec', 'from', 'typing', 'import', '(', 'Dict,', 'Any,', 'Union,', 'Optional,', 'Awaitable,', 'Tuple,', 'List,', 'Callable,', 'Iterable,', 'Generator,', 'Type,', 'TypeVar,', 'cast,', 'overload,', ')', 'from', 'types', 'import', 'TracebackType', 'import', 'typing', 'if', 'typing.TYPE_CHECKING:', 'from', 'typing', 'import', 'Set', '_HeaderTypes', '=', 'Union[bytes,', 'unicode_type,', 'int,', 'numbers.Integral,', 'datetime.datetime]', '_CookieSecretTypes', '=', 'Union[str,', 'bytes,', 'Dict[int,', 'str],', 'Dict[int,', 'bytes]]', 'MIN_SUPPORTED_SIGNED_VALUE_VERSION', '=', '1', 'MAX_SUPPORTED_SIGNED_VALUE_VERSION', '=', '2', 'DEFAULT_SIGNED_VALUE_VERSION', '=', '2', 'DEFAULT_SIGNED_VALUE_MIN_VERSION', '=', '1', 'class', '_ArgDefaultMarker:', 'pass', '_ARG_DEFAULT', '=', '_ArgDefaultMarker()', 'class', 'RequestHandler(object):', 'SUPPORTED_METHODS', '=', '(\"GET\",', '\"HEAD\",', '\"POST\",', '\"DELETE\",', '\"PATCH\",', '\"PUT\",', '\"OPTIONS\")', '_template_loaders', '=', '{}', '_template_loader_lock', '=', 'threading.Lock()', '_remove_control_chars_regex', '=', 're.compile(r\"[\\\\x00-\\\\x08\\\\x0e-\\\\x1f]\")', '_stream_request_body', '=', 'False', '_transforms', '=', 'None', 'path_args', '=', 'None', 'path_kwargs', '=', 'None', 'def', '__init__(', 'self,', 'application:', '\"Application\",', 'request:', 'httputil.HTTPServerRequest,', '**kwargs:', 'Any,', ')', '->', 'None:', 'super().__init__()', 'self.application', '=', 'application', 'self.request', '=', 'request', 'self._headers_written', '=', 'False', 'self._finished', '=', 'False', 'self._auto_finish', '=', 'True', 'self._prepared_future', '=', 'None', 'self.ui', '=', 'ObjectDict(', '(n,', 'self._ui_method(m))', 'for', 'n,', 'm', 'in', 'application.ui_methods.items()', ')', 'self.ui[\"_tt_modules\"]', '=', '_UIModuleNamespace(self,', 'application.ui_modules)', 'self.ui[\"modules\"]', '=', 'self.ui[\"_tt_modules\"]', 'self.clear()', 'assert', 'self.request.connection', 'is', 'not', 'None', 'self.request.connection.set_close_callback(', 'self.on_connection_close', ')', 'self.initialize(**kwargs)', 'def', '_initialize(self)', '->', 'None:', 'pass', 'initialize', '=', '_initialize', '@property', 'def', 'settings(self)', '->', 'Dict[str,', 'Any]:', 'return', 'self.application.settings', 'def', '_unimplemented_method(self,', '*args:', 'str,', '**kwargs:', 'str)', '->', 'None:', 'raise', 'HTTPError(405)', 'head', '=', '_unimplemented_method', 'get', '=', '_unimplemented_method', 'post', '=', '_unimplemented_method', 'delete', '=', '_unimplemented_method', 'patch', '=', '_unimplemented_method', 'put', '=', '_unimplemented_method', 'options', '=', '_unimplemented_method', 'def', 'prepare(self)', '->', 'Optional[Awaitable[None]]:', 'pass', 'def', 'on_finish(self)', '->', 'None:', 'pass', 'def', 'on_connection_close(self)', '->', 'None:', 'if', '_has_stream_request_body(self.__class__):', 'if', 'not', 'self.request._body_future.done():', 'self.request._body_future.set_exception(iostream.StreamClosedError())', 'self.request._body_future.exception()', 'def', 'clear(self)', '->', 'None:', 'self._headers', '=', 'httputil.HTTPHeaders(', '{', '\"Server\":', '\"TornadoServer/%s\"', '%', 'tornado.version,', '\"Content-Type\":', '\"text/html;', 'charset=UTF-8\",', '\"Date\":', 'httputil.format_timestamp(time.time()),', '}', ')', 'self.set_default_headers()', 'self._write_buffer', '=', '[]', 'self._status_code', '=', '200', 'self._reason', '=', 'httputil.responses[200]', 'def', 'set_default_headers(self)', '->', 'None:', 'pass', 'def', 'set_status(self,', 'status_code:', 'int,', 'reason:', 'Optional[str]', '=', 'None)', '->', 'None:', 'self._status_code', '=', 'status_code', 'if', 'reason', 'is', 'not', 'None:', 'self._reason', '=', 'escape.native_str(reason)', 'else:', 'self._reason', '=', 'httputil.responses.get(status_code,', '\"Unknown\")', 'def', 'get_status(self)', '->', 'int:', 'return', 'self._status_code', 'def', 'set_header(self,', 'name:', 'str,', 'value:', '_HeaderTypes)', '->', 'None:', 'self._headers[name]', '=', 'self._convert_header_value(value)', 'def', 'add_header(self,', 'name:', 'str,', 'value:', '_HeaderTypes)', '->', 'None:', 'self._headers.add(name,', 'self._convert_header_value(value))', 'def', 'clear_header(self,', 'name:', 'str)', '->', 'None:', 'if', 'name', 'in', 'self._headers:', 'del', 'self._headers[name]', '_INVALID_HEADER_CHAR_RE', '=', 're.compile(r\"[\\\\x00-\\\\x1f]\")', 'def', '_convert_header_value(self,', 'value:', '_HeaderTypes)', '->', 'str:', 'if', 'isinstance(value,', 'str):', 'retval', '=', 'value', 'elif', 'isinstance(value,', 'bytes):', 'retval', '=', 'value.decode(\"latin1\")', 'elif', 'isinstance(value,', 'numbers.Integral):', 'return', 'str(value)', 'elif', 'isinstance(value,', 'datetime.datetime):', 'return', 'httputil.format_timestamp(value)', 'else:', 'raise', 'TypeError(\"Unsupported', 'header', 'value', '%r\"', '%', 'value)', 'if', 'RequestHandler._INVALID_HEADER_CHAR_RE.search(retval):', 'raise', 'ValueError(\"Unsafe', 'header', 'value', '%r\",', 'retval)', 'return', 'retval', '@overload', 'def', 'get_argument(self,', 'name:', 'str,', 'default:', 'str,', 'strip:', 'bool', '=', 'True)', '->', 'str:', 'pass', '@overload', 'def', 'get_argument(', 'self,', 'name:', 'str,', 'default:', '_ArgDefaultMarker', '=', '_ARG_DEFAULT,', 'strip:', 'bool', '=', 'True', ')', '->', 'str:', 'pass', '@overload', 'def', 'get_argument(', 'self,', 'name:', 'str,', 'default:', 'None,', 'strip:', 'bool', '=', 'True', ')', '->', 'Optional[str]:', 'pass', 'def', 'get_argument(', 'self,', 'name:', 'str,', 'default:', 'Union[None,', 'str,', '_ArgDefaultMarker]', '=', '_ARG_DEFAULT,', 'strip:', 'bool', '=', 'True,', ')', '->', 'Optional[str]:', 'return', 'self._get_argument(name,', 'default,', 'self.request.arguments,', 'strip)', 'def', 'get_arguments(self,', 'name:', 'str,', 'strip:', 'bool', '=', 'True)', '->', 'List[str]:', 'assert', 'isinstance(strip,', 'bool)', 'return', 'self._get_arguments(name,', 'self.request.arguments,', 'strip)', 'def', 'get_body_argument(', 'self,', 'name:', 'str,', 'default:', 'Union[None,', 'str,', '_ArgDefaultMarker]', '=', '_ARG_DEFAULT,', 'strip:', 'bool', '=', 'True,', ')', '->', 'Optional[str]:', 'return', 'self._get_argument(name,', 'default,', 'self.request.body_arguments,', 'strip)', 'def', 'get_body_arguments(self,', 'name:', 'str,', 'strip:', 'bool', '=', 'True)', '->', 'List[str]:', 'return', 'self._get_arguments(name,', 'self.request.body_arguments,', 'strip)', 'def', 'get_query_argument(', 'self,', 'name:', 'str,', 'default:', 'Union[None,', 'str,', '_ArgDefaultMarker]', '=', '_ARG_DEFAULT,', 'strip:', 'bool', '=', 'True,', ')', '->', 'Optional[str]:', 'return', 'self._get_argument(name,', 'default,', 'self.request.query_arguments,', 'strip)', 'def', 'get_query_arguments(self,', 'name:', 'str,', 'strip:', 'bool', '=', 'True)', '->', 'List[str]:', 'return', 'self._get_arguments(name,', 'self.request.query_arguments,', 'strip)', 'def', '_get_argument(', 'self,', 'name:', 'str,', 'default:', 'Union[None,', 'str,', '_ArgDefaultMarker],', 'source:', 'Dict[str,', 'List[bytes]],', 'strip:', 'bool', '=', 'True,', ')', '->', 'Optional[str]:', 'args', '=', 'self._get_arguments(name,', 'source,', 'strip=strip)', 'if', 'not', 'args:', 'if', 'isinstance(default,', '_ArgDefaultMarker):', 'raise', 'MissingArgumentError(name)', 'return', 'default', 'return', 'args[-1]', 'def', '_get_arguments(', 'self,', 'name:', 'str,', 'source:', 'Dict[str,', 'List[bytes]],', 'strip:', 'bool', '=', 'True', ')', '->', 'List[str]:', 'values', '=', '[]', 'for', 'v', 'in', 'source.get(name,', '[]):', 's', '=', 'self.decode_argument(v,', 'name=name)', 'if', 'isinstance(s,', 'unicode_type):', 's', '=', 'RequestHandler._remove_control_chars_regex.sub(\"', '\",', 's)', 'if', 'strip:', 's', '=', 's.strip()', 'values.append(s)', 'return', 'values', 'def', 'decode_argument(self,', 'value:', 'bytes,', 'name:', 'Optional[str]', '=', 'None)', '->', 'str:', 'try:', 'return', '_unicode(value)', 'except', 'UnicodeDecodeError:', 'raise', 'HTTPError(', '400,', '\"Invalid', 'unicode', 'in', '%s:', '%r\"', '%', '(name', 'or', '\"url\",', 'value[:40])', ')', '@property', 'def', 'cookies(self)', '->', 'Dict[str,', 'http.cookies.Morsel]:', 'return', 'self.request.cookies', 'def', 'get_cookie(self,', 'name:', 'str,', 'default:', 'Optional[str]', '=', 'None)', '->', 'Optional[str]:', 'if', 'self.request.cookies', 'is', 'not', 'None', 'and', 'name', 'in', 'self.request.cookies:', 'return', 'self.request.cookies[name].value', 'return', 'default', 'def', 'set_cookie(', 'self,', 'name:', 'str,', 'value:', 'Union[str,', 'bytes],', 'domain:', 'Optional[str]', '=', 'None,', 'expires:', 'Optional[Union[float,', 'Tuple,', 'datetime.datetime]]', '=', 'None,', 'path:', 'str', '=', '\"/\",', 'expires_days:', 'Optional[float]', '=', 'None,', '*,', 'max_age:', 'Optional[int]', '=', 'None,', 'httponly:', 'bool', '=', 'False,', 'secure:', 'bool', '=', 'False,', 'samesite:', 'Optional[str]', '=', 'None,', '**kwargs:', 'Any,', ')', '->', 'None:', 'name', '=', 'escape.native_str(name)', 'value', '=', 'escape.native_str(value)', 'if', 're.search(r\"[\\\\x00-\\\\x20]\",', 'name', '+', 'value):', 'raise', 'ValueError(\"Invalid', 'cookie', '%r:', '%r\"', '%', '(name,', 'value))', 'if', 'not', 'hasattr(self,', '\"_new_cookie\"):', 'self._new_cookie', '=', '(', 'http.cookies.SimpleCookie()', ')', 'if', 'name', 'in', 'self._new_cookie:', 'del', 'self._new_cookie[name]', 'self._new_cookie[name]', '=', 'value', 'morsel', '=', 'self._new_cookie[name]', 'if', 'domain:', 'morsel[\"domain\"]', '=', 'domain', 'if', 'expires_days', 'is', 'not', 'None', 'and', 'not', 'expires:', 'expires', '=', 'datetime.datetime.now(datetime.timezone.utc)', '+', 'datetime.timedelta(', 'days=expires_days', ')', 'if', 'expires:', 'morsel[\"expires\"]', '=', 'httputil.format_timestamp(expires)', 'if', 'path:', 'morsel[\"path\"]', '=', 'path', 'if', 'max_age:', 'morsel[\"max-age\"]', '=', 'str(max_age)', 'if', 'httponly:', 'morsel[\"httponly\"]', '=', 'True', 'if', 'secure:', 'morsel[\"secure\"]', '=', 'True', 'if', 'samesite:', 'morsel[\"samesite\"]', '=', 'samesite', 'if', 'kwargs:', 'for', 'k,', 'v', 'in', 'kwargs.items():', 'morsel[k]', '=', 'v', 'warnings.warn(', 'f\"Deprecated', 'arguments', 'to', 'set_cookie:', '{set(kwargs.keys())}', '\"', '\"(should', 'be', 'lowercase)\",', 'DeprecationWarning,', ')', 'def', 'clear_cookie(self,', 'name:', 'str,', '**kwargs:', 'Any)', '->', 'None:', 'for', 'excluded_arg', 'in', '[\"expires\",', '\"max_age\"]:', 'if', 'excluded_arg', 'in', 'kwargs:', 'raise', 'TypeError(', 'f\"clear_cookie()', 'got', 'an', 'unexpected', 'keyword', 'argument', '\\'{excluded_arg}\\'\"', ')', 'expires', '=', 'datetime.datetime.now(datetime.timezone.utc)', '-', 'datetime.timedelta(', 'days=365', ')', 'self.set_cookie(name,', 'value=\"\",', 'expires=expires,', '**kwargs)', 'def', 'clear_all_cookies(self,', '**kwargs:', 'Any)', '->', 'None:', 'for', 'name', 'in', 'self.request.cookies:', 'self.clear_cookie(name,', '**kwargs)', 'def', 'set_signed_cookie(', 'self,', 'name:', 'str,', 'value:', 'Union[str,', 'bytes],', 'expires_days:', 'Optional[float]', '=', '30,', 'version:', 'Optional[int]', '=', 'None,', '**kwargs:', 'Any,', ')', '->', 'None:', 'self.set_cookie(', 'name,', 'self.create_signed_value(name,', 'value,', 'version=version),', 'expires_days=expires_days,', '**kwargs,', ')', 'set_secure_cookie', '=', 'set_signed_cookie', 'def', 'create_signed_value(', 'self,', 'name:', 'str,', 'value:', 'Union[str,', 'bytes],', 'version:', 'Optional[int]', '=', 'None', ')', '->', 'bytes:', 'self.require_setting(\"cookie_secret\",', '\"secure', 'cookies\")', 'secret', '=', 'self.application.settings[\"cookie_secret\"]', 'key_version', '=', 'None', 'if', 'isinstance(secret,', 'dict):', 'if', 'self.application.settings.get(\"key_version\")', 'is', 'None:', 'raise', 'Exception(\"key_version', 'setting', 'must', 'be', 'used', 'for', 'secret_key', 'dicts\")', 'key_version', '=', 'self.application.settings[\"key_version\"]', 'return', 'create_signed_value(', 'secret,', 'name,', 'value,', 'version=version,', 'key_version=key_version', ')', 'def', 'get_signed_cookie(', 'self,', 'name:', 'str,', 'value:', 'Optional[str]', '=', 'None,', 'max_age_days:', 'float', '=', '31,', 'min_version:', 'Optional[int]', '=', 'None,', ')', '->', 'Optional[bytes]:', 'self.require_setting(\"cookie_secret\",', '\"secure', 'cookies\")', 'if', 'value', 'is', 'None:', 'value', '=', 'self.get_cookie(name)', 'return', 'decode_signed_value(', 'self.application.settings[\"cookie_secret\"],', 'name,', 'value,', 'max_age_days=max_age_days,', 'min_version=min_version,', ')', 'get_secure_cookie', '=', 'get_signed_cookie', 'def', 'get_signed_cookie_key_version(', 'self,', 'name:', 'str,', 'value:', 'Optional[str]', '=', 'None', ')', '->', 'Optional[int]:', 'self.require_setting(\"cookie_secret\",', '\"secure', 'cookies\")', 'if', 'value', 'is', 'None:', 'value', '=', 'self.get_cookie(name)', 'if', 'value', 'is', 'None:', 'return', 'None', 'return', 'get_signature_key_version(value)', 'get_secure_cookie_key_version', '=', 'get_signed_cookie_key_version', 'def', 'redirect(', 'self,', 'url:', 'str,', 'permanent:', 'bool', '=', 'False,', 'status:', 'Optional[int]', '=', 'None', ')', '->', 'None:', 'if', 'self._headers_written:', 'raise', 'Exception(\"Cannot', 'redirect', 'after', 'headers', 'have', 'been', 'written\")', 'if', 'status', 'is', 'None:', 'status', '=', '301', 'if', 'permanent', 'else', '302', 'else:', 'assert', 'isinstance(status,', 'int)', 'and', '300', '<=', 'status', '<=', '399', 'self.set_status(status)', 'self.set_header(\"Location\",', 'utf8(url))', 'self.finish()', 'def', 'write(self,', 'chunk:', 'Union[str,', 'bytes,', 'dict])', '->', 'None:', 'if', 'self._finished:', 'raise', 'RuntimeError(\"Cannot', 'write()', 'after', 'finish()\")', 'if', 'not', 'isinstance(chunk,', '(bytes,', 'unicode_type,', 'dict)):', 'message', '=', '\"write()', 'only', 'accepts', 'bytes,', 'unicode,', 'and', 'dict', 'objects\"', 'if', 'isinstance(chunk,', 'list):', 'message', '+=', '(', '\".', 'Lists', 'not', 'accepted', 'for', 'security', 'reasons;', 'see', '\"', '+', '\"http://www.tornadoweb.org/en/stable/web.html', ')', 'raise', 'TypeError(message)', 'if', 'isinstance(chunk,', 'dict):', 'chunk', '=', 'escape.json_encode(chunk)', 'self.set_header(\"Content-Type\",', '\"application/json;', 'charset=UTF-8\")', 'chunk', '=', 'utf8(chunk)', 'self._write_buffer.append(chunk)', 'def', 'render(self,', 'template_name:', 'str,', '**kwargs:', 'Any)', '->', '\"Future[None]\":', 'if', 'self._finished:', 'raise', 'RuntimeError(\"Cannot', 'render()', 'after', 'finish()\")', 'html', '=', 'self.render_string(template_name,', '**kwargs)', 'js_embed', '=', '[]', 'js_files', '=', '[]', 'css_embed', '=', '[]', 'css_files', '=', '[]', 'html_heads', '=', '[]', 'html_bodies', '=', '[]', 'for', 'module', 'in', 'getattr(self,', '\"_active_modules\",', '{}).values():', 'embed_part', '=', 'module.embedded_javascript()', 'if', 'embed_part:', 'js_embed.append(utf8(embed_part))', 'file_part', '=', 'module.javascript_files()', 'if', 'file_part:', 'if', 'isinstance(file_part,', '(unicode_type,', 'bytes)):', 'js_files.append(_unicode(file_part))', 'else:', 'js_files.extend(file_part)', 'embed_part', '=', 'module.embedded_css()', 'if', 'embed_part:', 'css_embed.append(utf8(embed_part))', 'file_part', '=', 'module.css_files()', 'if', 'file_part:', 'if', 'isinstance(file_part,', '(unicode_type,', 'bytes)):', 'css_files.append(_unicode(file_part))', 'else:', 'css_files.extend(file_part)', 'head_part', '=', 'module.html_head()', 'if', 'head_part:', 'html_heads.append(utf8(head_part))', 'body_part', '=', 'module.html_body()', 'if', 'body_part:', 'html_bodies.append(utf8(body_part))', 'if', 'js_files:', 'js', '=', 'self.render_linked_js(js_files)', 'sloc', '=', 'html.rindex(b\"</body>\")', 'html', '=', 'html[:sloc]', '+', 'utf8(js)', '+', 'b\"\\\\n\"', '+', 'html[sloc:]', 'if', 'js_embed:', 'js_bytes', '=', 'self.render_embed_js(js_embed)', 'sloc', '=', 'html.rindex(b\"</body>\")', 'html', '=', 'html[:sloc]', '+', 'js_bytes', '+', 'b\"\\\\n\"', '+', 'html[sloc:]', 'if', 'css_files:', 'css', '=', 'self.render_linked_css(css_files)', 'hloc', '=', 'html.index(b\"</head>\")', 'html', '=', 'html[:hloc]', '+', 'utf8(css)', '+', 'b\"\\\\n\"', '+', 'html[hloc:]', 'if', 'css_embed:', 'css_bytes', '=', 'self.render_embed_css(css_embed)', 'hloc', '=', 'html.index(b\"</head>\")', 'html', '=', 'html[:hloc]', '+', 'css_bytes', '+', 'b\"\\\\n\"', '+', 'html[hloc:]', 'if', 'html_heads:', 'hloc', '=', 'html.index(b\"</head>\")', 'html', '=', 'html[:hloc]', '+', 'b\"\".join(html_heads)', '+', 'b\"\\\\n\"', '+', 'html[hloc:]', 'if', 'html_bodies:', 'hloc', '=', 'html.index(b\"</body>\")', 'html', '=', 'html[:hloc]', '+', 'b\"\".join(html_bodies)', '+', 'b\"\\\\n\"', '+', 'html[hloc:]', 'return', 'self.finish(html)', 'def', 'render_linked_js(self,', 'js_files:', 'Iterable[str])', '->', 'str:', 'paths', '=', '[]', 'unique_paths', '=', 'set()', 'for', 'path', 'in', 'js_files:', 'if', 'not', 'is_absolute(path):', 'path', '=', 'self.static_url(path)', 'if', 'path', 'not', 'in', 'unique_paths:', 'paths.append(path)', 'unique_paths.add(path)', 'return', '\"\".join(', \"'<script\", 'src=\"\\'', '+', 'escape.xhtml_escape(p)', '+', '\\'\"', 'type=\"text/javascript\"></script>\\'', 'for', 'p', 'in', 'paths', ')', 'def', 'render_embed_js(self,', 'js_embed:', 'Iterable[bytes])', '->', 'bytes:', 'return', '(', \"b'<script\", 'type=\"text/javascript\">\\\\n//<![CDATA[\\\\n\\'', '+', 'b\"\\\\n\".join(js_embed)', '+', 'b\"\\\\n//]]>\\\\n</script>\"', ')', 'def', 'render_linked_css(self,', 'css_files:', 'Iterable[str])', '->', 'str:', 'paths', '=', '[]', 'unique_paths', '=', 'set()', 'for', 'path', 'in', 'css_files:', 'if', 'not', 'is_absolute(path):', 'path', '=', 'self.static_url(path)', 'if', 'path', 'not', 'in', 'unique_paths:', 'paths.append(path)', 'unique_paths.add(path)', 'return', '\"\".join(', \"'<link\", 'href=\"\\'', '+', 'escape.xhtml_escape(p)', '+', '\\'\"', \"'\", '\\'type=\"text/css\"', 'rel=\"stylesheet\"/>\\'', 'for', 'p', 'in', 'paths', ')', 'def', 'render_embed_css(self,', 'css_embed:', 'Iterable[bytes])', '->', 'bytes:', 'return', \"b'<style\", 'type=\"text/css\">\\\\n\\'', '+', 'b\"\\\\n\".join(css_embed)', '+', 'b\"\\\\n</style>\"', 'def', 'render_string(self,', 'template_name:', 'str,', '**kwargs:', 'Any)', '->', 'bytes:', 'template_path', '=', 'self.get_template_path()', 'if', 'not', 'template_path:', 'frame', '=', 'sys._getframe(0)', 'web_file', '=', 'frame.f_code.co_filename', 'while', 'frame.f_code.co_filename', '==', 'web_file', 'and', 'frame.f_back', 'is', 'not', 'None:', 'frame', '=', 'frame.f_back', 'assert', 'frame.f_code.co_filename', 'is', 'not', 'None', 'template_path', '=', 'os.path.dirname(frame.f_code.co_filename)', 'with', 'RequestHandler._template_loader_lock:', 'if', 'template_path', 'not', 'in', 'RequestHandler._template_loaders:', 'loader', '=', 'self.create_template_loader(template_path)', 'RequestHandler._template_loaders[template_path]', '=', 'loader', 'else:', 'loader', '=', 'RequestHandler._template_loaders[template_path]', 't', '=', 'loader.load(template_name)', 'namespace', '=', 'self.get_template_namespace()', 'namespace.update(kwargs)', 'return', 't.generate(**namespace)', 'def', 'get_template_namespace(self)', '->', 'Dict[str,', 'Any]:', 'namespace', '=', 'dict(', 'handler=self,', 'request=self.request,', 'current_user=self.current_user,', 'locale=self.locale,', '_=self.locale.translate,', 'pgettext=self.locale.pgettext,', 'static_url=self.static_url,', 'xsrf_form_html=self.xsrf_form_html,', 'reverse_url=self.reverse_url,', ')', 'namespace.update(self.ui)', 'return', 'namespace', 'def', 'create_template_loader(self,', 'template_path:', 'str)', '->', 'template.BaseLoader:', 'settings', '=', 'self.application.settings', 'if', '\"template_loader\"', 'in', 'settings:', 'return', 'settings[\"template_loader\"]', 'kwargs', '=', '{}', 'if', '\"autoescape\"', 'in', 'settings:', 'kwargs[\"autoescape\"]', '=', 'settings[\"autoescape\"]', 'if', '\"template_whitespace\"', 'in', 'settings:', 'kwargs[\"whitespace\"]', '=', 'settings[\"template_whitespace\"]', 'return', 'template.Loader(template_path,', '**kwargs)', 'def', 'flush(self,', 'include_footers:', 'bool', '=', 'False)', '->', '\"Future[None]\":', 'assert', 'self.request.connection', 'is', 'not', 'None', 'chunk', '=', 'b\"\".join(self._write_buffer)', 'self._write_buffer', '=', '[]', 'if', 'not', 'self._headers_written:', 'self._headers_written', '=', 'True', 'for', 'transform', 'in', 'self._transforms:', 'assert', 'chunk', 'is', 'not', 'None', '(', 'self._status_code,', 'self._headers,', 'chunk,', ')', '=', 'transform.transform_first_chunk(', 'self._status_code,', 'self._headers,', 'chunk,', 'include_footers', ')', 'if', 'self.request.method', '==', '\"HEAD\":', 'chunk', '=', 'b\"\"', 'if', 'hasattr(self,', '\"_new_cookie\"):', 'for', 'cookie', 'in', 'self._new_cookie.values():', 'self.add_header(\"Set-Cookie\",', 'cookie.OutputString(None))', 'start_line', '=', 'httputil.ResponseStartLine(\"\",', 'self._status_code,', 'self._reason)', 'return', 'self.request.connection.write_headers(', 'start_line,', 'self._headers,', 'chunk', ')', 'else:', 'for', 'transform', 'in', 'self._transforms:', 'chunk', '=', 'transform.transform_chunk(chunk,', 'include_footers)', 'if', 'self.request.method', '!=', '\"HEAD\":', 'return', 'self.request.connection.write(chunk)', 'else:', 'future', '=', 'Future()', 'future.set_result(None)', 'return', 'future', 'def', 'finish(self,', 'chunk:', 'Optional[Union[str,', 'bytes,', 'dict]]', '=', 'None)', '->', '\"Future[None]\":', 'if', 'self._finished:', 'raise', 'RuntimeError(\"finish()', 'called', 'twice\")', 'if', 'chunk', 'is', 'not', 'None:', 'self.write(chunk)', 'if', 'not', 'self._headers_written:', 'if', '(', 'self._status_code', '==', '200', 'and', 'self.request.method', 'in', '(\"GET\",', '\"HEAD\")', 'and', '\"Etag\"', 'not', 'in', 'self._headers', '):', 'self.set_etag_header()', 'if', 'self.check_etag_header():', 'self._write_buffer', '=', '[]', 'self.set_status(304)', 'if', 'self._status_code', 'in', '(204,', '304)', 'or', '(100', '<=', 'self._status_code', '<', '200):', 'assert', 'not', 'self._write_buffer,', '(', '\"Cannot', 'send', 'body', 'with', '%s\"', '%', 'self._status_code', ')', 'self._clear_representation_headers()', 'elif', '\"Content-Length\"', 'not', 'in', 'self._headers:', 'content_length', '=', 'sum(len(part)', 'for', 'part', 'in', 'self._write_buffer)', 'self.set_header(\"Content-Length\",', 'content_length)', 'assert', 'self.request.connection', 'is', 'not', 'None', 'self.request.connection.set_close_callback(None)', 'future', '=', 'self.flush(include_footers=True)', 'self.request.connection.finish()', 'self._log()', 'self._finished', '=', 'True', 'self.on_finish()', 'self._break_cycles()', 'return', 'future', 'def', 'detach(self)', '->', 'iostream.IOStream:', 'self._finished', '=', 'True', 'return', 'self.request.connection.detach()', 'def', '_break_cycles(self)', '->', 'None:', 'self.ui', '=', 'None', 'def', 'send_error(self,', 'status_code:', 'int', '=', '500,', '**kwargs:', 'Any)', '->', 'None:', 'if', 'self._headers_written:', 'gen_log.error(\"Cannot', 'send', 'error', 'response', 'after', 'headers', 'written\")', 'if', 'not', 'self._finished:', 'try:', 'self.finish()', 'except', 'Exception:', 'gen_log.error(\"Failed', 'to', 'flush', 'partial', 'response\",', 'exc_info=True)', 'return', 'self.clear()', 'reason', '=', 'kwargs.get(\"reason\")', 'if', '\"exc_info\"', 'in', 'kwargs:', 'exception', '=', 'kwargs[\"exc_info\"][1]', 'if', 'isinstance(exception,', 'HTTPError)', 'and', 'exception.reason:', 'reason', '=', 'exception.reason', 'self.set_status(status_code,', 'reason=reason)', 'try:', 'self.write_error(status_code,', '**kwargs)', 'except', 'Exception:', 'app_log.error(\"Uncaught', 'exception', 'in', 'write_error\",', 'exc_info=True)', 'if', 'not', 'self._finished:', 'self.finish()', 'def', 'write_error(self,', 'status_code:', 'int,', '**kwargs:', 'Any)', '->', 'None:', 'if', 'self.settings.get(\"serve_traceback\")', 'and', '\"exc_info\"', 'in', 'kwargs:', 'self.set_header(\"Content-Type\",', '\"text/plain\")', 'for', 'line', 'in', 'traceback.format_exception(*kwargs[\"exc_info\"]):', 'self.write(line)', 'self.finish()', 'else:', 'self.finish(', '\"<html><title>%(code)d:', '%(message)s</title>\"', '\"<body>%(code)d:', '%(message)s</body></html>\"', '%', '{\"code\":', 'status_code,', '\"message\":', 'self._reason}', ')', '@property', 'def', 'locale(self)', '->', 'tornado.locale.Locale:', 'if', 'not', 'hasattr(self,', '\"_locale\"):', 'loc', '=', 'self.get_user_locale()', 'if', 'loc', 'is', 'not', 'None:', 'self._locale', '=', 'loc', 'else:', 'self._locale', '=', 'self.get_browser_locale()', 'assert', 'self._locale', 'return', 'self._locale', '@locale.setter', 'def', 'locale(self,', 'value:', 'tornado.locale.Locale)', '->', 'None:', 'self._locale', '=', 'value', 'def', 'get_user_locale(self)', '->', 'Optional[tornado.locale.Locale]:', 'return', 'None', 'def', 'get_browser_locale(self,', 'default:', 'str', '=', '\"en_US\")', '->', 'tornado.locale.Locale:', 'if', '\"Accept-Language\"', 'in', 'self.request.headers:', 'languages', '=', 'self.request.headers[\"Accept-Language\"].split(\",\")', 'locales', '=', '[]', 'for', 'language', 'in', 'languages:', 'parts', '=', 'language.strip().split(\";\")', 'if', 'len(parts)', '>', '1', 'and', 'parts[1].strip().startswith(\"q=\"):', 'try:', 'score', '=', 'float(parts[1].strip()[2:])', 'if', 'score', '<', '0:', 'raise', 'ValueError()', 'except', '(ValueError,', 'TypeError):', 'score', '=', '0.0', 'else:', 'score', '=', '1.0', 'if', 'score', '>', '0:', 'locales.append((parts[0],', 'score))', 'if', 'locales:', 'locales.sort(key=lambda', 'pair:', 'pair[1],', 'reverse=True)', 'codes', '=', '[loc[0]', 'for', 'loc', 'in', 'locales]', 'return', 'locale.get(*codes)', 'return', 'locale.get(default)', '@property', 'def', 'current_user(self)', '->', 'Any:', 'if', 'not', 'hasattr(self,', '\"_current_user\"):', 'self._current_user', '=', 'self.get_current_user()', 'return', 'self._current_user', '@current_user.setter', 'def', 'current_user(self,', 'value:', 'Any)', '->', 'None:', 'self._current_user', '=', 'value', 'def', 'get_current_user(self)', '->', 'Any:', 'return', 'None', 'def', 'get_login_url(self)', '->', 'str:', 'self.require_setting(\"login_url\",', '\"@tornado.web.authenticated\")', 'return', 'self.application.settings[\"login_url\"]', 'def', 'get_template_path(self)', '->', 'Optional[str]:', 'return', 'self.application.settings.get(\"template_path\")', '@property', 'def', 'xsrf_token(self)', '->', 'bytes:', 'if', 'not', 'hasattr(self,', '\"_xsrf_token\"):', 'version,', 'token,', 'timestamp', '=', 'self._get_raw_xsrf_token()', 'output_version', '=', 'self.settings.get(\"xsrf_cookie_version\",', '2)', 'cookie_kwargs', '=', 'self.settings.get(\"xsrf_cookie_kwargs\",', '{})', 'if', 'output_version', '==', '1:', 'self._xsrf_token', '=', 'binascii.b2a_hex(token)', 'elif', 'output_version', '==', '2:', 'mask', '=', 'os.urandom(4)', 'self._xsrf_token', '=', 'b\"|\".join(', '[', 'b\"2\",', 'binascii.b2a_hex(mask),', 'binascii.b2a_hex(_websocket_mask(mask,', 'token)),', 'utf8(str(int(timestamp))),', ']', ')', 'else:', 'raise', 'ValueError(\"unknown', 'xsrf', 'cookie', 'version', '%d\",', 'output_version)', 'if', 'version', 'is', 'None:', 'if', 'self.current_user', 'and', '\"expires_days\"', 'not', 'in', 'cookie_kwargs:', 'cookie_kwargs[\"expires_days\"]', '=', '30', 'cookie_name', '=', 'self.settings.get(\"xsrf_cookie_name\",', '\"_xsrf\")', 'self.set_cookie(cookie_name,', 'self._xsrf_token,', '**cookie_kwargs)', 'return', 'self._xsrf_token', 'def', '_get_raw_xsrf_token(self)', '->', 'Tuple[Optional[int],', 'bytes,', 'float]:', 'if', 'not', 'hasattr(self,', '\"_raw_xsrf_token\"):', 'cookie_name', '=', 'self.settings.get(\"xsrf_cookie_name\",', '\"_xsrf\")', 'cookie', '=', 'self.get_cookie(cookie_name)', 'if', 'cookie:', 'version,', 'token,', 'timestamp', '=', 'self._decode_xsrf_token(cookie)', 'else:', 'version,', 'token,', 'timestamp', '=', 'None,', 'None,', 'None', 'if', 'token', 'is', 'None:', 'version', '=', 'None', 'token', '=', 'os.urandom(16)', 'timestamp', '=', 'time.time()', 'assert', 'token', 'is', 'not', 'None', 'assert', 'timestamp', 'is', 'not', 'None', 'self._raw_xsrf_token', '=', '(version,', 'token,', 'timestamp)', 'return', 'self._raw_xsrf_token', 'def', '_decode_xsrf_token(', 'self,', 'cookie:', 'str', ')', '->', 'Tuple[Optional[int],', 'Optional[bytes],', 'Optional[float]]:', 'try:', 'm', '=', '_signed_value_version_re.match(utf8(cookie))', 'if', 'm:', 'version', '=', 'int(m.group(1))', 'if', 'version', '==', '2:', '_,', 'mask_str,', 'masked_token,', 'timestamp_str', '=', 'cookie.split(\"|\")', 'mask', '=', 'binascii.a2b_hex(utf8(mask_str))', 'token', '=', '_websocket_mask(mask,', 'binascii.a2b_hex(utf8(masked_token)))', 'timestamp', '=', 'int(timestamp_str)', 'return', 'version,', 'token,', 'timestamp', 'else:', 'raise', 'Exception(\"Unknown', 'xsrf', 'cookie', 'version\")', 'else:', 'version', '=', '1', 'try:', 'token', '=', 'binascii.a2b_hex(utf8(cookie))', 'except', '(binascii.Error,', 'TypeError):', 'token', '=', 'utf8(cookie)', 'timestamp', '=', 'int(time.time())', 'return', '(version,', 'token,', 'timestamp)', 'except', 'Exception:', 'gen_log.debug(\"Uncaught', 'exception', 'in', '_decode_xsrf_token\",', 'exc_info=True)', 'return', 'None,', 'None,', 'None', 'def', 'check_xsrf_cookie(self)', '->', 'None:', 'token', '=', '(', 'self.get_argument(\"_xsrf\",', 'None)', 'or', 'self.request.headers.get(\"X-Xsrftoken\")', 'or', 'self.request.headers.get(\"X-Csrftoken\")', ')', 'if', 'not', 'token:', 'raise', 'HTTPError(403,', '\"\\'_xsrf\\'', 'argument', 'missing', 'from', 'POST\")', '_,', 'token,', '_', '=', 'self._decode_xsrf_token(token)', '_,', 'expected_token,', '_', '=', 'self._get_raw_xsrf_token()', 'if', 'not', 'token:', 'raise', 'HTTPError(403,', '\"\\'_xsrf\\'', 'argument', 'has', 'invalid', 'format\")', 'if', 'not', 'hmac.compare_digest(utf8(token),', 'utf8(expected_token)):', 'raise', 'HTTPError(403,', '\"XSRF', 'cookie', 'does', 'not', 'match', 'POST', 'argument\")', 'def', 'xsrf_form_html(self)', '->', 'str:', 'return', '(', \"'<input\", 'type=\"hidden\"', 'name=\"_xsrf\"', 'value=\"\\'', '+', 'escape.xhtml_escape(self.xsrf_token)', '+', '\\'\"/>\\'', ')', 'def', 'static_url(', 'self,', 'path:', 'str,', 'include_host:', 'Optional[bool]', '=', 'None,', '**kwargs:', 'Any', ')', '->', 'str:', 'self.require_setting(\"static_path\",', '\"static_url\")', 'get_url', '=', 'self.settings.get(', '\"static_handler_class\",', 'StaticFileHandler', ').make_static_url', 'if', 'include_host', 'is', 'None:', 'include_host', '=', 'getattr(self,', '\"include_host\",', 'False)', 'if', 'include_host:', 'base', '=', 'self.request.protocol', '+', '\"://\"', '+', 'self.request.host', 'else:', 'base', '=', '\"\"', 'return', 'base', '+', 'get_url(self.settings,', 'path,', '**kwargs)', 'def', 'require_setting(self,', 'name:', 'str,', 'feature:', 'str', '=', '\"this', 'feature\")', '->', 'None:', 'if', 'not', 'self.application.settings.get(name):', 'raise', 'Exception(', '\"You', 'must', 'define', 'the', \"'%s'\", 'setting', 'in', 'your', '\"', '\"application', 'to', 'use', '%s\"', '%', '(name,', 'feature)', ')', 'def', 'reverse_url(self,', 'name:', 'str,', '*args:', 'Any)', '->', 'str:', 'return', 'self.application.reverse_url(name,', '*args)', 'def', 'compute_etag(self)', '->', 'Optional[str]:', 'hasher', '=', 'hashlib.sha1()', 'for', 'part', 'in', 'self._write_buffer:', 'hasher.update(part)', 'return', '\\'\"%s\"\\'', '%', 'hasher.hexdigest()', 'def', 'set_etag_header(self)', '->', 'None:', 'etag', '=', 'self.compute_etag()', 'if', 'etag', 'is', 'not', 'None:', 'self.set_header(\"Etag\",', 'etag)', 'def', 'check_etag_header(self)', '->', 'bool:', 'computed_etag', '=', 'utf8(self._headers.get(\"Etag\",', '\"\"))', 'etags', '=', 're.findall(', 'rb\\'\\\\*|(?:W/)?\"[^\"]*\"\\',', 'utf8(self.request.headers.get(\"If-None-Match\",', '\"\"))', ')', 'if', 'not', 'computed_etag', 'or', 'not', 'etags:', 'return', 'False', 'match', '=', 'False', 'if', 'etags[0]', '==', 'b\"*\":', 'match', '=', 'True', 'else:', 'def', 'val(x:', 'bytes)', '->', 'bytes:', 'return', 'x[2:]', 'if', 'x.startswith(b\"W/\")', 'else', 'x', 'for', 'etag', 'in', 'etags:', 'if', 'val(etag)', '==', 'val(computed_etag):', 'match', '=', 'True', 'break', 'return', 'match', 'async', 'def', '_execute(', 'self,', 'transforms:', 'List[\"OutputTransform\"],', '*args:', 'bytes,', '**kwargs:', 'bytes', ')', '->', 'None:', 'self._transforms', '=', 'transforms', 'try:', 'if', 'self.request.method', 'not', 'in', 'self.SUPPORTED_METHODS:', 'raise', 'HTTPError(405)', 'self.path_args', '=', '[self.decode_argument(arg)', 'for', 'arg', 'in', 'args]', 'self.path_kwargs', '=', 'dict(', '(k,', 'self.decode_argument(v,', 'name=k))', 'for', '(k,', 'v)', 'in', 'kwargs.items()', ')', 'if', 'self.request.method', 'not', 'in', '(', '\"GET\",', '\"HEAD\",', '\"OPTIONS\",', ')', 'and', 'self.application.settings.get(\"xsrf_cookies\"):', 'self.check_xsrf_cookie()', 'result', '=', 'self.prepare()', 'if', 'result', 'is', 'not', 'None:', 'result', '=', 'await', 'result', 'if', 'self._prepared_future', 'is', 'not', 'None:', 'future_set_result_unless_cancelled(self._prepared_future,', 'None)', 'if', 'self._finished:', 'return', 'if', '_has_stream_request_body(self.__class__):', 'try:', 'await', 'self.request._body_future', 'except', 'iostream.StreamClosedError:', 'return', 'method', '=', 'getattr(self,', 'self.request.method.lower())', 'result', '=', 'method(*self.path_args,', '**self.path_kwargs)', 'if', 'result', 'is', 'not', 'None:', 'result', '=', 'await', 'result', 'if', 'self._auto_finish', 'and', 'not', 'self._finished:', 'self.finish()', 'except', 'Exception', 'as', 'e:', 'try:', 'self._handle_request_exception(e)', 'except', 'Exception:', 'app_log.error(\"Exception', 'in', 'exception', 'handler\",', 'exc_info=True)', 'finally:', 'result', '=', 'None', 'if', 'self._prepared_future', 'is', 'not', 'None', 'and', 'not', 'self._prepared_future.done():', 'self._prepared_future.set_result(None)', 'def', 'data_received(self,', 'chunk:', 'bytes)', '->', 'Optional[Awaitable[None]]:', 'raise', 'NotImplementedError()', 'def', '_log(self)', '->', 'None:', 'self.application.log_request(self)', 'def', '_request_summary(self)', '->', 'str:', 'return', '\"%s', '%s', '(%s)\"', '%', '(', 'self.request.method,', 'self.request.uri,', 'self.request.remote_ip,', ')', 'def', '_handle_request_exception(self,', 'e:', 'BaseException)', '->', 'None:', 'if', 'isinstance(e,', 'Finish):', 'if', 'not', 'self._finished:', 'self.finish(*e.args)', 'return', 'try:', 'self.log_exception(*sys.exc_info())', 'except', 'Exception:', 'app_log.error(\"Error', 'in', 'exception', 'logger\",', 'exc_info=True)', 'if', 'self._finished:', 'return', 'if', 'isinstance(e,', 'HTTPError):', 'self.send_error(e.status_code,', 'exc_info=sys.exc_info())', 'else:', 'self.send_error(500,', 'exc_info=sys.exc_info())', 'def', 'log_exception(', 'self,', 'typ:', '\"Optional[Type[BaseException]]\",', 'value:', 'Optional[BaseException],', 'tb:', 'Optional[TracebackType],', ')', '->', 'None:', 'if', 'isinstance(value,', 'HTTPError):', 'if', 'value.log_message:', 'format', '=', '\"%d', '%s:', '\"', '+', 'value.log_message', 'args', '=', '[value.status_code,', 'self._request_summary()]', '+', 'list(value.args)', 'gen_log.warning(format,', '*args)', 'else:', 'app_log.error(', '\"Uncaught', 'exception', '%s\\\\n%r\",', 'self._request_summary(),', 'self.request,', 'exc_info=(typ,', 'value,', 'tb),', ')', 'def', '_ui_module(self,', 'name:', 'str,', 'module:', 'Type[\"UIModule\"])', '->', 'Callable[...,', 'str]:', 'def', 'render(*args,', '**kwargs)', '->', 'str:', 'if', 'not', 'hasattr(self,', '\"_active_modules\"):', 'self._active_modules', '=', '{}', 'if', 'name', 'not', 'in', 'self._active_modules:', 'self._active_modules[name]', '=', 'module(self)', 'rendered', '=', 'self._active_modules[name].render(*args,', '**kwargs)', 'return', 'rendered', 'return', 'render', 'def', '_ui_method(self,', 'method:', 'Callable[...,', 'str])', '->', 'Callable[...,', 'str]:', 'return', 'lambda', '*args,', '**kwargs:', 'method(self,', '*args,', '**kwargs)', 'def', '_clear_representation_headers(self)', '->', 'None:', 'headers', '=', '[\"Content-Encoding\",', '\"Content-Language\",', '\"Content-Type\"]', 'for', 'h', 'in', 'headers:', 'self.clear_header(h)', '_RequestHandlerType', '=', 'TypeVar(\"_RequestHandlerType\",', 'bound=RequestHandler)', 'def', 'stream_request_body(cls:', 'Type[_RequestHandlerType])', '->', 'Type[_RequestHandlerType]:', 'if', 'not', 'issubclass(cls,', 'RequestHandler):', 'raise', 'TypeError(\"expected', 'subclass', 'of', 'RequestHandler,', 'got', '%r\",', 'cls)', 'cls._stream_request_body', '=', 'True', 'return', 'cls', 'def', '_has_stream_request_body(cls:', 'Type[RequestHandler])', '->', 'bool:', 'if', 'not', 'issubclass(cls,', 'RequestHandler):', 'raise', 'TypeError(\"expected', 'subclass', 'of', 'RequestHandler,', 'got', '%r\",', 'cls)', 'return', 'cls._stream_request_body', 'def', 'removeslash(', 'method:', 'Callable[...,', 'Optional[Awaitable[None]]]', ')', '->', 'Callable[...,', 'Optional[Awaitable[None]]]:', '@functools.wraps(method)', 'def', 'wrapper(', 'self:', 'RequestHandler,', '*args,', '**kwargs', ')', '->', 'Optional[Awaitable[None]]:', 'if', 'self.request.path.endswith(\"/\"):', 'if', 'self.request.method', 'in', '(\"GET\",', '\"HEAD\"):', 'uri', '=', 'self.request.path.rstrip(\"/\")', 'if', 'uri:', 'if', 'self.request.query:', 'uri', '+=', '\"?\"', '+', 'self.request.query', 'self.redirect(uri,', 'permanent=True)', 'return', 'None', 'else:', 'raise', 'HTTPError(404)', 'return', 'method(self,', '*args,', '**kwargs)', 'return', 'wrapper', 'def', 'addslash(', 'method:', 'Callable[...,', 'Optional[Awaitable[None]]]', ')', '->', 'Callable[...,', 'Optional[Awaitable[None]]]:', '@functools.wraps(method)', 'def', 'wrapper(', 'self:', 'RequestHandler,', '*args,', '**kwargs', ')', '->', 'Optional[Awaitable[None]]:', 'if', 'not', 'self.request.path.endswith(\"/\"):', 'if', 'self.request.method', 'in', '(\"GET\",', '\"HEAD\"):', 'uri', '=', 'self.request.path', '+', '\"/\"', 'if', 'self.request.query:', 'uri', '+=', '\"?\"', '+', 'self.request.query', 'self.redirect(uri,', 'permanent=True)', 'return', 'None', 'raise', 'HTTPError(404)', 'return', 'method(self,', '*args,', '**kwargs)', 'return', 'wrapper', 'class', '_ApplicationRouter(ReversibleRuleRouter):', 'def', '__init__(', 'self,', 'application:', '\"Application\",', 'rules:', 'Optional[_RuleList]', '=', 'None', ')', '->', 'None:', 'assert', 'isinstance(application,', 'Application)', 'self.application', '=', 'application', 'super().__init__(rules)', 'def', 'process_rule(self,', 'rule:', 'Rule)', '->', 'Rule:', 'rule', '=', 'super().process_rule(rule)', 'if', 'isinstance(rule.target,', '(list,', 'tuple)):', 'rule.target', '=', '_ApplicationRouter(', 'self.application,', 'rule.target', ')', 'return', 'rule', 'def', 'get_target_delegate(', 'self,', 'target:', 'Any,', 'request:', 'httputil.HTTPServerRequest,', '**target_params:', 'Any', ')', '->', 'Optional[httputil.HTTPMessageDelegate]:', 'if', 'isclass(target)', 'and', 'issubclass(target,', 'RequestHandler):', 'return', 'self.application.get_handler_delegate(', 'request,', 'target,', '**target_params', ')', 'return', 'super().get_target_delegate(target,', 'request,', '**target_params)', 'class', 'Application(ReversibleRouter):', 'r', 'def', '__init__(', 'self,', 'handlers:', 'Optional[_RuleList]', '=', 'None,', 'default_host:', 'Optional[str]', '=', 'None,', 'transforms:', 'Optional[List[Type[\"OutputTransform\"]]]', '=', 'None,', '**settings:', 'Any,', ')', '->', 'None:', 'if', 'transforms', 'is', 'None:', 'self.transforms', '=', '[]', 'if', 'settings.get(\"compress_response\")', 'or', 'settings.get(\"gzip\"):', 'self.transforms.append(GZipContentEncoding)', 'else:', 'self.transforms', '=', 'transforms', 'self.default_host', '=', 'default_host', 'self.settings', '=', 'settings', 'self.ui_modules', '=', '{', '\"linkify\":', '_linkify,', '\"xsrf_form_html\":', '_xsrf_form_html,', '\"Template\":', 'TemplateModule,', '}', 'self.ui_methods', '=', '{}', 'self._load_ui_modules(settings.get(\"ui_modules\",', '{}))', 'self._load_ui_methods(settings.get(\"ui_methods\",', '{}))', 'if', 'self.settings.get(\"static_path\"):', 'path', '=', 'self.settings[\"static_path\"]', 'handlers', '=', 'list(handlers', 'or', '[])', 'static_url_prefix', '=', 'settings.get(\"static_url_prefix\",', '\"/static/\")', 'static_handler_class', '=', 'settings.get(', '\"static_handler_class\",', 'StaticFileHandler', ')', 'static_handler_args', '=', 'settings.get(\"static_handler_args\",', '{})', 'static_handler_args[\"path\"]', '=', 'path', 'for', 'pattern', 'in', '[', 're.escape(static_url_prefix)', '+', 'r\"(.*)\",', 'r\"/(favicon\\\\.ico)\",', 'r\"/(robots\\\\.txt)\",', ']:', 'handlers.insert(0,', '(pattern,', 'static_handler_class,', 'static_handler_args))', 'if', 'self.settings.get(\"debug\"):', 'self.settings.setdefault(\"autoreload\",', 'True)', 'self.settings.setdefault(\"compiled_template_cache\",', 'False)', 'self.settings.setdefault(\"static_hash_cache\",', 'False)', 'self.settings.setdefault(\"serve_traceback\",', 'True)', 'self.wildcard_router', '=', '_ApplicationRouter(self,', 'handlers)', 'self.default_router', '=', '_ApplicationRouter(', 'self,', '[Rule(AnyMatches(),', 'self.wildcard_router)]', ')', 'if', 'self.settings.get(\"autoreload\"):', 'from', 'tornado', 'import', 'autoreload', 'autoreload.start()', 'def', 'listen(', 'self,', 'port:', 'int,', 'address:', 'Optional[str]', '=', 'None,', '*,', 'family:', 'socket.AddressFamily', '=', 'socket.AF_UNSPEC,', 'backlog:', 'int', '=', 'tornado.netutil._DEFAULT_BACKLOG,', 'flags:', 'Optional[int]', '=', 'None,', 'reuse_port:', 'bool', '=', 'False,', '**kwargs:', 'Any,', ')', '->', 'HTTPServer:', 'server', '=', 'HTTPServer(self,', '**kwargs)', 'server.listen(', 'port,', 'address=address,', 'family=family,', 'backlog=backlog,', 'flags=flags,', 'reuse_port=reuse_port,', ')', 'return', 'server', 'def', 'add_handlers(self,', 'host_pattern:', 'str,', 'host_handlers:', '_RuleList)', '->', 'None:', 'host_matcher', '=', 'HostMatches(host_pattern)', 'rule', '=', 'Rule(host_matcher,', '_ApplicationRouter(self,', 'host_handlers))', 'self.default_router.rules.insert(-1,', 'rule)', 'if', 'self.default_host', 'is', 'not', 'None:', 'self.wildcard_router.add_rules(', '[(DefaultHostMatches(self,', 'host_matcher.host_pattern),', 'host_handlers)]', ')', 'def', 'add_transform(self,', 'transform_class:', 'Type[\"OutputTransform\"])', '->', 'None:', 'self.transforms.append(transform_class)', 'def', '_load_ui_methods(self,', 'methods:', 'Any)', '->', 'None:', 'if', 'isinstance(methods,', 'types.ModuleType):', 'self._load_ui_methods(dict((n,', 'getattr(methods,', 'n))', 'for', 'n', 'in', 'dir(methods)))', 'elif', 'isinstance(methods,', 'list):', 'for', 'm', 'in', 'methods:', 'self._load_ui_methods(m)', 'else:', 'for', 'name,', 'fn', 'in', 'methods.items():', 'if', '(', 'not', 'name.startswith(\"_\")', 'and', 'hasattr(fn,', '\"__call__\")', 'and', 'name[0].lower()', '==', 'name[0]', '):', 'self.ui_methods[name]', '=', 'fn', 'def', '_load_ui_modules(self,', 'modules:', 'Any)', '->', 'None:', 'if', 'isinstance(modules,', 'types.ModuleType):', 'self._load_ui_modules(dict((n,', 'getattr(modules,', 'n))', 'for', 'n', 'in', 'dir(modules)))', 'elif', 'isinstance(modules,', 'list):', 'for', 'm', 'in', 'modules:', 'self._load_ui_modules(m)', 'else:', 'assert', 'isinstance(modules,', 'dict)', 'for', 'name,', 'cls', 'in', 'modules.items():', 'try:', 'if', 'issubclass(cls,', 'UIModule):', 'self.ui_modules[name]', '=', 'cls', 'except', 'TypeError:', 'pass', 'def', '__call__(', 'self,', 'request:', 'httputil.HTTPServerRequest', ')', '->', 'Optional[Awaitable[None]]:', 'dispatcher', '=', 'self.find_handler(request)', 'return', 'dispatcher.execute()', 'def', 'find_handler(', 'self,', 'request:', 'httputil.HTTPServerRequest,', '**kwargs:', 'Any', ')', '->', '\"_HandlerDelegate\":', 'route', '=', 'self.default_router.find_handler(request)', 'if', 'route', 'is', 'not', 'None:', 'return', 'cast(\"_HandlerDelegate\",', 'route)', 'if', 'self.settings.get(\"default_handler_class\"):', 'return', 'self.get_handler_delegate(', 'request,', 'self.settings[\"default_handler_class\"],', 'self.settings.get(\"default_handler_args\",', '{}),', ')', 'return', 'self.get_handler_delegate(request,', 'ErrorHandler,', '{\"status_code\":', '404})', 'def', 'get_handler_delegate(', 'self,', 'request:', 'httputil.HTTPServerRequest,', 'target_class:', 'Type[RequestHandler],', 'target_kwargs:', 'Optional[Dict[str,', 'Any]]', '=', 'None,', 'path_args:', 'Optional[List[bytes]]', '=', 'None,', 'path_kwargs:', 'Optional[Dict[str,', 'bytes]]', '=', 'None,', ')', '->', '\"_HandlerDelegate\":', 'return', '_HandlerDelegate(', 'self,', 'request,', 'target_class,', 'target_kwargs,', 'path_args,', 'path_kwargs', ')', 'def', 'reverse_url(self,', 'name:', 'str,', '*args:', 'Any)', '->', 'str:', 'reversed_url', '=', 'self.default_router.reverse_url(name,', '*args)', 'if', 'reversed_url', 'is', 'not', 'None:', 'return', 'reversed_url', 'raise', 'KeyError(\"%s', 'not', 'found', 'in', 'named', 'urls\"', '%', 'name)', 'def', 'log_request(self,', 'handler:', 'RequestHandler)', '->', 'None:', 'if', '\"log_function\"', 'in', 'self.settings:', 'self.settings[\"log_function\"](handler)', 'return', 'if', 'handler.get_status()', '<', '400:', 'log_method', '=', 'access_log.info', 'elif', 'handler.get_status()', '<', '500:', 'log_method', '=', 'access_log.warning', 'else:', 'log_method', '=', 'access_log.error', 'request_time', '=', '1000.0', '*', 'handler.request.request_time()', 'log_method(', '\"%d', '%s', '%.2fms\",', 'handler.get_status(),', 'handler._request_summary(),', 'request_time,', ')', 'class', '_HandlerDelegate(httputil.HTTPMessageDelegate):', 'def', '__init__(', 'self,', 'application:', 'Application,', 'request:', 'httputil.HTTPServerRequest,', 'handler_class:', 'Type[RequestHandler],', 'handler_kwargs:', 'Optional[Dict[str,', 'Any]],', 'path_args:', 'Optional[List[bytes]],', 'path_kwargs:', 'Optional[Dict[str,', 'bytes]],', ')', '->', 'None:', 'self.application', '=', 'application', 'self.connection', '=', 'request.connection', 'self.request', '=', 'request', 'self.handler_class', '=', 'handler_class', 'self.handler_kwargs', '=', 'handler_kwargs', 'or', '{}', 'self.path_args', '=', 'path_args', 'or', '[]', 'self.path_kwargs', '=', 'path_kwargs', 'or', '{}', 'self.chunks', '=', '[]', 'self.stream_request_body', '=', '_has_stream_request_body(self.handler_class)', 'def', 'headers_received(', 'self,', 'start_line:', 'Union[httputil.RequestStartLine,', 'httputil.ResponseStartLine],', 'headers:', 'httputil.HTTPHeaders,', ')', '->', 'Optional[Awaitable[None]]:', 'if', 'self.stream_request_body:', 'self.request._body_future', '=', 'Future()', 'return', 'self.execute()', 'return', 'None', 'def', 'data_received(self,', 'data:', 'bytes)', '->', 'Optional[Awaitable[None]]:', 'if', 'self.stream_request_body:', 'return', 'self.handler.data_received(data)', 'else:', 'self.chunks.append(data)', 'return', 'None', 'def', 'finish(self)', '->', 'None:', 'if', 'self.stream_request_body:', 'future_set_result_unless_cancelled(self.request._body_future,', 'None)', 'else:', 'self.request.body', '=', 'b\"\".join(self.chunks)', 'self.request._parse_body()', 'self.execute()', 'def', 'on_connection_close(self)', '->', 'None:', 'if', 'self.stream_request_body:', 'self.handler.on_connection_close()', 'else:', 'self.chunks', '=', 'None', 'def', 'execute(self)', '->', 'Optional[Awaitable[None]]:', 'if', 'not', 'self.application.settings.get(\"compiled_template_cache\",', 'True):', 'with', 'RequestHandler._template_loader_lock:', 'for', 'loader', 'in', 'RequestHandler._template_loaders.values():', 'loader.reset()', 'if', 'not', 'self.application.settings.get(\"static_hash_cache\",', 'True):', 'static_handler_class', '=', 'self.application.settings.get(', '\"static_handler_class\",', 'StaticFileHandler', ')', 'static_handler_class.reset()', 'self.handler', '=', 'self.handler_class(', 'self.application,', 'self.request,', '**self.handler_kwargs', ')', 'transforms', '=', '[t(self.request)', 'for', 't', 'in', 'self.application.transforms]', 'if', 'self.stream_request_body:', 'self.handler._prepared_future', '=', 'Future()', 'fut', '=', 'gen.convert_yielded(', 'self.handler._execute(transforms,', '*self.path_args,', '**self.path_kwargs)', ')', 'fut.add_done_callback(lambda', 'f:', 'f.result())', 'return', 'self.handler._prepared_future', 'class', 'HTTPError(Exception):', 'def', '__init__(', 'self,', 'status_code:', 'int', '=', '500,', 'log_message:', 'Optional[str]', '=', 'None,', '*args:', 'Any,', '**kwargs:', 'Any,', ')', '->', 'None:', 'self.status_code', '=', 'status_code', 'self.log_message', '=', 'log_message', 'self.args', '=', 'args', 'self.reason', '=', 'kwargs.get(\"reason\",', 'None)', 'if', 'log_message', 'and', 'not', 'args:', 'self.log_message', '=', 'log_message.replace(\"%\",', '\"%%\")', 'def', '__str__(self)', '->', 'str:', 'message', '=', '\"HTTP', '%d:', '%s\"', '%', '(', 'self.status_code,', 'self.reason', 'or', 'httputil.responses.get(self.status_code,', '\"Unknown\"),', ')', 'if', 'self.log_message:', 'return', 'message', '+', '\"', '(\"', '+', '(self.log_message', '%', 'self.args)', '+', '\")\"', 'else:', 'return', 'message', 'class', 'Finish(Exception):', 'pass', 'class', 'MissingArgumentError(HTTPError):', 'def', '__init__(self,', 'arg_name:', 'str)', '->', 'None:', 'super().__init__(400,', '\"Missing', 'argument', '%s\"', '%', 'arg_name)', 'self.arg_name', '=', 'arg_name', 'class', 'ErrorHandler(RequestHandler):', 'def', 'initialize(self,', 'status_code:', 'int)', '->', 'None:', 'self.set_status(status_code)', 'def', 'prepare(self)', '->', 'None:', 'raise', 'HTTPError(self._status_code)', 'def', 'check_xsrf_cookie(self)', '->', 'None:', 'pass', 'class', 'RedirectHandler(RequestHandler):', 'def', 'initialize(self,', 'url:', 'str,', 'permanent:', 'bool', '=', 'True)', '->', 'None:', 'self._url', '=', 'url', 'self._permanent', '=', 'permanent', 'def', 'get(self,', '*args:', 'Any,', '**kwargs:', 'Any)', '->', 'None:', 'to_url', '=', 'self._url.format(*args,', '**kwargs)', 'if', 'self.request.query_arguments:', 'to_url', '=', 'httputil.url_concat(', 'to_url,', 'list(httputil.qs_to_qsl(self.request.query_arguments)),', ')', 'self.redirect(to_url,', 'permanent=self._permanent)', 'class', 'StaticFileHandler(RequestHandler):', 'CACHE_MAX_AGE', '=', '86400', '*', '365', '*', '10', '_static_hashes', '=', '{}', '_lock', '=', 'threading.Lock()', 'def', 'initialize(self,', 'path:', 'str,', 'default_filename:', 'Optional[str]', '=', 'None)', '->', 'None:', 'self.root', '=', 'path', 'self.default_filename', '=', 'default_filename', '@classmethod', 'def', 'reset(cls)', '->', 'None:', 'with', 'cls._lock:', 'cls._static_hashes', '=', '{}', 'def', 'head(self,', 'path:', 'str)', '->', 'Awaitable[None]:', 'return', 'self.get(path,', 'include_body=False)', 'async', 'def', 'get(self,', 'path:', 'str,', 'include_body:', 'bool', '=', 'True)', '->', 'None:', 'self.path', '=', 'self.parse_url_path(path)', 'del', 'path', 'absolute_path', '=', 'self.get_absolute_path(self.root,', 'self.path)', 'self.absolute_path', '=', 'self.validate_absolute_path(self.root,', 'absolute_path)', 'if', 'self.absolute_path', 'is', 'None:', 'return', 'self.modified', '=', 'self.get_modified_time()', 'self.set_headers()', 'if', 'self.should_return_304():', 'self.set_status(304)', 'return', 'request_range', '=', 'None', 'range_header', '=', 'self.request.headers.get(\"Range\")', 'if', 'range_header:', 'request_range', '=', 'httputil._parse_request_range(range_header)', 'size', '=', 'self.get_content_size()', 'if', 'request_range:', 'start,', 'end', '=', 'request_range', 'if', 'start', 'is', 'not', 'None', 'and', 'start', '<', '0:', 'start', '+=', 'size', 'if', 'start', '<', '0:', 'start', '=', '0', 'if', '(', 'start', 'is', 'not', 'None', 'and', '(start', '>=', 'size', 'or', '(end', 'is', 'not', 'None', 'and', 'start', '>=', 'end))', ')', 'or', 'end', '==', '0:', 'self.set_status(416)', 'self.set_header(\"Content-Type\",', '\"text/plain\")', 'self.set_header(\"Content-Range\",', '\"bytes', '*/%s\"', '%', '(size,))', 'return', 'if', 'end', 'is', 'not', 'None', 'and', 'end', '>', 'size:', 'end', '=', 'size', 'if', 'size', '!=', '(end', 'or', 'size)', '-', '(start', 'or', '0):', 'self.set_status(206)', 'self.set_header(', '\"Content-Range\",', 'httputil._get_content_range(start,', 'end,', 'size)', ')', 'else:', 'start', '=', 'end', '=', 'None', 'if', 'start', 'is', 'not', 'None', 'and', 'end', 'is', 'not', 'None:', 'content_length', '=', 'end', '-', 'start', 'elif', 'end', 'is', 'not', 'None:', 'content_length', '=', 'end', 'elif', 'start', 'is', 'not', 'None:', 'content_length', '=', 'size', '-', 'start', 'else:', 'content_length', '=', 'size', 'self.set_header(\"Content-Length\",', 'content_length)', 'if', 'include_body:', 'content', '=', 'self.get_content(self.absolute_path,', 'start,', 'end)', 'if', 'isinstance(content,', 'bytes):', 'content', '=', '[content]', 'for', 'chunk', 'in', 'content:', 'try:', 'self.write(chunk)', 'await', 'self.flush()', 'except', 'iostream.StreamClosedError:', 'return', 'else:', 'assert', 'self.request.method', '==', '\"HEAD\"', 'def', 'compute_etag(self)', '->', 'Optional[str]:', 'assert', 'self.absolute_path', 'is', 'not', 'None', 'version_hash', '=', 'self._get_cached_version(self.absolute_path)', 'if', 'not', 'version_hash:', 'return', 'None', 'return', '\\'\"%s\"\\'', '%', '(version_hash,)', 'def', 'set_headers(self)', '->', 'None:', 'self.set_header(\"Accept-Ranges\",', '\"bytes\")', 'self.set_etag_header()', 'if', 'self.modified', 'is', 'not', 'None:', 'self.set_header(\"Last-Modified\",', 'self.modified)', 'content_type', '=', 'self.get_content_type()', 'if', 'content_type:', 'self.set_header(\"Content-Type\",', 'content_type)', 'cache_time', '=', 'self.get_cache_time(self.path,', 'self.modified,', 'content_type)', 'if', 'cache_time', '>', '0:', 'self.set_header(', '\"Expires\",', 'datetime.datetime.now(datetime.timezone.utc)', '+', 'datetime.timedelta(seconds=cache_time),', ')', 'self.set_header(\"Cache-Control\",', '\"max-age=\"', '+', 'str(cache_time))', 'self.set_extra_headers(self.path)', 'def', 'should_return_304(self)', '->', 'bool:', 'if', 'self.request.headers.get(\"If-None-Match\"):', 'return', 'self.check_etag_header()', 'ims_value', '=', 'self.request.headers.get(\"If-Modified-Since\")', 'if', 'ims_value', 'is', 'not', 'None:', 'if_since', '=', 'email.utils.parsedate_to_datetime(ims_value)', 'if', 'if_since.tzinfo', 'is', 'None:', 'if_since', '=', 'if_since.replace(tzinfo=datetime.timezone.utc)', 'assert', 'self.modified', 'is', 'not', 'None', 'if', 'if_since', '>=', 'self.modified:', 'return', 'True', 'return', 'False', '@classmethod', 'def', 'get_absolute_path(cls,', 'root:', 'str,', 'path:', 'str)', '->', 'str:', 'abspath', '=', 'os.path.abspath(os.path.join(root,', 'path))', 'return', 'abspath', 'def', 'validate_absolute_path(self,', 'root:', 'str,', 'absolute_path:', 'str)', '->', 'Optional[str]:', 'root', '=', 'os.path.abspath(root)', 'if', 'not', 'root.endswith(os.path.sep):', 'root', '+=', 'os.path.sep', 'if', 'not', '(absolute_path', '+', 'os.path.sep).startswith(root):', 'raise', 'HTTPError(403,', '\"%s', 'is', 'not', 'in', 'root', 'static', 'directory\",', 'self.path)', 'if', 'os.path.isdir(absolute_path)', 'and', 'self.default_filename', 'is', 'not', 'None:', 'if', 'not', 'self.request.path.endswith(\"/\"):', 'if', 'self.request.path.startswith(\"//\"):', 'raise', 'HTTPError(', '403,', '\"cannot', 'redirect', 'path', 'with', 'two', 'initial', 'slashes\"', ')', 'self.redirect(self.request.path', '+', '\"/\",', 'permanent=True)', 'return', 'None', 'absolute_path', '=', 'os.path.join(absolute_path,', 'self.default_filename)', 'if', 'not', 'os.path.exists(absolute_path):', 'raise', 'HTTPError(404)', 'if', 'not', 'os.path.isfile(absolute_path):', 'raise', 'HTTPError(403,', '\"%s', 'is', 'not', 'a', 'file\",', 'self.path)', 'return', 'absolute_path', '@classmethod', 'def', 'get_content(', 'cls,', 'abspath:', 'str,', 'start:', 'Optional[int]', '=', 'None,', 'end:', 'Optional[int]', '=', 'None', ')', '->', 'Generator[bytes,', 'None,', 'None]:', 'with', 'open(abspath,', '\"rb\")', 'as', 'file:', 'if', 'start', 'is', 'not', 'None:', 'file.seek(start)', 'if', 'end', 'is', 'not', 'None:', 'remaining', '=', 'end', '-', '(start', 'or', '0)', 'else:', 'remaining', '=', 'None', 'while', 'True:', 'chunk_size', '=', '64', '*', '1024', 'if', 'remaining', 'is', 'not', 'None', 'and', 'remaining', '<', 'chunk_size:', 'chunk_size', '=', 'remaining', 'chunk', '=', 'file.read(chunk_size)', 'if', 'chunk:', 'if', 'remaining', 'is', 'not', 'None:', 'remaining', '-=', 'len(chunk)', 'yield', 'chunk', 'else:', 'if', 'remaining', 'is', 'not', 'None:', 'assert', 'remaining', '==', '0', 'return', '@classmethod', 'def', 'get_content_version(cls,', 'abspath:', 'str)', '->', 'str:', 'data', '=', 'cls.get_content(abspath)', 'hasher', '=', 'hashlib.sha512()', 'if', 'isinstance(data,', 'bytes):', 'hasher.update(data)', 'else:', 'for', 'chunk', 'in', 'data:', 'hasher.update(chunk)', 'return', 'hasher.hexdigest()', 'def', '_stat(self)', '->', 'os.stat_result:', 'assert', 'self.absolute_path', 'is', 'not', 'None', 'if', 'not', 'hasattr(self,', '\"_stat_result\"):', 'self._stat_result', '=', 'os.stat(self.absolute_path)', 'return', 'self._stat_result', 'def', 'get_content_size(self)', '->', 'int:', 'stat_result', '=', 'self._stat()', 'return', 'stat_result.st_size', 'def', 'get_modified_time(self)', '->', 'Optional[datetime.datetime]:', 'stat_result', '=', 'self._stat()', 'modified', '=', 'datetime.datetime.fromtimestamp(', 'int(stat_result.st_mtime),', 'datetime.timezone.utc', ')', 'return', 'modified', 'def', 'get_content_type(self)', '->', 'str:', 'assert', 'self.absolute_path', 'is', 'not', 'None', 'mime_type,', 'encoding', '=', 'mimetypes.guess_type(self.absolute_path)', 'if', 'encoding', '==', '\"gzip\":', 'return', '\"application/gzip\"', 'elif', 'encoding', 'is', 'not', 'None:', 'return', '\"application/octet-stream\"', 'elif', 'mime_type', 'is', 'not', 'None:', 'return', 'mime_type', 'else:', 'return', '\"application/octet-stream\"', 'def', 'set_extra_headers(self,', 'path:', 'str)', '->', 'None:', 'pass', 'def', 'get_cache_time(', 'self,', 'path:', 'str,', 'modified:', 'Optional[datetime.datetime],', 'mime_type:', 'str', ')', '->', 'int:', 'return', 'self.CACHE_MAX_AGE', 'if', '\"v\"', 'in', 'self.request.arguments', 'else', '0', '@classmethod', 'def', 'make_static_url(', 'cls,', 'settings:', 'Dict[str,', 'Any],', 'path:', 'str,', 'include_version:', 'bool', '=', 'True', ')', '->', 'str:', 'url', '=', 'settings.get(\"static_url_prefix\",', '\"/static/\")', '+', 'path', 'if', 'not', 'include_version:', 'return', 'url', 'version_hash', '=', 'cls.get_version(settings,', 'path)', 'if', 'not', 'version_hash:', 'return', 'url', 'return', '\"%s?v=%s\"', '%', '(url,', 'version_hash)', 'def', 'parse_url_path(self,', 'url_path:', 'str)', '->', 'str:', 'if', 'os.path.sep', '!=', '\"/\":', 'url_path', '=', 'url_path.replace(\"/\",', 'os.path.sep)', 'return', 'url_path', '@classmethod', 'def', 'get_version(cls,', 'settings:', 'Dict[str,', 'Any],', 'path:', 'str)', '->', 'Optional[str]:', 'abs_path', '=', 'cls.get_absolute_path(settings[\"static_path\"],', 'path)', 'return', 'cls._get_cached_version(abs_path)', '@classmethod', 'def', '_get_cached_version(cls,', 'abs_path:', 'str)', '->', 'Optional[str]:', 'with', 'cls._lock:', 'hashes', '=', 'cls._static_hashes', 'if', 'abs_path', 'not', 'in', 'hashes:', 'try:', 'hashes[abs_path]', '=', 'cls.get_content_version(abs_path)', 'except', 'Exception:', 'gen_log.error(\"Could', 'not', 'open', 'static', 'file', '%r\",', 'abs_path)', 'hashes[abs_path]', '=', 'None', 'hsh', '=', 'hashes.get(abs_path)', 'if', 'hsh:', 'return', 'hsh', 'return', 'None', 'class', 'FallbackHandler(RequestHandler):', 'def', 'initialize(', 'self,', 'fallback:', 'Callable[[httputil.HTTPServerRequest],', 'None]', ')', '->', 'None:', 'self.fallback', '=', 'fallback', 'def', 'prepare(self)', '->', 'None:', 'self.fallback(self.request)', 'self._finished', '=', 'True', 'self.on_finish()', 'class', 'OutputTransform(object):', 'def', '__init__(self,', 'request:', 'httputil.HTTPServerRequest)', '->', 'None:', 'pass', 'def', 'transform_first_chunk(', 'self,', 'status_code:', 'int,', 'headers:', 'httputil.HTTPHeaders,', 'chunk:', 'bytes,', 'finishing:', 'bool,', ')', '->', 'Tuple[int,', 'httputil.HTTPHeaders,', 'bytes]:', 'return', 'status_code,', 'headers,', 'chunk', 'def', 'transform_chunk(self,', 'chunk:', 'bytes,', 'finishing:', 'bool)', '->', 'bytes:', 'return', 'chunk', 'class', 'GZipContentEncoding(OutputTransform):', 'CONTENT_TYPES', '=', 'set(', '[', '\"application/javascript\",', '\"application/x-javascript\",', '\"application/xml\",', '\"application/atom+xml\",', '\"application/json\",', '\"application/xhtml+xml\",', '\"image/svg+xml\",', ']', ')', 'GZIP_LEVEL', '=', '6', 'MIN_LENGTH', '=', '1024', 'def', '__init__(self,', 'request:', 'httputil.HTTPServerRequest)', '->', 'None:', 'self._gzipping', '=', '\"gzip\"', 'in', 'request.headers.get(\"Accept-Encoding\",', '\"\")', 'def', '_compressible_type(self,', 'ctype:', 'str)', '->', 'bool:', 'return', 'ctype.startswith(\"text/\")', 'or', 'ctype', 'in', 'self.CONTENT_TYPES', 'def', 'transform_first_chunk(', 'self,', 'status_code:', 'int,', 'headers:', 'httputil.HTTPHeaders,', 'chunk:', 'bytes,', 'finishing:', 'bool,', ')', '->', 'Tuple[int,', 'httputil.HTTPHeaders,', 'bytes]:', 'if', '\"Vary\"', 'in', 'headers:', 'headers[\"Vary\"]', '+=', '\",', 'Accept-Encoding\"', 'else:', 'headers[\"Vary\"]', '=', '\"Accept-Encoding\"', 'if', 'self._gzipping:', 'ctype', '=', '_unicode(headers.get(\"Content-Type\",', '\"\")).split(\";\")[0]', 'self._gzipping', '=', '(', 'self._compressible_type(ctype)', 'and', '(not', 'finishing', 'or', 'len(chunk)', '>=', 'self.MIN_LENGTH)', 'and', '(\"Content-Encoding\"', 'not', 'in', 'headers)', ')', 'if', 'self._gzipping:', 'headers[\"Content-Encoding\"]', '=', '\"gzip\"', 'self._gzip_value', '=', 'BytesIO()', 'self._gzip_file', '=', 'gzip.GzipFile(', 'mode=\"w\",', 'fileobj=self._gzip_value,', 'compresslevel=self.GZIP_LEVEL', ')', 'chunk', '=', 'self.transform_chunk(chunk,', 'finishing)', 'if', '\"Content-Length\"', 'in', 'headers:', 'if', 'finishing:', 'headers[\"Content-Length\"]', '=', 'str(len(chunk))', 'else:', 'del', 'headers[\"Content-Length\"]', 'return', 'status_code,', 'headers,', 'chunk', 'def', 'transform_chunk(self,', 'chunk:', 'bytes,', 'finishing:', 'bool)', '->', 'bytes:', 'if', 'self._gzipping:', 'self._gzip_file.write(chunk)', 'if', 'finishing:', 'self._gzip_file.close()', 'else:', 'self._gzip_file.flush()', 'chunk', '=', 'self._gzip_value.getvalue()', 'self._gzip_value.truncate(0)', 'self._gzip_value.seek(0)', 'return', 'chunk', 'def', 'authenticated(', 'method:', 'Callable[...,', 'Optional[Awaitable[None]]]', ')', '->', 'Callable[...,', 'Optional[Awaitable[None]]]:', '@functools.wraps(method)', 'def', 'wrapper(', 'self:', 'RequestHandler,', '*args,', '**kwargs', ')', '->', 'Optional[Awaitable[None]]:', 'if', 'not', 'self.current_user:', 'if', 'self.request.method', 'in', '(\"GET\",', '\"HEAD\"):', 'url', '=', 'self.get_login_url()', 'if', '\"?\"', 'not', 'in', 'url:', 'if', 'urllib.parse.urlsplit(url).scheme:', 'next_url', '=', 'self.request.full_url()', 'else:', 'assert', 'self.request.uri', 'is', 'not', 'None', 'next_url', '=', 'self.request.uri', 'url', '+=', '\"?\"', '+', 'urlencode(dict(next=next_url))', 'self.redirect(url)', 'return', 'None', 'raise', 'HTTPError(403)', 'return', 'method(self,', '*args,', '**kwargs)', 'return', 'wrapper', 'class', 'UIModule(object):', 'def', '__init__(self,', 'handler:', 'RequestHandler)', '->', 'None:', 'self.handler', '=', 'handler', 'self.request', '=', 'handler.request', 'self.ui', '=', 'handler.ui', 'self.locale', '=', 'handler.locale', '@property', 'def', 'current_user(self)', '->', 'Any:', 'return', 'self.handler.current_user', 'def', 'render(self,', '*args:', 'Any,', '**kwargs:', 'Any)', '->', 'str:', 'raise', 'NotImplementedError()', 'def', 'embedded_javascript(self)', '->', 'Optional[str]:', 'return', 'None', 'def', 'javascript_files(self)', '->', 'Optional[Iterable[str]]:', 'return', 'None', 'def', 'embedded_css(self)', '->', 'Optional[str]:', 'return', 'None', 'def', 'css_files(self)', '->', 'Optional[Iterable[str]]:', 'return', 'None', 'def', 'html_head(self)', '->', 'Optional[str]:', 'return', 'None', 'def', 'html_body(self)', '->', 'Optional[str]:', 'return', 'None', 'def', 'render_string(self,', 'path:', 'str,', '**kwargs:', 'Any)', '->', 'bytes:', 'return', 'self.handler.render_string(path,', '**kwargs)', 'class', '_linkify(UIModule):', 'def', 'render(self,', 'text:', 'str,', '**kwargs:', 'Any)', '->', 'str:', 'return', 'escape.linkify(text,', '**kwargs)', 'class', '_xsrf_form_html(UIModule):', 'def', 'render(self)', '->', 'str:', 'return', 'self.handler.xsrf_form_html()', 'class', 'TemplateModule(UIModule):', 'def', '__init__(self,', 'handler:', 'RequestHandler)', '->', 'None:', 'super().__init__(handler)', 'self._resource_list', '=', '[]', 'self._resource_dict', '=', '{}', 'def', 'render(self,', 'path:', 'str,', '**kwargs:', 'Any)', '->', 'bytes:', 'def', 'set_resources(**kwargs)', '->', 'str:', 'if', 'path', 'not', 'in', 'self._resource_dict:', 'self._resource_list.append(kwargs)', 'self._resource_dict[path]', '=', 'kwargs', 'else:', 'if', 'self._resource_dict[path]', '!=', 'kwargs:', 'raise', 'ValueError(', '\"set_resources', 'called', 'with', 'different', '\"', '\"resources', 'for', 'the', 'same', 'template\"', ')', 'return', '\"\"', 'return', 'self.render_string(path,', 'set_resources=set_resources,', '**kwargs)', 'def', '_get_resources(self,', 'key:', 'str)', '->', 'Iterable[str]:', 'return', '(r[key]', 'for', 'r', 'in', 'self._resource_list', 'if', 'key', 'in', 'r)', 'def', 'embedded_javascript(self)', '->', 'str:', 'return', '\"\\\\n\".join(self._get_resources(\"embedded_javascript\"))', 'def', 'javascript_files(self)', '->', 'Iterable[str]:', 'result', '=', '[]', 'for', 'f', 'in', 'self._get_resources(\"javascript_files\"):', 'if', 'isinstance(f,', '(unicode_type,', 'bytes)):', 'result.append(f)', 'else:', 'result.extend(f)', 'return', 'result', 'def', 'embedded_css(self)', '->', 'str:', 'return', '\"\\\\n\".join(self._get_resources(\"embedded_css\"))', 'def', 'css_files(self)', '->', 'Iterable[str]:', 'result', '=', '[]', 'for', 'f', 'in', 'self._get_resources(\"css_files\"):', 'if', 'isinstance(f,', '(unicode_type,', 'bytes)):', 'result.append(f)', 'else:', 'result.extend(f)', 'return', 'result', 'def', 'html_head(self)', '->', 'str:', 'return', '\"\".join(self._get_resources(\"html_head\"))', 'def', 'html_body(self)', '->', 'str:', 'return', '\"\".join(self._get_resources(\"html_body\"))', 'class', '_UIModuleNamespace(object):', 'def', '__init__(', 'self,', 'handler:', 'RequestHandler,', 'ui_modules:', 'Dict[str,', 'Type[UIModule]]', ')', '->', 'None:', 'self.handler', '=', 'handler', 'self.ui_modules', '=', 'ui_modules', 'def', '__getitem__(self,', 'key:', 'str)', '->', 'Callable[...,', 'str]:', 'return', 'self.handler._ui_module(key,', 'self.ui_modules[key])', 'def', '__getattr__(self,', 'key:', 'str)', '->', 'Callable[...,', 'str]:', 'try:', 'return', 'self[key]', 'except', 'KeyError', 'as', 'e:', 'raise', 'AttributeError(str(e))', 'def', 'create_signed_value(', 'secret:', '_CookieSecretTypes,', 'name:', 'str,', 'value:', 'Union[str,', 'bytes],', 'version:', 'Optional[int]', '=', 'None,', 'clock:', 'Optional[Callable[[],', 'float]]', '=', 'None,', 'key_version:', 'Optional[int]', '=', 'None,', ')', '->', 'bytes:', 'if', 'version', 'is', 'None:', 'version', '=', 'DEFAULT_SIGNED_VALUE_VERSION', 'if', 'clock', 'is', 'None:', 'clock', '=', 'time.time', 'timestamp', '=', 'utf8(str(int(clock())))', 'value', '=', 'base64.b64encode(utf8(value))', 'if', 'version', '==', '1:', 'assert', 'not', 'isinstance(secret,', 'dict)', 'signature', '=', '_create_signature_v1(secret,', 'name,', 'value,', 'timestamp)', 'value', '=', 'b\"|\".join([value,', 'timestamp,', 'signature])', 'return', 'value', 'elif', 'version', '==', '2:', 'def', 'format_field(s:', 'Union[str,', 'bytes])', '->', 'bytes:', 'return', 'utf8(\"%d:\"', '%', 'len(s))', '+', 'utf8(s)', 'to_sign', '=', 'b\"|\".join(', '[', 'b\"2\",', 'format_field(str(key_version', 'or', '0)),', 'format_field(timestamp),', 'format_field(name),', 'format_field(value),', 'b\"\",', ']', ')', 'if', 'isinstance(secret,', 'dict):', 'assert', '(', 'key_version', 'is', 'not', 'None', '),', '\"Key', 'version', 'must', 'be', 'set', 'when', 'sign', 'key', 'dict', 'is', 'used\"', 'assert', 'version', '>=', '2,', '\"Version', 'must', 'be', 'at', 'least', '2', 'for', 'key', 'version', 'support\"', 'secret', '=', 'secret[key_version]', 'signature', '=', '_create_signature_v2(secret,', 'to_sign)', 'return', 'to_sign', '+', 'signature', 'else:', 'raise', 'ValueError(\"Unsupported', 'version', '%d\"', '%', 'version)', '_signed_value_version_re', '=', 're.compile(rb\"^([1-9][0-9]*)\\\\|(.*)$\")', 'def', '_get_version(value:', 'bytes)', '->', 'int:', 'm', '=', '_signed_value_version_re.match(value)', 'if', 'm', 'is', 'None:', 'version', '=', '1', 'else:', 'try:', 'version', '=', 'int(m.group(1))', 'if', 'version', '>', '999:', 'version', '=', '1', 'except', 'ValueError:', 'version', '=', '1', 'return', 'version', 'def', 'decode_signed_value(', 'secret:', '_CookieSecretTypes,', 'name:', 'str,', 'value:', 'Union[None,', 'str,', 'bytes],', 'max_age_days:', 'float', '=', '31,', 'clock:', 'Optional[Callable[[],', 'float]]', '=', 'None,', 'min_version:', 'Optional[int]', '=', 'None,', ')', '->', 'Optional[bytes]:', 'if', 'clock', 'is', 'None:', 'clock', '=', 'time.time', 'if', 'min_version', 'is', 'None:', 'min_version', '=', 'DEFAULT_SIGNED_VALUE_MIN_VERSION', 'if', 'min_version', '>', '2:', 'raise', 'ValueError(\"Unsupported', 'min_version', '%d\"', '%', 'min_version)', 'if', 'not', 'value:', 'return', 'None', 'value', '=', 'utf8(value)', 'version', '=', '_get_version(value)', 'if', 'version', '<', 'min_version:', 'return', 'None', 'if', 'version', '==', '1:', 'assert', 'not', 'isinstance(secret,', 'dict)', 'return', '_decode_signed_value_v1(secret,', 'name,', 'value,', 'max_age_days,', 'clock)', 'elif', 'version', '==', '2:', 'return', '_decode_signed_value_v2(secret,', 'name,', 'value,', 'max_age_days,', 'clock)', 'else:', 'return', 'None', 'def', '_decode_signed_value_v1(', 'secret:', 'Union[str,', 'bytes],', 'name:', 'str,', 'value:', 'bytes,', 'max_age_days:', 'float,', 'clock:', 'Callable[[],', 'float],', ')', '->', 'Optional[bytes]:', 'parts', '=', 'utf8(value).split(b\"|\")', 'if', 'len(parts)', '!=', '3:', 'return', 'None', 'signature', '=', '_create_signature_v1(secret,', 'name,', 'parts[0],', 'parts[1])', 'if', 'not', 'hmac.compare_digest(parts[2],', 'signature):', 'gen_log.warning(\"Invalid', 'cookie', 'signature', '%r\",', 'value)', 'return', 'None', 'timestamp', '=', 'int(parts[1])', 'if', 'timestamp', '<', 'clock()', '-', 'max_age_days', '*', '86400:', 'gen_log.warning(\"Expired', 'cookie', '%r\",', 'value)', 'return', 'None', 'if', 'timestamp', '>', 'clock()', '+', '31', '*', '86400:', 'gen_log.warning(\"Cookie', 'timestamp', 'in', 'future;', 'possible', 'tampering', '%r\",', 'value)', 'return', 'None', 'if', 'parts[1].startswith(b\"0\"):', 'gen_log.warning(\"Tampered', 'cookie', '%r\",', 'value)', 'return', 'None', 'try:', 'return', 'base64.b64decode(parts[0])', 'except', 'Exception:', 'return', 'None', 'def', '_decode_fields_v2(value:', 'bytes)', '->', 'Tuple[int,', 'bytes,', 'bytes,', 'bytes,', 'bytes]:', 'def', '_consume_field(s:', 'bytes)', '->', 'Tuple[bytes,', 'bytes]:', 'length,', '_,', 'rest', '=', 's.partition(b\":\")', 'n', '=', 'int(length)', 'field_value', '=', 'rest[:n]', 'if', 'rest[n', ':', 'n', '+', '1]', '!=', 'b\"|\":', 'raise', 'ValueError(\"malformed', 'v2', 'signed', 'value', 'field\")', 'rest', '=', 'rest[n', '+', '1', ':]', 'return', 'field_value,', 'rest', 'rest', '=', 'value[2:]', 'key_version,', 'rest', '=', '_consume_field(rest)', 'timestamp,', 'rest', '=', '_consume_field(rest)', 'name_field,', 'rest', '=', '_consume_field(rest)', 'value_field,', 'passed_sig', '=', '_consume_field(rest)', 'return', 'int(key_version),', 'timestamp,', 'name_field,', 'value_field,', 'passed_sig', 'def', '_decode_signed_value_v2(', 'secret:', '_CookieSecretTypes,', 'name:', 'str,', 'value:', 'bytes,', 'max_age_days:', 'float,', 'clock:', 'Callable[[],', 'float],', ')', '->', 'Optional[bytes]:', 'try:', '(', 'key_version,', 'timestamp_bytes,', 'name_field,', 'value_field,', 'passed_sig,', ')', '=', '_decode_fields_v2(value)', 'except', 'ValueError:', 'return', 'None', 'signed_string', '=', 'value[:', '-len(passed_sig)]', 'if', 'isinstance(secret,', 'dict):', 'try:', 'secret', '=', 'secret[key_version]', 'except', 'KeyError:', 'return', 'None', 'expected_sig', '=', '_create_signature_v2(secret,', 'signed_string)', 'if', 'not', 'hmac.compare_digest(passed_sig,', 'expected_sig):', 'return', 'None', 'if', 'name_field', '!=', 'utf8(name):', 'return', 'None', 'timestamp', '=', 'int(timestamp_bytes)', 'if', 'timestamp', '<', 'clock()', '-', 'max_age_days', '*', '86400:', 'return', 'None', 'try:', 'return', 'base64.b64decode(value_field)', 'except', 'Exception:', 'return', 'None', 'def', 'get_signature_key_version(value:', 'Union[str,', 'bytes])', '->', 'Optional[int]:', 'value', '=', 'utf8(value)', 'version', '=', '_get_version(value)', 'if', 'version', '<', '2:', 'return', 'None', 'try:', 'key_version,', '_,', '_,', '_,', '_', '=', '_decode_fields_v2(value)', 'except', 'ValueError:', 'return', 'None', 'return', 'key_version', 'def', '_create_signature_v1(secret:', 'Union[str,', 'bytes],', '*parts:', 'Union[str,', 'bytes])', '->', 'bytes:', 'hash', '=', 'hmac.new(utf8(secret),', 'digestmod=hashlib.sha1)', 'for', 'part', 'in', 'parts:', 'hash.update(utf8(part))', 'return', 'utf8(hash.hexdigest())', 'def', '_create_signature_v2(secret:', 'Union[str,', 'bytes],', 's:', 'bytes)', '->', 'bytes:', 'hash', '=', 'hmac.new(utf8(secret),', 'digestmod=hashlib.sha256)', 'hash.update(utf8(s))', 'return', 'utf8(hash.hexdigest())', 'def', 'is_absolute(path:', 'str)', '->', 'bool:', 'return', 'any(path.startswith(x)', 'for', 'x', 'in', '[\"/\",', '\"http:\",', '\"https:\"])']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/websocket.py",
        "vector": "['import', 'abc', 'import', 'asyncio', 'import', 'base64', 'import', 'hashlib', 'import', 'os', 'import', 'sys', 'import', 'struct', 'import', 'tornado', 'from', 'urllib.parse', 'import', 'urlparse', 'import', 'warnings', 'import', 'zlib', 'from', 'tornado.concurrent', 'import', 'Future,', 'future_set_result_unless_cancelled', 'from', 'tornado.escape', 'import', 'utf8,', 'native_str,', 'to_unicode', 'from', 'tornado', 'import', 'gen,', 'httpclient,', 'httputil', 'from', 'tornado.ioloop', 'import', 'IOLoop,', 'PeriodicCallback', 'from', 'tornado.iostream', 'import', 'StreamClosedError,', 'IOStream', 'from', 'tornado.log', 'import', 'gen_log,', 'app_log', 'from', 'tornado.netutil', 'import', 'Resolver', 'from', 'tornado', 'import', 'simple_httpclient', 'from', 'tornado.queues', 'import', 'Queue', 'from', 'tornado.tcpclient', 'import', 'TCPClient', 'from', 'tornado.util', 'import', '_websocket_mask', 'from', 'typing', 'import', '(', 'TYPE_CHECKING,', 'cast,', 'Any,', 'Optional,', 'Dict,', 'Union,', 'List,', 'Awaitable,', 'Callable,', 'Tuple,', 'Type,', ')', 'from', 'types', 'import', 'TracebackType', 'if', 'TYPE_CHECKING:', 'from', 'typing_extensions', 'import', 'Protocol', 'class', '_Compressor(Protocol):', 'def', 'compress(self,', 'data:', 'bytes)', '->', 'bytes:', 'pass', 'def', 'flush(self,', 'mode:', 'int)', '->', 'bytes:', 'pass', 'class', '_Decompressor(Protocol):', 'unconsumed_tail', '=', 'b\"\"', 'def', 'decompress(self,', 'data:', 'bytes,', 'max_length:', 'int)', '->', 'bytes:', 'pass', 'class', '_WebSocketDelegate(Protocol):', 'def', 'on_ws_connection_close(', 'self,', 'close_code:', 'Optional[int]', '=', 'None,', 'close_reason:', 'Optional[str]', '=', 'None', ')', '->', 'None:', 'pass', 'def', 'on_message(self,', 'message:', 'Union[str,', 'bytes])', '->', 'Optional[\"Awaitable[None]\"]:', 'pass', 'def', 'on_ping(self,', 'data:', 'bytes)', '->', 'None:', 'pass', 'def', 'on_pong(self,', 'data:', 'bytes)', '->', 'None:', 'pass', 'def', 'log_exception(', 'self,', 'typ:', 'Optional[Type[BaseException]],', 'value:', 'Optional[BaseException],', 'tb:', 'Optional[TracebackType],', ')', '->', 'None:', 'pass', '_default_max_message_size', '=', '10', '*', '1024', '*', '1024', 'class', 'WebSocketError(Exception):', 'pass', 'class', 'WebSocketClosedError(WebSocketError):', 'pass', 'class', '_DecompressTooLargeError(Exception):', 'pass', 'class', '_WebSocketParams(object):', 'def', '__init__(', 'self,', 'ping_interval:', 'Optional[float]', '=', 'None,', 'ping_timeout:', 'Optional[float]', '=', 'None,', 'max_message_size:', 'int', '=', '_default_max_message_size,', 'compression_options:', 'Optional[Dict[str,', 'Any]]', '=', 'None,', ')', '->', 'None:', 'self.ping_interval', '=', 'ping_interval', 'self.ping_timeout', '=', 'ping_timeout', 'self.max_message_size', '=', 'max_message_size', 'self.compression_options', '=', 'compression_options', 'class', 'WebSocketHandler(tornado.web.RequestHandler):', 'def', '__init__(', 'self,', 'application:', 'tornado.web.Application,', 'request:', 'httputil.HTTPServerRequest,', '**kwargs:', 'Any', ')', '->', 'None:', 'super().__init__(application,', 'request,', '**kwargs)', 'self.ws_connection', '=', 'None', 'self.close_code', '=', 'None', 'self.close_reason', '=', 'None', 'self._on_close_called', '=', 'False', 'async', 'def', 'get(self,', '*args:', 'Any,', '**kwargs:', 'Any)', '->', 'None:', 'self.open_args', '=', 'args', 'self.open_kwargs', '=', 'kwargs', 'if', 'self.request.headers.get(\"Upgrade\",', '\"\").lower()', '!=', '\"websocket\":', 'self.set_status(400)', 'log_msg', '=', \"'Can\", '\"Upgrade\"', 'only', 'to', '\"WebSocket\".\\'', 'self.finish(log_msg)', 'gen_log.debug(log_msg)', 'return', 'headers', '=', 'self.request.headers', 'connection', '=', 'map(', 'lambda', 's:', 's.strip().lower(),', 'headers.get(\"Connection\",', '\"\").split(\",\")', ')', 'if', '\"upgrade\"', 'not', 'in', 'connection:', 'self.set_status(400)', 'log_msg', '=', '\\'\"Connection\"', 'must', 'be', '\"Upgrade\".\\'', 'self.finish(log_msg)', 'gen_log.debug(log_msg)', 'return', 'if', '\"Origin\"', 'in', 'self.request.headers:', 'origin', '=', 'self.request.headers.get(\"Origin\")', 'else:', 'origin', '=', 'self.request.headers.get(\"Sec-Websocket-Origin\",', 'None)', 'if', 'origin', 'is', 'not', 'None', 'and', 'not', 'self.check_origin(origin):', 'self.set_status(403)', 'log_msg', '=', '\"Cross', 'origin', 'websockets', 'not', 'allowed\"', 'self.finish(log_msg)', 'gen_log.debug(log_msg)', 'return', 'self.ws_connection', '=', 'self.get_websocket_protocol()', 'if', 'self.ws_connection:', 'await', 'self.ws_connection.accept_connection(self)', 'else:', 'self.set_status(426,', '\"Upgrade', 'Required\")', 'self.set_header(\"Sec-WebSocket-Version\",', '\"7,', '8,', '13\")', '@property', 'def', 'ping_interval(self)', '->', 'Optional[float]:', 'return', 'self.settings.get(\"websocket_ping_interval\",', 'None)', '@property', 'def', 'ping_timeout(self)', '->', 'Optional[float]:', 'return', 'self.settings.get(\"websocket_ping_timeout\",', 'None)', '@property', 'def', 'max_message_size(self)', '->', 'int:', 'return', 'self.settings.get(', '\"websocket_max_message_size\",', '_default_max_message_size', ')', 'def', 'write_message(', 'self,', 'message:', 'Union[bytes,', 'str,', 'Dict[str,', 'Any]],', 'binary:', 'bool', '=', 'False', ')', '->', '\"Future[None]\":', 'if', 'self.ws_connection', 'is', 'None', 'or', 'self.ws_connection.is_closing():', 'raise', 'WebSocketClosedError()', 'if', 'isinstance(message,', 'dict):', 'message', '=', 'tornado.escape.json_encode(message)', 'return', 'self.ws_connection.write_message(message,', 'binary=binary)', 'def', 'select_subprotocol(self,', 'subprotocols:', 'List[str])', '->', 'Optional[str]:', 'return', 'None', '@property', 'def', 'selected_subprotocol(self)', '->', 'Optional[str]:', 'assert', 'self.ws_connection', 'is', 'not', 'None', 'return', 'self.ws_connection.selected_subprotocol', 'def', 'get_compression_options(self)', '->', 'Optional[Dict[str,', 'Any]]:', 'return', 'None', 'def', 'open(self,', '*args:', 'str,', '**kwargs:', 'str)', '->', 'Optional[Awaitable[None]]:', 'pass', 'def', 'on_message(self,', 'message:', 'Union[str,', 'bytes])', '->', 'Optional[Awaitable[None]]:', 'raise', 'NotImplementedError', 'def', 'ping(self,', 'data:', 'Union[str,', 'bytes]', '=', 'b\"\")', '->', 'None:', 'data', '=', 'utf8(data)', 'if', 'self.ws_connection', 'is', 'None', 'or', 'self.ws_connection.is_closing():', 'raise', 'WebSocketClosedError()', 'self.ws_connection.write_ping(data)', 'def', 'on_pong(self,', 'data:', 'bytes)', '->', 'None:', 'pass', 'def', 'on_ping(self,', 'data:', 'bytes)', '->', 'None:', 'pass', 'def', 'on_close(self)', '->', 'None:', 'pass', 'def', 'close(self,', 'code:', 'Optional[int]', '=', 'None,', 'reason:', 'Optional[str]', '=', 'None)', '->', 'None:', 'if', 'self.ws_connection:', 'self.ws_connection.close(code,', 'reason)', 'self.ws_connection', '=', 'None', 'def', 'check_origin(self,', 'origin:', 'str)', '->', 'bool:', 'parsed_origin', '=', 'urlparse(origin)', 'origin', '=', 'parsed_origin.netloc', 'origin', '=', 'origin.lower()', 'host', '=', 'self.request.headers.get(\"Host\")', 'return', 'origin', '==', 'host', 'def', 'set_nodelay(self,', 'value:', 'bool)', '->', 'None:', 'assert', 'self.ws_connection', 'is', 'not', 'None', 'self.ws_connection.set_nodelay(value)', 'def', 'on_connection_close(self)', '->', 'None:', 'if', 'self.ws_connection:', 'self.ws_connection.on_connection_close()', 'self.ws_connection', '=', 'None', 'if', 'not', 'self._on_close_called:', 'self._on_close_called', '=', 'True', 'self.on_close()', 'self._break_cycles()', 'def', 'on_ws_connection_close(', 'self,', 'close_code:', 'Optional[int]', '=', 'None,', 'close_reason:', 'Optional[str]', '=', 'None', ')', '->', 'None:', 'self.close_code', '=', 'close_code', 'self.close_reason', '=', 'close_reason', 'self.on_connection_close()', 'def', '_break_cycles(self)', '->', 'None:', 'if', 'self.get_status()', '!=', '101', 'or', 'self._on_close_called:', 'super()._break_cycles()', 'def', 'get_websocket_protocol(self)', '->', 'Optional[\"WebSocketProtocol\"]:', 'websocket_version', '=', 'self.request.headers.get(\"Sec-WebSocket-Version\")', 'if', 'websocket_version', 'in', '(\"7\",', '\"8\",', '\"13\"):', 'params', '=', '_WebSocketParams(', 'ping_interval=self.ping_interval,', 'ping_timeout=self.ping_timeout,', 'max_message_size=self.max_message_size,', 'compression_options=self.get_compression_options(),', ')', 'return', 'WebSocketProtocol13(self,', 'False,', 'params)', 'return', 'None', 'def', '_detach_stream(self)', '->', 'IOStream:', 'for', 'method', 'in', '[', '\"write\",', '\"redirect\",', '\"set_header\",', '\"set_cookie\",', '\"set_status\",', '\"flush\",', '\"finish\",', ']:', 'setattr(self,', 'method,', '_raise_not_supported_for_websockets)', 'return', 'self.detach()', 'def', '_raise_not_supported_for_websockets(*args:', 'Any,', '**kwargs:', 'Any)', '->', 'None:', 'raise', 'RuntimeError(\"Method', 'not', 'supported', 'for', 'Web', 'Sockets\")', 'class', 'WebSocketProtocol(abc.ABC):', 'def', '__init__(self,', 'handler:', '\"_WebSocketDelegate\")', '->', 'None:', 'self.handler', '=', 'handler', 'self.stream', '=', 'None', 'self.client_terminated', '=', 'False', 'self.server_terminated', '=', 'False', 'def', '_run_callback(', 'self,', 'callback:', 'Callable,', '*args:', 'Any,', '**kwargs:', 'Any', ')', '->', '\"Optional[Future[Any]]\":', 'try:', 'result', '=', 'callback(*args,', '**kwargs)', 'except', 'Exception:', 'self.handler.log_exception(*sys.exc_info())', 'self._abort()', 'return', 'None', 'else:', 'if', 'result', 'is', 'not', 'None:', 'result', '=', 'gen.convert_yielded(result)', 'assert', 'self.stream', 'is', 'not', 'None', 'self.stream.io_loop.add_future(result,', 'lambda', 'f:', 'f.result())', 'return', 'result', 'def', 'on_connection_close(self)', '->', 'None:', 'self._abort()', 'def', '_abort(self)', '->', 'None:', 'self.client_terminated', '=', 'True', 'self.server_terminated', '=', 'True', 'if', 'self.stream', 'is', 'not', 'None:', 'self.stream.close()', 'self.close()', '@abc.abstractmethod', 'def', 'close(self,', 'code:', 'Optional[int]', '=', 'None,', 'reason:', 'Optional[str]', '=', 'None)', '->', 'None:', 'raise', 'NotImplementedError()', '@abc.abstractmethod', 'def', 'is_closing(self)', '->', 'bool:', 'raise', 'NotImplementedError()', '@abc.abstractmethod', 'async', 'def', 'accept_connection(self,', 'handler:', 'WebSocketHandler)', '->', 'None:', 'raise', 'NotImplementedError()', '@abc.abstractmethod', 'def', 'write_message(', 'self,', 'message:', 'Union[str,', 'bytes,', 'Dict[str,', 'Any]],', 'binary:', 'bool', '=', 'False', ')', '->', '\"Future[None]\":', 'raise', 'NotImplementedError()', '@property', '@abc.abstractmethod', 'def', 'selected_subprotocol(self)', '->', 'Optional[str]:', 'raise', 'NotImplementedError()', '@abc.abstractmethod', 'def', 'write_ping(self,', 'data:', 'bytes)', '->', 'None:', 'raise', 'NotImplementedError()', '@abc.abstractmethod', 'def', '_process_server_headers(', 'self,', 'key:', 'Union[str,', 'bytes],', 'headers:', 'httputil.HTTPHeaders', ')', '->', 'None:', 'raise', 'NotImplementedError()', '@abc.abstractmethod', 'def', 'start_pinging(self)', '->', 'None:', 'raise', 'NotImplementedError()', '@abc.abstractmethod', 'async', 'def', '_receive_frame_loop(self)', '->', 'None:', 'raise', 'NotImplementedError()', '@abc.abstractmethod', 'def', 'set_nodelay(self,', 'x:', 'bool)', '->', 'None:', 'raise', 'NotImplementedError()', 'class', '_PerMessageDeflateCompressor(object):', 'def', '__init__(', 'self,', 'persistent:', 'bool,', 'max_wbits:', 'Optional[int],', 'compression_options:', 'Optional[Dict[str,', 'Any]]', '=', 'None,', ')', '->', 'None:', 'if', 'max_wbits', 'is', 'None:', 'max_wbits', '=', 'zlib.MAX_WBITS', 'if', 'not', '(8', '<=', 'max_wbits', '<=', 'zlib.MAX_WBITS):', 'raise', 'ValueError(', '\"Invalid', 'max_wbits', 'value', '%r;', 'allowed', 'range', '8-%d\",', 'max_wbits,', 'zlib.MAX_WBITS,', ')', 'self._max_wbits', '=', 'max_wbits', 'if', '(', 'compression_options', 'is', 'None', 'or', '\"compression_level\"', 'not', 'in', 'compression_options', '):', 'self._compression_level', '=', 'tornado.web.GZipContentEncoding.GZIP_LEVEL', 'else:', 'self._compression_level', '=', 'compression_options[\"compression_level\"]', 'if', 'compression_options', 'is', 'None', 'or', '\"mem_level\"', 'not', 'in', 'compression_options:', 'self._mem_level', '=', '8', 'else:', 'self._mem_level', '=', 'compression_options[\"mem_level\"]', 'if', 'persistent:', 'self._compressor', '=', 'self._create_compressor()', 'else:', 'self._compressor', '=', 'None', 'def', '_create_compressor(self)', '->', '\"_Compressor\":', 'return', 'zlib.compressobj(', 'self._compression_level,', 'zlib.DEFLATED,', '-self._max_wbits,', 'self._mem_level', ')', 'def', 'compress(self,', 'data:', 'bytes)', '->', 'bytes:', 'compressor', '=', 'self._compressor', 'or', 'self._create_compressor()', 'data', '=', 'compressor.compress(data)', '+', 'compressor.flush(zlib.Z_SYNC_FLUSH)', 'assert', 'data.endswith(b\"\\\\x00\\\\x00\\\\xff\\\\xff\")', 'return', 'data[:-4]', 'class', '_PerMessageDeflateDecompressor(object):', 'def', '__init__(', 'self,', 'persistent:', 'bool,', 'max_wbits:', 'Optional[int],', 'max_message_size:', 'int,', 'compression_options:', 'Optional[Dict[str,', 'Any]]', '=', 'None,', ')', '->', 'None:', 'self._max_message_size', '=', 'max_message_size', 'if', 'max_wbits', 'is', 'None:', 'max_wbits', '=', 'zlib.MAX_WBITS', 'if', 'not', '(8', '<=', 'max_wbits', '<=', 'zlib.MAX_WBITS):', 'raise', 'ValueError(', '\"Invalid', 'max_wbits', 'value', '%r;', 'allowed', 'range', '8-%d\",', 'max_wbits,', 'zlib.MAX_WBITS,', ')', 'self._max_wbits', '=', 'max_wbits', 'if', 'persistent:', 'self._decompressor', '=', '(', 'self._create_decompressor()', ')', 'else:', 'self._decompressor', '=', 'None', 'def', '_create_decompressor(self)', '->', '\"_Decompressor\":', 'return', 'zlib.decompressobj(-self._max_wbits)', 'def', 'decompress(self,', 'data:', 'bytes)', '->', 'bytes:', 'decompressor', '=', 'self._decompressor', 'or', 'self._create_decompressor()', 'result', '=', 'decompressor.decompress(', 'data', '+', 'b\"\\\\x00\\\\x00\\\\xff\\\\xff\",', 'self._max_message_size', ')', 'if', 'decompressor.unconsumed_tail:', 'raise', '_DecompressTooLargeError()', 'return', 'result', 'class', 'WebSocketProtocol13(WebSocketProtocol):', 'FIN', '=', '0x80', 'RSV1', '=', '0x40', 'RSV2', '=', '0x20', 'RSV3', '=', '0x10', 'RSV_MASK', '=', 'RSV1', '|', 'RSV2', '|', 'RSV3', 'OPCODE_MASK', '=', '0x0F', 'stream', '=', 'None', 'def', '__init__(', 'self,', 'handler:', '\"_WebSocketDelegate\",', 'mask_outgoing:', 'bool,', 'params:', '_WebSocketParams,', ')', '->', 'None:', 'WebSocketProtocol.__init__(self,', 'handler)', 'self.mask_outgoing', '=', 'mask_outgoing', 'self.params', '=', 'params', 'self._final_frame', '=', 'False', 'self._frame_opcode', '=', 'None', 'self._masked_frame', '=', 'None', 'self._frame_mask', '=', 'None', 'self._frame_length', '=', 'None', 'self._fragmented_message_buffer', '=', 'None', 'self._fragmented_message_opcode', '=', 'None', 'self._waiting', '=', 'None', 'self._compression_options', '=', 'params.compression_options', 'self._decompressor', '=', 'None', 'self._compressor', '=', 'None', 'self._frame_compressed', '=', 'None', 'self._message_bytes_in', '=', '0', 'self._message_bytes_out', '=', '0', 'self._wire_bytes_in', '=', '0', 'self._wire_bytes_out', '=', '0', 'self.ping_callback', '=', 'None', 'self.last_ping', '=', '0.0', 'self.last_pong', '=', '0.0', 'self.close_code', '=', 'None', 'self.close_reason', '=', 'None', '@property', 'def', 'selected_subprotocol(self)', '->', 'Optional[str]:', 'return', 'self._selected_subprotocol', '@selected_subprotocol.setter', 'def', 'selected_subprotocol(self,', 'value:', 'Optional[str])', '->', 'None:', 'self._selected_subprotocol', '=', 'value', 'async', 'def', 'accept_connection(self,', 'handler:', 'WebSocketHandler)', '->', 'None:', 'try:', 'self._handle_websocket_headers(handler)', 'except', 'ValueError:', 'handler.set_status(400)', 'log_msg', '=', '\"Missing/Invalid', 'WebSocket', 'headers\"', 'handler.finish(log_msg)', 'gen_log.debug(log_msg)', 'return', 'try:', 'await', 'self._accept_connection(handler)', 'except', 'asyncio.CancelledError:', 'self._abort()', 'return', 'except', 'ValueError:', 'gen_log.debug(\"Malformed', 'WebSocket', 'request', 'received\",', 'exc_info=True)', 'self._abort()', 'return', 'def', '_handle_websocket_headers(self,', 'handler:', 'WebSocketHandler)', '->', 'None:', 'fields', '=', '(\"Host\",', '\"Sec-Websocket-Key\",', '\"Sec-Websocket-Version\")', 'if', 'not', 'all(map(lambda', 'f:', 'handler.request.headers.get(f),', 'fields)):', 'raise', 'ValueError(\"Missing/Invalid', 'WebSocket', 'headers\")', '@staticmethod', 'def', 'compute_accept_value(key:', 'Union[str,', 'bytes])', '->', 'str:', 'sha1', '=', 'hashlib.sha1()', 'sha1.update(utf8(key))', 'sha1.update(b\"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\")', 'return', 'native_str(base64.b64encode(sha1.digest()))', 'def', '_challenge_response(self,', 'handler:', 'WebSocketHandler)', '->', 'str:', 'return', 'WebSocketProtocol13.compute_accept_value(', 'cast(str,', 'handler.request.headers.get(\"Sec-Websocket-Key\"))', ')', 'async', 'def', '_accept_connection(self,', 'handler:', 'WebSocketHandler)', '->', 'None:', 'subprotocol_header', '=', 'handler.request.headers.get(\"Sec-WebSocket-Protocol\")', 'if', 'subprotocol_header:', 'subprotocols', '=', '[s.strip()', 'for', 's', 'in', 'subprotocol_header.split(\",\")]', 'else:', 'subprotocols', '=', '[]', 'self.selected_subprotocol', '=', 'handler.select_subprotocol(subprotocols)', 'if', 'self.selected_subprotocol:', 'assert', 'self.selected_subprotocol', 'in', 'subprotocols', 'handler.set_header(\"Sec-WebSocket-Protocol\",', 'self.selected_subprotocol)', 'extensions', '=', 'self._parse_extensions_header(handler.request.headers)', 'for', 'ext', 'in', 'extensions:', 'if', 'ext[0]', '==', '\"permessage-deflate\"', 'and', 'self._compression_options', 'is', 'not', 'None:', 'self._create_compressors(\"server\",', 'ext[1],', 'self._compression_options)', 'if', '(', '\"client_max_window_bits\"', 'in', 'ext[1]', 'and', 'ext[1][\"client_max_window_bits\"]', 'is', 'None', '):', 'del', 'ext[1][\"client_max_window_bits\"]', 'handler.set_header(', '\"Sec-WebSocket-Extensions\",', 'httputil._encode_header(\"permessage-deflate\",', 'ext[1]),', ')', 'break', 'handler.clear_header(\"Content-Type\")', 'handler.set_status(101)', 'handler.set_header(\"Upgrade\",', '\"websocket\")', 'handler.set_header(\"Connection\",', '\"Upgrade\")', 'handler.set_header(\"Sec-WebSocket-Accept\",', 'self._challenge_response(handler))', 'handler.finish()', 'self.stream', '=', 'handler._detach_stream()', 'self.start_pinging()', 'try:', 'open_result', '=', 'handler.open(*handler.open_args,', '**handler.open_kwargs)', 'if', 'open_result', 'is', 'not', 'None:', 'await', 'open_result', 'except', 'Exception:', 'handler.log_exception(*sys.exc_info())', 'self._abort()', 'return', 'await', 'self._receive_frame_loop()', 'def', '_parse_extensions_header(', 'self,', 'headers:', 'httputil.HTTPHeaders', ')', '->', 'List[Tuple[str,', 'Dict[str,', 'str]]]:', 'extensions', '=', 'headers.get(\"Sec-WebSocket-Extensions\",', '\"\")', 'if', 'extensions:', 'return', '[httputil._parse_header(e.strip())', 'for', 'e', 'in', 'extensions.split(\",\")]', 'return', '[]', 'def', '_process_server_headers(', 'self,', 'key:', 'Union[str,', 'bytes],', 'headers:', 'httputil.HTTPHeaders', ')', '->', 'None:', 'assert', 'headers[\"Upgrade\"].lower()', '==', '\"websocket\"', 'assert', 'headers[\"Connection\"].lower()', '==', '\"upgrade\"', 'accept', '=', 'self.compute_accept_value(key)', 'assert', 'headers[\"Sec-Websocket-Accept\"]', '==', 'accept', 'extensions', '=', 'self._parse_extensions_header(headers)', 'for', 'ext', 'in', 'extensions:', 'if', 'ext[0]', '==', '\"permessage-deflate\"', 'and', 'self._compression_options', 'is', 'not', 'None:', 'self._create_compressors(\"client\",', 'ext[1])', 'else:', 'raise', 'ValueError(\"unsupported', 'extension', '%r\",', 'ext)', 'self.selected_subprotocol', '=', 'headers.get(\"Sec-WebSocket-Protocol\",', 'None)', 'def', '_get_compressor_options(', 'self,', 'side:', 'str,', 'agreed_parameters:', 'Dict[str,', 'Any],', 'compression_options:', 'Optional[Dict[str,', 'Any]]', '=', 'None,', ')', '->', 'Dict[str,', 'Any]:', 'options', '=', 'dict(', 'persistent=(side', '+', '\"_no_context_takeover\")', 'not', 'in', 'agreed_parameters', ')', 'wbits_header', '=', 'agreed_parameters.get(side', '+', '\"_max_window_bits\",', 'None)', 'if', 'wbits_header', 'is', 'None:', 'options[\"max_wbits\"]', '=', 'zlib.MAX_WBITS', 'else:', 'options[\"max_wbits\"]', '=', 'int(wbits_header)', 'options[\"compression_options\"]', '=', 'compression_options', 'return', 'options', 'def', '_create_compressors(', 'self,', 'side:', 'str,', 'agreed_parameters:', 'Dict[str,', 'Any],', 'compression_options:', 'Optional[Dict[str,', 'Any]]', '=', 'None,', ')', '->', 'None:', 'allowed_keys', '=', 'set(', '[', '\"server_no_context_takeover\",', '\"client_no_context_takeover\",', '\"server_max_window_bits\",', '\"client_max_window_bits\",', ']', ')', 'for', 'key', 'in', 'agreed_parameters:', 'if', 'key', 'not', 'in', 'allowed_keys:', 'raise', 'ValueError(\"unsupported', 'compression', 'parameter', '%r\"', '%', 'key)', 'other_side', '=', '\"client\"', 'if', '(side', '==', '\"server\")', 'else', '\"server\"', 'self._compressor', '=', '_PerMessageDeflateCompressor(', '**self._get_compressor_options(side,', 'agreed_parameters,', 'compression_options)', ')', 'self._decompressor', '=', '_PerMessageDeflateDecompressor(', 'max_message_size=self.params.max_message_size,', '**self._get_compressor_options(', 'other_side,', 'agreed_parameters,', 'compression_options', ')', ')', 'def', '_write_frame(', 'self,', 'fin:', 'bool,', 'opcode:', 'int,', 'data:', 'bytes,', 'flags:', 'int', '=', '0', ')', '->', '\"Future[None]\":', 'data_len', '=', 'len(data)', 'if', 'opcode', '&', '0x8:', 'if', 'not', 'fin:', 'raise', 'ValueError(\"control', 'frames', 'may', 'not', 'be', 'fragmented\")', 'if', 'data_len', '>', '125:', 'raise', 'ValueError(\"control', 'frame', 'payloads', 'may', 'not', 'exceed', '125', 'bytes\")', 'if', 'fin:', 'finbit', '=', 'self.FIN', 'else:', 'finbit', '=', '0', 'frame', '=', 'struct.pack(\"B\",', 'finbit', '|', 'opcode', '|', 'flags)', 'if', 'self.mask_outgoing:', 'mask_bit', '=', '0x80', 'else:', 'mask_bit', '=', '0', 'if', 'data_len', '<', '126:', 'frame', '+=', 'struct.pack(\"B\",', 'data_len', '|', 'mask_bit)', 'elif', 'data_len', '<=', '0xFFFF:', 'frame', '+=', 'struct.pack(\"!BH\",', '126', '|', 'mask_bit,', 'data_len)', 'else:', 'frame', '+=', 'struct.pack(\"!BQ\",', '127', '|', 'mask_bit,', 'data_len)', 'if', 'self.mask_outgoing:', 'mask', '=', 'os.urandom(4)', 'data', '=', 'mask', '+', '_websocket_mask(mask,', 'data)', 'frame', '+=', 'data', 'self._wire_bytes_out', '+=', 'len(frame)', 'return', 'self.stream.write(frame)', 'def', 'write_message(', 'self,', 'message:', 'Union[str,', 'bytes,', 'Dict[str,', 'Any]],', 'binary:', 'bool', '=', 'False', ')', '->', '\"Future[None]\":', 'if', 'binary:', 'opcode', '=', '0x2', 'else:', 'opcode', '=', '0x1', 'if', 'isinstance(message,', 'dict):', 'message', '=', 'tornado.escape.json_encode(message)', 'message', '=', 'tornado.escape.utf8(message)', 'assert', 'isinstance(message,', 'bytes)', 'self._message_bytes_out', '+=', 'len(message)', 'flags', '=', '0', 'if', 'self._compressor:', 'message', '=', 'self._compressor.compress(message)', 'flags', '|=', 'self.RSV1', 'try:', 'fut', '=', 'self._write_frame(True,', 'opcode,', 'message,', 'flags=flags)', 'except', 'StreamClosedError:', 'raise', 'WebSocketClosedError()', 'async', 'def', 'wrapper()', '->', 'None:', 'try:', 'await', 'fut', 'except', 'StreamClosedError:', 'raise', 'WebSocketClosedError()', 'return', 'asyncio.ensure_future(wrapper())', 'def', 'write_ping(self,', 'data:', 'bytes)', '->', 'None:', 'assert', 'isinstance(data,', 'bytes)', 'self._write_frame(True,', '0x9,', 'data)', 'async', 'def', '_receive_frame_loop(self)', '->', 'None:', 'try:', 'while', 'not', 'self.client_terminated:', 'await', 'self._receive_frame()', 'except', 'StreamClosedError:', 'self._abort()', 'self.handler.on_ws_connection_close(self.close_code,', 'self.close_reason)', 'async', 'def', '_read_bytes(self,', 'n:', 'int)', '->', 'bytes:', 'data', '=', 'await', 'self.stream.read_bytes(n)', 'self._wire_bytes_in', '+=', 'n', 'return', 'data', 'async', 'def', '_receive_frame(self)', '->', 'None:', 'data', '=', 'await', 'self._read_bytes(2)', 'header,', 'mask_payloadlen', '=', 'struct.unpack(\"BB\",', 'data)', 'is_final_frame', '=', 'header', '&', 'self.FIN', 'reserved_bits', '=', 'header', '&', 'self.RSV_MASK', 'opcode', '=', 'header', '&', 'self.OPCODE_MASK', 'opcode_is_control', '=', 'opcode', '&', '0x8', 'if', 'self._decompressor', 'is', 'not', 'None', 'and', 'opcode', '!=', '0:', 'self._frame_compressed', '=', 'bool(reserved_bits', '&', 'self.RSV1)', 'reserved_bits', '&=', '~self.RSV1', 'if', 'reserved_bits:', 'self._abort()', 'return', 'is_masked', '=', 'bool(mask_payloadlen', '&', '0x80)', 'payloadlen', '=', 'mask_payloadlen', '&', '0x7F', 'if', 'opcode_is_control', 'and', 'payloadlen', '>=', '126:', 'self._abort()', 'return', 'if', 'payloadlen', '<', '126:', 'self._frame_length', '=', 'payloadlen', 'elif', 'payloadlen', '==', '126:', 'data', '=', 'await', 'self._read_bytes(2)', 'payloadlen', '=', 'struct.unpack(\"!H\",', 'data)[0]', 'elif', 'payloadlen', '==', '127:', 'data', '=', 'await', 'self._read_bytes(8)', 'payloadlen', '=', 'struct.unpack(\"!Q\",', 'data)[0]', 'new_len', '=', 'payloadlen', 'if', 'self._fragmented_message_buffer', 'is', 'not', 'None:', 'new_len', '+=', 'len(self._fragmented_message_buffer)', 'if', 'new_len', '>', 'self.params.max_message_size:', 'self.close(1009,', '\"message', 'too', 'big\")', 'self._abort()', 'return', 'if', 'is_masked:', 'self._frame_mask', '=', 'await', 'self._read_bytes(4)', 'data', '=', 'await', 'self._read_bytes(payloadlen)', 'if', 'is_masked:', 'assert', 'self._frame_mask', 'is', 'not', 'None', 'data', '=', '_websocket_mask(self._frame_mask,', 'data)', 'if', 'opcode_is_control:', 'if', 'not', 'is_final_frame:', 'self._abort()', 'return', 'elif', 'opcode', '==', '0:', 'if', 'self._fragmented_message_buffer', 'is', 'None:', 'self._abort()', 'return', 'self._fragmented_message_buffer.extend(data)', 'if', 'is_final_frame:', 'opcode', '=', 'self._fragmented_message_opcode', 'data', '=', 'bytes(self._fragmented_message_buffer)', 'self._fragmented_message_buffer', '=', 'None', 'else:', 'if', 'self._fragmented_message_buffer', 'is', 'not', 'None:', 'self._abort()', 'return', 'if', 'not', 'is_final_frame:', 'self._fragmented_message_opcode', '=', 'opcode', 'self._fragmented_message_buffer', '=', 'bytearray(data)', 'if', 'is_final_frame:', 'handled_future', '=', 'self._handle_message(opcode,', 'data)', 'if', 'handled_future', 'is', 'not', 'None:', 'await', 'handled_future', 'def', '_handle_message(self,', 'opcode:', 'int,', 'data:', 'bytes)', '->', '\"Optional[Future[None]]\":', 'if', 'self.client_terminated:', 'return', 'None', 'if', 'self._frame_compressed:', 'assert', 'self._decompressor', 'is', 'not', 'None', 'try:', 'data', '=', 'self._decompressor.decompress(data)', 'except', '_DecompressTooLargeError:', 'self.close(1009,', '\"message', 'too', 'big', 'after', 'decompression\")', 'self._abort()', 'return', 'None', 'if', 'opcode', '==', '0x1:', 'self._message_bytes_in', '+=', 'len(data)', 'try:', 'decoded', '=', 'data.decode(\"utf-8\")', 'except', 'UnicodeDecodeError:', 'self._abort()', 'return', 'None', 'return', 'self._run_callback(self.handler.on_message,', 'decoded)', 'elif', 'opcode', '==', '0x2:', 'self._message_bytes_in', '+=', 'len(data)', 'return', 'self._run_callback(self.handler.on_message,', 'data)', 'elif', 'opcode', '==', '0x8:', 'self.client_terminated', '=', 'True', 'if', 'len(data)', '>=', '2:', 'self.close_code', '=', 'struct.unpack(\">H\",', 'data[:2])[0]', 'if', 'len(data)', '>', '2:', 'self.close_reason', '=', 'to_unicode(data[2:])', 'self.close(self.close_code)', 'elif', 'opcode', '==', '0x9:', 'try:', 'self._write_frame(True,', '0xA,', 'data)', 'except', 'StreamClosedError:', 'self._abort()', 'self._run_callback(self.handler.on_ping,', 'data)', 'elif', 'opcode', '==', '0xA:', 'self.last_pong', '=', 'IOLoop.current().time()', 'return', 'self._run_callback(self.handler.on_pong,', 'data)', 'else:', 'self._abort()', 'return', 'None', 'def', 'close(self,', 'code:', 'Optional[int]', '=', 'None,', 'reason:', 'Optional[str]', '=', 'None)', '->', 'None:', 'if', 'not', 'self.server_terminated:', 'if', 'not', 'self.stream.closed():', 'if', 'code', 'is', 'None', 'and', 'reason', 'is', 'not', 'None:', 'code', '=', '1000', 'if', 'code', 'is', 'None:', 'close_data', '=', 'b\"\"', 'else:', 'close_data', '=', 'struct.pack(\">H\",', 'code)', 'if', 'reason', 'is', 'not', 'None:', 'close_data', '+=', 'utf8(reason)', 'try:', 'self._write_frame(True,', '0x8,', 'close_data)', 'except', 'StreamClosedError:', 'self._abort()', 'self.server_terminated', '=', 'True', 'if', 'self.client_terminated:', 'if', 'self._waiting', 'is', 'not', 'None:', 'self.stream.io_loop.remove_timeout(self._waiting)', 'self._waiting', '=', 'None', 'self.stream.close()', 'elif', 'self._waiting', 'is', 'None:', 'self._waiting', '=', 'self.stream.io_loop.add_timeout(', 'self.stream.io_loop.time()', '+', '5,', 'self._abort', ')', 'if', 'self.ping_callback:', 'self.ping_callback.stop()', 'self.ping_callback', '=', 'None', 'def', 'is_closing(self)', '->', 'bool:', 'return', 'self.stream.closed()', 'or', 'self.client_terminated', 'or', 'self.server_terminated', '@property', 'def', 'ping_interval(self)', '->', 'Optional[float]:', 'interval', '=', 'self.params.ping_interval', 'if', 'interval', 'is', 'not', 'None:', 'return', 'interval', 'return', '0', '@property', 'def', 'ping_timeout(self)', '->', 'Optional[float]:', 'timeout', '=', 'self.params.ping_timeout', 'if', 'timeout', 'is', 'not', 'None:', 'return', 'timeout', 'assert', 'self.ping_interval', 'is', 'not', 'None', 'return', 'max(3', '*', 'self.ping_interval,', '30)', 'def', 'start_pinging(self)', '->', 'None:', 'assert', 'self.ping_interval', 'is', 'not', 'None', 'if', 'self.ping_interval', '>', '0:', 'self.last_ping', '=', 'self.last_pong', '=', 'IOLoop.current().time()', 'self.ping_callback', '=', 'PeriodicCallback(', 'self.periodic_ping,', 'self.ping_interval', '*', '1000', ')', 'self.ping_callback.start()', 'def', 'periodic_ping(self)', '->', 'None:', 'if', 'self.is_closing()', 'and', 'self.ping_callback', 'is', 'not', 'None:', 'self.ping_callback.stop()', 'return', 'now', '=', 'IOLoop.current().time()', 'since_last_pong', '=', 'now', '-', 'self.last_pong', 'since_last_ping', '=', 'now', '-', 'self.last_ping', 'assert', 'self.ping_interval', 'is', 'not', 'None', 'assert', 'self.ping_timeout', 'is', 'not', 'None', 'if', '(', 'since_last_ping', '<', '2', '*', 'self.ping_interval', 'and', 'since_last_pong', '>', 'self.ping_timeout', '):', 'self.close()', 'return', 'self.write_ping(b\"\")', 'self.last_ping', '=', 'now', 'def', 'set_nodelay(self,', 'x:', 'bool)', '->', 'None:', 'self.stream.set_nodelay(x)', 'class', 'WebSocketClientConnection(simple_httpclient._HTTPConnection):', 'protocol', '=', 'None', 'def', '__init__(', 'self,', 'request:', 'httpclient.HTTPRequest,', 'on_message_callback:', 'Optional[Callable[[Union[None,', 'str,', 'bytes]],', 'None]]', '=', 'None,', 'compression_options:', 'Optional[Dict[str,', 'Any]]', '=', 'None,', 'ping_interval:', 'Optional[float]', '=', 'None,', 'ping_timeout:', 'Optional[float]', '=', 'None,', 'max_message_size:', 'int', '=', '_default_max_message_size,', 'subprotocols:', 'Optional[List[str]]', '=', 'None,', 'resolver:', 'Optional[Resolver]', '=', 'None,', ')', '->', 'None:', 'self.connect_future', '=', 'Future()', 'self.read_queue', '=', 'Queue(1)', 'self.key', '=', 'base64.b64encode(os.urandom(16))', 'self._on_message_callback', '=', 'on_message_callback', 'self.close_code', '=', 'None', 'self.close_reason', '=', 'None', 'self.params', '=', '_WebSocketParams(', 'ping_interval=ping_interval,', 'ping_timeout=ping_timeout,', 'max_message_size=max_message_size,', 'compression_options=compression_options,', ')', 'scheme,', 'sep,', 'rest', '=', 'request.url.partition(\":\")', 'scheme', '=', '{\"ws\":', '\"http\",', '\"wss\":', '\"https\"}[scheme]', 'request.url', '=', 'scheme', '+', 'sep', '+', 'rest', 'request.headers.update(', '{', '\"Upgrade\":', '\"websocket\",', '\"Connection\":', '\"Upgrade\",', '\"Sec-WebSocket-Key\":', 'self.key,', '\"Sec-WebSocket-Version\":', '\"13\",', '}', ')', 'if', 'subprotocols', 'is', 'not', 'None:', 'request.headers[\"Sec-WebSocket-Protocol\"]', '=', '\",\".join(subprotocols)', 'if', 'compression_options', 'is', 'not', 'None:', 'request.headers[', '\"Sec-WebSocket-Extensions\"', ']', '=', '\"permessage-deflate;', 'client_max_window_bits\"', 'request.follow_redirects', '=', 'False', 'self.tcp_client', '=', 'TCPClient(resolver=resolver)', 'super().__init__(', 'None,', 'request,', 'lambda:', 'None,', 'self._on_http_response,', '104857600,', 'self.tcp_client,', '65536,', '104857600,', ')', 'def', '__del__(self)', '->', 'None:', 'if', 'self.protocol', 'is', 'not', 'None:', 'warnings.warn(\"Unclosed', 'WebSocketClientConnection\",', 'ResourceWarning)', 'def', 'close(self,', 'code:', 'Optional[int]', '=', 'None,', 'reason:', 'Optional[str]', '=', 'None)', '->', 'None:', 'if', 'self.protocol', 'is', 'not', 'None:', 'self.protocol.close(code,', 'reason)', 'self.protocol', '=', 'None', 'def', 'on_connection_close(self)', '->', 'None:', 'if', 'not', 'self.connect_future.done():', 'self.connect_future.set_exception(StreamClosedError())', 'self._on_message(None)', 'self.tcp_client.close()', 'super().on_connection_close()', 'def', 'on_ws_connection_close(', 'self,', 'close_code:', 'Optional[int]', '=', 'None,', 'close_reason:', 'Optional[str]', '=', 'None', ')', '->', 'None:', 'self.close_code', '=', 'close_code', 'self.close_reason', '=', 'close_reason', 'self.on_connection_close()', 'def', '_on_http_response(self,', 'response:', 'httpclient.HTTPResponse)', '->', 'None:', 'if', 'not', 'self.connect_future.done():', 'if', 'response.error:', 'self.connect_future.set_exception(response.error)', 'else:', 'self.connect_future.set_exception(', 'WebSocketError(\"Non-websocket', 'response\")', ')', 'async', 'def', 'headers_received(', 'self,', 'start_line:', 'Union[httputil.RequestStartLine,', 'httputil.ResponseStartLine],', 'headers:', 'httputil.HTTPHeaders,', ')', '->', 'None:', 'assert', 'isinstance(start_line,', 'httputil.ResponseStartLine)', 'if', 'start_line.code', '!=', '101:', 'await', 'super().headers_received(start_line,', 'headers)', 'return', 'if', 'self._timeout', 'is', 'not', 'None:', 'self.io_loop.remove_timeout(self._timeout)', 'self._timeout', '=', 'None', 'self.headers', '=', 'headers', 'self.protocol', '=', 'self.get_websocket_protocol()', 'self.protocol._process_server_headers(self.key,', 'self.headers)', 'self.protocol.stream', '=', 'self.connection.detach()', 'IOLoop.current().add_callback(self.protocol._receive_frame_loop)', 'self.protocol.start_pinging()', 'self.final_callback', '=', 'None', 'future_set_result_unless_cancelled(self.connect_future,', 'self)', 'def', 'write_message(', 'self,', 'message:', 'Union[str,', 'bytes,', 'Dict[str,', 'Any]],', 'binary:', 'bool', '=', 'False', ')', '->', '\"Future[None]\":', 'if', 'self.protocol', 'is', 'None:', 'raise', 'WebSocketClosedError(\"Client', 'connection', 'has', 'been', 'closed\")', 'return', 'self.protocol.write_message(message,', 'binary=binary)', 'def', 'read_message(', 'self,', 'callback:', 'Optional[Callable[[\"Future[Union[None,', 'str,', 'bytes]]\"],', 'None]]', '=', 'None,', ')', '->', 'Awaitable[Union[None,', 'str,', 'bytes]]:', 'awaitable', '=', 'self.read_queue.get()', 'if', 'callback', 'is', 'not', 'None:', 'self.io_loop.add_future(asyncio.ensure_future(awaitable),', 'callback)', 'return', 'awaitable', 'def', 'on_message(self,', 'message:', 'Union[str,', 'bytes])', '->', 'Optional[Awaitable[None]]:', 'return', 'self._on_message(message)', 'def', '_on_message(', 'self,', 'message:', 'Union[None,', 'str,', 'bytes]', ')', '->', 'Optional[Awaitable[None]]:', 'if', 'self._on_message_callback:', 'self._on_message_callback(message)', 'return', 'None', 'else:', 'return', 'self.read_queue.put(message)', 'def', 'ping(self,', 'data:', 'bytes', '=', 'b\"\")', '->', 'None:', 'data', '=', 'utf8(data)', 'if', 'self.protocol', 'is', 'None:', 'raise', 'WebSocketClosedError()', 'self.protocol.write_ping(data)', 'def', 'on_pong(self,', 'data:', 'bytes)', '->', 'None:', 'pass', 'def', 'on_ping(self,', 'data:', 'bytes)', '->', 'None:', 'pass', 'def', 'get_websocket_protocol(self)', '->', 'WebSocketProtocol:', 'return', 'WebSocketProtocol13(self,', 'mask_outgoing=True,', 'params=self.params)', '@property', 'def', 'selected_subprotocol(self)', '->', 'Optional[str]:', 'return', 'self.protocol.selected_subprotocol', 'def', 'log_exception(', 'self,', 'typ:', '\"Optional[Type[BaseException]]\",', 'value:', 'Optional[BaseException],', 'tb:', 'Optional[TracebackType],', ')', '->', 'None:', 'assert', 'typ', 'is', 'not', 'None', 'assert', 'value', 'is', 'not', 'None', 'app_log.error(\"Uncaught', 'exception', '%s\",', 'value,', 'exc_info=(typ,', 'value,', 'tb))', 'def', 'websocket_connect(', 'url:', 'Union[str,', 'httpclient.HTTPRequest],', 'callback:', 'Optional[Callable[[\"Future[WebSocketClientConnection]\"],', 'None]]', '=', 'None,', 'connect_timeout:', 'Optional[float]', '=', 'None,', 'on_message_callback:', 'Optional[Callable[[Union[None,', 'str,', 'bytes]],', 'None]]', '=', 'None,', 'compression_options:', 'Optional[Dict[str,', 'Any]]', '=', 'None,', 'ping_interval:', 'Optional[float]', '=', 'None,', 'ping_timeout:', 'Optional[float]', '=', 'None,', 'max_message_size:', 'int', '=', '_default_max_message_size,', 'subprotocols:', 'Optional[List[str]]', '=', 'None,', 'resolver:', 'Optional[Resolver]', '=', 'None,', ')', '->', '\"Awaitable[WebSocketClientConnection]\":', 'if', 'isinstance(url,', 'httpclient.HTTPRequest):', 'assert', 'connect_timeout', 'is', 'None', 'request', '=', 'url', 'request.headers', '=', 'httputil.HTTPHeaders(request.headers)', 'else:', 'request', '=', 'httpclient.HTTPRequest(url,', 'connect_timeout=connect_timeout)', 'request', '=', 'cast(', 'httpclient.HTTPRequest,', 'httpclient._RequestProxy(request,', 'httpclient.HTTPRequest._DEFAULTS),', ')', 'conn', '=', 'WebSocketClientConnection(', 'request,', 'on_message_callback=on_message_callback,', 'compression_options=compression_options,', 'ping_interval=ping_interval,', 'ping_timeout=ping_timeout,', 'max_message_size=max_message_size,', 'subprotocols=subprotocols,', 'resolver=resolver,', ')', 'if', 'callback', 'is', 'not', 'None:', 'IOLoop.current().add_future(conn.connect_future,', 'callback)', 'return', 'conn.connect_future']"
    },
    {
        "link": "https://raw.githubusercontent.com/tornadoweb/tornado/master/tornado/wsgi.py",
        "vector": "['import', 'concurrent.futures', 'from', 'io', 'import', 'BytesIO', 'import', 'tornado', 'import', 'sys', 'from', 'tornado.concurrent', 'import', 'dummy_executor', 'from', 'tornado', 'import', 'escape', 'from', 'tornado', 'import', 'httputil', 'from', 'tornado.ioloop', 'import', 'IOLoop', 'from', 'tornado.log', 'import', 'access_log', 'from', 'typing', 'import', 'List,', 'Tuple,', 'Optional,', 'Callable,', 'Any,', 'Dict,', 'Text', 'from', 'types', 'import', 'TracebackType', 'import', 'typing', 'if', 'typing.TYPE_CHECKING:', 'from', 'typing', 'import', 'Type', 'from', '_typeshed.wsgi', 'import', 'WSGIApplication', 'as', 'WSGIAppType', 'def', 'to_wsgi_str(s:', 'bytes)', '->', 'str:', 'assert', 'isinstance(s,', 'bytes)', 'return', 's.decode(\"latin1\")', 'class', 'WSGIContainer(object):', 'r', 'def', '__init__(', 'self,', 'wsgi_application:', '\"WSGIAppType\",', 'executor:', 'Optional[concurrent.futures.Executor]', '=', 'None,', ')', '->', 'None:', 'self.wsgi_application', '=', 'wsgi_application', 'self.executor', '=', 'dummy_executor', 'if', 'executor', 'is', 'None', 'else', 'executor', 'def', '__call__(self,', 'request:', 'httputil.HTTPServerRequest)', '->', 'None:', 'IOLoop.current().spawn_callback(self.handle_request,', 'request)', 'async', 'def', 'handle_request(self,', 'request:', 'httputil.HTTPServerRequest)', '->', 'None:', 'data', '=', '{}', 'response', '=', '[]', 'def', 'start_response(', 'status:', 'str,', 'headers:', 'List[Tuple[str,', 'str]],', 'exc_info:', 'Optional[', 'Tuple[', '\"Optional[Type[BaseException]]\",', 'Optional[BaseException],', 'Optional[TracebackType],', ']', ']', '=', 'None,', ')', '->', 'Callable[[bytes],', 'Any]:', 'data[\"status\"]', '=', 'status', 'data[\"headers\"]', '=', 'headers', 'return', 'response.append', 'loop', '=', 'IOLoop.current()', 'app_response', '=', 'await', 'loop.run_in_executor(', 'self.executor,', 'self.wsgi_application,', 'self.environ(request),', 'start_response,', ')', 'try:', 'app_response_iter', '=', 'iter(app_response)', 'def', 'next_chunk()', '->', 'Optional[bytes]:', 'try:', 'return', 'next(app_response_iter)', 'except', 'StopIteration:', 'return', 'None', 'while', 'True:', 'chunk', '=', 'await', 'loop.run_in_executor(self.executor,', 'next_chunk)', 'if', 'chunk', 'is', 'None:', 'break', 'response.append(chunk)', 'finally:', 'if', 'hasattr(app_response,', '\"close\"):', 'app_response.close()', 'body', '=', 'b\"\".join(response)', 'if', 'not', 'data:', 'raise', 'Exception(\"WSGI', 'app', 'did', 'not', 'call', 'start_response\")', 'status_code_str,', 'reason', '=', 'data[\"status\"].split(\"', '\",', '1)', 'status_code', '=', 'int(status_code_str)', 'headers', '=', 'data[\"headers\"]', 'header_set', '=', 'set(k.lower()', 'for', '(k,', 'v)', 'in', 'headers)', 'body', '=', 'escape.utf8(body)', 'if', 'status_code', '!=', '304:', 'if', '\"content-length\"', 'not', 'in', 'header_set:', 'headers.append((\"Content-Length\",', 'str(len(body))))', 'if', '\"content-type\"', 'not', 'in', 'header_set:', 'headers.append((\"Content-Type\",', '\"text/html;', 'charset=UTF-8\"))', 'if', '\"server\"', 'not', 'in', 'header_set:', 'headers.append((\"Server\",', '\"TornadoServer/%s\"', '%', 'tornado.version))', 'start_line', '=', 'httputil.ResponseStartLine(\"HTTP/1.1\",', 'status_code,', 'reason)', 'header_obj', '=', 'httputil.HTTPHeaders()', 'for', 'key,', 'value', 'in', 'headers:', 'header_obj.add(key,', 'value)', 'assert', 'request.connection', 'is', 'not', 'None', 'request.connection.write_headers(start_line,', 'header_obj,', 'chunk=body)', 'request.connection.finish()', 'self._log(status_code,', 'request)', 'def', 'environ(self,', 'request:', 'httputil.HTTPServerRequest)', '->', 'Dict[Text,', 'Any]:', 'hostport', '=', 'request.host.split(\":\")', 'if', 'len(hostport)', '==', '2:', 'host', '=', 'hostport[0]', 'port', '=', 'int(hostport[1])', 'else:', 'host', '=', 'request.host', 'port', '=', '443', 'if', 'request.protocol', '==', '\"https\"', 'else', '80', 'environ', '=', '{', '\"REQUEST_METHOD\":', 'request.method,', '\"SCRIPT_NAME\":', '\"\",', '\"PATH_INFO\":', 'to_wsgi_str(', 'escape.url_unescape(request.path,', 'encoding=None,', 'plus=False)', '),', '\"QUERY_STRING\":', 'request.query,', '\"REMOTE_ADDR\":', 'request.remote_ip,', '\"SERVER_NAME\":', 'host,', '\"SERVER_PORT\":', 'str(port),', '\"SERVER_PROTOCOL\":', 'request.version,', '\"wsgi.version\":', '(1,', '0),', '\"wsgi.url_scheme\":', 'request.protocol,', '\"wsgi.input\":', 'BytesIO(escape.utf8(request.body)),', '\"wsgi.errors\":', 'sys.stderr,', '\"wsgi.multithread\":', 'self.executor', 'is', 'not', 'dummy_executor,', '\"wsgi.multiprocess\":', 'True,', '\"wsgi.run_once\":', 'False,', '}', 'if', '\"Content-Type\"', 'in', 'request.headers:', 'environ[\"CONTENT_TYPE\"]', '=', 'request.headers.pop(\"Content-Type\")', 'if', '\"Content-Length\"', 'in', 'request.headers:', 'environ[\"CONTENT_LENGTH\"]', '=', 'request.headers.pop(\"Content-Length\")', 'for', 'key,', 'value', 'in', 'request.headers.items():', 'environ[\"HTTP_\"', '+', 'key.replace(\"-\",', '\"_\").upper()]', '=', 'value', 'return', 'environ', 'def', '_log(self,', 'status_code:', 'int,', 'request:', 'httputil.HTTPServerRequest)', '->', 'None:', 'if', 'status_code', '<', '400:', 'log_method', '=', 'access_log.info', 'elif', 'status_code', '<', '500:', 'log_method', '=', 'access_log.warning', 'else:', 'log_method', '=', 'access_log.error', 'request_time', '=', '1000.0', '*', 'request.request_time()', 'assert', 'request.method', 'is', 'not', 'None', 'assert', 'request.uri', 'is', 'not', 'None', 'summary', '=', '(', 'request.method', '+', '\"', '\"', '+', 'request.uri', '+', '\"', '(\"', '+', 'request.remote_ip', '+', '\")\"', ')', 'log_method(\"%d', '%s', '%.2fms\",', 'status_code,', 'summary,', 'request_time)', 'HTTPRequest', '=', 'httputil.HTTPServerRequest']"
    },
    {
        "link": "https://raw.githubusercontent.com/tonybeltramelli/pix2code/master/compiler/android-compiler.py",
        "vector": "['from', '__future__', 'import', 'print_function', '__author__', '=', \"'Tony\", 'Beltramelli', '-', \"www.tonybeltramelli.com'\", 'import', 'sys', 'from', 'os.path', 'import', 'basename', 'from', 'classes.Utils', 'import', '*', 'from', 'classes.Compiler', 'import', '*', 'if', '__name__', '==', '\"__main__\":', 'argv', '=', 'sys.argv[1:]', 'length', '=', 'len(argv)', 'if', 'length', '!=', '0:', 'input_file', '=', 'argv[0]', 'else:', 'print(\"Error:', 'not', 'enough', 'argument', 'supplied:\")', 'print(\"android-compiler.py', '<input', 'file>\")', 'exit(0)', 'TEXT_PLACE_HOLDER', '=', '\"[TEXT]\"', 'ID_PLACE_HOLDER', '=', '\"[ID]\"', 'dsl_path', '=', '\"assets/android-dsl-mapping.json\"', 'compiler', '=', 'Compiler(dsl_path)', 'def', 'render_content_with_text(key,', 'value):', 'value', '=', 'value.replace(TEXT_PLACE_HOLDER,', 'Utils.get_random_text(length_text=5,', 'space_number=0))', 'while', 'value.find(ID_PLACE_HOLDER)', '!=', '-1:', 'value', '=', 'value.replace(ID_PLACE_HOLDER,', 'Utils.get_android_id(),', '1)', 'return', 'value', 'file_uid', '=', 'basename(input_file)[:basename(input_file).find(\".\")]', 'path', '=', 'input_file[:input_file.find(file_uid)]', 'input_file_path', '=', '\"{}{}.gui\".format(path,', 'file_uid)', 'output_file_path', '=', '\"{}{}.xml\".format(path,', 'file_uid)', 'compiler.compile(input_file_path,', 'output_file_path,', 'rendering_function=render_content_with_text)']"
    },
    {
        "link": "https://raw.githubusercontent.com/tonybeltramelli/pix2code/master/compiler/classes/Compiler.py",
        "vector": "['__author__', '=', \"'Tony\", 'Beltramelli', '-', \"www.tonybeltramelli.com'\", 'import', 'json', 'from', 'classes.Node', 'import', '*', 'class', 'Compiler:', 'def', '__init__(self,', 'dsl_mapping_file_path):', 'with', 'open(dsl_mapping_file_path)', 'as', 'data_file:', 'self.dsl_mapping', '=', 'json.load(data_file)', 'self.opening_tag', '=', 'self.dsl_mapping[\"opening-tag\"]', 'self.closing_tag', '=', 'self.dsl_mapping[\"closing-tag\"]', 'self.content_holder', '=', 'self.opening_tag', '+', 'self.closing_tag', 'self.root', '=', 'Node(\"body\",', 'None,', 'self.content_holder)', 'def', 'compile(self,', 'input_file_path,', 'output_file_path,', 'rendering_function=None):', 'dsl_file', '=', 'open(input_file_path)', 'current_parent', '=', 'self.root', 'for', 'token', 'in', 'dsl_file:', 'token', '=', 'token.replace(\"', '\",', '\"\").replace(\"\\\\n\",', '\"\")', 'if', 'token.find(self.opening_tag)', '!=', '-1:', 'token', '=', 'token.replace(self.opening_tag,', '\"\")', 'element', '=', 'Node(token,', 'current_parent,', 'self.content_holder)', 'current_parent.add_child(element)', 'current_parent', '=', 'element', 'elif', 'token.find(self.closing_tag)', '!=', '-1:', 'current_parent', '=', 'current_parent.parent', 'else:', 'tokens', '=', 'token.split(\",\")', 'for', 't', 'in', 'tokens:', 'element', '=', 'Node(t,', 'current_parent,', 'self.content_holder)', 'current_parent.add_child(element)', 'output_html', '=', 'self.root.render(self.dsl_mapping,', 'rendering_function=rendering_function)', 'with', 'open(output_file_path,', \"'w')\", 'as', 'output_file:', 'output_file.write(output_html)']"
    },
    {
        "link": "https://raw.githubusercontent.com/tonybeltramelli/pix2code/master/compiler/classes/Node.py",
        "vector": "['from', '__future__', 'import', 'print_function', '__author__', '=', \"'Tony\", 'Beltramelli', '-', \"www.tonybeltramelli.com'\", 'class', 'Node:', 'def', '__init__(self,', 'key,', 'parent_node,', 'content_holder):', 'self.key', '=', 'key', 'self.parent', '=', 'parent_node', 'self.children', '=', '[]', 'self.content_holder', '=', 'content_holder', 'def', 'add_child(self,', 'child):', 'self.children.append(child)', 'def', 'show(self):', 'print(self.key)', 'for', 'child', 'in', 'self.children:', 'child.show()', 'def', 'render(self,', 'mapping,', 'rendering_function=None):', 'content', '=', '\"\"', 'for', 'child', 'in', 'self.children:', 'content', '+=', 'child.render(mapping,', 'rendering_function)', 'value', '=', 'mapping[self.key]', 'if', 'rendering_function', 'is', 'not', 'None:', 'value', '=', 'rendering_function(self.key,', 'value)', 'if', 'len(self.children)', '!=', '0:', 'value', '=', 'value.replace(self.content_holder,', 'content)', 'return', 'value']"
    },
    {
        "link": "https://raw.githubusercontent.com/tonybeltramelli/pix2code/master/compiler/classes/Utils.py",
        "vector": "['__author__', '=', \"'Tony\", 'Beltramelli', '-', \"www.tonybeltramelli.com'\", 'import', 'string', 'import', 'random', 'class', 'Utils:', '@staticmethod', 'def', 'get_random_text(length_text=10,', 'space_number=1,', 'with_upper_case=True):', 'results', '=', '[]', 'while', 'len(results)', '<', 'length_text:', 'char', '=', 'random.choice(string.ascii_letters[:26])', 'results.append(char)', 'if', 'with_upper_case:', 'results[0]', '=', 'results[0].upper()', 'current_spaces', '=', '[]', 'while', 'len(current_spaces)', '<', 'space_number:', 'space_pos', '=', 'random.randint(2,', 'length_text', '-', '3)', 'if', 'space_pos', 'in', 'current_spaces:', 'break', 'results[space_pos]', '=', '\"', '\"', 'if', 'with_upper_case:', 'results[space_pos', '+', '1]', '=', 'results[space_pos', '-', '1].upper()', 'current_spaces.append(space_pos)', 'return', \"''.join(results)\", '@staticmethod', 'def', 'get_ios_id(length=10):', 'results', '=', '[]', 'while', 'len(results)', '<', 'length:', 'char', '=', 'random.choice(string.digits', '+', 'string.ascii_letters)', 'results.append(char)', 'results[3]', '=', '\"-\"', 'results[6]', '=', '\"-\"', 'return', \"''.join(results)\", '@staticmethod', 'def', 'get_android_id(length=10):', 'results', '=', '[]', 'while', 'len(results)', '<', 'length:', 'char', '=', 'random.choice(string.ascii_letters)', 'results.append(char)', 'return', \"''.join(results)\"]"
    },
    {
        "link": "https://raw.githubusercontent.com/tonybeltramelli/pix2code/master/compiler/classes/__init__.py",
        "vector": "[]"
    },
    {
        "link": "https://raw.githubusercontent.com/tonybeltramelli/pix2code/master/compiler/ios-compiler.py",
        "vector": "['from', '__future__', 'import', 'print_function', '__author__', '=', \"'Tony\", 'Beltramelli', '-', \"www.tonybeltramelli.com'\", 'import', 'sys', 'from', 'os.path', 'import', 'basename', 'from', 'classes.Utils', 'import', '*', 'from', 'classes.Compiler', 'import', '*', 'if', '__name__', '==', '\"__main__\":', 'argv', '=', 'sys.argv[1:]', 'length', '=', 'len(argv)', 'if', 'length', '!=', '0:', 'input_file', '=', 'argv[0]', 'else:', 'print(\"Error:', 'not', 'enough', 'argument', 'supplied:\")', 'print(\"ios-compiler.py', '<input', 'file>\")', 'exit(0)', 'TEXT_PLACE_HOLDER', '=', '\"[TEXT]\"', 'ID_PLACE_HOLDER', '=', '\"[ID]\"', 'dsl_path', '=', '\"assets/ios-dsl-mapping.json\"', 'compiler', '=', 'Compiler(dsl_path)', 'def', 'render_content_with_text(key,', 'value):', 'value', '=', 'value.replace(TEXT_PLACE_HOLDER,', 'Utils.get_random_text(length_text=6,', 'space_number=0))', 'while', 'value.find(ID_PLACE_HOLDER)', '!=', '-1:', 'value', '=', 'value.replace(ID_PLACE_HOLDER,', 'Utils.get_ios_id(),', '1)', 'return', 'value', 'file_uid', '=', 'basename(input_file)[:basename(input_file).find(\".\")]', 'path', '=', 'input_file[:input_file.find(file_uid)]', 'input_file_path', '=', '\"{}{}.gui\".format(path,', 'file_uid)', 'output_file_path', '=', '\"{}{}.storyboard\".format(path,', 'file_uid)', 'compiler.compile(input_file_path,', 'output_file_path,', 'rendering_function=render_content_with_text)']"
    },
    {
        "link": "https://raw.githubusercontent.com/tonybeltramelli/pix2code/master/compiler/web-compiler.py",
        "vector": "['from', '__future__', 'import', 'print_function', '__author__', '=', \"'Tony\", 'Beltramelli', '-', \"www.tonybeltramelli.com'\", 'import', 'sys', 'from', 'os.path', 'import', 'basename', 'from', 'classes.Utils', 'import', '*', 'from', 'classes.Compiler', 'import', '*', 'if', '__name__', '==', '\"__main__\":', 'argv', '=', 'sys.argv[1:]', 'length', '=', 'len(argv)', 'if', 'length', '!=', '0:', 'input_file', '=', 'argv[0]', 'else:', 'print(\"Error:', 'not', 'enough', 'argument', 'supplied:\")', 'print(\"web-compiler.py', '<path>', '<file', 'name>\")', 'exit(0)', 'FILL_WITH_RANDOM_TEXT', '=', 'True', 'TEXT_PLACE_HOLDER', '=', '\"[]\"', 'dsl_path', '=', '\"assets/web-dsl-mapping.json\"', 'compiler', '=', 'Compiler(dsl_path)', 'def', 'render_content_with_text(key,', 'value):', 'if', 'FILL_WITH_RANDOM_TEXT:', 'if', 'key.find(\"btn\")', '!=', '-1:', 'value', '=', 'value.replace(TEXT_PLACE_HOLDER,', 'Utils.get_random_text())', 'elif', 'key.find(\"title\")', '!=', '-1:', 'value', '=', 'value.replace(TEXT_PLACE_HOLDER,', 'Utils.get_random_text(length_text=5,', 'space_number=0))', 'elif', 'key.find(\"text\")', '!=', '-1:', 'value', '=', 'value.replace(TEXT_PLACE_HOLDER,', 'Utils.get_random_text(length_text=56,', 'space_number=7,', 'with_upper_case=False))', 'return', 'value', 'file_uid', '=', 'basename(input_file)[:basename(input_file).find(\".\")]', 'path', '=', 'input_file[:input_file.find(file_uid)]', 'input_file_path', '=', '\"{}{}.gui\".format(path,', 'file_uid)', 'output_file_path', '=', '\"{}{}.html\".format(path,', 'file_uid)', 'compiler.compile(input_file_path,', 'output_file_path,', 'rendering_function=render_content_with_text)']"
    },
    {
        "link": "https://raw.githubusercontent.com/tonybeltramelli/pix2code/master/model/__init__.py",
        "vector": "[]"
    },
    {
        "link": "https://raw.githubusercontent.com/tonybeltramelli/pix2code/master/model/build_datasets.py",
        "vector": "['from', '__future__', 'import', 'print_function', 'from', '__future__', 'import', 'absolute_import', '__author__', '=', \"'Tony\", 'Beltramelli', '-', \"www.tonybeltramelli.com'\", 'import', 'os', 'import', 'sys', 'import', 'hashlib', 'import', 'shutil', 'from', 'classes.Sampler', 'import', '*', 'argv', '=', 'sys.argv[1:]', 'if', 'len(argv)', '<', '1:', 'print(\"Error:', 'not', 'enough', 'argument', 'supplied:\")', 'print(\"build_datasets.py', '<input', 'path>', '<distribution', '(default:', '6)>\")', 'exit(0)', 'else:', 'input_path', '=', 'argv[0]', 'distribution', '=', '6', 'if', 'len(argv)', '<', '2', 'else', 'argv[1]', 'TRAINING_SET_NAME', '=', '\"training_set\"', 'EVALUATION_SET_NAME', '=', '\"eval_set\"', 'paths', '=', '[]', 'for', 'f', 'in', 'os.listdir(input_path):', 'if', 'f.find(\".gui\")', '!=', '-1:', 'path_gui', '=', '\"{}/{}\".format(input_path,', 'f)', 'file_name', '=', 'f[:f.find(\".gui\")]', 'if', 'os.path.isfile(\"{}/{}.png\".format(input_path,', 'file_name)):', 'path_img', '=', '\"{}/{}.png\".format(input_path,', 'file_name)', 'paths.append(file_name)', 'evaluation_samples_number', '=', 'len(paths)', '/', '(distribution', '+', '1)', 'training_samples_number', '=', 'evaluation_samples_number', '*', 'distribution', 'assert', 'training_samples_number', '+', 'evaluation_samples_number', '==', 'len(paths)', 'print(\"Splitting', 'datasets,', 'training', 'samples:', '{},', 'evaluation', 'samples:', '{}\".format(training_samples_number,', 'evaluation_samples_number))', 'np.random.shuffle(paths)', 'eval_set', '=', '[]', 'train_set', '=', '[]', 'hashes', '=', '[]', 'for', 'path', 'in', 'paths:', 'if', 'sys.version_info', '>=', '(3,):', 'f', '=', 'open(\"{}/{}.gui\".format(input_path,', 'path),', \"'r',\", \"encoding='utf-8')\", 'else:', 'f', '=', 'open(\"{}/{}.gui\".format(input_path,', 'path),', \"'r')\", 'with', 'f:', 'chars', '=', '\"\"', 'for', 'line', 'in', 'f:', 'chars', '+=', 'line', 'content_hash', '=', 'chars.replace(\"', '\",', '\"\").replace(\"\\\\n\",', '\"\")', 'content_hash', '=', \"hashlib.sha256(content_hash.encode('utf-8')).hexdigest()\", 'if', 'len(eval_set)', '==', 'evaluation_samples_number:', 'train_set.append(path)', 'else:', 'is_unique', '=', 'True', 'for', 'h', 'in', 'hashes:', 'if', 'h', 'is', 'content_hash:', 'is_unique', '=', 'False', 'break', 'if', 'is_unique:', 'eval_set.append(path)', 'else:', 'train_set.append(path)', 'hashes.append(content_hash)', 'assert', 'len(eval_set)', '==', 'evaluation_samples_number', 'assert', 'len(train_set)', '==', 'training_samples_number', 'if', 'not', 'os.path.exists(\"{}/{}\".format(os.path.dirname(input_path),', 'EVALUATION_SET_NAME)):', 'os.makedirs(\"{}/{}\".format(os.path.dirname(input_path),', 'EVALUATION_SET_NAME))', 'if', 'not', 'os.path.exists(\"{}/{}\".format(os.path.dirname(input_path),', 'TRAINING_SET_NAME)):', 'os.makedirs(\"{}/{}\".format(os.path.dirname(input_path),', 'TRAINING_SET_NAME))', 'for', 'path', 'in', 'eval_set:', 'shutil.copyfile(\"{}/{}.png\".format(input_path,', 'path),', '\"{}/{}/{}.png\".format(os.path.dirname(input_path),', 'EVALUATION_SET_NAME,', 'path))', 'shutil.copyfile(\"{}/{}.gui\".format(input_path,', 'path),', '\"{}/{}/{}.gui\".format(os.path.dirname(input_path),', 'EVALUATION_SET_NAME,', 'path))', 'for', 'path', 'in', 'train_set:', 'shutil.copyfile(\"{}/{}.png\".format(input_path,', 'path),', '\"{}/{}/{}.png\".format(os.path.dirname(input_path),', 'TRAINING_SET_NAME,', 'path))', 'shutil.copyfile(\"{}/{}.gui\".format(input_path,', 'path),', '\"{}/{}/{}.gui\".format(os.path.dirname(input_path),', 'TRAINING_SET_NAME,', 'path))', 'print(\"Training', 'dataset:', '{}/training_set\".format(os.path.dirname(input_path),', 'path))', 'print(\"Evaluation', 'dataset:', '{}/eval_set\".format(os.path.dirname(input_path),', 'path))']"
    },
    {
        "link": "https://raw.githubusercontent.com/tonybeltramelli/pix2code/master/model/classes/BeamSearch.py",
        "vector": "['from', '__future__', 'import', 'print_function', '__author__', '=', \"'Tony\", 'Beltramelli', '-', \"www.tonybeltramelli.com'\", 'class', 'Node:', 'def', '__init__(self,', 'key,', 'value,', 'data=None):', 'self.key', '=', 'key', 'self.value', '=', 'value', 'self.data', '=', 'data', 'self.parent', '=', 'None', 'self.root', '=', 'None', 'self.children', '=', '[]', 'self.level', '=', '0', 'def', 'add_children(self,', 'children,', 'beam_width):', 'for', 'child', 'in', 'children:', 'child.level', '=', 'self.level', '+', '1', 'child.value', '=', 'child.value', '*', 'self.value', 'nodes', '=', 'sorted(children,', 'key=lambda', 'node:', 'node.value,', 'reverse=True)', 'nodes', '=', 'nodes[:beam_width]', 'for', 'node', 'in', 'nodes:', 'self.children.append(node)', 'node.parent', '=', 'self', 'if', 'self.parent', 'is', 'None:', 'self.root', '=', 'self', 'else:', 'self.root', '=', 'self.parent.root', 'child.root', '=', 'self.root', 'def', 'remove_child(self,', 'child):', 'self.children.remove(child)', 'def', 'max_child(self):', 'if', 'len(self.children)', '==', '0:', 'return', 'self', 'max_childs', '=', '[]', 'for', 'child', 'in', 'self.children:', 'max_childs.append(child.max_child())', 'nodes', '=', 'sorted(max_childs,', 'key=lambda', 'child:', 'child.value,', 'reverse=True)', 'return', 'nodes[0]', 'def', 'show(self,', 'depth=0):', 'print(\"', '\"', '*', 'depth,', 'self.key,', 'self.value,', 'self.level)', 'for', 'child', 'in', 'self.children:', 'child.show(depth', '+', '2)', 'class', 'BeamSearch:', 'def', '__init__(self,', 'beam_width=1):', 'self.beam_width', '=', 'beam_width', 'self.root', '=', 'None', 'self.clear()', 'def', 'search(self):', 'result', '=', 'self.root.max_child()', 'self.clear()', 'return', 'self.retrieve_path(result)', 'def', 'add_nodes(self,', 'parent,', 'children):', 'parent.add_children(children,', 'self.beam_width)', 'def', 'is_valid(self):', 'leaves', '=', 'self.get_leaves()', 'level', '=', 'leaves[0].level', 'counter', '=', '0', 'for', 'leaf', 'in', 'leaves:', 'if', 'leaf.level', '==', 'level:', 'counter', '+=', '1', 'else:', 'break', 'if', 'counter', '==', 'len(leaves):', 'return', 'True', 'return', 'False', 'def', 'get_leaves(self):', 'leaves', '=', '[]', 'self.search_leaves(self.root,', 'leaves)', 'return', 'leaves', 'def', 'search_leaves(self,', 'node,', 'leaves):', 'for', 'child', 'in', 'node.children:', 'if', 'len(child.children)', '==', '0:', 'leaves.append(child)', 'else:', 'self.search_leaves(child,', 'leaves)', 'def', 'prune_leaves(self):', 'leaves', '=', 'self.get_leaves()', 'nodes', '=', 'sorted(leaves,', 'key=lambda', 'leaf:', 'leaf.value,', 'reverse=True)', 'nodes', '=', 'nodes[self.beam_width:]', 'for', 'node', 'in', 'nodes:', 'node.parent.remove_child(node)', 'while', 'not', 'self.is_valid():', 'leaves', '=', 'self.get_leaves()', 'max_level', '=', '0', 'for', 'leaf', 'in', 'leaves:', 'if', 'leaf.level', '>', 'max_level:', 'max_level', '=', 'leaf.level', 'for', 'leaf', 'in', 'leaves:', 'if', 'leaf.level', '<', 'max_level:', 'leaf.parent.remove_child(leaf)', 'def', 'clear(self):', 'self.root', '=', 'None', 'self.root', '=', 'Node(\"root\",', '1.0,', 'None)', 'def', 'retrieve_path(self,', 'end):', 'path', '=', '[end.key]', 'data', '=', '[end.data]', 'while', 'end.parent', 'is', 'not', 'None:', 'end', '=', 'end.parent', 'path.append(end.key)', 'data.append(end.data)', 'result_path', '=', '[]', 'result_data', '=', '[]', 'for', 'i', 'in', 'range(len(path)', '-', '2,', '-1,', '-1):', 'result_path.append(path[i])', 'result_data.append(data[i])', 'return', 'result_path,', 'result_data']"
    },
    {
        "link": "https://raw.githubusercontent.com/tonybeltramelli/pix2code/master/model/classes/Sampler.py",
        "vector": "['from', '__future__', 'import', 'print_function', 'from', '__future__', 'import', 'absolute_import', '__author__', '=', \"'Tony\", 'Beltramelli', '-', \"www.tonybeltramelli.com'\", 'from', '.Vocabulary', 'import', '*', 'from', '.BeamSearch', 'import', '*', 'from', '.Utils', 'import', '*', 'class', 'Sampler:', 'def', '__init__(self,', 'voc_path,', 'input_shape,', 'output_size,', 'context_length):', 'self.voc', '=', 'Vocabulary()', 'self.voc.retrieve(voc_path)', 'self.input_shape', '=', 'input_shape', 'self.output_size', '=', 'output_size', 'print(\"Vocabulary', 'size:', '{}\".format(self.voc.size))', 'print(\"Input', 'shape:', '{}\".format(self.input_shape))', 'print(\"Output', 'size:', '{}\".format(self.output_size))', 'self.context_length', '=', 'context_length', 'def', 'predict_greedy(self,', 'model,', 'input_img,', 'require_sparse_label=True,', 'sequence_length=150,', 'verbose=False):', 'current_context', '=', '[self.voc.vocabulary[PLACEHOLDER]]', '*', '(self.context_length', '-', '1)', 'current_context.append(self.voc.vocabulary[START_TOKEN])', 'if', 'require_sparse_label:', 'current_context', '=', 'Utils.sparsify(current_context,', 'self.output_size)', 'predictions', '=', 'START_TOKEN', 'out_probas', '=', '[]', 'for', 'i', 'in', 'range(0,', 'sequence_length):', 'if', 'verbose:', 'print(\"predicting', '{}/{}...\".format(i,', 'sequence_length))', 'probas', '=', 'model.predict(input_img,', 'np.array([current_context]))', 'prediction', '=', 'np.argmax(probas)', 'out_probas.append(probas)', 'new_context', '=', '[]', 'for', 'j', 'in', 'range(1,', 'self.context_length):', 'new_context.append(current_context[j])', 'if', 'require_sparse_label:', 'sparse_label', '=', 'np.zeros(self.output_size)', 'sparse_label[prediction]', '=', '1', 'new_context.append(sparse_label)', 'else:', 'new_context.append(prediction)', 'current_context', '=', 'new_context', 'predictions', '+=', 'self.voc.token_lookup[prediction]', 'if', 'self.voc.token_lookup[prediction]', '==', 'END_TOKEN:', 'break', 'return', 'predictions,', 'out_probas', 'def', 'recursive_beam_search(self,', 'model,', 'input_img,', 'current_context,', 'beam,', 'current_node,', 'sequence_length):', 'probas', '=', 'model.predict(input_img,', 'np.array([current_context]))', 'predictions', '=', '[]', 'for', 'i', 'in', 'range(0,', 'len(probas)):', 'predictions.append((i,', 'probas[i],', 'probas))', 'nodes', '=', '[]', 'for', 'i', 'in', 'range(0,', 'len(predictions)):', 'prediction', '=', 'predictions[i][0]', 'score', '=', 'predictions[i][1]', 'output_probas', '=', 'predictions[i][2]', 'nodes.append(Node(prediction,', 'score,', 'output_probas))', 'beam.add_nodes(current_node,', 'nodes)', 'if', 'beam.is_valid():', 'beam.prune_leaves()', 'if', 'sequence_length', '==', '1', 'or', 'self.voc.token_lookup[beam.root.max_child().key]', '==', 'END_TOKEN:', 'return', 'for', 'node', 'in', 'beam.get_leaves():', 'prediction', '=', 'node.key', 'new_context', '=', '[]', 'for', 'j', 'in', 'range(1,', 'self.context_length):', 'new_context.append(current_context[j])', 'sparse_label', '=', 'np.zeros(self.output_size)', 'sparse_label[prediction]', '=', '1', 'new_context.append(sparse_label)', 'self.recursive_beam_search(model,', 'input_img,', 'new_context,', 'beam,', 'node,', 'sequence_length', '-', '1)', 'def', 'predict_beam_search(self,', 'model,', 'input_img,', 'beam_width=3,', 'require_sparse_label=True,', 'sequence_length=150):', 'predictions', '=', 'START_TOKEN', 'out_probas', '=', '[]', 'current_context', '=', '[self.voc.vocabulary[PLACEHOLDER]]', '*', '(self.context_length', '-', '1)', 'current_context.append(self.voc.vocabulary[START_TOKEN])', 'if', 'require_sparse_label:', 'current_context', '=', 'Utils.sparsify(current_context,', 'self.output_size)', 'beam', '=', 'BeamSearch(beam_width=beam_width)', 'self.recursive_beam_search(model,', 'input_img,', 'current_context,', 'beam,', 'beam.root,', 'sequence_length)', 'predicted_sequence,', 'probas_sequence', '=', 'beam.search()', 'for', 'k', 'in', 'range(0,', 'len(predicted_sequence)):', 'prediction', '=', 'predicted_sequence[k]', 'probas', '=', 'probas_sequence[k]', 'out_probas.append(probas)', 'predictions', '+=', 'self.voc.token_lookup[prediction]', 'return', 'predictions,', 'out_probas']"
    },
    {
        "link": "https://raw.githubusercontent.com/tonybeltramelli/pix2code/master/model/classes/Utils.py",
        "vector": "['__author__', '=', \"'Tony\", 'Beltramelli', '-', \"www.tonybeltramelli.com'\", 'import', 'numpy', 'as', 'np', 'class', 'Utils:', '@staticmethod', 'def', 'sparsify(label_vector,', 'output_size):', 'sparse_vector', '=', '[]', 'for', 'label', 'in', 'label_vector:', 'sparse_label', '=', 'np.zeros(output_size)', 'sparse_label[label]', '=', '1', 'sparse_vector.append(sparse_label)', 'return', 'np.array(sparse_vector)', '@staticmethod', 'def', 'get_preprocessed_img(img_path,', 'image_size):', 'import', 'cv2', 'img', '=', 'cv2.imread(img_path)', 'img', '=', 'cv2.resize(img,', '(image_size,', 'image_size))', 'img', '=', \"img.astype('float32')\", 'img', '/=', '255', 'return', 'img', '@staticmethod', 'def', 'show(image):', 'import', 'cv2', 'cv2.namedWindow(\"view\",', 'cv2.WINDOW_AUTOSIZE)', 'cv2.imshow(\"view\",', 'image)', 'cv2.waitKey(0)', 'cv2.destroyWindow(\"view\")']"
    },
    {
        "link": "https://raw.githubusercontent.com/tonybeltramelli/pix2code/master/model/classes/Vocabulary.py",
        "vector": "['__author__', '=', \"'Tony\", 'Beltramelli', '-', \"www.tonybeltramelli.com'\", 'import', 'sys', 'import', 'numpy', 'as', 'np', 'START_TOKEN', '=', '\"<START>\"', 'END_TOKEN', '=', '\"<END>\"', 'PLACEHOLDER', '=', '\"', '\"', 'SEPARATOR', '=', \"'->'\", 'class', 'Vocabulary:', 'def', '__init__(self):', 'self.binary_vocabulary', '=', '{}', 'self.vocabulary', '=', '{}', 'self.token_lookup', '=', '{}', 'self.size', '=', '0', 'self.append(START_TOKEN)', 'self.append(END_TOKEN)', 'self.append(PLACEHOLDER)', 'def', 'append(self,', 'token):', 'if', 'token', 'not', 'in', 'self.vocabulary:', 'self.vocabulary[token]', '=', 'self.size', 'self.token_lookup[self.size]', '=', 'token', 'self.size', '+=', '1', 'def', 'create_binary_representation(self):', 'if', 'sys.version_info', '>=', '(3,):', 'items', '=', 'self.vocabulary.items()', 'else:', 'items', '=', 'self.vocabulary.iteritems()', 'for', 'key,', 'value', 'in', 'items:', 'binary', '=', 'np.zeros(self.size)', 'binary[value]', '=', '1', 'self.binary_vocabulary[key]', '=', 'binary', 'def', 'get_serialized_binary_representation(self):', 'if', 'len(self.binary_vocabulary)', '==', '0:', 'self.create_binary_representation()', 'string', '=', '\"\"', 'if', 'sys.version_info', '>=', '(3,):', 'items', '=', 'self.binary_vocabulary.items()', 'else:', 'items', '=', 'self.binary_vocabulary.iteritems()', 'for', 'key,', 'value', 'in', 'items:', 'array_as_string', '=', 'np.array2string(value,', \"separator=',',\", 'max_line_width=self.size', '*', 'self.size)', 'string', '+=', '\"{}{}{}\\\\n\".format(key,', 'SEPARATOR,', 'array_as_string[1:len(array_as_string)', '-', '1])', 'return', 'string', 'def', 'save(self,', 'path):', 'output_file_name', '=', '\"{}/words.vocab\".format(path)', 'output_file', '=', 'open(output_file_name,', \"'w')\", 'output_file.write(self.get_serialized_binary_representation())', 'output_file.close()', 'def', 'retrieve(self,', 'path):', 'input_file', '=', 'open(\"{}/words.vocab\".format(path),', \"'r')\", 'buffer', '=', '\"\"', 'for', 'line', 'in', 'input_file:', 'try:', 'separator_position', '=', 'len(buffer)', '+', 'line.index(SEPARATOR)', 'buffer', '+=', 'line', 'key', '=', 'buffer[:separator_position]', 'value', '=', 'buffer[separator_position', '+', 'len(SEPARATOR):]', 'value', '=', 'np.fromstring(value,', \"sep=',')\", 'self.binary_vocabulary[key]', '=', 'value', 'self.vocabulary[key]', '=', 'np.where(value', '==', '1)[0][0]', 'self.token_lookup[np.where(value', '==', '1)[0][0]]', '=', 'key', 'buffer', '=', '\"\"', 'except', 'ValueError:', 'buffer', '+=', 'line', 'input_file.close()', 'self.size', '=', 'len(self.vocabulary)']"
    },
    {
        "link": "https://raw.githubusercontent.com/tonybeltramelli/pix2code/master/model/classes/__init__.py",
        "vector": "[]"
    },
    {
        "link": "https://raw.githubusercontent.com/tonybeltramelli/pix2code/master/model/classes/dataset/Dataset.py",
        "vector": "['from', '__future__', 'import', 'print_function', '__author__', '=', \"'Tony\", 'Beltramelli', '-', \"www.tonybeltramelli.com'\", 'import', 'os', 'from', 'classes.Vocabulary', 'import', '*', 'from', 'classes.Utils', 'import', '*', 'from', 'classes.model.Config', 'import', '*', 'class', 'Dataset:', 'def', '__init__(self):', 'self.input_shape', '=', 'None', 'self.output_size', '=', 'None', 'self.ids', '=', '[]', 'self.input_images', '=', '[]', 'self.partial_sequences', '=', '[]', 'self.next_words', '=', '[]', 'self.voc', '=', 'Vocabulary()', 'self.size', '=', '0', '@staticmethod', 'def', 'load_paths_only(path):', 'print(\"Parsing', 'data...\")', 'gui_paths', '=', '[]', 'img_paths', '=', '[]', 'for', 'f', 'in', 'os.listdir(path):', 'if', 'f.find(\".gui\")', '!=', '-1:', 'path_gui', '=', '\"{}/{}\".format(path,', 'f)', 'gui_paths.append(path_gui)', 'file_name', '=', 'f[:f.find(\".gui\")]', 'if', 'os.path.isfile(\"{}/{}.png\".format(path,', 'file_name)):', 'path_img', '=', '\"{}/{}.png\".format(path,', 'file_name)', 'img_paths.append(path_img)', 'elif', 'os.path.isfile(\"{}/{}.npz\".format(path,', 'file_name)):', 'path_img', '=', '\"{}/{}.npz\".format(path,', 'file_name)', 'img_paths.append(path_img)', 'assert', 'len(gui_paths)', '==', 'len(img_paths)', 'return', 'gui_paths,', 'img_paths', 'def', 'load(self,', 'path,', 'generate_binary_sequences=False):', 'print(\"Loading', 'data...\")', 'for', 'f', 'in', 'os.listdir(path):', 'if', 'f.find(\".gui\")', '!=', '-1:', 'gui', '=', 'open(\"{}/{}\".format(path,', 'f),', \"'r')\", 'file_name', '=', 'f[:f.find(\".gui\")]', 'if', 'os.path.isfile(\"{}/{}.png\".format(path,', 'file_name)):', 'img', '=', 'Utils.get_preprocessed_img(\"{}/{}.png\".format(path,', 'file_name),', 'IMAGE_SIZE)', 'self.append(file_name,', 'gui,', 'img)', 'elif', 'os.path.isfile(\"{}/{}.npz\".format(path,', 'file_name)):', 'img', '=', 'np.load(\"{}/{}.npz\".format(path,', 'file_name))[\"features\"]', 'self.append(file_name,', 'gui,', 'img)', 'print(\"Generating', 'sparse', 'vectors...\")', 'self.voc.create_binary_representation()', 'self.next_words', '=', 'self.sparsify_labels(self.next_words,', 'self.voc)', 'if', 'generate_binary_sequences:', 'self.partial_sequences', '=', 'self.binarize(self.partial_sequences,', 'self.voc)', 'else:', 'self.partial_sequences', '=', 'self.indexify(self.partial_sequences,', 'self.voc)', 'self.size', '=', 'len(self.ids)', 'assert', 'self.size', '==', 'len(self.input_images)', '==', 'len(self.partial_sequences)', '==', 'len(self.next_words)', 'assert', 'self.voc.size', '==', 'len(self.voc.vocabulary)', 'print(\"Dataset', 'size:', '{}\".format(self.size))', 'print(\"Vocabulary', 'size:', '{}\".format(self.voc.size))', 'self.input_shape', '=', 'self.input_images[0].shape', 'self.output_size', '=', 'self.voc.size', 'print(\"Input', 'shape:', '{}\".format(self.input_shape))', 'print(\"Output', 'size:', '{}\".format(self.output_size))', 'def', 'convert_arrays(self):', 'print(\"Convert', 'arrays...\")', 'self.input_images', '=', 'np.array(self.input_images)', 'self.partial_sequences', '=', 'np.array(self.partial_sequences)', 'self.next_words', '=', 'np.array(self.next_words)', 'def', 'append(self,', 'sample_id,', 'gui,', 'img,', 'to_show=False):', 'if', 'to_show:', 'pic', '=', 'img', '*', '255', 'pic', '=', 'np.array(pic,', 'dtype=np.uint8)', 'Utils.show(pic)', 'token_sequence', '=', '[START_TOKEN]', 'for', 'line', 'in', 'gui:', 'line', '=', 'line.replace(\",\",', '\"', ',\").replace(\"\\\\n\",', '\"', '\\\\n\")', 'tokens', '=', 'line.split(\"', '\")', 'for', 'token', 'in', 'tokens:', 'self.voc.append(token)', 'token_sequence.append(token)', 'token_sequence.append(END_TOKEN)', 'suffix', '=', '[PLACEHOLDER]', '*', 'CONTEXT_LENGTH', 'a', '=', 'np.concatenate([suffix,', 'token_sequence])', 'for', 'j', 'in', 'range(0,', 'len(a)', '-', 'CONTEXT_LENGTH):', 'context', '=', 'a[j:j', '+', 'CONTEXT_LENGTH]', 'label', '=', 'a[j', '+', 'CONTEXT_LENGTH]', 'self.ids.append(sample_id)', 'self.input_images.append(img)', 'self.partial_sequences.append(context)', 'self.next_words.append(label)', '@staticmethod', 'def', 'indexify(partial_sequences,', 'voc):', 'temp', '=', '[]', 'for', 'sequence', 'in', 'partial_sequences:', 'sparse_vectors_sequence', '=', '[]', 'for', 'token', 'in', 'sequence:', 'sparse_vectors_sequence.append(voc.vocabulary[token])', 'temp.append(np.array(sparse_vectors_sequence))', 'return', 'temp', '@staticmethod', 'def', 'binarize(partial_sequences,', 'voc):', 'temp', '=', '[]', 'for', 'sequence', 'in', 'partial_sequences:', 'sparse_vectors_sequence', '=', '[]', 'for', 'token', 'in', 'sequence:', 'sparse_vectors_sequence.append(voc.binary_vocabulary[token])', 'temp.append(np.array(sparse_vectors_sequence))', 'return', 'temp', '@staticmethod', 'def', 'sparsify_labels(next_words,', 'voc):', 'temp', '=', '[]', 'for', 'label', 'in', 'next_words:', 'temp.append(voc.binary_vocabulary[label])', 'return', 'temp', 'def', 'save_metadata(self,', 'path):', 'np.save(\"{}/meta_dataset\".format(path),', 'np.array([self.input_shape,', 'self.output_size,', 'self.size]))']"
    },
    {
        "link": "https://raw.githubusercontent.com/tonybeltramelli/pix2code/master/model/classes/dataset/Generator.py",
        "vector": "['from', '__future__', 'import', 'print_function', '__author__', '=', \"'Tony\", 'Beltramelli', '-', \"www.tonybeltramelli.com'\", 'import', 'numpy', 'as', 'np', 'from', 'classes.dataset.Dataset', 'import', '*', 'from', 'classes.Vocabulary', 'import', '*', 'from', 'classes.model.Config', 'import', '*', 'class', 'Generator:', '@staticmethod', 'def', 'data_generator(voc,', 'gui_paths,', 'img_paths,', 'batch_size,', 'generate_binary_sequences=False,', 'verbose=False,', 'loop_only_one=False):', 'assert', 'len(gui_paths)', '==', 'len(img_paths)', 'voc.create_binary_representation()', 'while', '1:', 'batch_input_images', '=', '[]', 'batch_partial_sequences', '=', '[]', 'batch_next_words', '=', '[]', 'sample_in_batch_counter', '=', '0', 'for', 'i', 'in', 'range(0,', 'len(gui_paths)):', 'if', 'img_paths[i].find(\".png\")', '!=', '-1:', 'img', '=', 'Utils.get_preprocessed_img(img_paths[i],', 'IMAGE_SIZE)', 'else:', 'img', '=', 'np.load(img_paths[i])[\"features\"]', 'gui', '=', 'open(gui_paths[i],', \"'r')\", 'token_sequence', '=', '[START_TOKEN]', 'for', 'line', 'in', 'gui:', 'line', '=', 'line.replace(\",\",', '\"', ',\").replace(\"\\\\n\",', '\"', '\\\\n\")', 'tokens', '=', 'line.split(\"', '\")', 'for', 'token', 'in', 'tokens:', 'voc.append(token)', 'token_sequence.append(token)', 'token_sequence.append(END_TOKEN)', 'suffix', '=', '[PLACEHOLDER]', '*', 'CONTEXT_LENGTH', 'a', '=', 'np.concatenate([suffix,', 'token_sequence])', 'for', 'j', 'in', 'range(0,', 'len(a)', '-', 'CONTEXT_LENGTH):', 'context', '=', 'a[j:j', '+', 'CONTEXT_LENGTH]', 'label', '=', 'a[j', '+', 'CONTEXT_LENGTH]', 'batch_input_images.append(img)', 'batch_partial_sequences.append(context)', 'batch_next_words.append(label)', 'sample_in_batch_counter', '+=', '1', 'if', 'sample_in_batch_counter', '==', 'batch_size', 'or', '(loop_only_one', 'and', 'i', '==', 'len(gui_paths)', '-', '1):', 'if', 'verbose:', 'print(\"Generating', 'sparse', 'vectors...\")', 'batch_next_words', '=', 'Dataset.sparsify_labels(batch_next_words,', 'voc)', 'if', 'generate_binary_sequences:', 'batch_partial_sequences', '=', 'Dataset.binarize(batch_partial_sequences,', 'voc)', 'else:', 'batch_partial_sequences', '=', 'Dataset.indexify(batch_partial_sequences,', 'voc)', 'if', 'verbose:', 'print(\"Convert', 'arrays...\")', 'batch_input_images', '=', 'np.array(batch_input_images)', 'batch_partial_sequences', '=', 'np.array(batch_partial_sequences)', 'batch_next_words', '=', 'np.array(batch_next_words)', 'if', 'verbose:', 'print(\"Yield', 'batch\")', 'yield', '([batch_input_images,', 'batch_partial_sequences],', 'batch_next_words)', 'batch_input_images', '=', '[]', 'batch_partial_sequences', '=', '[]', 'batch_next_words', '=', '[]', 'sample_in_batch_counter', '=', '0']"
    },
    {
        "link": "https://raw.githubusercontent.com/tonybeltramelli/pix2code/master/model/classes/dataset/__init__.py",
        "vector": "[]"
    },
    {
        "link": "https://raw.githubusercontent.com/tonybeltramelli/pix2code/master/model/classes/model/AModel.py",
        "vector": "['__author__', '=', \"'Tony\", 'Beltramelli', '-', \"www.tonybeltramelli.com'\", 'from', 'keras.models', 'import', 'model_from_json', 'class', 'AModel:', 'def', '__init__(self,', 'input_shape,', 'output_size,', 'output_path):', 'self.model', '=', 'None', 'self.input_shape', '=', 'input_shape', 'self.output_size', '=', 'output_size', 'self.output_path', '=', 'output_path', 'self.name', '=', '\"\"', 'def', 'save(self):', 'model_json', '=', 'self.model.to_json()', 'with', 'open(\"{}/{}.json\".format(self.output_path,', 'self.name),', '\"w\")', 'as', 'json_file:', 'json_file.write(model_json)', 'self.model.save_weights(\"{}/{}.h5\".format(self.output_path,', 'self.name))', 'def', 'load(self,', 'name=\"\"):', 'output_name', '=', 'self.name', 'if', 'name', '==', '\"\"', 'else', 'name', 'with', 'open(\"{}/{}.json\".format(self.output_path,', 'output_name),', '\"r\")', 'as', 'json_file:', 'loaded_model_json', '=', 'json_file.read()', 'self.model', '=', 'model_from_json(loaded_model_json)', 'self.model.load_weights(\"{}/{}.h5\".format(self.output_path,', 'output_name))']"
    },
    {
        "link": "https://raw.githubusercontent.com/tonybeltramelli/pix2code/master/model/classes/model/Config.py",
        "vector": "['__author__', '=', \"'Tony\", 'Beltramelli', '-', \"www.tonybeltramelli.com'\", 'CONTEXT_LENGTH', '=', '48', 'IMAGE_SIZE', '=', '256', 'BATCH_SIZE', '=', '64', 'EPOCHS', '=', '10', 'STEPS_PER_EPOCH', '=', '72000']"
    },
    {
        "link": "https://raw.githubusercontent.com/tonybeltramelli/pix2code/master/model/classes/model/__init__.py",
        "vector": "[]"
    },
    {
        "link": "https://raw.githubusercontent.com/tonybeltramelli/pix2code/master/model/classes/model/pix2code.py",
        "vector": "['from', '__future__', 'import', 'absolute_import', '__author__', '=', \"'Tony\", 'Beltramelli', '-', \"www.tonybeltramelli.com'\", 'from', 'keras.layers', 'import', 'Input,', 'Dense,', 'Dropout,', '\\\\', 'RepeatVector,', 'LSTM,', 'concatenate,', '\\\\', 'Conv2D,', 'MaxPooling2D,', 'Flatten', 'from', 'keras.models', 'import', 'Sequential,', 'Model', 'from', 'keras.optimizers', 'import', 'RMSprop', 'from', 'keras', 'import', '*', 'from', '.Config', 'import', '*', 'from', '.AModel', 'import', '*', 'class', 'pix2code(AModel):', 'def', '__init__(self,', 'input_shape,', 'output_size,', 'output_path):', 'AModel.__init__(self,', 'input_shape,', 'output_size,', 'output_path)', 'self.name', '=', '\"pix2code\"', 'image_model', '=', 'Sequential()', 'image_model.add(Conv2D(32,', '(3,', '3),', \"padding='valid',\", \"activation='relu',\", 'input_shape=input_shape))', 'image_model.add(Conv2D(32,', '(3,', '3),', \"padding='valid',\", \"activation='relu'))\", 'image_model.add(MaxPooling2D(pool_size=(2,', '2)))', 'image_model.add(Dropout(0.25))', 'image_model.add(Conv2D(64,', '(3,', '3),', \"padding='valid',\", \"activation='relu'))\", 'image_model.add(Conv2D(64,', '(3,', '3),', \"padding='valid',\", \"activation='relu'))\", 'image_model.add(MaxPooling2D(pool_size=(2,', '2)))', 'image_model.add(Dropout(0.25))', 'image_model.add(Conv2D(128,', '(3,', '3),', \"padding='valid',\", \"activation='relu'))\", 'image_model.add(Conv2D(128,', '(3,', '3),', \"padding='valid',\", \"activation='relu'))\", 'image_model.add(MaxPooling2D(pool_size=(2,', '2)))', 'image_model.add(Dropout(0.25))', 'image_model.add(Flatten())', 'image_model.add(Dense(1024,', \"activation='relu'))\", 'image_model.add(Dropout(0.3))', 'image_model.add(Dense(1024,', \"activation='relu'))\", 'image_model.add(Dropout(0.3))', 'image_model.add(RepeatVector(CONTEXT_LENGTH))', 'visual_input', '=', 'Input(shape=input_shape)', 'encoded_image', '=', 'image_model(visual_input)', 'language_model', '=', 'Sequential()', 'language_model.add(LSTM(128,', 'return_sequences=True,', 'input_shape=(CONTEXT_LENGTH,', 'output_size)))', 'language_model.add(LSTM(128,', 'return_sequences=True))', 'textual_input', '=', 'Input(shape=(CONTEXT_LENGTH,', 'output_size))', 'encoded_text', '=', 'language_model(textual_input)', 'decoder', '=', 'concatenate([encoded_image,', 'encoded_text])', 'decoder', '=', 'LSTM(512,', 'return_sequences=True)(decoder)', 'decoder', '=', 'LSTM(512,', 'return_sequences=False)(decoder)', 'decoder', '=', 'Dense(output_size,', \"activation='softmax')(decoder)\", 'self.model', '=', 'Model(inputs=[visual_input,', 'textual_input],', 'outputs=decoder)', 'optimizer', '=', 'RMSprop(lr=0.0001,', 'clipvalue=1.0)', \"self.model.compile(loss='categorical_crossentropy',\", 'optimizer=optimizer)', 'def', 'fit(self,', 'images,', 'partial_captions,', 'next_words):', 'self.model.fit([images,', 'partial_captions],', 'next_words,', 'shuffle=False,', 'epochs=EPOCHS,', 'batch_size=BATCH_SIZE,', 'verbose=1)', 'self.save()', 'def', 'fit_generator(self,', 'generator,', 'steps_per_epoch):', 'self.model.fit_generator(generator,', 'steps_per_epoch=steps_per_epoch,', 'epochs=EPOCHS,', 'verbose=1)', 'self.save()', 'def', 'predict(self,', 'image,', 'partial_caption):', 'return', 'self.model.predict([image,', 'partial_caption],', 'verbose=0)[0]', 'def', 'predict_batch(self,', 'images,', 'partial_captions):', 'return', 'self.model.predict([images,', 'partial_captions],', 'verbose=1)']"
    },
    {
        "link": "https://raw.githubusercontent.com/tonybeltramelli/pix2code/master/model/convert_imgs_to_arrays.py",
        "vector": "['from', '__future__', 'import', 'print_function', 'from', '__future__', 'import', 'absolute_import', '__author__', '=', \"'Tony\", 'Beltramelli', '-', \"www.tonybeltramelli.com'\", 'import', 'os', 'import', 'sys', 'import', 'shutil', 'from', 'classes.Utils', 'import', '*', 'from', 'classes.model.Config', 'import', '*', 'argv', '=', 'sys.argv[1:]', 'if', 'len(argv)', '<', '2:', 'print(\"Error:', 'not', 'enough', 'argument', 'supplied:\")', 'print(\"convert_imgs_to_arrays.py', '<input', 'path>', '<output', 'path>\")', 'exit(0)', 'else:', 'input_path', '=', 'argv[0]', 'output_path', '=', 'argv[1]', 'if', 'not', 'os.path.exists(output_path):', 'os.makedirs(output_path)', 'print(\"Converting', 'images', 'to', 'numpy', 'arrays...\")', 'for', 'f', 'in', 'os.listdir(input_path):', 'if', 'f.find(\".png\")', '!=', '-1:', 'img', '=', 'Utils.get_preprocessed_img(\"{}/{}\".format(input_path,', 'f),', 'IMAGE_SIZE)', 'file_name', '=', 'f[:f.find(\".png\")]', 'np.savez_compressed(\"{}/{}\".format(output_path,', 'file_name),', 'features=img)', 'retrieve', '=', 'np.load(\"{}/{}.npz\".format(output_path,', 'file_name))[\"features\"]', 'assert', 'np.array_equal(img,', 'retrieve)', 'shutil.copyfile(\"{}/{}.gui\".format(input_path,', 'file_name),', '\"{}/{}.gui\".format(output_path,', 'file_name))', 'print(\"Numpy', 'arrays', 'saved', 'in', '{}\".format(output_path))']"
    },
    {
        "link": "https://raw.githubusercontent.com/tonybeltramelli/pix2code/master/model/generate.py",
        "vector": "['from', '__future__', 'import', 'print_function', 'from', '__future__', 'import', 'absolute_import', '__author__', '=', \"'Tony\", 'Beltramelli', '-', \"www.tonybeltramelli.com'\", 'import', 'os', 'import', 'sys', 'from', 'classes.Sampler', 'import', '*', 'from', 'classes.model.pix2code', 'import', '*', 'argv', '=', 'sys.argv[1:]', 'if', 'len(argv)', '<', '4:', 'print(\"Error:', 'not', 'enough', 'argument', 'supplied:\")', 'print(\"generate.py', '<trained', 'weights', 'path>', '<trained', 'model', 'name>', '<input', 'image>', '<output', 'path>', '<search', 'method', '(default:', 'greedy)>\")', 'exit(0)', 'else:', 'trained_weights_path', '=', 'argv[0]', 'trained_model_name', '=', 'argv[1]', 'input_path', '=', 'argv[2]', 'output_path', '=', 'argv[3]', 'search_method', '=', '\"greedy\"', 'if', 'len(argv)', '<', '5', 'else', 'argv[4]', 'meta_dataset', '=', 'np.load(\"{}/meta_dataset.npy\".format(trained_weights_path))', 'input_shape', '=', 'meta_dataset[0]', 'output_size', '=', 'meta_dataset[1]', 'model', '=', 'pix2code(input_shape,', 'output_size,', 'trained_weights_path)', 'model.load(trained_model_name)', 'sampler', '=', 'Sampler(trained_weights_path,', 'input_shape,', 'output_size,', 'CONTEXT_LENGTH)', 'for', 'f', 'in', 'os.listdir(input_path):', 'if', 'f.find(\".png\")', '!=', '-1:', 'evaluation_img', '=', 'Utils.get_preprocessed_img(\"{}/{}\".format(input_path,', 'f),', 'IMAGE_SIZE)', 'file_name', '=', 'f[:f.find(\".png\")]', 'if', 'search_method', '==', '\"greedy\":', 'result,', '_', '=', 'sampler.predict_greedy(model,', 'np.array([evaluation_img]))', 'print(\"Result', 'greedy:', '{}\".format(result))', 'else:', 'beam_width', '=', 'int(search_method)', 'print(\"Search', 'with', 'beam', 'width:', '{}\".format(beam_width))', 'result,', '_', '=', 'sampler.predict_beam_search(model,', 'np.array([evaluation_img]),', 'beam_width=beam_width)', 'print(\"Result', 'beam:', '{}\".format(result))', 'with', 'open(\"{}/{}.gui\".format(output_path,', 'file_name),', \"'w')\", 'as', 'out_f:', 'out_f.write(result.replace(START_TOKEN,', '\"\").replace(END_TOKEN,', '\"\"))']"
    },
    {
        "link": "https://raw.githubusercontent.com/tonybeltramelli/pix2code/master/model/sample.py",
        "vector": "['from', '__future__', 'import', 'print_function', 'from', '__future__', 'import', 'absolute_import', '__author__', '=', \"'Tony\", 'Beltramelli', '-', \"www.tonybeltramelli.com'\", 'import', 'sys', 'from', 'os.path', 'import', 'basename', 'from', 'classes.Sampler', 'import', '*', 'from', 'classes.model.pix2code', 'import', '*', 'argv', '=', 'sys.argv[1:]', 'if', 'len(argv)', '<', '4:', 'print(\"Error:', 'not', 'enough', 'argument', 'supplied:\")', 'print(\"sample.py', '<trained', 'weights', 'path>', '<trained', 'model', 'name>', '<input', 'image>', '<output', 'path>', '<search', 'method', '(default:', 'greedy)>\")', 'exit(0)', 'else:', 'trained_weights_path', '=', 'argv[0]', 'trained_model_name', '=', 'argv[1]', 'input_path', '=', 'argv[2]', 'output_path', '=', 'argv[3]', 'search_method', '=', '\"greedy\"', 'if', 'len(argv)', '<', '5', 'else', 'argv[4]', 'meta_dataset', '=', 'np.load(\"{}/meta_dataset.npy\".format(trained_weights_path))', 'input_shape', '=', 'meta_dataset[0]', 'output_size', '=', 'meta_dataset[1]', 'model', '=', 'pix2code(input_shape,', 'output_size,', 'trained_weights_path)', 'model.load(trained_model_name)', 'sampler', '=', 'Sampler(trained_weights_path,', 'input_shape,', 'output_size,', 'CONTEXT_LENGTH)', 'file_name', '=', 'basename(input_path)[:basename(input_path).find(\".\")]', 'evaluation_img', '=', 'Utils.get_preprocessed_img(input_path,', 'IMAGE_SIZE)', 'if', 'search_method', '==', '\"greedy\":', 'result,', '_', '=', 'sampler.predict_greedy(model,', 'np.array([evaluation_img]))', 'print(\"Result', 'greedy:', '{}\".format(result))', 'else:', 'beam_width', '=', 'int(search_method)', 'print(\"Search', 'with', 'beam', 'width:', '{}\".format(beam_width))', 'result,', '_', '=', 'sampler.predict_beam_search(model,', 'np.array([evaluation_img]),', 'beam_width=beam_width)', 'print(\"Result', 'beam:', '{}\".format(result))', 'with', 'open(\"{}/{}.gui\".format(output_path,', 'file_name),', \"'w')\", 'as', 'out_f:', 'out_f.write(result.replace(START_TOKEN,', '\"\").replace(END_TOKEN,', '\"\"))']"
    },
    {
        "link": "https://raw.githubusercontent.com/tonybeltramelli/pix2code/master/model/train.py",
        "vector": "['from', '__future__', 'import', 'print_function', 'from', '__future__', 'import', 'absolute_import', '__author__', '=', \"'Tony\", 'Beltramelli', '-', \"www.tonybeltramelli.com'\", 'import', 'tensorflow', 'as', 'tf', 'sess', '=', 'tf.Session(config=tf.ConfigProto(log_device_placement=True))', 'import', 'sys', 'from', 'classes.dataset.Generator', 'import', '*', 'from', 'classes.model.pix2code', 'import', '*', 'def', 'run(input_path,', 'output_path,', 'is_memory_intensive=False,', 'pretrained_model=None):', 'np.random.seed(1234)', 'dataset', '=', 'Dataset()', 'dataset.load(input_path,', 'generate_binary_sequences=True)', 'dataset.save_metadata(output_path)', 'dataset.voc.save(output_path)', 'if', 'not', 'is_memory_intensive:', 'dataset.convert_arrays()', 'input_shape', '=', 'dataset.input_shape', 'output_size', '=', 'dataset.output_size', 'print(len(dataset.input_images),', 'len(dataset.partial_sequences),', 'len(dataset.next_words))', 'print(dataset.input_images.shape,', 'dataset.partial_sequences.shape,', 'dataset.next_words.shape)', 'else:', 'gui_paths,', 'img_paths', '=', 'Dataset.load_paths_only(input_path)', 'input_shape', '=', 'dataset.input_shape', 'output_size', '=', 'dataset.output_size', 'steps_per_epoch', '=', 'dataset.size', '/', 'BATCH_SIZE', 'voc', '=', 'Vocabulary()', 'voc.retrieve(output_path)', 'generator', '=', 'Generator.data_generator(voc,', 'gui_paths,', 'img_paths,', 'batch_size=BATCH_SIZE,', 'generate_binary_sequences=True)', 'model', '=', 'pix2code(input_shape,', 'output_size,', 'output_path)', 'if', 'pretrained_model', 'is', 'not', 'None:', 'model.model.load_weights(pretrained_model)', 'if', 'not', 'is_memory_intensive:', 'model.fit(dataset.input_images,', 'dataset.partial_sequences,', 'dataset.next_words)', 'else:', 'model.fit_generator(generator,', 'steps_per_epoch=steps_per_epoch)', 'if', '__name__', '==', '\"__main__\":', 'argv', '=', 'sys.argv[1:]', 'if', 'len(argv)', '<', '2:', 'print(\"Error:', 'not', 'enough', 'argument', 'supplied:\")', 'print(\"train.py', '<input', 'path>', '<output', 'path>', '<is', 'memory', 'intensive', '(default:', '0)>', '<pretrained', 'weights', '(optional)>\")', 'exit(0)', 'else:', 'input_path', '=', 'argv[0]', 'output_path', '=', 'argv[1]', 'use_generator', '=', 'False', 'if', 'len(argv)', '<', '3', 'else', 'True', 'if', 'int(argv[2])', '==', '1', 'else', 'False', 'pretrained_weigths', '=', 'None', 'if', 'len(argv)', '<', '4', 'else', 'argv[3]', 'run(input_path,', 'output_path,', 'is_memory_intensive=use_generator,', 'pretrained_model=pretrained_weigths)']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/doc/conf.py",
        "vector": "['import', 'sys', 'import', 'os', 'import', 'sphinx_rtd_theme', 'extensions', '=', '[', \"'sphinx.ext.autodoc',\", \"'sphinx.ext.todo',\", ']', 'templates_path', '=', \"['_templates']\", 'source_suffix', '=', \"'.rst'\", 'master_doc', '=', \"'index'\", 'project', '=', \"'mps_youtube'\", 'copyright', '=', \"'2016,\", 'mps-youtube', \"developers'\", 'author', '=', \"'mps-youtube\", \"developers'\", 'version', '=', \"''\", 'release', '=', \"''\", 'language', '=', \"'en'\", 'exclude_patterns', '=', \"['_build',\", \"'Thumbs.db',\", \"'.DS_Store']\", 'pygments_style', '=', \"'sphinx'\", 'todo_include_todos', '=', 'True', 'html_theme', '=', '\"sphinx_rtd_theme\"', 'html_theme_path', '=', '[sphinx_rtd_theme.get_html_theme_path()]', 'html_static_path', '=', \"['_static']\", 'htmlhelp_basename', '=', \"'mps_youtubedoc'\", 'latex_elements', '=', '{', '}', 'latex_documents', '=', '[', '(master_doc,', \"'mps_youtube.tex',\", \"'mps\\\\\\\\_youtube\", \"Documentation',\", \"'Author',\", \"'manual'),\", ']', 'man_pages', '=', '[', '(master_doc,', \"'mps_youtube',\", \"'mps_youtube\", \"Documentation',\", '[author],', '1)', ']', 'texinfo_documents', '=', '[', '(master_doc,', \"'mps_youtube',\", \"'mps_youtube\", \"Documentation',\", 'author,', \"'mps_youtube',\", \"'One\", 'line', 'description', 'of', \"project.',\", \"'Miscellaneous'),\", ']', 'epub_title', '=', 'project', 'epub_author', '=', 'author', 'epub_publisher', '=', 'author', 'epub_copyright', '=', 'copyright', 'epub_exclude_files', '=', \"['search.html']\"]"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/docs/gen_ref_nav.py",
        "vector": "['from', 'pathlib', 'import', 'Path', 'import', 'mkdocs_gen_files', 'nav', '=', 'mkdocs_gen_files.Nav()', 'skip_files', '=', '[', '(Path(\"mps_youtube\")', '/', '\"config.py\"),', '(Path(\"mps_youtube\")', '/', '\"mpris.py\"),', ']', 'skip_files.extend((Path(\"mps_youtube\")', '/', '\"test\").glob(\"*.py\"))', 'for', 'path', 'in', 'sorted(Path(\"mps_youtube\").glob(\"**/*.py\")):', 'if', 'path', 'in', 'skip_files:', 'continue', 'module_path', '=', 'path.with_suffix(\"\")', 'doc_path', '=', 'path.relative_to(\"mps_youtube\").with_suffix(\".md\")', 'full_doc_path', '=', 'Path(\"reference\",', 'doc_path)', 'parts', '=', 'list(module_path.parts)', 'parts[-1]', '=', 'f\"{parts[-1]}.py\"', 'nav[parts]', '=', 'doc_path', 'with', 'mkdocs_gen_files.open(full_doc_path,', '\"w\")', 'as', 'fd:', 'ident', '=', '\".\".join(module_path.parts)', 'print(\":::', '\"', '+', 'ident,', 'file=fd)', 'mkdocs_gen_files.set_edit_path(full_doc_path,', 'path)', 'with', 'mkdocs_gen_files.open(\"reference/SUMMARY.md\",', '\"w\")', 'as', 'nav_file:', 'nav_file.writelines(nav.build_literate_nav())']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/__init__.py",
        "vector": "['from', 'pip._vendor', 'import', 'pkg_resources', '__version__', '=', 'next((p.version', 'for', 'p', 'in', 'pkg_resources.working_set', 'if', 'p.project_name.lower()', '==', \"'yewtube'),\", '\"unable', 'to', 'determine\")', '__author__', '=', '\"iamtalhaasghar\"', '__license__', '=', '\"GPLv3\"', '__url__', '=', '\"https://github.com/iamtalhaasghar/yewtube\"']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/c.py",
        "vector": "['import', 'os', 'import', 're', 'import', 'sys', 'if', 'sys.stdout.isatty():', 'white', '=', '\"\\\\x1b[%sm\"', '%', '0', 'ul', '=', '\"\\\\x1b[%sm\"', '*', '2', '%', '(2,', '4)', 'if', 'not', \"os.getenv('NO_COLOR'):\", 'ul', '+=', '\"\\\\x1b[%33m\"', 'cols', '=', '[\"\\\\x1b[%sm\"', '%', 'n', 'for', 'n', 'in', 'range(91,', '96)]', 'red,', 'green,', 'yellow,', 'blue,', 'pink', '=', '[\"\"]*5', 'if', \"os.getenv('NO_COLOR')\", 'else', 'cols', 'else:', 'ul', '=', 'red', '=', 'green', '=', 'yellow', '=', 'blue', '=', 'pink', '=', 'white', '=', '\"\"', 'r,', 'g,', 'y,', 'b,', 'p,', 'w', '=', 'red,', 'green,', 'yellow,', 'blue,', 'pink,', 'white', 'ansirx', '=', \"re.compile(r'\\\\x1b\\\\[\\\\d*m',\", 're.UNICODE)', 'def', 'c(colour,', 'text):', 'colours', '=', \"{'r':\", 'r,', \"'g':\", 'g,', \"'y':\", 'y,', \"'b':b,\", \"'p':p}\", 'return', 'colours[colour]', '+', 'text', '+', 'w', 'def', 'charcount(s):', 'return', \"len(ansirx.sub('',\", 's))']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/cache.py",
        "vector": "['import', 'os', 'import', 'pickle', 'from', '.', 'import', 'g,', 'c,', 'streams', 'from', '.util', 'import', 'dbg', 'CACHE_VERSION', '=', '1', 'def', 'load():', 'if', 'os.path.isfile(g.CACHEFILE):', 'try:', 'with', 'open(g.CACHEFILE,', '\"rb\")', 'as', 'cf:', 'cached', '=', 'pickle.load(cf)', 'version', '=', \"cached.get('version')\", 'if', \"'streams'\", 'in', 'cached:', 'if', 'version', 'and', 'version', '>=', '1:', 'g.streams', '=', \"cached['streams']\", 'g.username_query_cache', '=', \"cached['userdata']\", 'else:', 'g.streams', '=', 'cached', 'if', \"'pafy'\", 'in', 'cached:', 'pass', 'dbg(c.g', '+', '\"%s', 'cached', 'streams', 'imported%s\",', 'str(len(g.streams)),', 'c.w)', 'except', '(EOFError,', 'IOError):', 'dbg(c.r', '+', '\"Cache', 'file', 'failed', 'to', 'open\"', '+', 'c.w)', 'streams.prune()', 'def', 'save():', 'caches', '=', 'dict(', 'version=CACHE_VERSION,', 'streams=g.streams,', 'userdata=g.username_query_cache', ')', 'with', 'open(g.CACHEFILE,', '\"wb\")', 'as', 'cf:', 'pickle.dump(caches,', 'cf,', 'protocol=2)', 'dbg(c.p', '+', '\"saved', 'cache', 'file:', '\"', '+', 'g.CACHEFILE', '+', 'c.w)']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/commands/__init__.py",
        "vector": "['import', 'collections', 'import', 're', 'from', '..', 'import', 'g', 'from', '..main', 'import', 'completer', 'Command', '=', \"collections.namedtuple('Command',\", \"'regex\", 'category', 'usage', \"function')\", 'WORD', '=', \"r'[^\\\\W\\\\d][-\\\\w\\\\s]{,100}'\", 'RS', '=', \"r'(?:(?:repeat|shuffle|-[avfw])\\\\s*)'\", 'PL', '=', \"r'\\\\S*?((?:RD|PL|LL|UU|FL|OL)[-_0-9a-zA-Z]+)\\\\s*'\", 'def', 'command(regex,', '*commands):', 'for', 'command', 'in', 'commands:', 'completer.add_cmd(command)', 'def', 'decorator(function):', 'cmd', '=', 'Command(re.compile(regex),', 'None,', 'None,', 'function)', 'g.commands.append(cmd)', 'return', 'function', 'return', 'decorator', 'from', '.', 'import', 'download,', 'search,', 'album_search,', 'spotify_playlist,', 'misc,', 'config,', 'local_playlist', 'from', '.', 'import', 'play,', 'songlist,', 'generate_playlist,', 'lastfm']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/commands/album_search.py",
        "vector": "['import', 're', 'import', 'time', 'import', 'difflib', 'from', 'urllib.request', 'import', 'build_opener', 'from', 'urllib.error', 'import', 'HTTPError,', 'URLError', 'from', 'urllib.parse', 'import', 'urlencode', 'from', 'xml.etree', 'import', 'ElementTree', 'as', 'ET', 'from', '..', 'import', 'c,', 'g,', 'screen,', '__version__,', '__url__,', 'config,', 'util,', 'pafy', 'from', '..', 'import', 'content', 'as', 'content_py', 'from', '.', 'import', 'command', 'from', '.songlist', 'import', 'paginatesongs', 'from', '.search', 'import', 'get_tracks_from_json', 'def', 'show_message(message,', 'col=c.r,', 'update=False):', 'g.content', '=', 'content_py.generate_songlist_display()', 'g.message', '=', 'col', '+', 'message', '+', 'c.w', 'if', 'update:', 'screen.update()', 'def', '_do_query(url,', 'query,', \"err='query\", \"failed',\", 'report=False):', 'ua', '=', '\"mps-youtube/%s', '(', '%s', ')\"', '%', '(__version__,', '__url__)', 'mpsyt_opener', '=', 'build_opener()', 'mpsyt_opener.addheaders', '=', \"[('User-agent',\", 'ua)]', 'query', '=', '[(k,', 'query[k])', 'for', 'k', 'in', 'sorted(query.keys())]', 'url', '=', '\"%s?%s\"', '%', '(url,', 'urlencode(query))', 'try:', 'wdata', '=', 'mpsyt_opener.open(url).read().decode()', 'except', '(URLError,', 'HTTPError)', 'as', 'e:', 'g.message', '=', '\"%s:', '%s', '(%s)\"', '%', '(err,', 'e,', 'url)', 'g.content', '=', 'content_py.logo(c.r)', 'return', 'None', 'if', 'not', 'report', 'else', '(None,', 'False)', 'return', 'wdata', 'if', 'not', 'report', 'else', '(wdata,', 'False)', 'def', '_best_song_match(songs,', 'title,', 'duration,', 'titleweight,', 'durationweight):', 'seqmatch', '=', 'difflib.SequenceMatcher', 'def', 'variance(a,', 'b):', 'return', 'float(abs(a', '-', 'b))', '/', 'max(a,', 'b)', 'candidates', '=', '[]', 'ignore', '=', '\"music', 'video', 'lyrics', 'new', 'lyrics', 'video', 'audio\".split()', 'extra', '=', '\"official', 'original', 'vevo\".split()', 'for', 'song', 'in', 'songs:', 'dur,', 'tit', '=', 'int(song.length),', 'song.title', 'util.dbg(\"Title:', '%s,', 'Duration:', '%s\",', 'tit,', 'dur)', 'for', 'word', 'in', 'extra:', 'if', 'word', 'in', 'tit.lower()', 'and', 'word', 'not', 'in', 'title.lower():', 'pattern', '=', 're.compile(word,', 're.I)', 'tit', '=', 'pattern.sub(\"\",', 'tit)', 'for', 'word', 'in', 'ignore:', 'if', 'word', 'in', 'tit.lower()', 'and', 'word', 'not', 'in', 'title.lower():', 'pattern', '=', 're.compile(word,', 're.I)', 'tit', '=', 'pattern.sub(\"\",', 'tit)', 'replacechars', '=', 're.compile(r\"[\\\\]\\\\[\\\\)\\\\(\\\\-]\")', 'tit', '=', 'replacechars.sub(\"', '\",', 'tit)', 'multiple_spaces', '=', 're.compile(r\"(\\\\s)(\\\\s*)\")', 'tit', '=', 'multiple_spaces.sub(r\"\\\\1\",', 'tit)', 'title_score', '=', 'seqmatch(None,', 'title.lower(),', 'tit.lower()).ratio()', 'duration_score', '=', '1', '-', 'variance(duration,', 'dur)', 'util.dbg(\"Title', 'score:', '%s,', 'Duration', 'score:', '%s\",', 'title_score,', 'duration_score)', 'score', '=', 'duration_score', '*', 'durationweight', '+', 'title_score', '*', 'titleweight', 'candidates.append((score,', 'song))', 'best_score,', 'best_song', '=', 'max(candidates,', 'key=lambda', 'x:', 'x[0])', 'percent_score', '=', 'int(100', '*', 'best_score)', 'return', 'best_song,', 'percent_score', 'def', '_match_tracks(artist,', 'title,', 'mb_tracks):', 'util.dbg(\"artists', 'is', '%s\",', 'artist)', 'util.dbg(\"title', 'is', '%s\",', 'title)', 'title_artist_str', '=', 'c.g', '+', 'title', '+', 'c.w,', 'c.g', '+', 'artist', '+', 'c.w', 'util.xprint(\"\\\\nSearching', 'for', '%s', 'by', '%s\\\\n\\\\n\"', '%', 'title_artist_str)', 'def', 'dtime(x):', 'return', \"time.strftime('%M:%S',\", 'time.gmtime(int(x)))', 'for', 'track', 'in', 'mb_tracks:', 'ttitle', '=', \"track['title']\", 'length', '=', \"track['length']\", 'util.xprint(\"Search', ':', '%s%s', '-', '%s%s', '-', '%s\"', '%', '(c.y,', 'artist,', 'ttitle,', 'c.w,', 'dtime(length)))', 'q', '=', '\"%s', '%s\"', '%', '(artist,', 'ttitle)', 'w', '=', 'q', '=', 'ttitle', 'if', 'artist', '==', '\"Various', 'Artists\"', 'else', 'q', 'query', '=', 'w', 'util.dbg(query)', 'wdata', '=', 'pafy.search_videos(q,', 'int(config.PAGES.get))', 'results', '=', 'get_tracks_from_json(wdata)', 'if', 'not', 'results:', 'util.xprint(c.r', '+', '\"Nothing', 'matched', ':(\\\\n\"', '+', 'c.w)', 'continue', 's,', 'score', '=', '_best_song_match(', 'results,', 'artist', '+', '\"', '\"', '+', 'ttitle,', 'length,', '.5,', '.5)', 'cc', '=', 'c.g', 'if', 'score', '>', '85', 'else', 'c.y', 'cc', '=', 'c.r', 'if', 'score', '<', '75', 'else', 'cc', 'util.xprint(\"Matched:', '%s%s%s', '-', '%s', '\\\\n[%sMatch', 'confidence:', '\"', '\"%s%s]\\\\n\"', '%', '(c.y,', 's.title,', 'c.w,', 'util.fmt_time(s.length),', 'cc,', 'score,', 'c.w))', 'yield', 's', 'def', '_get_mb_tracks(albumid):', 'ns', '=', \"{'mb':\", \"'http://musicbrainz.org/ns/mmd-2.0\", 'url', '=', '\"http://musicbrainz.org/ws/2/release/\"', '+', 'albumid', 'query', '=', '{\"inc\":', '\"recordings\"}', 'wdata', '=', '_do_query(url,', 'query,', \"err='album\", 'search', \"error')\", 'if', 'not', 'wdata:', 'return', 'None', 'root', '=', 'ET.fromstring(wdata)', 'tlist', '=', 'root.find(\"./mb:release/mb:medium-list/mb:medium/mb:track-list\",', 'namespaces=ns)', 'mb_songs', '=', 'tlist.findall(\"mb:track\",', 'namespaces=ns)', 'tracks', '=', '[]', 'path', '=', '\"./mb:recording/mb:\"', 'for', 'track', 'in', 'mb_songs:', 'try:', 'title,', 'length,', 'rawlength', '=', '\"unknown\",', '0,', '0', 'title', '=', 'track.find(path', '+', '\"title\",', 'namespaces=ns).text', 'rawlength', '=', 'track.find(path', '+', '\"length\",', 'namespaces=ns).text', 'length', '=', 'int(round(float(rawlength)', '/', '1000))', 'except', '(ValueError,', 'AttributeError):', 'util.xprint(\"not', 'found\")', 'tracks.append(dict(title=title,', 'length=length,', 'rawlength=rawlength))', 'return', 'tracks', 'def', '_get_mb_album(albumname,', '**kwa):', 'url', '=', '\"http://musicbrainz.org/ws/2/release/\"', 'qargs', '=', 'dict(', 'release=\\'\"%s\"\\'', '%', 'albumname,', 'primarytype=kwa.get(\"primarytype\",', '\"album\"),', 'status=kwa.get(\"status\",', '\"official\"))', 'qargs.update({k:', '\\'\"%s\"\\'', '%', 'v', 'for', 'k,', 'v', 'in', 'kwa.items()})', 'qargs', '=', '[\"%s:%s\"', '%', 'item', 'for', 'item', 'in', 'qargs.items()]', 'qargs', '=', '{\"query\":', '\"', 'AND', '\".join(qargs)}', 'g.message', '=', '\"Album', 'search', 'for', '\\'%s%s%s\\'\"', '%', '(c.y,', 'albumname,', 'c.w)', 'wdata', '=', '_do_query(url,', 'qargs)', 'if', 'not', 'wdata:', 'return', 'None', 'ns', '=', \"{'mb':\", \"'http://musicbrainz.org/ns/mmd-2.0\", 'root', '=', 'ET.fromstring(wdata)', 'rlist', '=', 'root.find(\"mb:release-list\",', 'namespaces=ns)', 'if', \"int(rlist.get('count'))\", '==', '0:', 'return', 'None', 'album', '=', 'rlist.find(\"mb:release\",', 'namespaces=ns)', 'artist', '=', 'album.find(\"./mb:artist-credit/mb:name-credit/mb:artist\",', 'namespaces=ns).find(\"mb:name\",', 'namespaces=ns).text', 'title', '=', 'album.find(\"mb:title\",', 'namespaces=ns).text', 'aid', '=', \"album.get('id')\", 'return', 'dict(artist=artist,', 'title=title,', 'aid=aid)', \"@command(r'album\\\\s*(.{0,500})',\", \"'album')\", 'def', 'search_album(term):', 'if', 'not', 'term:', 'show_message(\"Enter', 'album', 'name:\",', 'c.g,', 'update=True)', 'term', '=', 'input(\">', '\")', 'if', 'not', 'term', 'or', 'len(term)', '<', '2:', 'g.message', '=', 'c.r', '+', '\"Not', 'enough', 'input!\"', '+', 'c.w', 'g.content', '=', 'content_py.generate_songlist_display()', 'return', 'album', '=', '_get_mb_album(term)', 'if', 'not', 'album:', 'show_message(\"Album', \"'%s'\", 'not', 'found!\"', '%', 'term)', 'return', 'prompt', '=', '\"Artist?', '[%s]', '>', '\"', '%', \"album['artist']\", 'util.xprint(prompt,', 'end=\"\")', 'artistentry', '=', 'input().strip()', 'if', 'artistentry:', 'if', 'artistentry', '==', '\"q\":', 'show_message(\"Album', 'search', 'abandoned!\")', 'return', 'album', '=', '_get_mb_album(term,', 'artist=artistentry)', 'if', 'not', 'album:', 'show_message(\"Album', \"'%s'\", 'by', \"'%s'\", 'not', 'found!\"', '%', '(term,', 'artistentry))', 'return', 'title,', 'artist', '=', \"album['title'],\", \"album['artist']\", 'mb_tracks', '=', \"_get_mb_tracks(album['aid'])\", 'if', 'not', 'mb_tracks:', 'show_message(\"Album', \"'%s'\", 'by', \"'%s'\", 'has', '0', 'tracks!\"', '%', '(title,', 'artist))', 'return', 'msg', '=', '\"%s%s%s', 'by', '%s%s%s\\\\n\\\\n\"', '%', '(c.g,', 'title,', 'c.w,', 'c.g,', 'artist,', 'c.w)', 'msg', '+=', '\"Enter', 'to', 'begin', 'matching', 'or', '[q]', 'to', 'abort\"', 'g.message', '=', 'msg', 'g.content', '=', '\"Tracks:\\\\n\"', 'for', 'n,', 'track', 'in', 'enumerate(mb_tracks,', '1):', 'g.content', '+=', '\"%02s', '%s\"', '%', '(n,', \"track['title'])\", 'g.content', '+=', '\"\\\\n\"', 'screen.update()', 'entry', '=', 'input(\"Continue?', '[Enter]', '>', '\")', 'if', 'entry', '==', '\"\":', 'pass', 'else:', 'show_message(\"Album', 'search', 'abandoned!\")', 'return', 'songs', '=', '[]', 'screen.clear()', 'itt', '=', '_match_tracks(artist,', 'title,', 'mb_tracks)', 'stash', '=', 'config.SEARCH_MUSIC.get,', 'config.ORDER.get', 'config.SEARCH_MUSIC.value', '=', 'True', 'config.ORDER.value', '=', '\"relevance\"', 'try:', 'songs.extend(itt)', 'except', 'KeyboardInterrupt:', 'util.xprint(\"%sHalted!%s\"', '%', '(c.r,', 'c.w))', 'finally:', 'config.SEARCH_MUSIC.value,', 'config.ORDER.value', '=', 'stash', 'if', 'songs:', 'util.xprint(\"\\\\n%s', '/', '%s', 'songs', 'matched\"', '%', '(len(songs),', 'len(mb_tracks)))', 'input(\"Press', 'Enter', 'to', 'continue\")', 'if', 'g.lastfm_network:', 'g.artist', '=', 'artist', 'g.album', '=', 'title', 'g.scrobble', '=', 'True', 'g.scrobble_queue', '=', \"[t['title']\", 'for', 't', 'in', 'mb_tracks]', 'msg', '=', '\"Contents', 'of', 'album', '%s%s', '-', '%s%s', '%s(%d/%d)%s:\"', '%', '(', 'c.y,', 'artist,', 'title,', 'c.w,', 'c.b,', 'len(songs),', 'len(mb_tracks),', 'c.w)', 'failmsg', '=', '\"Found', 'no', 'album', 'tracks', 'for', '%s%s%s\"', '%', '(c.y,', 'title,', 'c.w)', 'paginatesongs(songs,', 'msg=msg,', 'failmsg=failmsg)']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/commands/config.py",
        "vector": "['from', '..', 'import', 'g,', 'c,', 'config,', 'util', 'from', '.', 'import', 'command', \"@command(r'set|showconfig',\", \"'set',\", \"'showconfig')\", 'def', 'showconfig():', 'width', '=', 'util.getxy().width', 'longest_key', '=', '17', 'longest_val', '=', '0', 'has_temps', '=', 'False', 'for', 'setting', 'in', 'config:', 'val', '=', 'config[setting]', 'longest_val', '=', 'max(longest_val,', 'len(str(val.display)))', 'has_temps', '=', 'has_temps', 'or', 'val.temp_value', 'is', 'not', 'None', 'width', '-=', '27', 's', '=', '\"', '%s%-{0}s%s', ':', '%-{1}s\".format(longest_key,', 'longest_val+1)', 'if', 'has_temps:', 'width', '-=', 'longest_val', '+', '5', 'out', '=', '\"', '%s%-{}s', '%-{}s', '%s%s%s\\\\n\".format(longest_key,', 'longest_val)', '%', '(', 'c.ul,', '\"Key\",', '\"Value\",', '\"Temporary\",', '\"', '\"', '*', 'width,', 'c.w)', 'else:', 'out', '=', '\"', '%s%-{}s', '%s%s%s\\\\n\".format(longest_key)', '%', '(c.ul,', '\"Key\",', '\"Value\",', '\"', '\"', '*', 'width,', 'c.w)', 'for', 'setting', 'in', 'config:', 'val', '=', 'config[setting]', 'if', 'not', 'util.is_known_player(config.PLAYER.get)', 'and', '\\\\', 'val.require_known_player:', 'continue', 'if', 'g.detectable_size', 'and', 'setting', '==', '\"MAX_RESULTS\":', 'continue', 'if', 'g.detectable_size', 'and', 'setting', '==', '\"CONSOLE_WIDTH\":', 'continue', 'out', '+=', 's', '%', '(c.g,', 'setting.lower(),', 'c.w,', 'val.display)', 'if', 'has_temps:', 'out', '+=', '\"%s%s\"', '%', '(c.w,', 'val.display_temp)', 'out', '+=', '\"\\\\n\"', 'g.content', '=', 'out', 'g.message', '=', '\"Enter', '%sset', '<key>', '<value>%s', 'to', 'change\\\\n\"', '%', '(c.g,', 'c.w)', 'g.message', '+=', '\"Enter', '%sset', 'all', 'default%s', 'to', 'reset', 'all\"', '%', '(c.g,', 'c.w)', \"@command(r'set\\\\s+-t\\\\s*([-\\\\w]+)\\\\s*(.*)')\", 'def', 'setconfigtemp(key,', 'val):', 'setconfig(key,', 'val,', 'is_temp=True)', \"@command(r'set\\\\s+([-\\\\w]+)\\\\s*(.*)')\", 'def', 'setconfig(key,', 'val,', 'is_temp=False):', 'key', '=', 'key.replace(\"-\",', '\"_\")', 'if', 'key.upper()', '==', '\"ALL\"', 'and', 'val.upper()', '==', '\"DEFAULT\":', 'for', 'ci', 'in', 'config:', 'config[ci].value', '=', 'config[ci].default', 'config.save()', 'message', '=', '\"Default', 'configuration', 'reinstated\"', 'elif', 'not', 'key.upper()', 'in', 'config:', 'message', '=', '\"Unknown', 'config', 'item:', '%s%s%s\"', '%', '(c.r,', 'key,', 'c.w)', 'elif', 'val.upper()', '==', '\"DEFAULT\":', 'att', '=', 'config[key.upper()]', 'att.value', '=', 'att.default', 'att.temp_value', '=', 'None', 'message', '=', '\"%s%s%s', 'set', 'to', '%s%s%s', '(default)\"', 'dispval', '=', 'att.display', 'or', '\"None\"', 'message', '=', 'message', '%', '(c.y,', 'key,', 'c.w,', 'c.y,', 'dispval,', 'c.w)', 'config.save()', 'else:', 'message', '=', 'config[key.upper()].set(val,', 'is_temp=is_temp)', 'showconfig()', 'g.message', '=', 'message', \"@command(r'encoders?',\", \"'encoder')\", 'def', 'show_encs():', 'out', '=', '\"%sEncoding', 'profiles:%s\\\\n\\\\n\"', '%', '(c.ul,', 'c.w)', 'for', 'x,', 'e', 'in', 'enumerate(g.encoders):', 'sel', '=', '\"', '(%sselected%s)\"', '%', '(c.y,', 'c.w)', 'if', 'config.ENCODER.get', '==', 'x', 'else', '\"\"', 'out', '+=', '\"%2d.', '%s%s\\\\n\"', '%', '(x,', \"e['name'],\", 'sel)', 'g.content', '=', 'out', 'message', '=', '\"Enter', '%sset', 'encoder', '<num>%s', 'to', 'select', 'an', 'encoder\"', 'g.message', '=', 'message', '%', '(c.g,', 'c.w)']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/commands/download.py",
        "vector": "['import', 'os', 'import', 're', 'import', 'sys', 'import', 'time', 'import', 'shlex', 'import', 'random', 'import', 'subprocess', 'from', 'urllib.request', 'import', 'urlopen', 'from', 'urllib.error', 'import', 'HTTPError', 'from', '..', 'import', 'g,', 'c,', 'screen,', 'streams,', 'content,', 'config,', 'util,', 'pafy', 'from', '.', 'import', 'command,', 'PL', 'from', '.search', 'import', 'yt_url,', 'user_pls', 'from', '.songlist', 'import', 'dump,', 'plist', \"@command(r'(dv|da|d|dl|download)\\\\s*(\\\\d{1,4})',\", \"'da',\", \"'dv',\", \"'d',\", \"'dl',\", \"'download')\", 'def', 'download(dltype,', 'num):', 'if', 'g.browse_mode', '==', '\"ytpl\"', 'and', 'dltype', 'in', '(\"da\",', '\"dv\"):', 'plid', '=', 'g.ytpls[int(num)', '-', '1][\"link\"]', 'down_plist(dltype,', 'plid)', 'return', 'elif', 'g.browse_mode', '==', '\"ytpl\":', 'g.message', '=', '\"Use', 'da', 'or', 'dv', 'to', 'specify', 'audio', '/', 'video', 'playlist', 'download\"', 'g.message', '=', 'c.y', '+', 'g.message', '+', 'c.w', 'g.content', '=', 'content.generate_songlist_display()', 'return', 'elif', 'g.browse_mode', '!=', '\"normal\":', 'g.message', '=', '\"Download', 'must', 'refer', 'to', 'a', 'specific', 'video', 'item\"', 'g.message', '=', 'c.y', '+', 'g.message', '+', 'c.w', 'g.content', '=', 'content.generate_songlist_display()', 'return', 'screen.writestatus(\"Fetching', 'video', 'info...\")', 'song', '=', '(g.model[int(num)', '-', '1])', 'try:', 'success', '=', 'pafy.download_video(song.ytid,', 'config.DDIR.get,', 'True', 'if', 'dltype.startswith(\"da\")', 'else', 'False)', 'if', 'success:', 'g.message', '=', '\"Saved', '\\\\\\'\"', '+', 'song.title', '+', '\"\\\\\\'', 'to', '\"', '+', 'c.g', '+', 'config.DDIR.get', '+', 'c.w', 'except', 'KeyboardInterrupt:', 'g.message', '=', 'c.r', '+', '\"Download', 'halted!\"', '+', 'c.w', 'g.content', '=', 'content.generate_songlist_display()', \"@command(r'(da|dv)\\\\s+((?:\\\\d+\\\\s\\\\d+|-\\\\d+|\\\\d+-|\\\\d+,)(?:[\\\\d\\\\s,-]*))',\", \"'da',\", \"'dv')\", 'def', 'down_many(dltype,', 'choice,', 'subdir=None):', 'choice', '=', 'util.parse_multi(choice)', 'choice', '=', 'list(set(choice))', 'downsongs', '=', '[g.model[int(x)', '-', '1]', 'for', 'x', 'in', 'choice]', 'temp', '=', 'g.model[::]', 'g.model.songs', '=', 'downsongs[::]', 'count', '=', 'len(downsongs)', 'av', '=', '\"audio\"', 'if', 'dltype.startswith(\"da\")', 'else', '\"video\"', 'msg', '=', '\"\"', 'def', 'handle_error(message):', 'g.message', '=', 'message', 'g.content', '=', 'disp', 'screen.update()', 'time.sleep(2)', 'g.model.songs.pop(0)', 'try:', 'for', 'song', 'in', 'downsongs:', 'g.result_count', '=', 'len(g.model)', 'disp', '=', 'content.generate_songlist_display()', 'title', '=', '\"Download', 'Queue', '(%s):%s\\\\n\\\\n\"', '%', '(av,', 'c.w)', 'disp', '=', 're.sub(r\"(Num\\\\s*?Title.*?\\\\n)\",', 'title,', 'disp)', 'g.content', '=', 'disp', 'screen.update()', 'try:', 'filename', '=', '_make_fname(song,', 'None,', 'av=av,', 'subdir=subdir)', 'except', 'IOError', 'as', 'e:', 'handle_error(\"Error', 'for', '%s:', '%s\"', '%', '(song.title,', 'str(e)))', 'count', '-=', '1', 'continue', 'except', 'KeyError:', 'handle_error(\"No', 'audio', 'track', 'for', '%s\"', '%', 'song.title)', 'count', '-=', '1', 'continue', 'try:', '_download(song,', 'filename,', 'url=None,', 'audio=av', '==', '\"audio\")', 'except', 'HTTPError:', 'handle_error(\"HTTP', 'Error', 'for', '%s\"', '%', 'song.title)', 'count', '-=', '1', 'continue', 'g.model.songs.pop(0)', 'msg', '=', '\"Downloaded', '%s', 'items\"', '%', 'count', 'g.message', '=', '\"Saved', 'to', '\"', '+', 'c.g', '+', 'song.title', '+', 'c.w', 'except', 'KeyboardInterrupt:', 'msg', '=', '\"Downloads', 'interrupted!\"', 'finally:', 'g.model.songs', '=', 'temp[::]', 'g.message', '=', 'msg', 'g.result_count', '=', 'len(g.model)', 'g.content', '=', 'content.generate_songlist_display()', \"@command(r'(da|dv)pl\\\\s+%s'\", '%', 'PL,', \"'dapl',\", \"'dvpl')\", 'def', 'down_plist(dltype,', 'parturl):', 'plist(parturl)', 'dump(False)', 'title', '=', 'g.pafy_pls[parturl][0].title', 'subdir', '=', 'util.sanitize_filename(title.replace(\\'\"\\',', \"''))\", 'down_many(dltype,', '\"1-\",', 'subdir=subdir)', 'msg', '=', 'g.message', 'plist(parturl)', 'g.message', '=', 'msg', \"@command(r'(da|dv)upl\\\\s+(.*)',\", \"'daupl',\", \"'dvupl')\", 'def', 'down_user_pls(dltype,', 'user):', 'user_pls(user)', 'for', 'i', 'in', 'g.ytpls:', 'down_plist(dltype,', \"i.get('link'))\", 'return', 'def', '_make_fname(song,', 'ext=None,', 'av=None,', 'subdir=None):', 'ddir', '=', 'os.path.join(config.DDIR.get,', 'subdir)', 'if', 'subdir', 'else', 'config.DDIR.get', 'if', 'not', 'os.path.exists(ddir):', 'os.makedirs(ddir)', 'if', 'not', 'ext:', 'stream', '=', 'streams.select(streams.get(song),', 'audio=av', '==', '\"audio\",', 'm4a_ok=True)', 'ext', '=', \"stream['ext']\", 'filename', '=', 'song.title', '+', '\".\"', '+', 'ext', 'filename', '=', 'filename.replace(\\'\"\\',', \"'')\", 'filename', '=', 'os.path.join(ddir,', 'util.sanitize_filename(filename))', 'return', 'filename', 'def', 'extract_metadata(name):', 'seps', '=', 'name.count(\"', '-', '\")', 'artist', '=', 'title', '=', 'None', 'if', 'seps', '==', '1:', 'pos', '=', 'name.find(\"', '-', '\")', 'artist', '=', 'name[:pos].strip()', 'title', '=', 'name[pos', '+', '3:].strip()', 'else:', 'title', '=', 'name.strip()', 'return', 'dict(artist=artist,', 'title=title)', 'def', 'remux_audio(filename,', 'title):', 'util.dbg(\"starting', 'remux\")', 'temp_file', '=', 'filename', '+', '\".\"', '+', 'str(random.randint(10000,', '99999))', 'os.rename(filename,', 'temp_file)', 'meta', '=', 'extract_metadata(title)', 'metadata', '=', '[\"title=%s\"', '%', 'meta[\"title\"]]', 'if', 'meta[\"artist\"]:', 'metadata', '=', '[\"title=%s\"', '%', 'meta[\"title\"],', '\"-metadata\",', '\"artist=%s\"', '%', 'meta[\"artist\"]]', 'cmd', '=', '[g.muxapp,', '\"-y\",', '\"-i\",', 'temp_file,', '\"-acodec\",', '\"copy\",', '\"-metadata\"]', 'cmd', '+=', 'metadata', '+', '[\"-vn\",', 'filename]', 'util.dbg(cmd)', 'try:', 'with', 'open(os.devnull,', '\"w\")', 'as', 'devnull:', 'subprocess.call(cmd,', 'stdout=devnull,', 'stderr=subprocess.STDOUT)', 'except', 'OSError:', 'util.dbg(\"Failed', 'to', 'remux', 'audio', 'using', '%s\",', 'g.muxapp)', 'os.rename(temp_file,', 'filename)', 'else:', 'os.unlink(temp_file)', 'util.dbg(\"remuxed', 'audio', 'file', 'using', '%s\"', '%', 'g.muxapp)', 'def', 'transcode(filename,', 'enc_data):', 'base', '=', 'os.path.splitext(filename)[0]', 'exe', '=', 'g.muxapp', 'if', 'g.transcoder_path', '==', '\"auto\"', 'else', 'g.transcoder_path', 'if', 'not', 'exe', 'or', 'not', 'os.path.exists(exe)', 'or', 'not', 'os.access(exe,', 'os.X_OK):', 'util.xprint(\"Encoding', 'failed.', \"Couldn't\", 'find', 'a', 'valid', 'encoder', ':(\\\\n\")', 'time.sleep(2)', 'return', 'filename', 'command', '=', \"shlex.split(enc_data['command'])\", 'newcom,', 'outfn', '=', 'command[::],', '\"\"', 'for', 'n,', 'd', 'in', 'enumerate(command):', 'if', 'd', '==', '\"ENCODER_PATH\":', 'newcom[n]', '=', 'exe', 'elif', 'd', '==', '\"IN\":', 'newcom[n]', '=', 'filename', 'elif', 'd', '==', '\"OUT\":', 'newcom[n]', '=', 'outfn', '=', 'base', 'elif', 'd', '==', '\"OUT.EXT\":', 'newcom[n]', '=', 'outfn', '=', 'base', '+', '\".\"', '+', \"enc_data['ext']\", 'returncode', '=', 'subprocess.call(newcom)', 'if', 'returncode', '==', '0', 'and', 'g.delete_orig:', 'os.unlink(filename)', 'return', 'outfn', 'def', 'external_download(song,', 'filename,', 'url):', 'cmd', '=', 'config.DOWNLOAD_COMMAND.get', 'ddir,', 'basename', '=', 'config.DDIR.get,', 'os.path.basename(filename)', 'cmd_list', '=', 'shlex.split(cmd)', 'def', 'list_string_sub(orig,', 'repl,', 'lst):', 'return', '[x', 'if', 'orig', 'not', 'in', 'x', 'else', 'x.replace(orig,', 'repl)', 'for', 'x', 'in', 'lst]', 'cmd_list', '=', 'list_string_sub(\"%F\",', 'filename,', 'cmd_list)', 'cmd_list', '=', 'list_string_sub(\"%d\",', 'ddir,', 'cmd_list)', 'cmd_list', '=', 'list_string_sub(\"%f\",', 'basename,', 'cmd_list)', 'cmd_list', '=', 'list_string_sub(\"%u\",', 'url,', 'cmd_list)', 'cmd_list', '=', 'list_string_sub(\"%i\",', 'song.ytid,', 'cmd_list)', 'util.dbg(\"Downloading', 'using:', '%s\",', '\"', '\".join(cmd_list))', 'subprocess.call(cmd_list)', 'def', '_download(song,', 'filename,', 'url=None,', 'audio=False,', 'allow_transcode=True):', 'if', 'not', 'url:', 'stream', '=', 'streams.select(streams.get(song),', 'audio=audio,', 'm4a_ok=True)', 'url', '=', \"stream['url']\", 'if', 'config.DOWNLOAD_COMMAND.get:', 'title', '=', 'c.y', '+', 'os.path.splitext(os.path.basename(filename))[0]', '+', 'c.w', 'util.xprint(\"Downloading', '%s', 'using', 'custom', 'command\"', '%', 'title)', 'external_download(song,', 'filename,', 'url)', 'return', 'None', 'if', 'not', 'config.OVERWRITE.get:', 'if', 'os.path.exists(filename):', 'util.xprint(\"File', 'exists.', 'Skipping', '%s%s%s', '..\\\\n\"', '%', '(c.r,', 'filename,', 'c.w))', 'time.sleep(0.2)', 'return', 'filename', 'util.xprint(\"Downloading', 'to', '%s%s%s', '..\"', '%', '(c.r,', 'filename,', 'c.w))', 'status_string', '=', \"('\", '{0}{1:,}{2}', 'Bytes', '[{0}{3:.2%}{2}]', 'received.', 'Rate:', \"'\", \"'[{0}{4:4.0f}\", 'kbps{2}].', 'ETA:', '[{0}{5:.0f}', \"secs{2}]')\", 'resp', '=', 'urlopen(url)', 'total', '=', \"int(resp.info()['Content-Length'].strip())\", 'chunksize,', 'bytesdone,', 't0', '=', '16384,', '0,', 'time.time()', 'outfh', '=', 'open(filename,', \"'wb')\", 'while', 'True:', 'chunk', '=', 'resp.read(chunksize)', 'outfh.write(chunk)', 'elapsed', '=', 'time.time()', '-', 't0', 'bytesdone', '+=', 'len(chunk)', 'rate', '=', '0', 'if', 'elapsed', '!=', '0:', 'rate', '=', '(bytesdone', '/', '1024)', '/', 'elapsed', 'if', 'rate:', 'eta', '=', '(total', '-', 'bytesdone)', '/', '(rate', '*', '1024)', 'else:', 'eta', '=', '0', 'stats', '=', '(c.y,', 'bytesdone,', 'c.w,', 'bytesdone', '*', '1.0', '/', 'total,', 'rate,', 'eta)', 'if', 'not', 'chunk:', 'outfh.close()', 'break', 'status', '=', 'status_string.format(*stats)', 'sys.stdout.write(\"\\\\r\"', '+', 'status', '+', \"'\", \"'\", '*', '4', '+', '\"\\\\r\")', 'sys.stdout.flush()', 'active_encoder', '=', 'g.encoders[config.ENCODER.get]', 'ext', '=', 'filename.split(\".\")[-1]', 'valid_ext', '=', 'ext', 'in', 'active_encoder[\\'valid\\'].split(\",\")', 'if', 'audio', 'and', 'g.muxapp:', 'remux_audio(filename,', 'song.title)', 'if', 'config.ENCODER.get', '!=', '0', 'and', 'valid_ext', 'and', 'allow_transcode:', 'filename', '=', 'transcode(filename,', 'active_encoder)', 'return', 'filename', 'def', 'menu_prompt(model,', 'prompt=\"', '>', '\",', 'rows=None,', 'header=None,', 'theading=None,', 'footer=None,', 'force=0):', 'content', '=', '\"\"', 'for', 'x', 'in', 'header,', 'theading,', 'rows,', 'footer:', 'if', 'isinstance(x,', 'list):', 'for', 'line', 'in', 'x:', 'content', '+=', 'line', '+', '\"\\\\n\"', 'elif', 'isinstance(x,', 'str):', 'content', '+=', 'x', '+', '\"\\\\n\"', 'g.content', '=', 'content', 'screen.update()', 'choice', '=', 'input(prompt)', 'if', 'choice', 'in', 'model:', 'return', 'model[choice]', 'elif', 'force:', 'return', 'menu_prompt(model,', 'prompt,', 'rows,', 'header,', 'theading,', 'footer,', 'force)', 'elif', 'not', 'choice.strip():', 'return', 'False,', 'False', 'else:', 'return', 'False,', '\"abort\"', 'def', 'prompt_dl(song):', 'dl_data,', 'p', '=', 'get_dl_data(song)', 'dl_text', '=', 'gen_dl_text(dl_data,', 'song,', 'p)', 'model', '=', \"[x['url']\", 'for', 'x', 'in', 'dl_data]', 'ed', '=', 'enumerate(dl_data)', 'model', '=', '{str(n', '+', '1):', \"(x['url'],\", \"x['ext'])\", 'for', 'n,', 'x', 'in', 'ed}', 'url,', 'ext', '=', 'menu_prompt(model,', '\"Download', 'number:', '\",', '*dl_text)', 'url2', '=', 'ext2', '=', 'None', 'mediatype', '=', '[i', 'for', 'i', 'in', 'dl_data', 'if', \"i['url']\", '==', \"url][0]['mediatype']\", 'if', 'mediatype', '==', '\"video\"', 'and', 'g.muxapp', 'and', 'not', 'config.DOWNLOAD_COMMAND.get:', 'dl_data,', 'p', '=', 'get_dl_data(song,', 'mediatype=\"audio\")', 'dl_text', '=', 'gen_dl_text(dl_data,', 'song,', 'p)', 'au_choices', '=', '\"1\"', 'if', 'len(dl_data)', '==', '1', 'else', '\"1-%s\"', '%', 'len(dl_data)', 'footer', '=', \"[util.F('-audio')\", '%', 'ext,', \"util.F('select\", \"mux')\", '%', 'au_choices]', 'dl_text', '=', 'tuple(dl_text[0:3])', '+', '(footer,)', 'aext', '=', '(\"ogg\",', '\"m4a\")', 'model', '=', \"[x['url']\", 'for', 'x', 'in', 'dl_data', 'if', \"x['ext']\", 'in', 'aext]', 'ed', '=', 'enumerate(dl_data)', 'model', '=', '{str(n', '+', '1):', \"(x['url'],\", \"x['ext'])\", 'for', 'n,', 'x', 'in', 'ed}', 'prompt', '=', '\"Audio', 'stream:', '\"', 'url2,', 'ext2', '=', 'menu_prompt(model,', 'prompt,', '*dl_text)', 'return', 'url,', 'ext,', 'url2,', 'ext2', 'def', 'gen_dl_text(ddata,', 'song,', 'p):', 'hdr', '=', '[]', 'hdr.append(\"', '%s%s%s\"', '%', '(c.r,', 'song.title,', 'c.w))', 'author', '=', 'p.author', 'hdr.append(c.r', '+', '\"', 'Uploaded', 'by', '\"', '+', 'author', '+', 'c.w)', 'hdr.append(\"', '[\"', '+', 'util.fmt_time(song.length)', '+', '\"]\")', 'hdr.append(\"\")', 'heading', '=', 'tuple(\"Item', 'Format', 'Quality', 'Media', 'Size', 'Notes\".split())', 'fmt', '=', '\"', '{0}%-6s', '%-8s', '%-13s', '%-7s', '%-5s', '%-16s{1}\"', 'heading', '=', '[fmt.format(c.w,', 'c.w)', '%', 'heading]', 'heading.append(\"\")', 'content', '=', '[]', 'for', 'n,', 'd', 'in', 'enumerate(ddata):', 'row', '=', '(n', '+', '1,', \"d['ext'],\", \"d['quality'],\", \"d['mediatype'],\", \"d['size'],\", \"d['notes'])\", 'fmt', '=', '\"', '{0}%-6s', '%-8s', '%-13s', '%-7s', '%5s', 'Mb', '%-16s{1}\"', 'row', '=', 'fmt.format(c.g,', 'c.w)', '%', 'row', 'content.append(row)', 'content.append(\"\")', 'footer', '=', '\"Select', '[%s1-%s%s]', 'to', 'download', 'or', '[%sEnter%s]', 'to', 'return\"', 'footer', '=', '[footer', '%', '(c.y,', 'len(content)', '-', '1,', 'c.w,', 'c.y,', 'c.w)]', 'return(content,', 'hdr,', 'heading,', 'footer)', 'def', 'get_dl_data(song,', 'mediatype=\"any\"):', 'def', 'mbsize(x):', 'return', 'str(int(x', '/', '(1024', '**', '2)))', 'p', '=', 'util.get_pafy(song)', 'dldata', '=', '[]', 'text', '=', '\"', '[Fetching', 'stream', 'info]', '>\"', 'streamlist', '=', '[x', 'for', 'x', 'in', 'p.allstreams]', 'if', 'mediatype', '==', '\"audio\":', 'streamlist', '=', '[x', 'for', 'x', 'in', 'p.audiostreams]', 'l', '=', 'len(streamlist)', 'for', 'n,', 'stream', 'in', 'enumerate(streamlist):', 'sys.stdout.write(text', '+', '\"-\"', '*', 'n', '+', '\">\"', '+', '\"', '\"', '*', '(l', '-', 'n', '-', '1)', '+', '\"<\\\\r\")', 'sys.stdout.flush()', 'try:', 'size', '=', 'mbsize(stream.get_filesize())', 'except', 'TypeError:', 'util.dbg(c.r', '+', '\"---Error', 'getting', 'stream', 'size\"', '+', 'c.w)', 'size', '=', '0', 'item', '=', \"{'mediatype':\", 'stream.mediatype,', \"'size':\", 'size,', \"'ext':\", 'stream.extension,', \"'quality':\", 'stream.quality,', \"'notes':\", 'stream.notes,', \"'url':\", 'stream.url}', 'dldata.append(item)', 'screen.writestatus(\"\")', 'return', 'dldata,', 'p', \"@command(r'dlurl\\\\s(.*[-_a-zA-Z0-9]{11}.*)',\", \"'dlurl')\", 'def', 'dl_url(url):', 'g.browse_mode', '=', '\"normal\"', 'yt_url(url)', 'if', 'len(g.model)', '==', '1:', 'download(\"download\",', '\"1\")', 'if', 'g.command_line:', 'sys.exit()', \"@command(r'daurl\\\\s(.*[-_a-zA-Z0-9]{11}.*)',\", \"'daurl')\", 'def', 'da_url(url):', 'g.browse_mode', '=', '\"normal\"', 'yt_url(url)', 'if', 'len(g.model)', '==', '1:', 'download(\"da\",', '\"1\")', 'if', 'g.command_line:', 'sys.exit()']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/commands/generate_playlist.py",
        "vector": "['from', 'os', 'import', 'path', 'from', 'random', 'import', 'choice', 'import', 'string', 'from', '..', 'import', 'content,', 'g,', 'playlists,', 'screen,', 'util,', 'listview', 'from', '..playlist', 'import', 'Playlist', 'from', '.', 'import', 'command,', 'search,', 'album_search', \"@command(r'mkp\\\\s*(.{1,100})',\", \"'mkp')\", 'def', 'generate_playlist(sourcefile):', 'if', '\"--description\"', 'in', 'sourcefile', 'or', '\"-d\"', 'in', 'sourcefile:', 'description_generator(sourcefile)', 'return', 'expanded_sourcefile', '=', 'path.expanduser(sourcefile)', 'if', 'not', 'check_sourcefile(expanded_sourcefile):', 'g.message', '=', \"util.F('mkp\", \"empty')\", '%', 'expanded_sourcefile', 'else:', 'queries', '=', 'read_sourcefile(expanded_sourcefile)', 'g.message', '=', \"util.F('mkp\", \"parsed')\", '%', '(len(queries),', 'sourcefile)', 'if', 'queries:', 'create_playlist(queries)', 'g.message', '=', \"util.F('pl\", \"help')\", 'g.content', '=', 'content.playlists_display()', 'def', 'read_sourcefile(filename):', 'with', 'open(filename)', 'as', 'srcfl:', 'queries', '=', 'list()', 'for', 'item', 'in', 'srcfl.readlines():', 'clean_item', '=', 'str(item).strip()', 'if', 'not', 'clean_item:', 'continue', 'queries.append(clean_item)', 'return', 'queries', 'def', 'check_sourcefile(filename):', 'return', 'path.isfile(filename)', 'and', 'path.getsize(filename)', '>', '0', 'def', 'create_playlist(queries,', \"title=''):\", 'plname', '=', 'title.replace(\"', '\",', '\"-\")', 'or', 'random_plname()', 'if', 'not', 'g.userpl.get(plname):', 'g.userpl[plname]', '=', 'Playlist(plname)', 'for', 'query', 'in', 'queries:', 'g.message', '=', \"util.F('mkp\", \"finding')\", '%', 'query', 'screen.update()', 'qresult', '=', 'find_best_match(query)', 'if', 'qresult:', 'g.userpl[plname].songs.append(qresult)', 'if', 'g.userpl[plname]:', 'playlists.save()', 'def', 'find_best_match(query):', 'qs', '=', 'search.generate_search_qs(query)', 'wdata', '=', \"pafy.call_gdata('search',\", 'qs)', 'results', '=', 'search.get_tracks_from_json(wdata)', 'if', 'results:', 'res,', 'score', '=', 'album_search._best_song_match(', 'results,', 'query,', '0.1,', '1.0,', '0.0)', 'return', 'res', 'return', 'None', 'def', 'random_plname():', 'n_chars', '=', '6', 'return', \"''.join(choice(string.ascii_lowercase\", '+', 'string.digits)', 'for', '_', 'in', 'range(n_chars))', 'def', 'description_generator(text):', 'if', 'not', 'isinstance(g.model,', 'Playlist):', 'g.message', '=', 'util.F(\"mkp', 'desc', 'unknown\")', 'return', 'num', '=', 'text.replace(\"--description\",', '\"\")', 'num', '=', 'num.replace(\"-d\",', '\"\")', 'num', '=', 'util.number_string_to_list(num)[0]', 'query', '=', '{}', \"query['id']\", '=', 'g.model[num].ytid', \"query['part']\", '=', \"'snippet'\", \"query['maxResults']\", '=', \"'1'\", 'data', '=', \"pafy.call_gdata('videos',\", \"query)['items'][0]['snippet']\", 'title', '=', '\"mkp', '%s\"', '%', \"data['title']\", 'data', '=', \"util.fetch_songs(data['description'],\", \"data['title'])\", 'columns', '=', '[', '{\"name\":', '\"idx\",', '\"size\":', '3,', '\"heading\":', '\"Num\"},', '{\"name\":', '\"artist\",', '\"size\":', '30,', '\"heading\":', '\"Artist\"},', '{\"name\":', '\"title\",', '\"size\":', '\"remaining\",', '\"heading\":', '\"Title\"},', ']', 'def', 'run_m(idx):', 'create_playlist(idx,', 'title)', 'if', 'data:', 'data', '=', '[listview.ListSongtitle(x)', 'for', 'x', 'in', 'data]', 'g.content', '=', 'listview.ListView(columns,', 'data,', 'run_m)', 'g.message', '=', 'util.F(\"mkp', 'desc', 'which', 'data\")', 'else:', 'g.message', '=', 'util.F(\"mkp', 'no', 'valid\")', 'return']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/commands/lastfm.py",
        "vector": "['import', 'time', 'import', 'datetime', 'try:', 'import', 'pylast', 'has_pylast', '=', 'True', 'except', 'ImportError:', 'has_pylast', '=', 'False', 'from', '..', 'import', 'g,', 'util,', 'config', 'from', '.', 'import', 'command', \"@command(r'lastfm_connect',\", \"'lastfm_connect')\", 'def', 'init_network(verbose=True):', 'if', 'not', 'has_pylast', ':', 'if', 'verbose:', 'pylast_url', '=', \"'https://github.com/pylast/pylast'\", 'g.message', '=', '\\'\"pylast\"', 'module', 'not', 'found\\\\n', 'see', \"%s'\", '%', '(pylast_url)', 'return', 'key', '=', 'config.LASTFM_API_KEY.get', 'secret', '=', 'config.LASTFM_API_SECRET.get', 'password', '=', 'config.LASTFM_PASSWORD.get', 'username', '=', 'config.LASTFM_USERNAME.get', 'if', 'not', '(key', 'and', 'secret', 'and', 'password', 'and', 'username):', 'if', 'verbose:', 'util.xprint(\"Not', 'all', 'Last.fm', 'credentials', 'were', 'set.\")', 'return', 'try:', 'g.lastfm_network', '=', 'pylast.LastFMNetwork(api_key=key,', 'api_secret=secret,', 'username=username,', 'password_hash=password)', 'if', 'verbose:', 'g.message', '=', '\"Last.fm', 'authentication', 'successful!\"', 'except', '(pylast.WSError,', 'pylast.MalformedResponseError,', 'pylast.NetworkError)', 'as', 'e:', 'if', 'verbose:', 'g.message', '=', '\"Last.fm', 'connection', 'error:', '%s\"', '%', '(str(e))', 'def', 'scrobble_track(artist,', 'album,', 'track):', 'if', 'not', 'g.lastfm_network:', 'return', 'unix_timestamp', '=', 'int(time.mktime(datetime.datetime.now().timetuple()))', 'try:', 'g.lastfm_network.scrobble(artist=artist,', 'title=track,', 'album=album,', 'timestamp=unix_timestamp)', 'except', '(pylast.WSError,', 'pylast.MalformedResponseError,', 'pylast.NetworkError):', 'return', 'def', 'set_now_playing(artist,', 'track):', 'if', 'not', 'g.lastfm_network:', 'return', 'try:', 'g.lastfm_network.update_now_playing(artist=artist,', 'title=track)', 'except', '(pylast.WSError,', 'pylast.MalformedResponseError,', 'pylast.NetworkError):', 'return']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/commands/local_playlist.py",
        "vector": "['import', 're', 'from', '..', 'import', 'g,', 'c,', 'playlists,', 'content,', 'util', 'from', '..playlist', 'import', 'Playlist,', 'Video', 'from', '.', 'import', 'command,', 'WORD', 'from', '.songlist', 'import', 'paginatesongs,', 'songlist_rm_add', 'from', '..util', 'import', 'parse_video_length', \"@command(r'rmp\\\\s*(\\\\d+|%s)'\", '%', 'WORD,', \"'rmp')\", 'def', 'playlist_remove(name):', 'if', 'name.isdigit()', 'or', 'g.userpl.get(name):', 'if', 'name.isdigit():', 'name', '=', 'int(name)', '-', '1', 'name', '=', 'sorted(g.userpl)[name]', 'playlists.delete(name)', 'g.message', '=', '\"Deleted', 'playlist', '%s%s%s\"', '%', '(c.y,', 'name,', 'c.w)', 'g.content', '=', 'content.playlists_display()', 'else:', 'g.message', '=', \"util.F('pl\", 'not', 'found', 'advise', \"ls')\", '%', 'name', 'g.content', '=', 'content.playlists_display()', \"@command(r'add\\\\s*(-?\\\\d[-,\\\\d\\\\s]{1,250})(%s)'\", '%', 'WORD,', \"'add')\", 'def', 'playlist_add(nums,', 'playlist):', 'nums', '=', 'util.parse_multi(nums)', 'playlist', '=', 'playlist.replace(\"', '\",', '\"-\")', 'if', 'not', 'g.userpl.get(playlist):', 'g.userpl[playlist]', '=', 'Playlist(playlist)', 'for', 'songnum', 'in', 'nums:', 'g.userpl[playlist].songs.append(g.model[songnum', '-', '1])', 'dur', '=', 'g.userpl[playlist].duration', 'f', '=', '(len(nums),', 'playlist,', 'len(g.userpl[playlist]),', 'dur)', 'g.message', '=', \"util.F('added\", 'to', 'saved', \"pl')\", '%', 'f', 'if', 'nums:', 'playlists.save()', 'g.content', '=', 'content.generate_songlist_display()', \"@command(r'mv\\\\s*(\\\\d{1,3})\\\\s*(%s)'\", '%', 'WORD,', \"'mv')\", 'def', 'playlist_rename_idx(_id,', 'name):', '_id', '=', 'int(_id)', '-', '1', 'playlist_rename(sorted(g.userpl)[_id]', '+', '\"', '\"', '+', 'name)', \"@command(r'mv\\\\s*(%s\\\\s+%s)'\", '%', '(WORD,', 'WORD),', \"'mv')\", 'def', 'playlist_rename(playlists_):', 'a,', 'b', '=', '\"\",', 'playlists_.split(\"', '\")', 'while', 'a', 'not', 'in', 'g.userpl:', 'a', '=', '(a', '+', '\"', '\"', '+', '(b.pop(0))).strip()', 'if', 'not', 'b', 'and', 'a', 'not', 'in', 'g.userpl:', 'g.message', '=', \"util.F('no\", 'pl', 'match', 'for', \"rename')\", 'g.content', '=', 'g.content', 'or', 'content.playlists_display()', 'return', 'b', '=', '\"-\".join(b)', 'g.userpl[b]', '=', 'Playlist(b)', 'g.userpl[b].songs', '=', 'list(g.userpl[a].songs)', 'playlist_remove(a)', 'g.message', '=', \"util.F('pl\", \"renamed')\", '%', '(a,', 'b)', 'playlists.save()', \"@command(r'(rm|add)\\\\s(?:\\\\*|all)',\", \"'rm',\", \"'add')\", 'def', 'add_rm_all(action):', 'if', 'action', '==', '\"rm\":', 'g.model.songs.clear()', 'msg', '=', 'c.b', '+', '\"Cleared', 'all', 'songs\"', '+', 'c.w', 'g.content', '=', 'content.generate_songlist_display(zeromsg=msg)', 'elif', 'action', '==', '\"add\":', 'size', '=', 'len(g.model)', 'songlist_rm_add(\"add\",', '\"-\"', '+', 'str(size))', \"@command(r'save',\", \"'save')\", 'def', 'save_last():', 'if', 'g.last_opened:', 'open_save_view(\"save\",', 'g.last_opened)', 'else:', 'saveas', '=', '\"\"', 'if', 'g.model:', 'if', 'g.selected_pafy_pls_id:', 'saveas', '=', \"g.pafy_pls[g.selected_pafy_pls_id][0].info['info']['title']\", 'else:', 'saveas', '=', 'g.model[0].title[:18].strip()', 'saveas', '=', 're.sub(r\"[^-\\\\w]\",', '\"-\",', 'saveas,', 'flags=re.UNICODE)', 'post', '=', '0', 'while', 'g.userpl.get(saveas):', 'post', '+=', '1', 'saveas', '=', 'g.model[0].title[:18].strip()', '+', '\"-\"', '+', 'str(post)', 'saveas', '=', 'saveas.lstrip(\"0123456789\")', 'open_save_view(\"save\",', 'saveas)', \"@command(r'(open|save|view)\\\\s*(%s)'\", '%', 'WORD,', \"'open',\", \"'save',\", \"'view')\", 'def', 'open_save_view(action,', 'name):', 'name', '=', 'name.replace(\"', '\",', '\"-\")', 'if', 'action', '==', '\"open\"', 'or', 'action', '==', '\"view\":', 'saved', '=', 'g.userpl.get(name)', 'if', 'not', 'saved:', 'name', '=', 'util.get_near_name(name,', 'g.userpl)', 'saved', '=', 'g.userpl.get(name)', 'elif', 'action', '==', '\"open\":', 'g.active.songs', '=', 'list(saved.songs)', 'g.last_opened', '=', 'name', 'msg', '=', 'util.F(\"pl', 'loaded\")', '%', 'name', 'paginatesongs(g.active,', 'msg=msg)', 'elif', 'action', '==', '\"view\":', 'g.last_opened', '=', '\"\"', 'msg', '=', 'util.F(\"pl', 'viewed\")', '%', 'name', 'paginatesongs(list(saved.songs),', 'msg=msg)', 'elif', 'not', 'saved', 'and', 'action', 'in', '\"view', 'open\".split():', 'g.message', '=', 'util.F(\"pl', 'not', 'found\")', '%', 'name', 'g.content', '=', 'content.playlists_display()', 'elif', 'action', '==', '\"save\":', 'if', 'not', 'g.model:', 'g.message', '=', '\"Nothing', 'to', 'save.', '\"', '+', \"util.F('advise\", \"search')\", 'g.content', '=', 'content.generate_songlist_display()', 'else:', 'if', 'g.selected_pafy_pls_id:', 'g.userpl[name]', '=', 'Playlist(name,', \"[Video(i['id'],\", \"i['title'],\", \"parse_video_length(i['duration']))\", 'for', 'i', 'in', 'g.pafy_pls[g.selected_pafy_pls_id][0].videos])', 'else:', 'g.userpl[name]', '=', 'Playlist(name,', 'list(g.model.songs))', 'g.message', '=', \"util.F('pl\", \"saved')\", '%', 'name', 'playlists.save()', 'g.content', '=', 'content.generate_songlist_display()', \"@command(r'(open|view)\\\\s*(\\\\d{1,4})',\", \"'open',\", \"'view')\", 'def', 'open_view_bynum(action,', 'num):', 'srt', '=', 'sorted(g.userpl)', 'name', '=', 'srt[int(num)', '-', '1]', 'open_save_view(action,', 'name)', \"@command(r'ls',\", \"'ls')\", 'def', 'ls():', 'if', 'not', 'g.userpl:', 'g.message', '=', \"util.F('no\", \"playlists')\", 'g.content', '=', 'g.content', 'or', '\\\\', 'content.generate_songlist_display(zeromsg=g.message)', 'else:', 'g.content', '=', 'content.playlists_display()', 'g.message', '=', \"util.F('pl\", \"help')\", \"@command(r'vp',\", \"'vp')\", 'def', 'vp():', 'msg', '=', \"util.F('current\", \"pl')\", 'txt', '=', \"util.F('advise\", \"add')\", 'if', 'g.model', 'else', \"util.F('advise\", \"search')\", 'failmsg', '=', \"util.F('pl\", \"empty')\", '+', '\"', '\"', '+', 'txt', 'paginatesongs(g.active,', 'msg=msg,', 'failmsg=failmsg)']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/commands/misc.py",
        "vector": "['import', 're', 'from', 'datetime', 'import', 'datetime,', 'timedelta', 'import', 'socket', 'import', 'traceback', 'from', 'urllib.request', 'import', 'urlopen', 'from', 'urllib.error', 'import', 'HTTPError,', 'URLError', 'from', '..', 'import', 'player', 'try:', 'import', 'pyperclip', 'has_pyperclip', '=', 'True', 'except', 'ImportError:', 'has_pyperclip', '=', 'False', 'try:', 'import', 'readline', 'has_readline', '=', 'True', 'except', 'ImportError:', 'has_readline', '=', 'False', 'from', '..', 'import', 'g,', 'c,', '__version__,', 'content,', 'screen,', 'cache,', 'pafy', 'from', '..', 'import', 'streams,', 'history,', 'config,', 'util', 'from', '..helptext', 'import', 'get_help', 'from', '..content', 'import', 'generate_songlist_display,', 'logo,', 'qrcode_display', 'from', '.', 'import', 'command', 'from', '.songlist', 'import', 'paginatesongs', \"@command(r'clearcache')\", 'def', 'clearcache():', 'g.pafs', '=', '{}', 'g.streams', '=', '{}', 'util.dbg(\"%scache', 'cleared%s\",', 'c.p,', 'c.w)', 'g.message', '=', '\"cache', 'cleared\"', \"@command(r'(?:help|h)(?:\\\\s+([-_a-zA-Z]+))?',\", \"'help')\", 'def', 'show_help(choice):', 'g.content', '=', 'get_help(choice)', \"@command(r'(?:q|quit|exit)',\", \"'quit',\", \"'exit')\", 'def', 'quits(showlogo=True):', 'if', 'has_readline', 'and', 'config.INPUT_HISTORY.get:', 'readline.write_history_file(g.READLINE_FILE)', 'util.dbg(\"Saved', 'history', 'file\")', 'cache.save()', 'screen.clear()', 'msg', '=', 'logo(c.r,', 'version=__version__)', 'if', 'showlogo', 'else', '\"\"', 'msg', '+=', 'util.F(\"exitmsg\",', '2)', 'if', 'config.CHECKUPDATE.get', 'and', 'showlogo:', 'try:', 'url', '=', '\"https://raw.githubusercontent.com/iamtalhaasghar/yewtube/master/setup.py\"', 'v', '=', 'urlopen(url,', 'timeout=1).read().decode()', 'v', '=', 're.search(r\\'__version__\\\\s*=\\\\s*\"\\\\s*([\\\\d\\\\.]+)\\\\s*\"\\\\s*\\',', 'v,', 're.MULTILINE)', 'if', 'v:', 'v', '=', 'v.group(1)', 'if', 'v', '>', '__version__:', 'msg', '+=', '\"\\\\n\\\\nA', 'newer', 'version', 'is', 'available', '(%s).', 'Use', '`help', 'new`', 'command', 'to', 'check', \"what's\", 'changed.\\\\n\"', '%', 'v', 'except', '(URLError,', 'HTTPError,', 'socket.timeout):', 'util.dbg(\"check', 'update', 'timed', 'out\")', 'screen.msgexit(msg)', 'def', '_format_comment(n,', 'qnt,', 'author_name,', 'published_date,', 'content,', 'reply=False):', 'cid', '=', '(\"%s%s/%s', '%s\"', '%', \"('\u2514\u2500\u2500\", \"'\", 'if', 'reply', 'else', \"'',\", 'n,', 'qnt,', 'c.c(\"g\",', 'author_name)))', 'return', '(\"%-39s', '%s\\\\n\"', '%', '(cid,', 'published_date))', '+', '\\\\', 'c.c(\"y\",', 'content.strip())', '+', \"'\\\\n\\\\n'\", 'def', '_fetch_commentreplies(parentid):', 'return', 'None', 'def', 'fetch_comments(item):', 'ytid,', 'title', '=', 'item.ytid,', 'item.title', 'util.dbg(\"Fetching', 'comments', 'for', '%s\",', 'c.c(\"y\",', 'ytid))', 'screen.writestatus(\"Fetching', 'comments', 'for', '%s\"', '%', 'c.c(\"y\",', 'title[:55]))', 'try:', 'all_comments', '=', 'pafy.get_comments(ytid)', 'except', 'Exception:', 'raise', 'if', 'not', 'len(all_comments):', 'g.message', '=', '\"No', 'comments', 'for', '%s\"', '%', 'item.title[:50]', 'g.content', '=', 'generate_songlist_display()', 'return', 'commentstext', '=', \"''\", 'for', 'n,', 'com', 'in', 'enumerate(all_comments,', '1):', 'commentstext', '+=', '_format_comment(n,', 'len(all_comments),', \"com['author']['name'],\", \"com['published'],\", \"com['content'])\", 'g.current_page', '=', '0', 'g.content', '=', 'content.StringContent(commentstext)', \"@command(r'c\\\\s?(\\\\d{1,4})',\", \"'c')\", 'def', 'comments(number):', 'if', 'g.browse_mode', '==', '\"normal\":', 'item', '=', 'g.model[int(number)', '-', '1]', 'fetch_comments(item)', 'else:', 'g.content', '=', 'generate_songlist_display()', 'g.message', '=', '\"Comments', 'only', 'available', 'for', 'video', 'items\"', \"@command(r'x\\\\s*(\\\\d+)',\", \"'x')\", 'def', 'clipcopy_video(num):', 'if', 'g.browse_mode', '==', '\"ytpl\":', 'p', '=', 'g.ytpls[int(num)', '-', '1]', 'link', '=', '\"https://youtube.com/playlist?list=%s\"', '%', \"p['link']\", 'elif', 'g.browse_mode', '==', '\"normal\":', 'item', '=', '(g.model[int(num)', '-', '1])', 'link', '=', '\"https://youtube.com/watch?v=%s\"', '%', 'item.ytid', 'else:', 'g.message', '=', '\"clipboard', 'copy', 'not', 'valid', 'in', 'this', 'mode\"', 'g.content', '=', 'generate_songlist_display()', 'return', 'if', 'has_pyperclip:', 'try:', 'pyperclip.copy(link)', 'g.message', '=', 'c.y', '+', 'link', '+', 'c.w', '+', '\"', 'copied\"', 'g.content', '=', 'generate_songlist_display()', 'except', 'Exception', 'as', 'e:', 'g.content', '=', 'generate_songlist_display()', 'g.message', '=', 'link', '+', '\"\\\\nError', '-', \"couldn't\", 'copy', 'to', 'clipboard.\\\\n\"', '+', '\\\\', \"''.join(traceback.format_exception_only(type(e),\", 'e))', 'else:', 'g.message', '=', '\"pyperclip', 'module', 'must', 'be', 'installed', 'for', 'clipboard', 'support\\\\n\"', 'g.message', '+=', '\"see', 'https://pypi.python.org/pypi/pyperclip/\"', 'g.content', '=', 'generate_songlist_display()', \"@command(r'X\\\\s*(\\\\d+)',\", \"'X')\", 'def', 'clipcopy_stream(num):', 'if', 'g.browse_mode', '==', '\"normal\":', 'item', '=', '(g.model[int(num)', '-', '1])', 'details', '=', 'player.stream_details(item)[1]', 'stream', '=', \"details['url']\", 'else:', 'g.message', '=', '\"clipboard', 'copy', 'not', 'valid', 'in', 'this', 'mode\"', 'g.content', '=', 'generate_songlist_display()', 'return', 'if', 'has_pyperclip:', 'try:', 'pyperclip.copy(stream)', 'g.message', '=', 'c.y', '+', 'stream', '+', 'c.w', '+', '\"', 'copied\"', 'g.content', '=', 'generate_songlist_display()', 'except', 'Exception', 'as', 'e:', 'g.content', '=', 'generate_songlist_display()', 'g.message', '=', 'stream', '+', '\"\\\\nError', '-', \"couldn't\", 'copy', 'to', 'clipboard.\\\\n\"', '+', '\\\\', \"''.join(traceback.format_exception_only(type(e),\", 'e))', 'else:', 'g.message', '=', '\"pyperclip', 'module', 'must', 'be', 'installed', 'for', 'clipboard', 'support\\\\n\"', 'g.message', '+=', '\"see', 'https://pypi.python.org/pypi/pyperclip/\"', 'g.content', '=', 'generate_songlist_display()', \"@command(r'i\\\\s*(\\\\d{1,4})',\", \"'i')\", 'def', 'video_info(num):', 'if', 'g.browse_mode', '==', '\"ytpl\":', 'p', '=', 'g.ytpls[int(num)', '-', '1]', 'if', \"p['link']\", 'in', 'g.pafy_pls:', 'ytpl', '=', \"g.pafy_pls[p['link']][0]\", 'else:', 'g.content', '=', 'logo(col=c.g)', 'g.message', '=', '\"Fetching', 'playlist', 'info..\"', 'screen.update()', 'util.dbg(\"%sFetching', 'playlist', 'using', 'pafy%s\",', 'c.y,', 'c.w)', 'ytpl', '=', \"pafy.get_playlist2(p['link'])\", \"g.pafy_pls[p['link']]\", '=', '(ytpl,', 'util.IterSlicer(ytpl))', 'ytpl_desc', '=', 'ytpl.description', 'g.content', '=', 'generate_songlist_display()', 'created', '=', \"util.yt_datetime_local(p['created'])\", 'updated', '=', \"util.yt_datetime_local(p['updated'])\", 'out', '=', 'c.ul', '+', '\"Playlist', 'Info\"', '+', 'c.w', '+', '\"\\\\n\\\\n\"', 'out', '+=', \"p['title']\", 'out', '+=', '\"\\\\n\"', '+', 'ytpl_desc', 'out', '+=', '(\"\\\\n\\\\nAuthor', ':', '\"', '+', \"p['author'])\", 'out', '+=', '\"\\\\nSize', ':', '\"', '+', \"str(p['size'])\", '+', '\"', 'videos\"', 'out', '+=', '\"\\\\nCreated', ':', '\"', '+', 'created[1]', '+', '\"', '\"', '+', 'created[2]', 'out', '+=', '\"\\\\nUpdated', ':', '\"', '+', 'updated[1]', '+', '\"', '\"', '+', 'updated[2]', 'out', '+=', '\"\\\\nID', ':', '\"', '+', \"str(p['link'])\", 'out', '+=', '(\"\\\\n\\\\n%s[%sPress', 'enter', 'to', 'go', 'back%s]%s\"', '%', '(c.y,', 'c.w,', 'c.y,', 'c.w))', 'g.content', '=', 'out', 'elif', 'g.browse_mode', '==', '\"normal\":', 'g.content', '=', 'logo(c.b)', 'screen.update()', 'screen.writestatus(\"Fetching', 'video', 'metadata..\")', 'item', '=', '(g.model[int(num)', '-', '1])', 'streams.get(item)', 'p', '=', 'pafy.get_video_info(item.ytid)', 'screen.writestatus(\"Fetched\")', 'out', '=', 'c.ul', '+', '\"Video', 'Info\"', '+', 'c.w', '+', '\"\\\\n\\\\n\"', 'out', '+=', \"p['title']\", 'or', '\"\"', 'out', '+=', '\"\\\\n\\\\nDescription:\\\\n\\\\n\"', '+', \"str(p.get('description',\", '\"\"))', '+', '\"\\\\n\"', 'out', '+=', '\"\\\\nKeywords:', '\"', '+', \"str(p['keywords'])\", '+', '\"\\\\n\"', 'out', '+=', '\"\\\\nIs', 'Live', 'Now', ':', '\"', '+', \"str(p['isLiveNow'])\", 'out', '+=', '\"\\\\nDuration', ':', '\"', '+', \"str(timedelta(seconds=int(p['duration']['secondsText'])))\", 'out', '+=', '\"\\\\nView', 'count', ':', '\"', '+', '\"{:,}\".format(int(p[\\'viewCount\\'][\\'text\\']))', 'out', '+=', '\"\\\\nAuthor', ':', '\"', '+', \"str(p['channel']['name']\", '+', \"'\", '~', \"'\", '+', \"p['channel']['link'])\", 'out', '+=', '\"\\\\nPublished', 'Date', ':', '\"', '+', \"str(p['publishDate'])\", 'out', '+=', '\"\\\\nUploaded', 'Date', ':', '\"', '+', \"str(p['uploadDate'])\", 'out', '+=', '\"\\\\nRating', ':', '\"', '+', \"str(p['averageRating'])\", 'out', '+=', '\"\\\\nLikes', ':', '\"', '+', '\"{:,}\".format(p.get(\\'likes\\',', '0))', 'out', '+=', '\"\\\\nDislikes', ':', '\"', '+', '\"{:,}\".format(p.get(\\'dislikes\\',', '0))', 'out', '+=', '\"\\\\nCategory', ':', '\"', '+', \"str(p['category'])\", 'out', '+=', '\"\\\\nFamily', 'Safe', ':', '\"', '+', \"str(p['isFamilySafe'])\", 'out', '+=', '\"\\\\nLink', ':', '\"', '+', \"str(p['link'])\", 'if', 'config.SHOW_QRCODE.get:', 'out', '+=', '\"\\\\n\"', '+', 'qrcode_display(', '\"https://youtube.com/watch?v=%s\"', '%', 'p.videoid)', 'out', '+=', '\"\\\\n\\\\n%s[%sPress', 'enter', 'to', 'go', 'back%s]%s\"', '%', '(c.y,', 'c.w,', 'c.y,', 'c.w)', 'g.content', '=', 'out', \"@command(r's\\\\s*(\\\\d{1,4})',\", \"'s')\", 'def', 'stream_info(num):', 'if', 'g.browse_mode', '==', '\"normal\":', 'g.content', '=', 'logo(c.b)', 'screen.update()', 'screen.writestatus(\"Fetching', 'stream', 'metadata..\")', 'item', '=', '(g.model[int(num)', '-', '1])', 'streams.get(item)', 'p', '=', 'util.get_pafy(item)', 'setattr(p,', \"'ytid',\", 'p.videoid)', 'details', '=', 'player.stream_details(p)[1]', 'screen.writestatus(\"Fetched\")', 'out', '=', '\"\\\\n\\\\n\"', '+', 'c.ul', '+', '\"Stream', 'Info\"', '+', 'c.w', '+', '\"\\\\n\"', 'out', '+=', '\"\\\\nExtension', ':', '\"', '+', \"details['ext']\", 'out', '+=', '\"\\\\nSize', ':', '\"', '+', \"str(details['size'])\", 'out', '+=', '\"\\\\nQuality', ':', '\"', '+', \"details['quality']\", 'out', '+=', '\"\\\\nRaw', 'bitrate', ':', '\"', '+', \"str(details['rawbitrate'])\", 'out', '+=', '\"\\\\nMedia', 'type', ':', '\"', '+', \"details['mtype']\", 'out', '+=', '\"\\\\nLink', ':', '\"', '+', \"details['url']\", 'out', '+=', '\"\\\\n\\\\n%s[%sPress', 'enter', 'to', 'go', 'back%s]%s\"', '%', '(c.y,', 'c.w,', 'c.y,', 'c.w)', 'g.content', '=', 'out', \"@command(r'history',\", \"'history')\", 'def', 'view_history(duplicates=True):', 'history', '=', \"g.userhist.get('history')\", 'try:', 'hist_list', '=', 'list(reversed(history.songs))', 'message', '=', '\"Viewing', 'play', 'history\"', 'if', 'not', 'duplicates:', 'seen', '=', 'set()', 'seen_add', '=', 'seen.add', 'hist_list', '=', '[x', 'for', 'x', 'in', 'hist_list', 'if', 'not', '(x.ytid', 'in', 'seen', 'or', 'seen_add(x.ytid))]', 'message', '=', '\"Viewing', 'recent', 'played', 'songs\"', 'paginatesongs(hist_list)', 'g.message', '=', 'message', 'except', 'AttributeError:', 'g.content', '=', 'logo(c.r)', 'g.message', '=', '\"History', 'empty\"', 'if', 'not', 'config.HISTORY.get:', 'g.message', '+=', '\"\\\\t{1}History', 'recording', 'is', 'currently', 'off{0}\".format(c.w,c.y)', \"@command(r'history\", \"recent',\", \"'history\", \"recent')\", 'def', 'recent_history():', 'view_history(duplicates=False)', \"@command(r'history\", \"clear',\", \"'history\", \"clear')\", 'def', 'clear_history():', \"g.userhist['history'].songs\", '=', '[]', 'history.save()', 'g.message', '=', '\"History', 'cleared\"', 'g.content', '=', 'logo()']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/commands/play.py",
        "vector": "['import', 'random', 'import', 'sys', 'import', 'typing', 'as', 'T', 'import', 'webbrowser', 'from', 'urllib.error', 'import', 'HTTPError,', 'URLError', 'from', '..', 'import', 'c,', 'config,', 'content,', 'g,', 'streams,', 'util', 'from', '.', 'import', 'RS,', 'WORD,', 'command', 'from', '.search', 'import', 'related,', 'yt_url', 'from', '.songlist', 'import', 'plist', \"@command(r'play\", \"all',\", \"'play\", \"all')\", 'def', 'play_loaded():', 'g.model.songs', '=', 'content.get_last_query()', 'if', 'g.model.songs:', 'play_all(\"\",', '\"\",', '\"\")', \"@command(r'play\\\\s+(%s|\\\\d+)'\", '%', 'WORD,', \"'play')\", 'def', 'play_pl(name):', 'if', 'name.isdigit():', 'name', '=', 'int(name)', 'name', '=', 'sorted(g.userpl)[name', '-', '1]', 'saved', '=', 'g.userpl.get(name)', 'if', 'not', 'saved:', 'name', '=', 'util.get_near_name(name,', 'g.userpl)', 'saved', '=', 'g.userpl.get(name)', 'if', 'saved:', 'g.model.songs', '=', 'list(saved.songs)', 'play_all(\"\",', '\"\",', '\"\")', 'else:', 'g.message', '=', 'util.F(\"pl', 'not', 'found\")', '%', 'name', 'g.content', '=', 'content.playlists_display()', \"@command(r'(%s{0,3})([-,\\\\d\\\\s\\\\[\\\\]]{1,250})\\\\s*(%s{0,3})$'\", '%', '(RS,', 'RS))', 'def', 'play(pre,', 'choice,', 'post=\"\"):', 'if', 'isinstance(g.content,', 'content.Content):', 'play_call', '=', 'getattr(g.content,', '\"_play\",', 'None)', 'if', 'callable(play_call):', 'play_call(pre,', 'choice,', 'post)', 'return', 'if', 'g.browse_mode', '==', '\"ytpl\":', 'if', 'choice.isdigit():', 'g.selected_pafy_pls_id', '=', \"g.ytpls[int(choice)-1]['link']\", 'return', 'plist(g.selected_pafy_pls_id)', 'else:', 'g.message', '=', '\"Invalid', 'playlist', 'selection:', '%s\"', '%', 'c.y', '+', 'choice', '+', 'c.w', 'g.content', '=', 'content.generate_songlist_display()', 'return', 'if', 'not', 'g.model:', 'g.message', '=', 'c.r', '+', '\"There', 'are', 'no', 'tracks', 'to', 'select\"', '+', 'c.w', 'g.content', '=', 'g.content', 'or', 'content.generate_songlist_display()', 'else:', 'shuffle', '=', '\"shuffle\"', 'in', 'pre', '+', 'post', 'repeat', '=', '\"repeat\"', 'in', 'pre', '+', 'post', 'novid', '=', '\"-a\"', 'in', 'pre', '+', 'post', 'fs', '=', '\"-f\"', 'in', 'pre', '+', 'post', 'nofs', '=', '\"-w\"', 'in', 'pre', '+', 'post', 'forcevid', '=', '\"-v\"', 'in', 'pre', '+', 'post', 'if', '((novid', 'and', 'fs)', 'or', '(novid', 'and', 'nofs)', 'or', '(nofs', 'and', 'fs)', 'or', '(novid', 'and', 'forcevid)):', 'raise', 'IOError(\"Conflicting', 'override', 'options', 'specified\")', 'override', '=', 'False', 'override', '=', '\"audio\"', 'if', 'novid', 'else', 'override', 'override', '=', '\"fullscreen\"', 'if', 'fs', 'else', 'override', 'override', '=', '\"window\"', 'if', 'nofs', 'else', 'override', 'if', '(not', 'fs)', 'and', '(not', 'nofs):', 'override', '=', '\"forcevid\"', 'if', 'forcevid', 'else', 'override', 'selection', '=', 'util.parse_multi(choice)', 'songlist', '=', '[g.model[x', '-', '1]', 'for', 'x', 'in', 'selection]', 'if', 'len(songlist)', '==', '1:', 'chosen', '=', 'selection[0]', '-', '1', 'if', 'len(g.model)', '>', 'chosen', '+', '1:', 'streams.preload(g.model[chosen', '+', '1],', 'override=override)', 'if', 'g.scrobble:', 'old_queue', '=', 'g.scrobble_queue', 'g.scrobble_queue', '=', '[g.scrobble_queue[x', '-', '1]', 'for', 'x', 'in', 'selection]', 'try:', 'if', 'not', 'config.PLAYER.get', 'or', 'not', 'util.has_exefile(config.PLAYER.get):', 'g.message', '=', '\"Player', 'not', 'configured!', 'Enter', '%sset', 'player', '<player_app>', '\"\\\\', '\"%s', 'to', 'set', 'a', 'player\"', '%', '(c.g,', 'c.w)', 'return', 'g.PLAYER_OBJ.play(songlist,', 'shuffle,', 'repeat,', 'override)', 'except', 'KeyboardInterrupt:', 'return', 'finally:', 'g.content', '=', 'content.generate_songlist_display()', 'if', 'g.scrobble:', 'g.scrobble_queue', '=', 'old_queue', 'if', 'config.AUTOPLAY.get:', 'related(selection.pop())', 'play(pre,', 'str(random.randint(1,', '15)),', 'post=\"\")', \"@command(r'(%s{0,3})(?:\\\\*|all)\\\\s*(%s{0,3})'\", '%', '(RS,', 'RS))', 'def', 'play_all(pre,', 'choice,', 'post=\"\"):', 'options', '=', 'pre', '+', 'choice', '+', 'post', 'play(options,', '\"1-\"', '+', 'str(len(g.model)))', \"@command(r'playurl\\\\s(.*[-_a-zA-Z0-9]{11}[^\\\\s]*)(\\\\s-(?:f|a|w))?',\", \"'playurl')\", 'def', 'play_url(url:', 'str,', 'override:', 'T.Any):', 'override', '=', 'override', 'if', 'override', 'else', '\"_\"', 'g.browse_mode', '=', '\"normal\"', 'yt_url(url,', 'print_title=True)', 'if', 'len(g.model)', '==', '1:', 'play(override,', '\"1\",', '\"_\")', 'if', 'g.command_line:', 'sys.exit()', \"@command(r'browserplay\\\\s(\\\\d{1,50})',\", \"'browserplay')\", 'def', 'browser_play(number):', 'if', '(len(g.model)', '==', '0):', 'g.message', '=', 'c.r', '+', '\"No', 'previous', 'search.\"', '+', 'c.w', 'g.content', '=', 'content.logo(c.r)', 'return', 'try:', 'index', '=', 'int(number)', '-', '1', 'if', '(0', '<=', 'index', '<', 'len(g.model)):', 'base_url', '=', '\"https://www.youtube.com/watch?v=\"', 'video', '=', 'g.model[index]', 'url', '=', 'base_url', '+', 'video.ytid', 'webbrowser.open(url)', 'g.content', '=', 'g.content', 'or', 'content.generate_songlist_display()', 'else:', 'g.message', '=', 'c.r', '+', '\"Out', 'of', 'range.\"', '+', 'c.w', 'g.content', '=', 'g.content', 'or', 'content.generate_songlist_display()', 'return', 'except', '(HTTPError,', 'URLError,', 'Exception)', 'as', 'e:', 'g.message', '=', 'c.r', '+', 'str(e)', '+', 'c.w', 'g.content', '=', 'g.content', 'or', 'content.generate_songlist_display()', 'return']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/commands/search.py",
        "vector": "['import', 'base64', 'import', 'json', 'import', 'logging', 'import', 'math', 'import', 're', 'import', 'typing', 'as', 'T', 'from', 'argparse', 'import', 'ArgumentParser', 'from', 'datetime', 'import', 'datetime,', 'timedelta', 'from', 'urllib', 'import', 'parse', 'from', '..', 'import', 'pafy', 'parser', '=', 'ArgumentParser()', \"parser.add_argument('-d',\", \"'--duration',\", \"choices=('any',\", \"'short',\", \"'medium',\", \"'long'))\", \"parser.add_argument('-a',\", \"'--after')\", \"parser.add_argument('-l',\", \"'--live',\", 'nargs=\"?\",', 'const=True)', \"parser.add_argument('-c',\", \"'--category',\", 'nargs=1)', \"parser.add_argument('search',\", \"nargs='+')\", 'from', '..', 'import', 'c,', 'config,', 'content,', 'contentquery,', 'g,', 'listview,', 'screen,', 'util', 'from', '..playlist', 'import', 'Playlist,', 'Video', 'from', '.', 'import', 'command', 'from', '.songlist', 'import', 'paginatesongs,', 'plist', 'ISO8601_TIMEDUR_EX', '=', \"re.compile(r'PT((\\\\d{1,3})H)?((\\\\d{1,3})M)?((\\\\d{1,2})S)?')\", 'DAYS', '=', 'dict(day', '=', '1,', 'week', '=', '7,', 'month', '=', '30,', 'year', '=', '365)', 'def', '_display_search_results(progtext,', 'wdata,', 'msg=None,', 'failmsg=None):', 'loadmsg', '=', '\"Searching', 'for', '\\'%s%s%s\\'\"', '%', '(c.y,', 'progtext,', 'c.w)', 'def', 'iter_songs():', 'wdata2', '=', 'wdata', 'while', 'True:', 'for', 'song', 'in', 'get_tracks_from_json(wdata2):', 'yield', 'song', 'if', 'type(wdata2)', 'is', 'list', 'or', 'not', \"wdata2.get('nextPageToken'):\", 'break', 'query', '=', 'None', 'wdata2', '=', 'None', 'length', '=', 'len(wdata)', 'slicer', '=', 'util.IterSlicer(iter_songs(),', 'length)', 'paginatesongs(slicer,', 'length=length,', 'msg=msg,', 'failmsg=failmsg,', 'loadmsg=loadmsg)', 'def', 'token(page):', 'index', '=', '(page', 'or', '0)', '*', 'util.getxy().max_results', 'k', '=', 'index//128', '-', '1', 'index', '-=', '128', '*', 'k', 'f', '=', '[8,', 'index]', 'if', 'k', '>', '0', 'or', 'index', '>', '127:', 'f.append(k+1)', 'f', '+=', '[16,', '0]', 'b64', '=', \"base64.b64encode(bytes(f)).decode('utf8')\", 'return', \"b64.strip('=')\", 'def', 'userdata_cached(userterm):', 'userterm', '=', \"''.join([t.strip().lower()\", 'for', 't', 'in', \"userterm.split('\", \"')])\", 'return', 'g.username_query_cache.get(userterm)', 'def', 'cache_userdata(userterm,', 'username,', 'channel_id):', 'userterm', '=', \"''.join([t.strip().lower()\", 'for', 't', 'in', \"userterm.split('\", \"')])\", 'g.username_query_cache[userterm]', '=', '(username,', 'channel_id)', \"util.dbg('Cache\", 'data', 'for', 'username', 'search', 'query', '\"{}\":', '{}', \"({})'.format(\", 'userterm,', 'username,', 'channel_id))', 'while', 'len(g.username_query_cache)', '>', '300:', 'g.username_query_cache.popitem(last=False)', 'return', '(username,', 'channel_id)', 'def', 'channelfromname(user):', 'cached', '=', 'userdata_cached(user)', 'if', 'cached:', 'return', 'cached', 'try:', 'channel_id,', 'channel_name', '=', 'pafy.channel_id_from_name(user)', 'return', 'cache_userdata(user,', 'channel_name,', 'channel_id)', 'except', 'Exception', 'as', 'e:', 'import', 'traceback', 'traceback.print_exception(type(e),', 'e,', 'e.__traceback__)', 'g.message', '=', '\"Could', 'not', 'retrieve', 'information', 'for', 'user', '{}\\\\n{}\".format(', 'c.y', '+', 'user', '+', 'c.w,', 'e)', \"util.dbg('Error\", 'during', 'channel', 'request', 'for', 'user', \"{}:\\\\n{}'.format(\", 'user,', 'e))', 'return', 'None', \"@command(r'channels\\\\s+(.+)')\", 'def', 'channelsearch(q_user):', 'QueryObj', '=', 'contentquery.ContentQuery(listview.ListUser,', \"'search',\", 'q_user)', 'columns', '=', '[', '{\"name\":', '\"idx\",', '\"size\":', '3,', '\"heading\":', '\"Num\"},', '{\"name\":', '\"name\",', '\"size\":', '30,', '\"heading\":', '\"Username\"},', '{\"name\":', '\"description\",', '\"size\":', '\"remaining\",', '\"heading\":', '\"Description\"},', ']', 'def', 'run_m(user_id):', 'usersearch_id(*(user_id[0]))', 'del', 'g.content', 'g.content', '=', 'listview.ListView(columns,', 'QueryObj,', 'run_m)', 'g.message', '=', '\"Results', 'for', 'channel', 'search:', '\\'%s\\'\"', '%', 'q_user', \"@command(r'user\\\\s+(.+)',\", \"'user')\", 'def', 'usersearch(q_user,', \"identify='forUsername'):\", 'user,', '_,', 'term', '=', '(x.strip()', 'for', 'x', 'in', 'q_user.partition(\"/\"))', 'if', 'identify', '==', \"'forUsername':\", 'ret', '=', 'channelfromname(user)', 'if', 'not', 'ret:', 'return', 'user,', 'channel_id', '=', 'ret', 'else:', 'channel_id', '=', 'user', 'usersearch_id(user,', 'channel_id,', 'term)', 'def', 'usersearch_id(user,', 'channel_id,', 'term):', 'aliases', '=', \"dict(views='viewCount')\", 'if', 'config.USER_ORDER.get:', 'pass', 'termuser', '=', 'tuple([c.y', '+', 'x', '+', 'c.w', 'for', 'x', 'in', '(term,', 'user)])', 'if', 'term:', 'msg', '=', '\"Results', 'for', '{1}{3}{0}', '(by', '{2}{4}{0})\"', 'progtext', '=', '\"%s', 'by', '%s\"', '%', 'termuser', 'failmsg', '=', '\"No', 'matching', 'results', 'for', '%s', '(by', '%s)\"', '%', 'termuser', 'else:', 'msg', '=', '\"Video', 'uploads', 'by', '{2}{4}{0}\"', 'progtext', '=', 'termuser[1]', 'if', 'config.SEARCH_MUSIC:', 'failmsg', '=', '%', 'termuser[1]', 'else:', 'failmsg', '=', '\"User', '%s', 'not', 'found', 'or', 'has', 'no', 'videos.\"', '%', 'termuser[1]', 'msg', '=', 'str(msg).format(c.w,', 'c.y,', 'c.y,', 'term,', 'user)', 'results', '=', 'pafy.all_videos_from_channel(channel_id)', '_display_search_results(progtext,', 'results,', 'msg,', 'failmsg)', 'def', 'related_search(vitem):', 't', '=', 'vitem.title', 'ttitle', '=', 't[:48].strip()', '+', '\"..\"', 'if', 'len(t)', '>', '49', 'else', 't', 'msg', '=', '\"Videos', 'related', 'to', '%s%s%s\"', '%', '(c.y,', 'ttitle,', 'c.w)', 'failmsg', '=', '\"Related', 'to', '%s%s%s', 'not', 'found\"', '%', '(c.y,', 'vitem.ytid,', 'c.w)', \"@command(r'live\\\\s+(.+)',\", \"'live')\", 'def', 'livestream_category_search(term):', 'sel_category', '=', 'g.categories.get(term,', 'None)', 'if', 'not', 'sel_category:', 'g.message', '=', '(\"That', 'is', 'not', 'a', 'valid', 'category.', 'Valid', 'categories', 'are:', '\")', 'g.message', '+=', '(\",', '\".join(g.categories.keys()))', 'return', 'query', '=', '{', '\"part\":', '\"id,snippet\",', '\"eventType\":', '\"live\",', '\"maxResults\":', '50,', '\"type\":', '\"video\",', '\"videoCategoryId\":', 'sel_category', '}', 'query_obj', '=', 'contentquery.ContentQuery(listview.ListLiveStream,', \"'search',\", 'query)', 'columns', '=', '[', '{\"name\":', '\"idx\",', '\"size\":', '3,', '\"heading\":', '\"Num\"},', '{\"name\":', '\"title\",', '\"size\":', '40,', '\"heading\":', '\"Title\"},', '{\"name\":', '\"description\",', '\"size\":', '\"remaining\",', '\"heading\":', '\"Description\"},', ']', 'def', 'start_stream(returned):', 'songs', '=', 'Playlist(\"Search', 'Results\",', '[Video(*x)', 'for', 'x', 'in', 'returned])', 'if', 'not', 'config.PLAYER.get', 'or', 'not', 'util.has_exefile(config.PLAYER.get):', 'g.message', '=', '\"Player', 'not', 'configured!', 'Enter', '%sset', 'player', '<player_app>', '\"\\\\', '\"%s', 'to', 'set', 'a', 'player\"', '%', '(c.g,', 'c.w)', 'return', 'g.PLAYER_OBJ.play(songs,', 'False,', 'False,', 'False)', 'g.content', '=', 'listview.ListView(columns,', 'query_obj,', 'start_stream)', 'g.message', '=', '\"Livestreams', 'in', 'category:', '\\'%s\\'\"', '%', 'term', \"@command(r'(?:search|\\\\.|/)\\\\s*([^./].{1,500})',\", \"'search')\", 'def', 'search(term):', 'try:', 'args,', 'unknown', '=', 'parser.parse_known_args(term.split())', 'video_duration', '=', 'args.duration', 'if', 'args.duration', 'else', \"'any'\", 'if', 'args.category:', 'if', 'not', 'args.category[0].isdigit():', 'args.category', '=', 'g.categories.get(args.category[0])', 'else:', 'args.category', '=', '\"\".join(args.category)', 'after', '=', 'args.after', 'term', '=', \"'\", \"'.join(args.search)\", 'except', 'SystemExit:', 'g.message', '=', 'c.b', '+', '\"Bad', 'syntax.', 'Enter', 'h', 'for', 'help\"', '+', 'c.w', 'return', 'if', 'not', 'term', 'or', 'len(term)', '<', '2:', 'g.message', '=', 'c.r', '+', '\"Not', 'enough', 'input\"', '+', 'c.w', 'g.content', '=', 'content.generate_songlist_display()', 'return', 'logging.info(\"search', 'for', '%s\",', 'term)', 'msg', '=', '\"Search', 'results', 'for', '%s%s%s\"', '%', '(c.y,', 'term,', 'c.w)', 'failmsg', '=', '\"Found', 'nothing', 'for', '%s%s%s\"', '%', '(c.y,', 'term,', 'c.w)', 'wdata', '=', 'pafy.search_videos(term,', 'int(config.PAGES.get))', '_display_search_results(term,', 'wdata,', 'msg,', 'failmsg)', \"@command(r'u(?:ser)?pl\\\\s(.*)',\", \"'userpl',\", \"'upl')\", 'def', 'user_pls(user):', 'return', 'pl_search(user,', 'is_user=True)', \"@command(r'(?:\\\\.\\\\.|\\\\/\\\\/|pls(?:earch)?\\\\s)\\\\s*(.*)',\", \"'plsearch')\", 'def', 'pl_search(term,', 'page=0,', 'splash=True,', 'is_user=False):', 'if', 'not', 'term', 'or', 'len(term)', '<', '2:', 'g.message', '=', 'c.r', '+', '\"Not', 'enough', 'input\"', '+', 'c.w', 'g.content', '=', 'content.generate_songlist_display()', 'return', 'if', 'splash:', 'g.content', '=', 'content.logo(c.g)', 'prog', '=', '\"user:', '\"', '+', 'term', 'if', 'is_user', 'else', 'term', 'g.message', '=', '\"Searching', 'playlists', 'for', '%s\"', '%', 'c.y', '+', 'prog', '+', 'c.w', 'screen.update()', 'logging.info(\"playlist', 'search', 'for', '%s\",', 'prog)', 'if', 'is_user:', 'ret', '=', 'channelfromname(term)', 'if', 'not', 'ret:', 'return', 'user,', 'channel_id', '=', 'ret', 'pldata', '=', 'pafy.all_playlists_from_channel(channel_id)', 'else:', 'pldata', '=', 'pafy.playlist_search(term)', 'playlists', '=', 'get_pl_from_json(pldata)[:util.getxy().max_results]', 'if', 'playlists:', 'g.last_search_query', '=', '(pl_search,', '{\"term\":', 'term,', '\"is_user\":', 'is_user})', 'g.browse_mode', '=', '\"ytpl\"', 'g.current_page', '=', 'page', 'g.result_count', '=', 'len(pldata)', 'g.ytpls', '=', 'playlists', 'g.message', '=', '\"Playlist', 'results', 'for', '%s\"', '%', 'c.y', '+', 'prog', '+', 'c.w', 'g.content', '=', 'content.generate_playlist_display()', 'else:', 'g.message', '=', '\"No', 'playlists', 'found', 'for:', '%s\"', '%', 'c.y', '+', 'prog', '+', 'c.w', 'g.current_page', '=', '0', 'g.content', '=', 'content.generate_songlist_display(zeromsg=g.message)', 'def', 'get_pl_from_json(pldata):', 'try:', 'items', '=', 'pldata', 'except', 'KeyError:', 'items', '=', '[]', 'results', '=', '[]', 'for', 'item', 'in', 'items:', 'results.append(dict(', 'link=item[\"id\"],', 'size=item[\"videoCount\"],', 'title=item[\"title\"],', 'author=', 'item[\\'channel\\'][\"name\"]', 'if', \"'channel'\", 'in', 'item.keys()', 'else', 'None,', 'created=item.get(\"publishedAt\"),', \"updated=item.get('publishedAt'),\", 'description=item.get(\"description\")))', 'return', 'results', 'def', 'get_track_id_from_json(item):', 'fields', '=', \"['contentDetails/videoId',\", \"'snippet/resourceId/videoId',\", \"'id/videoId',\", \"'id']\", 'for', 'field', 'in', 'fields:', 'node', '=', 'item', 'for', 'p', 'in', \"field.split('/'):\", 'if', 'node', 'and', 'isinstance(node,', 'dict):', 'node', '=', 'node.get(p)', 'if', 'node:', 'return', 'node', 'return', \"''\", 'def', 'get_tracks_from_json(jsons):', 'if', 'len(jsons)', '==', '0:', 'util.dbg(\"got', 'unexpected', 'data', 'or', 'no', 'search', 'results\")', 'return', '()', 'songs', '=', '[]', 'for', 'item', 'in', 'jsons:', 'try:', 'ytid', '=', 'get_track_id_from_json(item)', 'duration', '=', \"util.parse_video_length(item.get('duration'))\", 'title', '=', \"item.get('title',\", \"'').strip()\", 'cursong', '=', 'Video(ytid=ytid,', 'title=title,', 'length=duration)', 'dislike_data', '=', \"{'likes':\", '0,', \"'dislikes':0,\", \"'rating':0}\", 'likes', '=', \"int(dislike_data['likes'])\", 'dislikes', '=', \"int(dislike_data['dislikes'])\", 'rating', '=', \"int(dislike_data['rating'])\", 'category', '=', \"'?'\", 'publishedlocaldatetime', '=', \"item.get('publishedTime','?')\", 'g.meta[ytid]', '=', 'dict(', 'title=title,', 'length=str(util.fmt_time(cursong.length)),', 'rating=rating,', \"uploader=item['channel']['id'],\", \"uploaderName=item['channel']['name'],\", 'category=category,', 'aspect=\"custom\",', 'uploaded=publishedlocaldatetime,', 'uploadedTime=publishedlocaldatetime,', 'likes=str(num_repr(likes)),', 'dislikes=str(num_repr(dislikes)),', \"commentCount='?',\", 'viewCount=', \"item['viewCount']['text']\", 'if', \"'viewCount'\", 'in', 'item.keys()', 'else', \"'?')\", 'songs.append(cursong)', 'except', 'Exception', 'as', 'e:', 'import', 'traceback', 'traceback.print_exception(type(e),', 'e,', 'e.__traceback__)', \"input('Press\", 'any', 'key', 'to', \"continue...')\", 'util.dbg(json.dumps(item,', 'indent=2))', \"util.dbg('Error\", 'during', 'metadata', 'extraction/instantiation', 'of', \"'\", '+', \"'search\", 'result', \"{}\\\\n{}'.format(ytid,\", 'e))', 'return', 'songs', 'def', 'num_repr(num):', 'if', 'num', '<=', '9999:', 'return', 'str(num)', 'def', 'digit_count(x):', 'return', 'int(math.floor(math.log10(x))', '+', '1)', 'digits', '=', 'digit_count(num)', 'sig', '=', '3', 'if', 'digits', '%', '3', '==', '0', 'else', '2', 'rounded', '=', 'int(round(num,', 'int(sig', '-', 'digits)))', 'digits', '=', 'digit_count(rounded)', 'suffix', '=', '\"_kmBTqXYX\"[(digits', '-', '1)', '//', '3]', 'front', '=', '3', 'if', 'digits', '%', '3', '==', '0', 'else', 'digits', '%', '3', 'if', 'not', 'front', '==', '1:', 'return', 'str(rounded)[0:front]', '+', 'suffix', 'return', 'str(rounded)[0]', '+', '\".\"', '+', 'str(rounded)[1]', '+', 'suffix', \"@command(r'u\\\\s?([\\\\d]{1,4})',\", \"'u')\", 'def', 'user_more(num):', 'if', 'g.browse_mode', '!=', '\"normal\":', 'g.message', '=', '\"User', 'uploads', 'must', 'refer', 'to', 'a', 'specific', 'video', 'item\"', 'g.message', '=', 'c.y', '+', 'g.message', '+', 'c.w', 'g.content', '=', 'content.generate_songlist_display()', 'return', 'g.current_page', '=', '0', 'item', '=', 'g.model[int(num)', '-', '1]', 'if', 'item.ytid', 'in', 'g.meta:', 'channel_id', '=', 'g.meta.get(item.ytid,', \"{}).get('uploader')\", 'user', '=', 'g.meta.get(item.ytid,', \"{}).get('uploaderName')\", 'else:', 'paf', '=', 'util.get_pafy(item)', 'user,', 'channel_id', '=', 'channelfromname(paf.author)', 'usersearch_id(user,', 'channel_id,', \"'')\", \"@command(r'r\\\\s?(\\\\d{1,4})',\", \"'r')\", 'def', 'related(num):', 'if', 'g.browse_mode', '!=', '\"normal\":', 'g.message', '=', '\"Related', 'items', 'must', 'refer', 'to', 'a', 'specific', 'video', 'item\"', 'g.message', '=', 'c.y', '+', 'g.message', '+', 'c.w', 'g.content', '=', 'content.generate_songlist_display()', 'return', 'g.current_page', '=', '0', 'item', '=', 'g.model[int(num)', '-', '1]', 'related_search(item)', \"@command(r'mix\\\\s*(\\\\d{1,4})',\", \"'mix')\", 'def', 'mix(num):', 'g.content', '=', 'g.content', 'or', 'content.generate_songlist_display()', 'if', 'g.browse_mode', '!=', '\"normal\":', 'g.message', '=', \"util.F('mix\", 'only', \"videos')\", 'else:', 'item', '=', '(g.model[int(num)', '-', '1])', 'if', 'item', 'is', 'None:', 'g.message', '=', \"util.F('invalid\", \"item')\", 'return', 'item', '=', 'util.get_pafy(item)', 'try:', 'plist(\"RD\"', '+', 'item.videoid)', 'except', 'OSError:', 'g.message', '=', \"util.F('no\", \"mix')\", '@command(r\"url\\\\s(.*[-_a-zA-Z0-9]{11}.*)\",', '\"url\")', 'def', 'yt_url(url:', 'str,', 'print_title:', 'bool', '=', 'False):', 'url_list', '=', 'url.split()', 'g.model.songs', '=', '[]', 'v_ids', '=', 'set()', 'v_title', '=', 'None', 'for', 'url', 'in', 'url_list:', 'try:', 'v_id', '=', 'pafy.extract_video_id(url)', 'if', 'v_id', 'in', 'v_ids:', 'continue', 'p', '=', 'pafy.get_video_info(v_id)', 'except', '(IOError,', 'ValueError,', 'Exception)', 'as', 'e:', 'g.message', '=', 'c.r', '+', 'str(e)', '+', 'c.w', 'g.content', '=', 'g.content', 'or', 'content.generate_songlist_display(', 'zeromsg=g.message)', 'return', 'g.browse_mode', '=', '\"normal\"', 'v', '=', \"Video(p['id'],\", \"p['title'],\", \"int(p['duration']['secondsText']))\", 'if', 'p', 'and', 'isinstance(p,', 'dict):', 'v_title', '=', 'p.get(\"title\")', 'g.model.songs.append(v)', 'v_ids.add(v_id)', 'if', 'not', 'g.command_line:', 'g.content', '=', 'content.generate_songlist_display()', 'if', 'print_title', 'and', 'v_title:', 'util.xprint(v_title)', \"@command(r'url_file\\\\s(\\\\S+)',\", \"'url_file')\", 'def', 'yt_url_file(file_name):', 'try:', 'with', 'open(file_name,', '\"r\")', 'as', 'fo:', 'output', '=', \"'\", \"'.join([line.strip()\", 'for', 'line', 'in', 'fo', 'if', 'line.strip()])', 'except', '(IOError):', 'g.message', '=', 'c.r', '+', \"'Error\", 'while', 'opening', 'the', 'file,', 'check', 'the', 'validity', 'of', 'the', \"path'\", '+', 'c.w', 'g.content', '=', 'g.content', 'or', 'content.generate_songlist_display(', 'zeromsg=g.message)', 'return', 'yt_url(output)']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/commands/songlist.py",
        "vector": "['import', 'math', 'import', 'random', 'from', '..', 'import', 'g,', 'c,', 'screen,', 'streams,', 'content,', 'util,', 'pafy', 'from', '..playlist', 'import', 'Video', 'from', '.', 'import', 'command,', 'PL', 'def', 'paginatesongs(func,', 'page=0,', 'splash=True,', 'dumps=False,', 'length=None,', 'msg=None,', 'failmsg=None,', 'loadmsg=None):', 'if', 'splash:', 'g.message', '=', 'loadmsg', 'or', \"''\", 'g.content', '=', 'content.logo(col=c.b)', 'screen.update()', 'max_results', '=', 'util.getxy().max_results', 'if', 'dumps:', 's', '=', '0', 'e', '=', 'None', 'else:', 's', '=', 'page', '*', 'max_results', 'e', '=', '(page', '+', '1)', '*', 'max_results', 'if', 'callable(func):', 'songs', '=', 'func(s,', 'e)', 'else:', 'songs', '=', 'func[s:e]', 'if', 'length', 'is', 'None:', 'length', '=', 'len(func)', 'args', '=', \"{'func':func,\", \"'length':length,\", \"'msg':msg,\", \"'failmsg':failmsg,\", \"'loadmsg':\", 'loadmsg}', 'g.last_search_query', '=', '(paginatesongs,', 'args)', 'g.browse_mode', '=', '\"normal\"', 'g.current_page', '=', 'page', 'g.result_count', '=', 'length', 'g.model.songs', '=', 'songs', 'g.content', '=', 'content.generate_songlist_display()', 'g.last_opened', '=', '\"\"', 'g.message', '=', 'msg', 'or', \"''\", 'if', 'not', 'songs:', 'g.message', '=', 'failmsg', 'or', 'g.message', 'if', 'songs:', 'streams.preload(songs[0],', 'delay=0)', \"@command(r'pl\\\\s+%s'\", '%', 'PL,', \"'pl')\", 'def', 'plist(parturl):', 'if', 'parturl', 'in', 'g.pafy_pls:', 'ytpl,', 'plitems', '=', 'g.pafy_pls[parturl]', 'else:', 'util.dbg(\"%sFetching', 'playlist', 'using', 'pafy%s\",', 'c.y,', 'c.w)', 'ytpl', '=', 'pafy.get_playlist(parturl)', 'plitems', '=', 'util.IterSlicer(ytpl.videos)', 'g.pafy_pls[parturl]', '=', '(ytpl,', 'plitems)', 'def', 'pl_seg(s,', 'e):', 'return', \"[Video(i['id'],\", \"i['title'],\", \"util.parse_video_length(i['duration']))\", 'for', 'i', 'in', 'plitems[s:e]]', 'msg', '=', '\"Showing', 'YouTube', 'playlist', '%s\"', '%', '(c.y', '+', \"ytpl.info['info']['title']\", '+', 'c.w)', 'loadmsg', '=', '\"Retrieving', 'YouTube', 'playlist\"', 'paginatesongs(pl_seg,', 'length=len(ytpl.videos),', 'msg=msg,', 'loadmsg=loadmsg)', \"@command(r'(rm|add)\\\\s*(-?\\\\d[-,\\\\d\\\\s]{,250})',\", \"'rm',\", \"'add')\", 'def', 'songlist_rm_add(action,', 'songrange):', 'selection', '=', 'util.parse_multi(songrange)', 'if', 'action', '==', '\"add\":', 'duplicate_songs', '=', '[]', 'for', 'songnum', 'in', 'selection:', 'if', 'g.model[songnum', '-', '1]', 'in', 'g.active:', 'duplicate_songs.append(str(songnum))', 'g.active.songs.append(g.model[songnum', '-', '1])', 'd', '=', 'g.active.duration', 'g.message', '=', \"util.F('added\", 'to', \"pl')\", '%', '(len(selection),', 'len(g.active),', 'd)', 'if', 'duplicate_songs:', 'duplicate_songs', '=', \"',\", \"'.join(sorted(duplicate_songs))\", 'g.message', '+=', \"'\\\\n'\", 'g.message', '+=', \"util.F('duplicate\", \"tracks')\", '%', 'duplicate_songs', 'elif', 'action', '==', '\"rm\":', 'selection', '=', 'sorted(set(selection),', 'reverse=True)', 'removed', '=', 'str(tuple(reversed(selection))).replace(\",\",', '\"\")', 'for', 'x', 'in', 'selection:', 'g.model.songs.pop(x', '-', '1)', 'try:', 'g.active.songs.pop(g.current_page', '*', 'util.getxy().max_results', '+', 'x', '-', '1)', 'except', 'IndexError:', 'pass', 'g.message', '=', \"util.F('songs\", \"rm')\", '%', '(len(selection),', 'removed)', 'g.content', '=', 'content.generate_songlist_display()', \"@command(r'(mv|sw)\\\\s*(\\\\d{1,4})\\\\s*[\\\\s,]\\\\s*(\\\\d{1,4})',\", \"'mv',\", \"'sw')\", 'def', 'songlist_mv_sw(action,', 'a,', 'b):', 'i,', 'j', '=', 'int(a)', '-', '1,', 'int(b)', '-', '1', 'if', 'action', '==', '\"mv\":', 'g.model.songs.insert(j,', 'g.model.songs.pop(i))', 'g.message', '=', \"util.F('song\", \"move')\", '%', '(g.model[j].title,', 'b)', 'elif', 'action', '==', '\"sw\":', 'g.model[i],', 'g.model[j]', '=', 'g.model[j],', 'g.model[i]', 'g.message', '=', \"util.F('song\", \"sw')\", '%', '(min(a,', 'b),', 'max(a,', 'b))', 'g.content', '=', 'content.generate_songlist_display()', \"@command(r'(n|p)\\\\s*(\\\\d{1,2})?')\", 'def', 'nextprev(np,', 'page=None):', 'if', 'isinstance(g.content,', 'content.PaginatedContent):', 'page_count', '=', 'g.content.numPages()', 'function', '=', 'g.content.getPage', 'args', '=', '{}', 'else:', 'page_count', '=', 'math.ceil(g.result_count/util.getxy().max_results)', 'function,', 'args', '=', 'g.last_search_query', 'good', '=', 'False', 'if', 'function:', 'if', 'np', '==', '\"n\":', 'if', 'g.current_page', '+', '1', '<', 'page_count:', 'g.current_page', '+=', '1', 'good', '=', 'True', 'elif', 'np', '==', '\"p\":', 'if', 'page', 'and', 'int(page)', 'in', 'range(1,20):', 'g.current_page', '=', 'int(page)-1', 'good', '=', 'True', 'elif', 'g.current_page', '>', '0:', 'g.current_page', '-=', '1', 'good', '=', 'True', 'if', 'good:', 'function(page=g.current_page,', '**args)', 'else:', 'norp', '=', '\"next\"', 'if', 'np', '==', '\"n\"', 'else', '\"previous\"', 'g.message', '=', '\"No', '%s', 'items', 'to', 'display\"', '%', 'norp', 'if', 'not', 'isinstance(g.content,', 'content.PaginatedContent):', 'g.content', '=', 'content.generate_songlist_display()', 'return', 'good', \"@command(r'(un)?dump',\", \"'dump',\", \"'undump')\", 'def', 'dump(un):', 'func,', 'args', '=', 'g.last_search_query', 'if', 'func', 'is', 'paginatesongs:', 'paginatesongs(dumps=(not', 'un),', '**args)', 'else:', 'un', '=', '\"\"', 'if', 'not', 'un', 'else', 'un', 'g.message', '=', '\"%s%sdump%s', 'may', 'only', 'be', 'used', 'on', 'an', 'open', 'YouTube', 'playlist\"', 'g.message', '=', 'g.message', '%', '(c.y,', 'un,', 'c.w)', 'g.content', '=', 'content.generate_songlist_display()', \"@command(r'shuffle',\", \"'shuffle')\", 'def', 'shuffle_fn():', 'random.shuffle(g.model.songs)', 'g.message', '=', 'c.y', '+', '\"Items', 'shuffled\"', '+', 'c.w', 'g.content', '=', 'content.generate_songlist_display()', \"@command(r'shuffle\", \"all',\", \"'shuffle\", \"all')\", 'def', 'shuffle_playlist():', 'songs', '=', 'content.get_last_query()', 'if', 'songs:', 'temp_songs', '=', 'list(songs)', 'random.shuffle(temp_songs)', 'paginatesongs(temp_songs)', 'g.message', '=', 'c.y', '+', '\"Shuffled', 'entire', 'playlist\"', '+', 'c.w', 'g.content', '=', 'content.generate_songlist_display()', \"@command(r'reverse',\", \"'reverse')\", 'def', 'reverse_songs():', 'g.model.songs', '=', 'g.model.songs[::-1]', 'g.message', '=', 'c.y', '+', '\"Reversed', 'displayed', 'songs\"', '+', 'c.w', 'g.content', '=', 'content.generate_songlist_display()', \"@command(r'reverse\\\\s*(\\\\d{1,4})\\\\s*-\\\\s*(\\\\d{1,4})\\\\s*',\", \"'reverse')\", 'def', 'reverse_songs_range(lower,', 'upper):', 'lower,', 'upper', '=', 'int(lower),', 'int(upper)', 'if', 'lower', '>', 'upper:', 'lower,', 'upper', '=', 'upper,', 'lower', 'g.model.songs[lower-1:upper]', '=', 'reversed(g.model.songs[lower-1:upper])', 'g.message', '=', 'c.y', '+', '\"Reversed', 'range:', '\"', '+', 'str(lower)', '+', '\"-\"', '+', 'str(upper)', '+', 'c.w', 'g.content', '=', 'content.generate_songlist_display()', \"@command(r'reverse\", \"all',\", \"'reverse\", \"all')\", 'def', 'reverse_playlist():', 'songs', '=', 'content.get_last_query()', 'if', 'songs:', 'paginatesongs(list(reversed(songs)))', 'g.message', '=', 'c.y', '+', '\"Reversed', 'entire', 'playlist\"', '+', 'c.w', 'g.content', '=', 'content.generate_songlist_display()']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/commands/spotify_playlist.py",
        "vector": "['import', 're', 'import', 'time', 'import', 'difflib', 'try:', 'import', 'spotipy', 'import', 'spotipy.oauth2', 'as', 'oauth2', 'has_spotipy', '=', 'True', 'except', 'ImportError:', 'has_spotipy', '=', 'False', 'from', '..', 'import', 'c,', 'g,', 'screen,', '__version__,', '__url__,', 'content,', 'config,', 'util', 'from', '.', 'import', 'command', 'from', '.songlist', 'import', 'paginatesongs', 'from', '.search', 'import', 'get_tracks_from_json', 'def', 'generate_credentials():', 'credentials', '=', 'oauth2.SpotifyClientCredentials(', \"client_id='6451e12933bb49ed8543d41e3296a88d',\", \"client_secret='40ef54678fe441bd9acd66f5d5c34e69')\", 'return', 'credentials', 'def', 'grab_playlist(spotify,', 'playlist):', 'if', \"'/'\", 'in', 'playlist:', 'if', \"playlist.endswith('/'):\", 'playlist', '=', 'playlist[:-1]', 'splits', '=', \"playlist.split('/')\", 'else:', 'splits', '=', \"playlist.split(':')\", 'username', '=', 'splits[-3]', 'playlist_id', '=', 'splits[-1]', 'results', '=', 'spotify.user_playlist(username,', 'playlist_id,', \"fields='tracks,next,name,owner')\", 'all_tracks', '=', '[]', 'tracks', '=', \"results['tracks']\", 'while', 'True:', 'for', 'item', 'in', \"tracks['items']:\", 'track', '=', \"item['track']\", 'try:', 'all_tracks.append(track)', 'except', 'KeyError:', 'pass', 'if', \"tracks['next']:\", 'tracks', '=', 'spotify.next(tracks)', 'else:', 'break', 'return', '(results,', 'all_tracks)', 'def', 'show_message(message,', 'col=c.r,', 'update=False):', 'g.content', '=', 'content.generate_songlist_display()', 'g.message', '=', 'col', '+', 'message', '+', 'c.w', 'if', 'update:', 'screen.update()', 'def', '_best_song_match(songs,', 'title,', 'duration,', 'titleweight,', 'durationweight):', 'seqmatch', '=', 'difflib.SequenceMatcher', 'def', 'variance(a,', 'b):', 'return', 'float(abs(a', '-', 'b))', '/', 'max(a,', 'b)', 'candidates', '=', '[]', 'ignore', '=', '\"music', 'video', 'lyrics', 'new', 'lyrics', 'video', 'audio\".split()', 'extra', '=', '\"official', 'original', 'vevo\".split()', 'for', 'song', 'in', 'songs:', 'dur,', 'tit', '=', 'int(song.length),', 'song.title', 'util.dbg(\"Title:', '%s,', 'Duration:', '%s\",', 'tit,', 'dur)', 'for', 'word', 'in', 'extra:', 'if', 'word', 'in', 'tit.lower()', 'and', 'word', 'not', 'in', 'title.lower():', 'pattern', '=', 're.compile(word,', 're.I)', 'tit', '=', 'pattern.sub(\"\",', 'tit)', 'for', 'word', 'in', 'ignore:', 'if', 'word', 'in', 'tit.lower()', 'and', 'word', 'not', 'in', 'title.lower():', 'pattern', '=', 're.compile(word,', 're.I)', 'tit', '=', 'pattern.sub(\"\",', 'tit)', 'replacechars', '=', 're.compile(r\"[\\\\]\\\\[\\\\)\\\\(\\\\-]\")', 'tit', '=', 'replacechars.sub(\"', '\",', 'tit)', 'multiple_spaces', '=', 're.compile(r\"(\\\\s)(\\\\s*)\")', 'tit', '=', 'multiple_spaces.sub(r\"\\\\1\",', 'tit)', 'title_score', '=', 'seqmatch(None,', 'title.lower(),', 'tit.lower()).ratio()', 'duration_score', '=', '1', '-', 'variance(duration,', 'dur)', 'util.dbg(\"Title', 'score:', '%s,', 'Duration', 'score:', '%s\",', 'title_score,', 'duration_score)', 'score', '=', 'duration_score', '*', 'durationweight', '+', 'title_score', '*', 'titleweight', 'candidates.append((score,', 'song))', 'best_score,', 'best_song', '=', 'max(candidates,', 'key=lambda', 'x:', 'x[0])', 'percent_score', '=', 'int(100', '*', 'best_score)', 'return', 'best_song,', 'percent_score', 'def', '_match_tracks(tracks):', 'def', 'dtime(x):', 'return', \"time.strftime('%M:%S',\", 'time.gmtime(int(x)))', 'for', 'track', 'in', 'tracks:', 'ttitle', '=', \"track['name']\", 'artist', '=', \"track['artists'][0]['name']\", 'length', '=', \"track['duration_ms']/1000\", 'util.xprint(\"Search', ':', '%s%s', '-', '%s%s', '-', '%s\"', '%', '(c.y,', 'artist,', 'ttitle,', 'c.w,', 'dtime(length)))', 'q', '=', '\"%s', '%s\"', '%', '(artist,', 'ttitle)', 'w', '=', 'q', '=', 'ttitle', 'if', 'artist', '==', '\"Various', 'Artists\"', 'else', 'q', 'query', '=', 'w', 'util.dbg(query)', 'wdata', '=', 'None', 'results', '=', 'get_tracks_from_json(wdata)', 'if', 'not', 'results:', 'util.xprint(c.r', '+', '\"Nothing', 'matched', ':(\\\\n\"', '+', 'c.w)', 'continue', 's,', 'score', '=', '_best_song_match(', 'results,', 'artist', '+', '\"', '\"', '+', 'ttitle,', 'length,', '.5,', '.5)', 'cc', '=', 'c.g', 'if', 'score', '>', '85', 'else', 'c.y', 'cc', '=', 'c.r', 'if', 'score', '<', '75', 'else', 'cc', 'util.xprint(\"Matched:', '%s%s%s', '-', '%s', '\\\\n[%sMatch', 'confidence:', '\"', '\"%s%s]\\\\n\"', '%', '(c.y,', 's.title,', 'c.w,', 'util.fmt_time(s.length),', 'cc,', 'score,', 'c.w))', 'yield', 's', \"@command(r'suser\\\\s*(.*[-_a-zA-Z0-9].*)?',\", \"'suser')\", 'def', 'search_user(term):', 'if', 'has_spotipy:', 'if', 'not', 'term:', 'show_message(\"Enter', 'username:\",', 'c.g,', 'update=True)', 'term', '=', 'input(\">', '\")', 'if', 'not', 'term', 'or', 'len(term)', '<', '2:', 'g.message', '=', 'c.r', '+', '\"Not', 'enough', 'input!\"', '+', 'c.w', 'g.content', '=', 'None', 'return', 'credentials', '=', 'generate_credentials()', 'token', '=', 'credentials.get_access_token()', 'spotify', '=', 'spotipy.Spotify(auth=token)', 'playlists', '=', 'spotify.user_playlists(term)', 'links', '=', '[]', 'check', '=', '1', 'g.content', '=', '\"Playlists:\\\\n\"', 'while', 'True:', 'for', 'playlist', 'in', \"playlists['items']:\", 'if', \"playlist['name']\", 'is', 'not', 'None:', 'g.content', '+=', \"(u'{0:>2}.\", '{1:<30}', '({2}', \"tracks)'.format(\", 'check,', \"playlist['name'],\", \"playlist['tracks']['total']))\", 'g.content', '+=', '\"\\\\n\"', 'links.append(playlist)', 'check', '+=', '1', 'if', \"playlists['next']:\", 'playlists', '=', 'spotify.next(playlists)', 'else:', 'break', 'g.message', '=', 'c.g', '+', '\"Choose', 'your', 'playlist:\"', '+', 'c.w', 'screen.update()', 'choice', '=', 'int(input(\">', '\"))', 'playlist', '=', 'links[choice-1]', \"search_playlist(playlist['external_urls']['spotify'],\", 'spotify=spotify)', 'else:', 'g.message', '=', '\"spotipy', 'module', 'must', 'be', 'installed', 'for', 'Spotify', 'support\\\\n\"', 'g.message', '+=', '\"see', 'https://pypi.python.org/pypi/spotipy/\"', \"@command(r'splaylist\\\\s*(.*[-_a-zA-Z0-9].*)?',\", \"'splaylist')\", 'def', 'search_playlist(term,', 'spotify=None):', 'if', 'has_spotipy:', 'if', 'not', 'term:', 'show_message(\"Enter', 'playlist', 'url:\",', 'c.g,', 'update=True)', 'term', '=', 'input(\">', '\")', 'if', 'not', 'term', 'or', 'len(term)', '<', '2:', 'g.message', '=', 'c.r', '+', '\"Not', 'enough', 'input!\"', '+', 'c.w', 'g.content', '=', 'None', 'return', 'if', 'not', 'spotify:', 'credentials', '=', 'generate_credentials()', 'token', '=', 'credentials.get_access_token()', 'spotify', '=', 'spotipy.Spotify(auth=token)', 'try:', 'playlist,', 'tracks', '=', 'grab_playlist(spotify,', 'term)', 'except', 'TypeError:', 'tracks', '=', 'None', 'if', 'not', 'tracks:', 'show_message(\"Playlist', \"'%s'\", 'not', 'found!\"', '%', 'term)', 'return', 'if', 'not', \"playlist['tracks']['total']:\", 'show_message(\"Playlist', \"'%s'\", 'by', \"'%s'\", 'has', '0', 'tracks!\"', '%', \"(playlist['name'],\", \"playlist['owner']['id']))\", 'return', 'msg', '=', '\"%s%s%s', 'by', '%s%s%s\\\\n\\\\n\"', '%', '(c.g,', \"playlist['name'],\", 'c.w,', 'c.g,', \"playlist['owner']['id'],\", 'c.w)', 'msg', '+=', '\"Enter', 'to', 'begin', 'matching', 'or', '[q]', 'to', 'abort\"', 'g.message', '=', 'msg', 'g.content', '=', '\"Tracks:\\\\n\"', 'for', 'n,', 'track', 'in', 'enumerate(tracks,', '1):', 'trackname', '=', \"'{0:<20}\", '-', \"{1}'.format(track['artists'][0]['name'],\", \"track['name'])\", 'g.content', '+=', '\"%03s', '%s\"', '%', '(n,', 'trackname)', 'g.content', '+=', '\"\\\\n\"', 'screen.update()', 'entry', '=', 'input(\"Continue?', '[Enter]', '>', '\")', 'if', 'entry', '==', '\"\":', 'pass', 'else:', 'show_message(\"Playlist', 'search', 'abandoned!\")', 'return', 'songs', '=', '[]', 'screen.clear()', 'itt', '=', '_match_tracks(tracks)', 'stash', '=', 'config.SEARCH_MUSIC.get,', 'config.ORDER.get', 'config.SEARCH_MUSIC.value', '=', 'True', 'config.ORDER.value', '=', '\"relevance\"', 'try:', 'songs.extend(itt)', 'except', 'KeyboardInterrupt:', 'util.xprint(\"%sHalted!%s\"', '%', '(c.r,', 'c.w))', 'finally:', 'config.SEARCH_MUSIC.value,', 'config.ORDER.value', '=', 'stash', 'if', 'songs:', 'util.xprint(\"\\\\n%s', '/', '%s', 'songs', 'matched\"', '%', '(len(songs),', 'len(tracks)))', 'input(\"Press', 'Enter', 'to', 'continue\")', 'msg', '=', '\"Contents', 'of', 'playlist', '%s%s', '-', '%s%s', '%s(%d/%d)%s:\"', '%', '(', 'c.y,', \"playlist['owner']['id'],\", \"playlist['name'],\", 'c.w,', 'c.b,', 'len(songs),', 'len(tracks),', 'c.w)', 'failmsg', '=', '\"Found', 'no', 'playlist', 'tracks', 'for', '%s%s%s\"', '%', '(c.y,', \"playlist['name'],\", 'c.w)', 'paginatesongs(songs,', 'msg=msg,', 'failmsg=failmsg)', 'else:', 'g.message', '=', '\"spotipy', 'module', 'must', 'be', 'installed', 'for', 'Spotify', 'support\\\\n\"', 'g.message', '+=', '\"see', 'https://pypi.python.org/pypi/spotipy/\"']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/config.py",
        "vector": "['import', 'os', 'import', 're', 'import', 'sys', 'import', 'copy', 'import', 'pickle', 'import', 'json', 'from', 'urllib.request', 'import', 'urlopen', 'from', 'urllib.error', 'import', 'HTTPError', 'from', 'urllib.parse', 'import', 'urlencode', 'try:', 'import', 'pylast', 'has_pylast', '=', 'True', 'except', 'ImportError:', 'has_pylast', '=', 'False', 'from', '.', 'import', 'g,', 'c,', 'paths,', 'util', 'mswin', '=', 'os.name', '==', '\"nt\"', 'class', 'ConfigItem:', 'def', '__init__(self,', 'name,', 'value,', 'minval=None,', 'maxval=None,', 'check_fn=None,', 'require_known_player=False,', 'allowed_values=None):', 'self.default', '=', 'self.value', '=', 'value', 'self.temp_value', '=', 'None', 'self.name', '=', 'name', 'self.type', '=', 'type(value)', 'self.maxval,', 'self.minval', '=', 'maxval,', 'minval', 'self.check_fn', '=', 'check_fn', 'self.require_known_player', '=', 'require_known_player', 'self.allowed_values', '=', '[]', 'if', 'allowed_values:', 'self.allowed_values', '=', 'allowed_values', '@property', 'def', 'get(self):', 'if', 'self.temp_value', 'is', 'None:', 'return', 'self.value', 'else:', 'return', 'self.temp_value', '@property', 'def', 'display(self):', 'return', 'self.display_helper(self.value)', '@property', 'def', 'display_temp(self):', 'if', 'self.temp_value', 'is', 'None:', 'return', '\"\"', 'return', 'self.display_helper(self.temp_value)', 'def', 'display_helper(self,', 'retval):', 'if', 'self.name', '==', '\"max_res\":', 'retval', '=', 'str(retval)', '+', '\"p\"', 'if', 'self.name', '==', '\"encoder\":', 'retval', '=', 'str(retval)', '+', '\"', '[%s]\"', '%', \"(str(g.encoders[retval]['name']))\", 'return', 'retval', 'def', 'set(self,', 'value,', 'is_temp=False):', 'success_msg', '=', 'fail_msg', '=', '\"\"', 'value', '=', 'value.strip()', 'value_orig', '=', 'value', 'if', 'self.allowed_values', 'and', 'value', 'not', 'in', 'self.allowed_values:', 'fail_msg', '=', '\"%s', 'must', 'be', 'one', 'of', '*', '-', 'not', '%s\"', 'allowed_values', '=', 'copy.copy(self.allowed_values)', 'if', \"''\", 'in', 'allowed_values:', \"allowed_values[allowed_values.index('')]\", '=', '\"<nothing>\"', 'fail_msg', '=', 'fail_msg.replace(\"*\",', '\",', '\".join(allowed_values))', 'if', 'self.require_known_player', 'and', '\\\\', 'not', 'util.is_known_player(Config.PLAYER.get):', 'fail_msg', '=', '\"%s', 'requires', 'mpv', 'or', 'mplayer,', \"can't\", 'set', 'to', '%s\"', 'elif', 'self.type', '==', 'bool:', 'if', 'value.upper()', 'in', '\"0', 'OFF', 'NO', 'DISABLED', 'FALSE\".split():', 'value', '=', 'False', 'success_msg', '=', '\"%s', 'set', 'to', 'False\"', '%', 'c.c(\"g\",', 'self.name)', 'elif', 'value.upper()', 'in', '\"1', 'ON', 'YES', 'ENABLED', 'TRUE\".split():', 'value', '=', 'True', 'success_msg', '=', '\"%s', 'set', 'to', 'True\"', '%', 'c.c(\"g\",', 'self.name)', 'else:', 'fail_msg', '=', '\"%s', 'requires', 'True/False,', 'got', '%s\"', 'elif', 'self.type', '==', 'int:', 'if', 'not', 'value.isdigit():', 'fail_msg', '=', '\"%s', 'requires', 'a', 'number,', 'got', '%s\"', 'else:', 'value', '=', 'int(value)', 'if', 'self.maxval', 'and', 'self.minval:', 'if', 'not', 'self.minval', '<=', 'value', '<=', 'self.maxval:', 'm', '=', '\"', 'must', 'be', 'between', '%s', 'and', '%s,', 'got', '\"', 'm', '=', 'm', '%', '(self.minval,', 'self.maxval)', 'fail_msg', '=', '\"%s\"', '+', 'm', '+', '\"%s\"', 'if', 'not', 'fail_msg:', 'dispval', '=', 'value', 'or', '\"None\"', 'success_msg', '=', '\"%s', 'set', 'to', '%s\"', '%', '(c.c(\"g\",', 'self.name),', 'dispval)', 'elif', 'self.type', '==', 'list:', 'success_msg', '=', '\"%s', 'set', 'to', '%s\"', '%', '(c.c(\"g\",', 'self.name),', 'value)', 'value', '=', 'value.split()', 'elif', 'self.type', '==', 'str:', 'dispval', '=', 'value', 'or', '\"None\"', 'success_msg', '=', '\"%s', 'set', 'to', '%s\"', '%', '(c.c(\"g\",', 'self.name),', 'c.c(\"g\",', 'dispval))', 'if', 'fail_msg:', 'failed_val', '=', 'value_orig.strip()', 'or', '\"<nothing>\"', 'colvals', '=', 'c.y', '+', 'self.name', '+', 'c.w,', 'c.y', '+', 'failed_val', '+', 'c.w', 'return', 'fail_msg', '%', 'colvals', 'elif', 'self.check_fn:', 'checked', '=', 'self.check_fn(value)', 'value', '=', 'checked.get(\"value\")', 'or', 'value', 'if', \"checked['valid']:\", 'value', '=', 'checked.get(\"value\",', 'value)', 'set_save(self,', 'value,', 'is_temp)', 'return', 'checked.get(\"message\",', 'success_msg)', 'else:', 'return', \"checked.get('message',\", 'fail_msg)', 'elif', 'success_msg:', 'set_save(self,', 'value,', 'is_temp)', 'return', 'success_msg', 'def', 'set_save(self,', 'value,', 'is_temp):', 'if', 'not', 'is_temp:', 'self.temp_value', '=', 'None', 'self.value', '=', 'value', 'Config.save()', 'else:', 'self.temp_value', '=', 'value', 'def', 'check_console_width(val):', 'valid', '=', 'True', 'message', '=', '\"-\"', '*', 'val', '+', '\"\\\\n\"', 'message', '+=', '\"console_width', 'set', 'to', '%s,', 'try', 'a', 'lower', 'value', 'if', 'above', 'line', 'ove\"\\\\', '\"rlaps\"', '%', 'val', 'return', 'dict(valid=valid,', 'message=message)', 'def', 'check_ddir(d):', 'expanded', '=', 'os.path.expanduser(d)', 'if', 'os.path.isdir(expanded):', 'message', '=', '\"Downloads', 'will', 'be', 'saved', 'to', '\"', '+', 'c.y', '+', 'd', '+', 'c.w', 'return', 'dict(valid=True,', 'message=message,', 'value=expanded)', 'else:', 'message', '=', '\"Not', 'a', 'valid', 'directory:', '\"', '+', 'c.r', '+', 'd', '+', 'c.w', 'return', 'dict(valid=False,', 'message=message)', 'def', 'check_win_pos(pos):', 'if', 'not', 'pos.strip():', 'return', 'dict(valid=True,', 'message=\"Window', 'position', 'not', 'set', '(default)\")', 'pos', '=', 'pos.lower()', 'reg', '=', 'r\"(TOP|BOTTOM).?(LEFT|RIGHT)\"', 'if', 'not', 're.match(reg,', 'pos,', 're.I):', 'msg', '=', '\"Try', 'something', 'like', 'top-left', 'or', 'bottom-right', '(or', 'default)\"', 'return', 'dict(valid=False,', 'message=msg)', 'else:', 'p', '=', 're.match(reg,', 'pos,', 're.I).groups()', 'p', '=', '\"%s-%s\"', '%', 'p', 'msg', '=', '\"Window', 'position', 'set', 'to', '%s\"', '%', 'p', 'return', 'dict(valid=True,', 'message=msg,', 'value=p)', 'def', 'check_win_size(size):', 'if', 'not', 'size.strip():', 'return', 'dict(valid=True,', 'message=\"Window', 'size', 'not', 'set', '(default)\")', 'size', '=', 'size.lower()', 'reg', '=', 'r\"\\\\d{1,4}x\\\\d{1,4}\"', 'if', 'not', 're.match(reg,', 'size,', 're.I):', 'msg', '=', '\"Try', 'something', 'like', '720x480\"', 'return', 'dict(valid=False,', 'message=msg)', 'else:', 'return', 'dict(valid=True,', 'value=size)', 'def', 'check_encoder(option):', 'encs', '=', 'g.encoders', 'if', 'option', '>=', 'len(encs):', 'message', '=', '\"%s%s%s', 'is', 'too', 'high,', 'type', '%sencoders%s', 'to', 'see', 'valid', 'values\"', 'message', '=', 'message', '%', '(c.y,', 'option,', 'c.w,', 'c.g,', 'c.w)', 'return', 'dict(valid=False,', 'message=message)', 'else:', 'message', '=', '\"Encoder', 'set', 'to', '%s%s%s\"', 'message', '=', 'message', '%', '(c.y,', \"encs[option]['name'],\", 'c.w)', 'return', 'dict(valid=True,', 'message=message)', 'def', 'check_player(player):', 'if', 'util.has_exefile(player):', 'print(player)', 'util.assign_player(player)', 'if', '\"mpv\"', 'in', 'player:', 'version', '=', '\"%s.%s.%s\"', '%', 'g.mpv_version', 'fmt', '=', 'c.g,', 'c.w,', 'c.g,', 'c.w,', 'version', 'msg', '=', '\"%splayer%s', 'set', 'to', '%smpv%s', '(version', '%s)\"', '%', 'fmt', 'return', 'dict(valid=True,', 'message=msg,', 'value=player)', 'else:', 'msg', '=', '\"%splayer%s', 'set', 'to', '%s%s%s\"', '%', '(c.g,', 'c.w,', 'c.g,', 'player,', 'c.w)', 'return', 'dict(valid=True,', 'message=msg,', 'value=player)', 'else:', 'if', 'mswin', 'and', 'not', '(player.endswith(\".exe\")', 'or', 'player.endswith(\".com\")):', 'if', '\"mpv\"', 'in', 'player:', 'retval', '=', 'check_player(player', '+', '\".com\")', 'if', 'retval[\"valid\"]:', 'return', 'retval', 'return', 'check_player(player', '+', '\".exe\")', 'else:', 'msg', '=', '\"Player', 'application', '%s%s%s', 'not', 'found\"', '%', '(c.r,', 'player,', 'c.w)', 'return', 'dict(valid=False,', 'message=msg)', 'def', 'check_lastfm_password(password):', 'if', 'not', 'has_pylast:', 'msg', '=', '\"pylast', 'not', 'installed\"', 'return', 'dict(valid=False,', 'message=msg)', 'password_hash', '=', 'pylast.md5(password)', 'return', 'dict(valid=True,', 'value=password_hash)', 'class', '_Config:', '_configitems', '=', '[', 'ConfigItem(\"order\",', '\"relevance\",', 'allowed_values=\"relevance', 'date', 'views', 'rating', 'title\".split()),', 'ConfigItem(\"user_order\",', '\"\",', 'allowed_values', '=', '[\"\"]', '+', '\"relevance', 'date', 'views', 'rating\".split()),', 'ConfigItem(\"max_results\",', '19,', 'maxval=50,', 'minval=1),', 'ConfigItem(\"console_width\",', '80,', 'minval=70,', 'maxval=880,', 'check_fn=check_console_width),', 'ConfigItem(\"max_res\",', '2160,', 'minval=360,', 'maxval=2160),', 'ConfigItem(\"player\",', '\"vlc\"', '+', '\".exe\"', '*', 'mswin,', 'check_fn=check_player),', 'ConfigItem(\"playerargs\",', '\"\"),', 'ConfigItem(\"encoder\",', '0,', 'minval=0,', 'check_fn=check_encoder),', 'ConfigItem(\"notifier\",', '\"\"),', 'ConfigItem(\"checkupdate\",', 'True),', 'ConfigItem(\"show_player_keys\",', 'True,', 'require_known_player=True),', 'ConfigItem(\"fullscreen\",', 'False,', 'require_known_player=True),', 'ConfigItem(\"show_status\",', 'True),', 'ConfigItem(\"always_repeat\",', 'False),', 'ConfigItem(\"columns\",', '\"date', 'user\"),', 'ConfigItem(\"ddir\",', 'paths.get_default_ddir(),', 'check_fn=check_ddir),', 'ConfigItem(\"overwrite\",', 'True),', 'ConfigItem(\"show_video\",', 'True),', 'ConfigItem(\"search_music\",', 'False),', 'ConfigItem(\"window_pos\",', '\"\",', 'check_fn=check_win_pos,', 'require_known_player=True),', 'ConfigItem(\"window_size\",', '\"\",', 'check_fn=check_win_size,', 'require_known_player=True),', 'ConfigItem(\"download_command\",', \"''),\", 'ConfigItem(\"lookup_metadata\",', 'True),', 'ConfigItem(\"lastfm_username\",', \"''),\", 'ConfigItem(\"lastfm_password\",', \"'',\", 'check_fn=check_lastfm_password),', 'ConfigItem(\"lastfm_api_key\",', \"''),\", 'ConfigItem(\"lastfm_api_secret\",', \"''),\", 'ConfigItem(\"audio_format\",', '\"auto\",', 'allowed_values=\"auto', 'webm', 'm4a\".split()),', 'ConfigItem(\"video_format\",', '\"auto\",', 'allowed_values=\"auto', 'webm', 'mp4', '3gp\".split()),', 'ConfigItem(\"pages\",', '3,', 'minval=1,', 'maxval=100),', 'ConfigItem(\"autoplay\",', 'False),', 'ConfigItem(\"set_title\",', 'True),', 'ConfigItem(\"mpris\",', 'not', 'mswin),', 'ConfigItem(\"show_qrcode\",', 'False),', 'ConfigItem(\"history\",', 'True),', 'ConfigItem(\"input_history\",', 'True),', 'ConfigItem(\"vlc_dummy_interface\",', 'False),', 'ConfigItem(\"show_subtitles\",', 'True),', ']', 'def', '__getitem__(self,', 'key):', 'for', 'i', 'in', 'self._configitems:', 'if', 'i.name.upper()', '==', 'key:', 'return', 'i', 'raise', 'KeyError', 'def', '__getattr__(self,', 'name):', 'try:', 'if', 'name', '!=', \"'API_KEY':\", 'return', 'self[name]', 'except', 'KeyError:', 'raise', 'AttributeError', 'def', '__iter__(self):', 'return', '(i.name.upper()', 'for', 'i', 'in', 'self._configitems)', 'def', 'save(self):', 'config', '=', '{setting:', 'self[setting].value', 'for', 'setting', 'in', 'self}', 'with', 'open(g.CFFILE,', '\"w\")', 'as', 'cf:', 'json.dump(config,', 'cf,', 'indent=2)', 'util.dbg(c.p', '+', '\"Saved', 'config:', '\"', '+', 'g.CFFILE', '+', 'c.w)', 'def', 'convert_old_cf_to_json(self):', 'if', 'os.path.exists(g.OLD_CFFILE):', 'with', 'open(g.OLD_CFFILE,', '\"rb\")', 'as', 'cf:', 'with', 'open(g.CFFILE,', '\"w\")', 'as', 'cfj:', 'json.dump(pickle.load(cf),', 'cfj,', 'indent=2)', 'os.remove(g.OLD_CFFILE)', 'def', 'load(self):', 'if', 'os.path.exists(g.CFFILE):', 'with', 'open(g.CFFILE,', '\"r\")', 'as', 'cf:', 'saved_config', '=', 'json.load(cf)', 'for', 'k,', 'v', 'in', 'saved_config.items():', 'try:', 'self[k].value', '=', 'v', 'except', 'KeyError:', 'util.dbg(\"Unrecognised', 'config', 'item:', '%s\",', 'k)', 'if', 'isinstance(self.PLAYERARGS.get,', 'list):', 'self.WINDOW_POS.value', '=', '\"top-right\"', 'redundant', '=', '(\"-really-quiet', '--really-quiet', '-prefer-ipv4', '-nolirc', '\"', '\"-fs', '--fs\".split())', 'for', 'r', 'in', 'redundant:', 'util.dbg(\"removing', 'redundant', 'arg', '%s\",', 'r)', 'util.list_update(r,', 'self.PLAYERARGS.value,', 'remove=True)', 'self.PLAYERARGS.value', '=', '\"', '\".join(self.PLAYERARGS.get)', 'self.save()', 'Config', '=', '_Config()', 'del', '_Config', 'ref', '=', 'sys.modules[__name__]', 'sys.modules[__name__]', '=', 'Config']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/content.py",
        "vector": "['import', 'math', 'import', 'copy', 'import', 'random', 'from', '.', 'import', 'g,', 'c,', 'config', 'from', '.util', 'import', 'getxy,', 'fmt_time,', 'uea_pad,', 'yt_datetime,', 'F', 'try:', 'import', 'qrcode', 'import', 'io', 'HAS_QRCODE', '=', 'True', 'except', 'ImportError:', 'HAS_QRCODE', '=', 'False', 'class', 'Content:', 'pass', 'class', 'PaginatedContent(Content):', 'def', 'getPage(self,', 'page):', 'raise', 'NotImplementedError', 'def', 'numPages(self):', 'raise', 'NotImplementedError', 'class', 'LineContent(PaginatedContent):', 'def', 'getPage(self,', 'page):', 'max_results', '=', 'getxy().max_results', 's', '=', 'page', '*', 'max_results', 'e', '=', '(page', '+', '1)', '*', 'max_results', 'return', 'self.get_text(s,', 'e)', 'def', 'numPages(self):', 'return', 'math.ceil(self.get_count()/getxy().max_results)', 'def', 'get_text(self,', 's,', 'e):', 'raise', 'NotImplementedError', 'def', 'get_count(self):', 'raise', 'NotImplementedError', 'class', 'StringContent(LineContent):', 'def', '__init__(self,', 'string):', 'self._lines', '=', 'string.splitlines()', 'def', 'get_text(self,', 's,', 'e):', 'return', \"'\\\\n'.join(self._lines[s:e])\", 'def', 'get_count(self):', 'width', '=', 'getxy().width', 'count', '=', 'sum(len(i)', '//', 'width', '+', '1', 'for', 'i', 'in', 'self._lines)', 'return', 'count', 'def', 'page_msg(page=0):', 'if', 'isinstance(g.content,', 'PaginatedContent):', 'page_count', '=', 'g.content.numPages()', 'else:', 'page_count', '=', 'math.ceil(g.result_count/getxy().max_results)', 'if', 'page_count', '>', '1:', 'pagemsg', '=', '\"{}{}/{}{}\"', 'return', \"pagemsg.format('<'\", 'if', 'page', '>', '0', 'else', \"'[',\", '\"%s%s%s\"', '%', '(c.y,', 'page+1,', 'c.w),', 'page_count,', \"'>'\", 'if', 'page', '+', '1', '<', 'page_count', 'else', \"']')\", 'return', 'None', 'def', 'generate_songlist_display(song=False,', 'zeromsg=None):', 'if', 'g.browse_mode', '==', '\"ytpl\":', 'return', 'generate_playlist_display()', 'max_results', '=', 'getxy().max_results', 'if', 'not', 'g.model:', 'g.message', '=', 'zeromsg', 'or', '\"Enter', '/search-term', 'to', 'search', 'or', '[h]elp\"', 'return', 'logo(c.g)', '+', '\"\\\\n\\\\n\"', 'g.rprompt', '=', 'page_msg(g.current_page)', 'have_meta', '=', 'all(x.ytid', 'in', 'g.meta', 'for', 'x', 'in', 'g.model)', 'user_columns', '=', '_get_user_columns()', 'if', 'have_meta', 'else', '[]', 'maxlength', '=', 'max(x.length', 'for', 'x', 'in', 'g.model)', 'lengthsize', '=', '8', 'if', 'maxlength', '>', '35999', 'else', '7', 'lengthsize', '=', '6', 'if', 'maxlength', '<', '6000', 'else', 'lengthsize', 'reserved', '=', '9', '+', 'lengthsize', '+', 'len(user_columns)', 'cw', '=', 'getxy().width', 'cw', '-=', '1', 'title_size', '=', 'cw', '-', 'sum(1', '+', \"x['size']\", 'for', 'x', 'in', 'user_columns)', '-', 'reserved', 'before', '=', '[{\"name\":', '\"idx\",', '\"size\":', '3,', '\"heading\":', '\"Num\"},', '{\"name\":', '\"title\",', '\"size\":', 'title_size,', '\"heading\":', '\"Title\"}]', 'after', '=', '[{\"name\":', '\"length\",', '\"size\":', 'lengthsize,', '\"heading\":', '\"Length\"}]', 'columns', '=', 'before', '+', 'user_columns', '+', 'after', 'for', 'n,', 'column', 'in', 'enumerate(columns):', \"column['idx']\", '=', 'n', \"column['sign']\", '=', '\"-\"', 'if', 'not', \"column['name']\", '==', '\"length\"', 'else', '\"\"', 'fmt', '=', '[\"%{}{}s', '\".format(x[\\'sign\\'],', \"x['size'])\", 'for', 'x', 'in', 'columns]', 'fmtrow', '=', 'fmt[0:1]', '+', '[\"%s', '\"]', '+', 'fmt[2:]', 'fmt,', 'fmtrow', '=', '\"\".join(fmt).strip(),', '\"\".join(fmtrow).strip()', 'titles', '=', \"tuple([x['heading'][:x['size']]\", 'for', 'x', 'in', 'columns])', 'hrow', '=', 'c.ul', '+', 'fmt', '%', 'titles', '+', 'c.w', 'out', '=', '\"\\\\n\"', '+', 'hrow', '+', '\"\\\\n\"', 'for', 'n,', 'x', 'in', 'enumerate(g.model[:max_results]):', 'col', '=', '(c.r', 'if', 'n', '%', '2', '==', '0', 'else', 'c.p)', 'if', 'not', 'song', 'else', 'c.b', 'details', '=', \"{'title':\", 'x.title,', '\"length\":', 'fmt_time(x.length)}', 'details', '=', 'copy.copy(g.meta[x.ytid])', 'if', 'have_meta', 'else', 'details', 'otitle', '=', \"details['title']\", \"details['idx']\", '=', '\"%2d\"', '%', '(n', '+', '1)', \"details['title']\", '=', \"uea_pad(columns[1]['size'],\", 'otitle)', \"details['ytid']\", '=', 'x.ytid', 'line', '=', \"''\", 'for', 'z', 'in', 'columns:', 'fieldsize,', 'field,', 'direction', '=', \"z['size'],\", \"z['name'],\", '\"<\"', 'if', \"z['sign']\", '==', '\"-\"', 'else', '\">\"', 'line', '+=', 'uea_pad(fieldsize,', 'details[field],', 'direction)', 'if', 'not', 'columns[-1]', '==', 'z:', 'line', '+=', '\"', '\"', 'col', '=', 'col', 'if', 'not', 'song', 'or', 'song', '!=', 'g.model[n]', 'else', 'c.p', 'line', '=', 'col', '+', 'line', '+', 'c.w', 'out', '+=', 'line', '+', '\"\\\\n\"', 'return', 'out', '+', '\"\\\\n\"', '*', '(5', '-', 'len(g.model))', 'if', 'not', 'song', 'else', 'out', 'def', 'generate_playlist_display():', 'if', 'not', 'g.ytpls:', 'g.message', '=', 'c.r', '+', '\"No', 'playlists', 'found!\"', 'return', 'logo(c.g)', '+', '\"\\\\n\\\\n\"', 'g.rprompt', '=', 'page_msg(g.current_page)', 'cw', '=', 'getxy().width', 'fmtrow', '=', '\"%s%-5s', '%s', '%-12s', '%-8s', '%-2s%s\\\\n\"', 'fmthd', '=', '\"%s%-5s', '%-{}s', '%-12s', '%-9s', '%-5s%s\\\\n\".format(cw', '-', '36)', 'head', '=', '(c.ul,', '\"Item\",', '\"Playlist\",', '\"Author\",', '\"Updated\",', '\"Count\",', 'c.w)', 'out', '=', '\"\\\\n\"', '+', 'fmthd', '%', 'head', 'for', 'n,', 'x', 'in', 'enumerate(g.ytpls):', 'col', '=', '(c.g', 'if', 'n', '%', '2', '==', '0', 'else', 'c.w)', 'length', '=', \"x.get('size')\", 'or', '\"?\"', 'length', '=', '\"%4s\"', '%', 'length', 'title', '=', \"x.get('title')\", 'or', '\"unknown\"', 'author', '=', \"x.get('author')\", 'or', '\"unknown\"', 'updated', '=', \"yt_datetime(x.get('updated'))[1]\", 'title', '=', 'uea_pad(cw', '-', '36,', 'title)', 'out', '+=', '(fmtrow', '%', '(col,', 'str(n', '+', '1),', 'title,', 'author[:12],', 'updated,', 'str(length),', 'c.w))', 'return', 'out', '+', '\"\\\\n\"', '*', '(5', '-', 'len(g.ytpls))', 'def', '_get_user_columns():', 'total_size', '=', '0', 'user_columns', '=', 'config.COLUMNS.get', 'user_columns', '=', 'user_columns.replace(\",\",', '\"', '\").split()', 'defaults', '=', '{\"views\":', 'dict(name=\"viewCount\",', 'size=4,', 'heading=\"View\"),', '\"rating\":', 'dict(name=\"rating\",', 'size=4,', 'heading=\"Rtng\"),', '\"comments\":', 'dict(name=\"commentCount\",', 'size=4,', 'heading=\"Comm\"),', '\"date\":', 'dict(name=\"uploaded\",', 'size=8,', 'heading=\"Date\"),', '\"time\":', 'dict(name=\"uploadedTime\",', 'size=11,', 'heading=\"Time\"),', '\"user\":', 'dict(name=\"uploaderName\",', 'size=10,', 'heading=\"User\"),', '\"likes\":', 'dict(name=\"likes\",', 'size=4,', 'heading=\"Like\"),', '\"dislikes\":', 'dict(name=\"dislikes\",', 'size=4,', 'heading=\"Dslk\"),', '\"category\":', 'dict(name=\"category\",', 'size=8,', 'heading=\"Category\"),', '\"ytid\":', 'dict(name=\"ytid\",', 'size=12,', 'heading=\"Video', 'ID\")}', 'ret', '=', '[]', 'for', 'column', 'in', 'user_columns:', 'namesize', '=', 'column.split(\":\")', 'name', '=', 'namesize[0]', 'if', 'name', 'in', 'defaults:', 'z', '=', 'defaults[name]', 'nm,', 'sz,', 'hd', '=', \"z['name'],\", \"z['size'],\", \"z['heading']\", 'if', 'len(namesize)', '==', '2', 'and', 'namesize[1].isdigit():', 'sz', '=', 'int(namesize[1])', 'total_size', '+=', 'sz', 'cw', '=', 'getxy().width', 'if', 'total_size', '<', 'cw', '-', '18:', 'ret.append(dict(name=nm,', 'size=sz,', 'heading=hd))', 'return', 'ret', 'def', 'logo(col=None,', 'version=\"\"):', 'col', '=', 'col', 'if', 'col', 'else', 'random.choice((c.g,', 'c.r,', 'c.y,', 'c.b,', 'c.p,', 'c.w))', 'logo_txt', '=', 'r', 'version', '=', '\"', 'v\"', '+', 'version', 'if', 'version', 'else', '\"\"', 'logo_txt', '=', 'col', '+', 'logo_txt', '+', 'c.w', '+', 'version', 'lines', '=', 'logo_txt.split(\"\\\\n\")', 'length', '=', 'max(len(x)', 'for', 'x', 'in', 'lines)', 'x,', 'y,', '_', '=', 'getxy()', 'indent', '=', '(x', '-', 'length', '-', '1)', '//', '2', 'newlines', '=', '(y', '-', '12)', '//', '2', 'indent,', 'newlines', '=', '(0', 'if', 'x', '<', '0', 'else', 'x', 'for', 'x', 'in', '(indent,', 'newlines))', 'lines', '=', '[\"', '\"', '*', 'indent', '+', 'l', 'for', 'l', 'in', 'lines]', 'logo_txt', '=', '\"\\\\n\".join(lines)', '+', '\"\\\\n\"', '*', 'newlines', 'return', '\"\"', 'if', 'g.debug_mode', 'or', 'g.no_textart', 'else', 'logo_txt', 'def', 'playlists_display():', 'if', 'not', 'g.userpl:', 'g.message', '=', 'F(\"no', 'playlists\")', 'return', 'generate_songlist_display()', 'if', 'g.model', 'else', '(logo(c.y)', '+', '\"\\\\n\\\\n\")', 'maxname', '=', 'max(len(a)', 'for', 'a', 'in', 'g.userpl)', 'out', '=', '\"', '{0}Local', 'Playlists{1}\\\\n\".format(c.ul,', 'c.w)', 'start', '=', '\"', '\"', 'fmt', '=', '\"%s%s%-3s', '%-\"', '+', 'str(maxname', '+', '3)', '+', '\"s%s', '%s%-7s%s', '%-5s%s\"', 'head', '=', '(start,', 'c.b,', '\"ID\",', '\"Name\",', 'c.b,', 'c.b,', '\"Count\",', 'c.b,', '\"Duration\",', 'c.w)', 'out', '+=', '\"\\\\n\"', '+', 'fmt', '%', 'head', '+', '\"\\\\n\\\\n\"', 'for', 'v,', 'z', 'in', 'enumerate(sorted(g.userpl)):', 'n,', 'p', '=', 'z,', 'g.userpl[z]', 'l', '=', 'fmt', '%', '(start,', 'c.g,', 'v', '+', '1,', 'n,', 'c.w,', 'c.y,', 'str(len(p)),', 'c.y,', 'p.duration,', 'c.w)', '+', '\"\\\\n\"', 'out', '+=', 'l', 'return', 'out', 'def', 'qrcode_display(url):', 'if', 'not', 'HAS_QRCODE:', 'return', '\"(Install', \"'qrcode'\", 'to', 'generate', 'them)\"', 'qr', '=', 'qrcode.QRCode()', 'buf', '=', 'io.StringIO()', 'buf.isatty', '=', 'lambda:', 'True', 'qr.add_data(url)', 'qr.print_ascii(out=buf)', 'return', 'buf.getvalue()', 'def', 'get_last_query():', 'if', 'g.last_search_query', '==', '(None,', 'None)', 'or', '\\\\', \"'func'\", 'not', 'in', 'g.last_search_query[1]:', 'g.content', '=', 'logo()', 'g.message', '=', '\"No', 'playlist', 'loaded\"', 'return', 'songs_list_or_func', '=', \"g.last_search_query[1]['func']\", 'if', 'callable(songs_list_or_func):', 'songs', '=', 'songs_list_or_func(0,None)', 'else:', 'songs', '=', 'songs_list_or_func', 'return', 'songs']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/contentquery.py",
        "vector": "['from', '.', 'import', 'util,', 'pafy', 'class', 'ContentQuery:', 'maxresults', '=', '0', 'pdata', '=', '[]', 'nextpagetoken', '=', 'None', 'datatype', '=', 'None', 'query', '=', 'None', 'api', '=', 'None', 'def', '__init__(self,', 'datatype,', 'api,', 'query):', 'self.datatype', '=', 'datatype', 'self.query', '=', 'query', 'self.api', '=', 'api', 'self.pdata', '=', '[]', 'self._perform_api_call()', 'def', '__getitem__(self,', 'iid):', 'last_id', '=', 'iid.stop', 'if', 'iid.__class__', '==', 'slice', 'else', 'iid', 'last_datapoint', '=', 'min(last_id,', 'self.maxresults)', 'while', 'len(self.pdata)', '<', 'last_datapoint:', 'self._perform_api_call()', 'return', 'self.pdata[iid]', 'def', 'count(self):', 'return', 'self.maxresults', 'def', '__len__(self):', 'return', 'abs(self.count())', 'def', '_perform_api_call(self):', 'util.dbg(\"CQ.query\",', 'self.query)', 'data', '=', 'pafy.channel_search(self.query)', 'self.maxresults', '=', 'len(data)', 'self.nextpagetoken', '=', 'None', 'for', 'obj', 'in', 'data:', 'self.pdata.append(self.datatype(obj))']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/description_parser.py",
        "vector": "['import', 're', 'import', 'random', 'def', 'calculate_certainty(line):', 'certainty_indexes', '=', '[', \"{'regex':\", 'r\"(?:\\\\(?(?:\\\\d{0,4}:)?\\\\d{0,2}:\\\\d{0,2}\\\\)?(?:', '-', ')?){1,2}\",', \"'weight':\", '1},', \"{'regex':\", 'r\"(([\\\\w&()\\\\[\\\\]\\'\\\\.\\\\/', ']+)([', ']?[-]+[', \"]?)([\\\\w&()\\\\[\\\\]'\\\\.\\\\/\", ']+))+\",', \"'weight':\", '0.75},', \"{'regex':\", 'r\"^([\\\\d]+[.', ']+)\",', \"'weight':\", '1}', ']', 'certainty', '=', '0.0', 'for', 'method', 'in', 'certainty_indexes:', 'if', \"re.match(method['regex'],\", 'line):', 'certainty', '+=', \"method['weight']\", 'return', 'certainty', '/', 'len(certainty_indexes)', 'def', 'has_artist(text):', 'regex', '=', 'r\"(?:([\\\\w&()\\\\[\\\\]\\'\\\\.\\\\/', ']+)(?:[', ']?[-]+[', \"]?)([\\\\w&()\\\\[\\\\]'\\\\.\\\\/\", ']+))+\"', 'return', 'not', 're.match(regex,', 'text)', 'def', 'strip_string(text,', 'single=False):', 'ts_reg', '=', 'r\"(?:\\\\(?(?:\\\\d{0,4}:)?\\\\d{1,2}:\\\\d{1,2}\\\\)?(?:', '-', ')?){1,2}\"', 'text', '=', 're.sub(ts_reg,', '\"\",', 'text)', 'text', '=', 're.sub(r\"^([\\\\d]+[.', ']+)\",', '\"\",', 'text)', 'text', '=', 're.sub(r\"^[^\\\\w&()\\\\[\\\\]\\'\\\\.\\\\/]\",', '\"\",', 'text,', 'flags=re.MULTILINE)', 'artist,', 'track', '=', 'None,', 'None', 'if', 'not', 'single:', 'rgex', '=', 'r\"(?:([\\\\w&()\\\\[\\\\]\\'\\\\.\\\\/', ']+)(?:[', ']?[-]+[', \"]?)([\\\\w&()\\\\[\\\\]'\\\\.\\\\/\", ']+))+\"', 'artist,', 'track', '=', '(re.findall(rgex,', 'text)[0])', 'else:', 'track', '=', 'text', 'return', 'artist,', 'track', 'def', 'long_substr(data):', 'substr', '=', \"''\", 'if', 'len(data)', '>', '1', 'and', 'len(data[0])', '>', '0:', 'for', 'i', 'in', 'range(len(data[0])):', 'for', 'j', 'in', 'range(len(data[0])-i+1):', 'if', 'j', '>', 'len(substr)', 'and', 'is_substr(data[0][i:i+j],', 'data):', 'substr', '=', 'data[0][i:i+j]', 'return', 'substr', 'def', 'is_substr(find,', 'data):', 'if', 'len(data)', '<', '1', 'and', 'len(find)', '<', '1:', 'return', 'False', 'for', 'i,', '_', 'in', 'enumerate(data):', 'if', 'find', 'not', 'in', 'data[i]:', 'return', 'False', 'return', 'True', 'def', 'artist_from_title(title):', 'query', '=', '{}', \"query['q']\", '=', 'title', \"query['type']\", '=', \"'video'\", \"query['fields']\", '=', '\"items(snippet(title))\"', \"query['maxResults']\", '=', '50', \"query['part']\", '=', '\"snippet\"', 'results', '=', 'None', 'titles', '=', \"[x['snippet']['title'].upper()\", 'for', 'x', 'in', 'results]', 'alts', '=', '{}', 'for', '_', 'in', 'range(100):', 'random.shuffle(titles)', 'subset', '=', 'titles[:10]', 'string', '=', 'long_substr(subset).strip()', 'if', 'len(string)', '>', '3:', 'alts[string]', '=', 'alts.get(string,', '0)', '+', '1', 'best_string', '=', 'None', 'if', 'len(alts)', '==', '1:', 'best_string', '=', 'list(alts.keys())[0].capitalize()', 'else:', 'best_guess', '=', '99999', 'best_string', '=', 'None', 'for', 'key', 'in', 'list(alts.keys()):', 'current_guess', '=', 'title.upper().find(key)', 'if', 'current_guess', '<', 'best_guess:', 'best_guess', '=', 'current_guess', 'best_string', '=', 'key.capitalize()', 'best_string', '=', 're.sub(r\"([^\\\\w]+)$\",', '\"\",', 'best_string)', 'best_string', '=', 're.sub(r\"^([^\\\\w]+)\",', '\"\",', 'best_string)', 'return', 'best_string', 'def', 'parse(text,', 'title=\"Unknown\"):', 'lines', '=', '[]', 'for', 'line', 'in', \"text.split('\\\\n'):\", 'lines.append((calculate_certainty(line),', 'line))', 'certainty_average', '=', 'sum([x[0]', 'for', 'x', 'in', 'lines])', '/', 'len(lines)', 'lines', '=', 'filter(lambda', 'a:', 'a', 'is', 'not', 'None,', '[x', 'if', 'x[0]', '>', 'certainty_average', 'else', 'None', 'for', 'x', 'in', 'lines])', 'cmbs', '=', '[]', 'for', 'line', 'in', 'lines:', 'is_ac', '=', 'has_artist(line[1])', 'cmbs.append(strip_string(line[1],', 'is_ac))', 'counters', '=', \"{'has':\", '0,', \"'not':\", '0}', 'for', 'combo', 'in', 'cmbs:', \"counters['has'\", 'if', 'combo[0]', 'else', \"'not']\", '+=', '1', 'dominant', '=', \"'has'\", 'if', \"counters['has']\", '>', \"counters['not']\", 'else', \"'not'\", 'diff', '=', \"abs(counters['has']\", '-', \"counters['not'])\", 'if', 'diff', '>', \"sum([counters['has'],\", \"counters['not']]):\", 'print(\"Too', 'many', 'anomalities', 'detected\")', 'return', '[]', 'if', 'dominant', '==', \"'has':\", 'cmbs', '=', 'filter(lambda', 'a:', 'a', 'is', 'not', 'None,', '[x', 'if', 'x[0]', 'is', 'not', 'None', 'else', 'None', 'for', 'x', 'in', 'cmbs])', 'else:', 'arti', '=', 'artist_from_title(title)', 'cmbs', '=', 'filter(lambda', 'a:', 'a', 'is', 'not', 'None,', '[(arti,', 'x[1])', 'if', 'x[0]', 'is', 'None', 'else', 'None', 'for', 'x', 'in', 'cmbs])', 'return', 'list(cmbs)']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/g.py",
        "vector": "['import', 'collections', 'import', 'os', 'import', 'sys', 'from', '.', 'import', 'c,', 'paths', 'from', '.playlist', 'import', 'Playlist', 'volume', '=', 'None', 'transcoder_path', '=', '\"auto\"', 'delete_orig', '=', 'True', 'encoders', '=', '[]', 'muxapp', '=', 'False', 'meta', '=', '{}', 'artist', '=', '\"\"', 'album', '=', '\"\"', 'scrobble', '=', 'False', 'scrobble_queue', '=', '[]', 'lastfm_network', '=', 'None', 'detectable_size', '=', 'True', 'command_line', '=', 'False', 'debug_mode', '=', 'False', 'preload_disabled', '=', 'False', 'ytpls', '=', '[]', 'mpv_version', '=', '0,', '0,', '0', 'mpv_options', '=', 'None', 'mpv_usesock', '=', 'False', 'mplayer_version', '=', '0', 'mprisctl', '=', 'None', 'browse_mode', '=', '\"normal\"', 'preloading', '=', '[]', 'no_clear_screen', '=', 'False', 'no_textart', '=', 'False', 'max_retries', '=', '3', 'max_cached_streams', '=', '1500', 'username_query_cache', '=', 'collections.OrderedDict()', 'model', '=', 'Playlist(name=\"model\")', 'last_search_query', '=', '(None,', 'None)', 'current_page', '=', '0', 'result_count', '=', '0', 'rprompt', '=', 'None', 'active', '=', 'Playlist(name=\"active\")', 'userpl', '=', '{}', 'userhist', '=', '{}', 'pafs', '=', 'collections.OrderedDict()', 'streams', '=', 'collections.OrderedDict()', 'pafy_pls', '=', '{}', 'selected_pafy_pls_id', '=', \"''\", 'last_opened', '=', 'message', '=', 'content', '=', '\"\"', 'suffix', '=', '\"3\"', 'OLD_CFFILE', '=', 'os.path.join(paths.get_config_dir(),', '\"config\")', 'CFFILE', '=', 'os.path.join(paths.get_config_dir(),', '\"config.json\")', 'TCFILE', '=', 'os.path.join(paths.get_config_dir(),', '\"transcode\")', 'OLD_PLFILE', '=', 'os.path.join(paths.get_config_dir(),', '\"playlist\"', '+', 'suffix)', 'PLFILE', '=', 'os.path.join(paths.get_config_dir(),', '\"playlist_v2\")', 'PLFOLDER', '=', 'os.path.join(paths.get_config_dir(),', '\"playlists\")', 'OLDHISTFILE', '=', 'os.path.join(paths.get_config_dir(),', '\"play_history\")', 'HISTFILE', '=', 'os.path.join(paths.get_config_dir(),', '\"play_history.m3u\")', 'CACHEFILE', '=', 'os.path.join(paths.get_config_dir(),', '\"cache_py_\"', '+', 'sys.version[0:5])', 'READLINE_FILE', '=', 'None', 'PLAYER_OBJ', '=', 'None', 'categories', '=', '{', '\"film\":', '1,', '\"autos\":', '2,', '\"music\":', '10,', '\"sports\":', '17,', '\"travel\":', '19,', '\"gaming\":', '20,', '\"blogging\":', '21,', '\"news\":', '25', '}', 'playerargs_defaults', '=', '{', '\"mpv\":', '{', '\"msglevel\":', '{', '\"<0.4\":', '\"--msglevel=all=no:statusline=status\",', '\">=0.4\":', '\"--msg-level=all=no,statusline=status\",', '},', '\"title\":', '\"--force-media-title\",', '\"fs\":', '\"--fs\",', '\"novid\":', '\"--no-video\",', '\"ignidx\":', '\"--demuxer-lavf-o=fflags=+ignidx\",', '\"geo\":', '\"--geometry\"},', '\"mplayer\":', '{', '\"title\":', '\"-title\",', '\"fs\":', '\"-fs\",', '\"novid\":', '\"-novideo\",', '\"ignidx\":', '\"\",', '\"geo\":', '\"-geometry\"},', '\"vlc\":', '{', '\"title\":', '\"--meta-title\"}', '}', 'argument_commands', '=', '[]', 'commands', '=', '[]', 'text', '=', '{', '\"exitmsg\":', '(\"*yewtube', '-', 'https://github.com/iamtalhaasghar/yewtube', 'is', 'a', 'fork', 'of\\\\nmps-youtube', '-', '*https://github.com/mps-youtube/mps-youtube*\"', '\"\\\\nReleased', 'under', 'the', 'GPLv3', 'license\\\\n\"', '\"(c)', '2021', 'iamtalhaasghar\\\\n(c)', '2014,', '2015', 'np1', 'and', 'contributors*\\\\n\"\"\"),', '\"exitmsg_\":', '(c.r,', 'c.b,', 'c.r,', 'c.w),', \"'no\", \"playlists':\", '\"*No', 'saved', 'playlists', 'found!*\",', \"'no\", \"playlists_':\", '(c.r,', 'c.w),', \"'pl\", 'bad', \"name':\", \"'*&&*\", 'is', 'not', 'valid', 'a', 'valid', 'name.', 'Ensure', 'it', 'starts', \"with'\", \"'\", 'a', 'letter', 'or', \"_',\", \"'pl\", 'bad', \"name_':\", '(c.r,', 'c.w),', \"'pl\", 'not', \"found':\", \"'Playlist\", '*&&*', 'unknown.', 'Saved', 'playlists', 'are', 'shown', \"'\", \"'above',\", \"'pl\", 'not', \"found_':\", '(c.r,', 'c.w),', \"'pl\", 'not', 'found', 'advise', \"ls':\", \"'Playlist\", '\"*&&*\"', 'not', 'found.', 'Use', '*ls*', 'to', \"'\", \"'list',\", \"'pl\", 'not', 'found', 'advise', \"ls_':\", '(c.y,', 'c.w,', 'c.g,', 'c.w),', \"'pl\", \"empty':\", \"'Playlist\", 'is', \"empty!',\", \"'advise\", \"add':\", \"'Use\", '*add', 'N*', 'to', 'add', 'a', \"track',\", \"'advise\", \"add_':\", '(c.g,', 'c.w),', \"'advise\", \"search':\", \"'Search\", 'for', 'items', 'and', 'then', 'use', '*add*', 'to', 'add', \"them',\", \"'advise\", \"search_':\", '(c.g,', 'c.w),', \"'no\", \"data':\", \"'Error\", 'fetching', 'data.', 'Possible', 'network', \"issue.'\", \"'\\\\n*&&*',\", \"'no\", \"data_':\", '(c.r,', 'c.w),', \"'use\", \"dot':\", \"'Start\", 'your', 'query', 'with', 'a', '*.*', 'to', 'perform', 'a', \"search',\", \"'use\", \"dot_':\", '(c.g,', 'c.w),', \"'cant\", 'get', \"track':\", \"'Problem\", 'playing', 'last', 'item:', \"*&&*',\", \"'cant\", 'get', \"track_':\", '(c.r,', 'c.w),', \"'track\", \"unresolved':\", \"'Sorry,\", 'this', 'track', 'is', 'not', \"available',\", \"'no\", \"player':\", \"'*&&*\", 'was', 'not', 'found', 'on', 'this', \"system',\", \"'no\", \"player_':\", '(c.y,', 'c.w),', \"'no\", 'pl', 'match', 'for', \"rename':\", \"'*Couldn\\\\'t\", 'find', 'matching', 'playlist', 'to', \"'\", \"'rename*',\", \"'no\", 'pl', 'match', 'for', \"rename_':\", '(c.r,', 'c.w),', \"'invalid\", \"range':\", '\"*Invalid', 'item', '/', 'range', 'entered!*\",', \"'invalid\", \"range_':\", '(c.r,', 'c.w),', \"'-audio':\", '\"*Warning*', '-', 'the', 'filetype', 'you', 'selected', '(&&)', 'has', 'no', 'audio!\",', \"'-audio_':\", '(c.y,', 'c.w),', \"'no\", \"mix':\", \"'No\", 'mix', 'is', 'available', 'for', 'the', 'selected', \"video',\", \"'mix\", 'only', \"videos':\", \"'Mixes\", 'are', 'only', 'available', 'for', \"videos',\", \"'invalid\", \"item':\", \"'*Invalid\", 'item', \"entered!*',\", \"'duplicate\", \"tracks':\", \"'*Warning*\", '-', 'duplicate', 'track(s)', '&&', 'added', 'to', \"'\", \"'playlist!',\", \"'duplicate\", \"tracks_':\", '(c.y,', 'c.w),', \"'select\", \"mux':\", '(\"Select', '[*&&*]', 'to', 'mux', 'audio', 'or', '[*Enter*]', 'to', 'download', '\"', '\"without', 'audio\\\\nThis', 'feature', 'is', 'experimental!\"),', \"'select\", \"mux_':\", '(c.y,', 'c.w,', 'c.y,', 'c.w),', \"'pl\", \"renamed':\", \"'Playlist\", '*&&*', 'renamed', 'to', \"*&&*',\", \"'pl\", \"renamed_':\", '(c.y,', 'c.w,', 'c.y,', 'c.w),', \"'pl\", \"saved':\", \"'Playlist\", 'saved', 'as', '*&&*.', 'Use', '*ls*', 'to', 'list', \"playlists',\", \"'pl\", \"saved_':\", '(c.y,', 'c.w,', 'c.g,', 'c.w),', \"'pl\", \"loaded':\", \"'Loaded\", 'playlist', '*&&*', 'as', 'current', \"playlist',\", \"'pl\", \"loaded_':\", '(c.y,', 'c.w),', \"'pl\", \"viewed':\", \"'Showing\", 'playlist', \"*&&*',\", \"'pl\", \"viewed_':\", '(c.y,', 'c.w),', \"'pl\", \"help':\", \"'Enter\", '*open', '<name', 'or', 'ID>*', 'to', 'load', 'a', \"playlist',\", \"'pl\", \"help_':\", '(c.g,', 'c.w),', \"'added\", 'to', \"pl':\", \"'*&&*\", 'tracks', 'added', '(*&&*', 'total', '[*&&*]).', 'Use', '*vp*', 'to', \"'\", \"'view',\", \"'added\", 'to', \"pl_':\", '(c.y,', 'c.w,', 'c.y,', 'c.w,', 'c.y,', 'c.w,', 'c.g,', 'c.w),', \"'added\", 'to', 'saved', \"pl':\", \"'*&&*\", 'tracks', 'added', 'to', '*&&*', '(*&&*', 'total', \"[*&&*])',\", \"'added\", 'to', 'saved', \"pl_':\", '(c.y,', 'c.w,', 'c.y,', 'c.w,', 'c.y,', 'c.w,', 'c.y,', 'c.w),', \"'song\", \"move':\", \"'Moved\", '*&&*', 'to', 'position', \"*&&*',\", \"'song\", \"move_':\", '(c.y,', 'c.w,', 'c.y,', 'c.w),', \"'song\", \"sw':\", '(\"Switched', 'item', '*&&*', 'with', '*&&*\"),', \"'song\", \"sw_':\", '(c.y,', 'c.w,', 'c.y,', 'c.w),', \"'current\", \"pl':\", '\"This', 'is', 'the', 'current', 'playlist.', 'Use', '*save', '<name>*', 'to', 'save\"', '\"', 'it\",', \"'current\", \"pl_':\", '(c.g,', 'c.w),', \"'help\", \"topic':\", '(\"', 'Enter', '*help', '<topic>*', 'for', 'specific', 'help:\"),', \"'help\", \"topic_':\", '(c.y,', 'c.w),', \"'songs\", \"rm':\", \"'*&&*\", 'tracks', 'removed', \"&&',\", \"'songs\", \"rm_':\", '(c.y,', 'c.w),', \"'mkp\", \"empty':\", '\"*&&*', 'is', 'either', 'empty', 'or', \"doesn't\", 'exist\",', \"'mkp\", \"empty_':\", '(c.b,', 'c.r),', \"'mkp\", \"parsed':\", '\"*&&*', 'entries', 'found', 'in', '*&&*\",', \"'mkp\", \"parsed_':\", '(c.g,', 'c.w,', 'c.b,', 'c.w),', \"'mkp\", \"finding':\", '\"Finding', 'the', 'best', 'match', 'for', '*&&*', '...\",', \"'mkp\", \"finding_':\", '(c.y,', 'c.w),', \"'mkp\", 'desc', \"unknown':\", '\"Unknown', 'tabletype,', '*do', 'a', 'new', 'search*\",', \"'mkp\", 'desc', \"unknown_':\", '(c.y,', 'c.w),', \"'mkp\", 'desc', 'which', \"data':\", '\"Which', '*tracks*', 'to', 'include?\",', \"'mkp\", 'desc', 'which', \"data_':\", '(c.y,', 'c.w),', \"'mkp\", 'no', \"valid':\", '\"*No', 'valid', 'tracks', 'found', 'in', 'that', 'description*\",', \"'mkp\", 'no', \"valid_':\", '(c.y,', 'c.w)}']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/helptext.py",
        "vector": "['import', 'pathlib', 'import', 're', 'import', 'socket', 'from', 'urllib.error', 'import', 'HTTPError,', 'URLError', 'from', 'urllib.request', 'import', 'urlopen', 'from', '.', 'import', 'c,', 'g', 'from', '.util', 'import', 'F,', 'get_near_name', 'def', 'helptext():', 'return', '[', '(\"basic\",', '\"Basics\",', '.format(c.ul,', 'c.w,', 'c.y)),', '(\"search\",', '\"Searching', 'and', 'Retrieving\",', '.format(c.ul,', 'c.w,', 'c.y,', '\",', '\".join(g.categories.keys()))),', '(\"edit\",', '\"Editing', '/', 'Manipulating', 'Results\",', '.format(c.ul,', 'c.w,', 'c.y)),', '(\"download\",', '\"Downloading', 'and', 'Playback\",', '.format(c.ul,', 'c.w,', 'c.y)),', '(\"dl-command\",', '\"Downloading', 'Using', 'External', 'Application\",', '.format(c.ul,', 'c.w,', 'c.y)),', '(\"encode\",', '\"Encoding', 'to', 'MP3', 'and', 'other', 'formats\",', '.format(c.ul,', 'c.w,', 'c.y,', 'g.TCFILE)),', '(\"playlists\",', '\"Using', 'Local', 'Playlists\",', '.format(c.ul,', 'c.w,', 'c.y)),', '(\"history\",', '\"Accessing', 'Local', 'History\",', '.format(c.ul,', 'c.w,', 'c.y)),', '(\"invoke\",', '\"Invocation', 'Parameters\",', '.format(c.ul,', 'c.w,', 'c.y)),', '(\"config\",', '\"Configuration', 'Options\",', '.format(c.ul,', 'c.w,', 'c.y,', \"'\\\\n{0}set\", 'max_results', '<number>{1}', '-', 'show', '<number>', \"re'\", \"'sults\", 'when', 'searching', '(max', \"50)'.format(c.y,\", 'c.w)', 'if', 'not', 'g.detectable_size', 'else', \"'')),\", '(\"lastfm\",', '\"Last.fm', 'configuration\",', '.format(c.ul,', 'c.w,', 'c.y)),', '(\"tips\",', '\"Advanced', 'Tips\",', '.format(', 'c.ul,', 'c.w,', 'c.y', '),', '),', '(', '\"new\",', '\"Check', 'if', 'new', 'version', 'is', 'available\",', '.format(c.ul,', 'c.w,', 'c.y,', '\"get_changelog()\"),', '),', '(', '\"changelog\",', '\"Check', 'program', 'changelog\",', '.format(c.ul,', 'c.w,', 'c.y,', '\"get_changelog_local()\"),', '),', '(', '\"tor\",', '\"Check', 'Tor', 'Status.', 'NOTE:', 'Use', 'this', 'feature', 'at', 'your', 'own', 'risk.', 'In', 'case', 'of', 'any', 'kind', 'of', 'damage', 'we', 'will', 'not', 'be', 'responsible.\",', '.format(c.ul,', 'c.w,', 'c.y,', '\"check_tor()\"),', '),', ']', 'def', 'get_help(choice):', 'helps', '=', '{\"download\":', '(\"playback', 'dl', 'listen', 'watch', 'show', 'repeat', 'playing\"', '\"show_video', 'playurl', 'browserplay', 'dlurl', 'd', 'da', 'dv', 'all', '*\"', '\"', 'play', 'browsersearch\".split()),', '\"dl-command\":', '(\"dlcmd', 'dl-cmd', 'download-cmd', 'dl_cmd', 'download_cmd', '\"', '\"download-command', 'download_command\".split()),', '\"encode\":', '(\"encoding', 'transcoding', 'transcode', 'wma', 'mp3', 'format', '\"', '\"encode', 'encoder\".split()),', '\"invoke\":', '\"command', 'commands', 'yt', 'invocation\".split(),', '\"search\":', '(\"user', 'userpl', 'pl', 'pls', 'r', 'n', 'p', 'url', 'album', '\"', '\"editing', 'result', 'results', 'related', 'remove', 'swop', 'mkp', '--description\".split()),', '\"edit\":', '(\"editing', 'manupulate', 'manipulating', 'rm', 'mv', 'sw', 'edit', 'move', '\"', '\"swap', 'shuffle\".split()),', '\"tips\":', '(\"undump', 'dump', '-f', '-w', '-a', 'adv', 'advanced\".split(\"', '\")),', '\"basic\":', '(\"basic', 'comment', 'basics', 'c', 'copy', 'clipboard', 'comments', 'u', '\"', '\"i\".split()),', '\"config\":', '(\"set', 'checkupdate', 'colours', 'colors', 'ddir', 'directory', 'player', '\"', '\"arguments', 'args', 'playerargs', 'music', 'search_music', 'keys', '\"', '\"status', 'show_status', 'show_video', 'video', 'configuration', '\"', '\"fullscreen', 'full', 'screen', 'folder', 'player', 'mpv', 'mplayer\"', '\"', 'settings', 'default', 'reset', 'configure', 'audio', 'results', '\"', '\"max_results', 'size', 'lines', 'rows', 'height', 'window', '\"', '\"position', 'window_pos', 'quality', 'resolution', 'max_res', '\"', '\"columns', 'width', 'console', 'overwrite\".split()),', '\"playlists\":', '(\"save', 'rename', 'delete', 'move', 'rm', 'ls', 'mv', 'sw', 'add', 'vp', 'open\"', '\"', 'view\".split())}', 'for', 'topic,', 'aliases', 'in', 'helps.items():', 'if', 'choice', 'in', 'aliases:', 'choice', '=', 'topic', 'break', 'choice', '=', '\"menu\"', 'if', 'not', 'choice', 'else', 'choice', 'out,', 'all_help', '=', '\"\",', 'helptext()', 'help_names', '=', '[x[0]', 'for', 'x', 'in', 'all_help]', 'choice', '=', 'get_near_name(choice,', 'help_names)', 'def', 'indent(x):', 'return', '\"\\\\n', '\".join(x.split(\"\\\\n\"))', 'if', 'choice', '==', '\"menu\"', 'or', 'choice', 'not', 'in', 'help_names:', 'out', '+=', '\"', '%sHelp', 'Topics%s\"', '%', '(c.ul,', 'c.w)', 'out', '+=', \"F('help\", \"topic',\", '2,', '1)', 'for', 'x', 'in', 'all_help:', 'out', '+=', '(\"\\\\n%s', '%-10s%s', ':', '%s\"', '%', '(c.y,', 'x[0],', 'c.w,', 'x[1]))', 'out', '+=', '\"\\\\n\"', 'return', 'out', 'else:', 'if', 'choice', '==', \"'tor':\", 'output_text', '=', 'check_tor()', 'elif', 'choice', '==', \"'new':\", 'output_text', '=', 'get_changelog()', 'elif', 'choice', '==', '\"changelog\":', 'output_text', '=', 'get_changelog_local()', 'else:', 'choice', '=', 'help_names.index(choice)', 'output_text', '=', 'all_help[choice][2]', 'return', 'indent(output_text)', 'def', 'get_changelog():', 'try:', 'url', '=', '\"https://raw.githubusercontent.com/iamtalhaasghar/yewtube/master/CHANGELOG.md\"', 'v', '=', 'urlopen(url,', 'timeout=1).read().decode()', 'v', '=', \"v.split('\", 'return', 'v', 'except', '(URLError,', 'HTTPError,', 'socket.timeout):', 'return', '\"read', 'changelog', 'timed', 'out\"', 'def', 'get_changelog_local():', 'cl_path', '=', 'pathlib.Path(__file__).parent.parent', '/', '\"CHANGELOG.md\"', 'if', 'cl_path.is_file():', 'return', '\"\\\\n\".join(reversed(cl_path.read_text().splitlines()))', 'else:', 'return', '\"can\\'t', 'find', 'changelog', 'file\"', 'def', 'check_tor():', 'try:', 'url', '=', '\"https://check.torproject.org/?lang=en\"', 'v', '=', 'urlopen(url,', 'timeout=1).read().decode()', 'ip', '=', \"re.findall('<strong>(.*)</strong>',\", 'v)', 'status', '=', \"re.findall('Congratulations.(.*)',\", 'v)', 'if', 'len(status)', '==', '0:', 'status', '=', \"re.findall('Sorry.(.*)',\", 'v)', 'return', \"str({'ip'\", ':', 'ip,', \"'status':\", 'status[0]})', 'except', '(URLError,', 'HTTPError,', 'socket.timeout):', 'return', '\"read', 'check', 'tor', 'status', 'timed', 'out\"']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/history.py",
        "vector": "['import', 'os', 'import', 'pickle', 'from', '.', 'import', 'g,', 'c', 'from', '.util', 'import', 'dbg', 'from', '.playlist', 'import', 'Playlist', 'from', '.playlists', 'import', 'read_m3u', 'def', 'add(song):', 'if', 'not', \"g.userhist.get('history'):\", \"g.userhist['history']\", '=', \"Playlist('history')\", \"g.userhist['history'].songs.append(song)\", 'save()', 'def', 'load():', '_convert_to_m3u()', 'try:', \"g.userhist['history']\", '=', 'read_m3u(g.HISTFILE)', 'except', 'FileNotFoundError:', 'if', 'not', 'os.path.isfile(g.HISTFILE):', 'g.userhist', '=', '{}', 'save()', 'def', 'save():', 'with', 'open(g.HISTFILE,', \"'w')\", 'as', 'hf:', \"hf.write('\", 'if', \"'history'\", 'in', 'g.userhist:', 'for', 'song', 'in', \"g.userhist['history'].songs:\", \"hf.write('\", \"hf.write('https://www.youtube.com/watch?v=%s\\\\n'\", '%', 'song.ytid)', 'dbg(c.r', '+', '\"History', 'saved\\\\n---\"', '+', 'c.w)', 'def', '_convert_to_m3u():', 'if', 'os.path.isfile(g.HISTFILE):', 'return', 'elif', 'not', 'os.path.isfile(g.OLDHISTFILE):', 'return', 'with', 'open(g.OLDHISTFILE,', '\"rb\")', 'as', 'hf:', 'g.userhist', '=', 'pickle.load(hf)', 'save()']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/init.py",
        "vector": "['import', 'argparse', 'import', 'logging', 'import', 'multiprocessing', 'import', 'os', 'import', 'platform', 'import', 're', 'import', 'sys', 'import', 'tempfile', 'try:', 'import', 'colorama', 'has_colorama', '=', 'True', 'except', 'ImportError:', 'has_colorama', '=', 'False', 'try:', 'import', 'readline', 'readline.set_history_length(2000)', 'has_readline', '=', 'True', 'except', 'ImportError:', 'has_readline', '=', 'False', 'from', '.', 'import', '__version__,', 'c,', 'cache,', 'config,', 'g,', 'paths,', 'screen', 'from', '.helptext', 'import', 'helptext', 'from', '.util', 'import', 'assign_player,', 'dbg,', 'has_exefile,', 'load_player_info,', 'xprint', 'mswin', '=', 'os.name', '==', '\"nt\"', 'def', 'init():', '_process_cl_args()', 'suffix', '=', '\".exe\"', 'if', 'mswin', 'else', '\"\"', 'vlc,', 'mplayer,', 'mpv', '=', '\"vlc\"', '+', 'suffix,', '\"mplayer\"', '+', 'suffix,', '\"mpv\"', '+', 'suffix', 'config.convert_old_cf_to_json()', 'if', 'not', 'os.path.exists(g.CFFILE):', 'if', 'has_exefile(vlc):', 'config.PLAYER.set(vlc)', 'elif', 'has_exefile(mpv):', 'config.PLAYER.set(mpv)', 'elif', 'has_exefile(mplayer):', 'config.PLAYER.set(mplayer)', 'config.save()', 'else:', 'config.load()', 'try:', 'assign_player(config.PLAYER.get)', 'except', 'Exception', 'as', 'ex:', 'g.message', '=', '\"%sFailed', 'to', 'get', '%s`s', 'version.', 'Probabily', 'it', 'is', 'not', 'installed.', 'Try', 'installing', 'it', 'again', 'or', 'change', 'player', 'using', '`set', 'player', '<player_name>`', '%s\"', '%(c.y,', 'config.PLAYER.get', ',', 'c.w)', 'screen.update()', 'input(\"Press', 'Enter', 'to', 'go', 'back', 'to', 'main', 'menu.\")', '_init_readline()', 'cache.load()', '_init_transcode()', 'if', 'config.ENCODER.get', '>=', 'len(g.encoders):', 'config.ENCODER.set(\"0\")', 'if', 'has_exefile(config.PLAYER.get):', 'load_player_info(config.PLAYER.get)', 'if', 'has_colorama', 'and', 'mswin:', 'colorama.init()', 'if', 'mswin:', 'g.muxapp', '=', 'has_exefile(\"ffmpeg.exe\")', 'or', 'has_exefile(\"avconv.exe\")', 'else:', 'g.muxapp', '=', 'has_exefile(\"ffmpeg\")', 'or', 'has_exefile(\"avconv\")', 'if', 'config.MPRIS.get:', 'try:', 'from', '.', 'import', 'mpris', 'conn1,', 'conn2', '=', 'multiprocessing.Pipe()', 'g.mprisctl', '=', 'mpris.MprisConnection(conn1)', 't', '=', 'multiprocessing.Process(target=mpris.main,', 'args=(conn2,))', 't.daemon', '=', 'True', 't.start()', 'except', 'ImportError:', 'print(\"could', 'not', 'load', 'MPRIS', 'interface.', 'missing', 'libraries.\")', 'def', '_init_transcode():', 'if', 'not', 'os.path.exists(g.TCFILE):', 'config_file_contents', '=', 'with', 'open(g.TCFILE,', '\"w\")', 'as', 'tcf:', 'tcf.write(config_file_contents)', 'dbg(\"generated', 'transcoding', 'config', 'file\")', 'else:', 'dbg(\"transcoding', 'config', 'file', 'exists\")', 'with', 'open(g.TCFILE,', '\"r\")', 'as', 'tcf:', 'g.encoders', '=', '[dict(name=\"None\",', 'ext=\"COPY\",', 'valid=\"*\")]', 'e', '=', '{}', 'for', 'line', 'in', 'tcf.readlines():', 'if', 'line.startswith(\"TRANSCODER_PATH:\"):', 'm', '=', 're.match(\"TRANSCODER_PATH:(.*)\",', 'line).group(1)', 'g.transcoder_path', '=', 'm.strip()', 'elif', 'line.startswith(\"DELETE_ORIGINAL:\"):', 'm', '=', 're.match(\"DELETE_ORIGINAL:(.*)\",', 'line).group(1)', 'do', '=', 'm.strip().lower()', 'in', '(\"true\",', '\"yes\",', '\"enabled\",', '\"on\")', 'g.delete_orig', '=', 'do', 'elif', 'line.startswith(\"name:\"):', \"e['name']\", '=', 're.match(\"name:(.*)\",', 'line).group(1).strip()', 'elif', 'line.startswith(\"extension:\"):', \"e['ext']\", '=', 're.match(\"extension:(.*)\",', 'line).group(1).strip()', 'elif', 'line.startswith(\"valid', 'for:\"):', \"e['valid']\", '=', 're.match(\"valid', 'for:(.*)\",', 'line).group(1).strip()', 'elif', 'line.startswith(\"command:\"):', \"e['command']\", '=', 're.match(\"command:(.*)\",', 'line).group(1).strip()', 'if', '\"name\"', 'in', 'e', 'and', '\"ext\"', 'in', 'e', 'and', '\"valid\"', 'in', 'e:', 'g.encoders.append(e)', 'e', '=', '{}', 'def', '_init_readline():', 'if', 'g.command_line:', 'return', 'if', 'has_readline:', 'g.READLINE_FILE', '=', 'os.path.join(paths.get_config_dir(),', '\"input_history\")', 'if', 'os.path.exists(g.READLINE_FILE):', 'readline.read_history_file(g.READLINE_FILE)', 'dbg(c.g', '+', '\"Read', 'history', 'file\"', '+', 'c.w)', 'def', '_process_cl_args():', 'parser', '=', 'argparse.ArgumentParser(add_help=False)', \"parser.add_argument('commands',\", \"nargs='*')\", \"parser.add_argument('--help',\", \"'-h',\", \"action='store_true')\", \"parser.add_argument('--version',\", \"'-v',\", \"action='store_true')\", \"parser.add_argument('--debug',\", \"'-d',\", \"action='store_true')\", \"parser.add_argument('--logging',\", \"'-l',\", \"action='store_true')\", \"parser.add_argument('--no-autosize',\", \"action='store_true')\", \"parser.add_argument('--no-preload',\", \"action='store_true')\", \"parser.add_argument('--no-textart',\", \"action='store_true')\", 'args', '=', 'parser.parse_args()', 'if', 'args.version:', 'screen.msgexit(_get_version_info())', 'elif', 'args.help:', \"screen.msgexit('\\\\n'.join(i[2]\", 'for', 'i', 'in', 'helptext()))', 'if', 'args.debug', 'or', 'os.environ.get(\"mpsytdebug\")', '==', '\"1\":', 'xprint(_get_version_info())', 'g.debug_mode', '=', 'True', 'g.no_clear_screen', '=', 'True', 'if', 'args.logging', 'or', 'os.environ.get(\"mpsytlog\")', '==', '\"1\"', 'or', 'g.debug_mode:', 'logfile', '=', 'os.path.join(tempfile.gettempdir(),', '\"mpsyt.log\")', 'logging.basicConfig(level=logging.DEBUG,', 'filename=logfile)', 'logging.getLogger(\"pafy\").setLevel(logging.DEBUG)', 'if', 'args.no_autosize:', 'g.detectable_size', '=', 'False', 'g.command_line', '=', '\"playurl\"', 'in', 'args.commands', 'or', '\"dlurl\"', 'in', 'args.commands', 'if', 'g.command_line:', 'g.no_clear_screen', '=', 'True', 'if', 'args.no_preload:', 'g.preload_disabled', '=', 'True', 'if', 'args.no_textart:', 'g.no_textart', '=', 'True', 'g.argument_commands', '=', 'args.commands', 'def', '_get_version_info():', 'from', 'yt_dlp.version', 'import', '__version__', 'as', 'ytdlp_version', 'dbus_version', '=', 'None', 'glib', '=', 'False', 'try:', 'import', 'dbus', 'dbus_version', '=', 'dbus.__version__', 'except', 'Exception:', 'pass', 'try:', 'from', 'gi.repository', 'import', 'GLib', 'glib', '=', 'True', 'except', 'Exception:', 'pass', 'out', '=', '\"yewtube', 'version', ':', '\"', '+', '__version__', 'out', '+=', '\"\\\\nyt_dlp', 'version', ':', '\"', '+', 'ytdlp_version', 'out', '+=', '\"\\\\nPython', 'version', ':', '\"', '+', 'sys.version', 'out', '+=', '\"\\\\nProcessor', ':', '\"', '+', 'platform.processor()', 'out', '+=', '\"\\\\nMachine', 'type', ':', '\"', '+', 'platform.machine()', 'out', '+=', '\"\\\\nArchitecture', ':', '%s,', '%s\"', '%', 'platform.architecture()', 'out', '+=', '\"\\\\nPlatform', ':', '\"', '+', 'platform.platform()', 'out', '+=', '\"\\\\nsys.stdout.enc', ':', '\"', '+', 'sys.stdout.encoding', 'out', '+=', '\"\\\\ndefault', 'enc', ':', '\"', '+', 'sys.getdefaultencoding()', 'out', '+=', '\"\\\\nConfig', 'dir', ':', '\"', '+', 'paths.get_config_dir()', 'out', '+=', '\"\\\\ndbus', ':', '\"', '+', 'str(dbus_version)', 'out', '+=', '\"\\\\nglib', ':', '\"', '+', 'str(glib)', 'for', 'env', 'in', '\"TERM', 'SHELL', 'LANG', 'LANGUAGE\".split():', 'value', '=', 'os.environ.get(env)', 'out', '+=', '\"\\\\nenv:%-15s:', '%s\"', '%', '(env,', 'value)', 'if', 'value', 'else', '\"\"', 'return', 'out']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/listview/__init__.py",
        "vector": "['import', 're', 'import', 'math', 'from', '..', 'import', 'c,', 'g,', 'util,', 'content', 'from', '.base', 'import', 'ListViewItem', 'from', '.user', 'import', 'ListUser', 'from', '.livestream', 'import', 'ListLiveStream', 'from', '.songtitle', 'import', 'ListSongtitle', 'class', 'ListView(content.PaginatedContent):', 'func', '=', 'None', 'objects', '=', 'None', 'columns', '=', 'None', 'page', '=', '0', 'def', '__init__(self,', 'columns,', 'objects,', 'function_call=None):', 'self.func', '=', 'function_call', 'self.objects', '=', 'objects', 'self.columns', '=', 'columns', 'self.object_type', '=', 'None', 'types', '=', 'len(set([obj.__class__', 'for', 'obj', 'in', 'objects]))', 'if', 'types', '==', '0:', 'raise', 'BaseException(\"No', 'objects', 'in', 'list\")', 'if', 'types', '>', '1:', 'raise', 'BaseException(\"More', 'than', 'one', 'kind', 'of', 'objects', 'in', 'list\")', 'self.object_type', '=', '[obj.__class__', 'for', 'obj', 'in', 'objects][0]', 'def', 'numPages(self):', 'Generates', 'content', '===============', 'Dynamic', 'fields', '===============', 'Column.size', 'may', 'instead', 'of', 'an', 'integer', 'be', 'a', 'string', 'containing', 'either', '\"length\"', 'or', '\"remaining\".', 'Length', 'is', 'for', 'time', 'formats', 'like', '20:40', 'Remaining', 'will', 'allocate', 'all', 'remaining', 'space', 'to', 'that', 'column.', 'TODO:', 'Make', 'it', 'so', 'set', 'columns', 'can', 'set', '\"remaining\"', '?', 'Handles', 'what', 'happends', 'when', 'a', 'user', 'selects', 'something', 'from', 'the', 'list', 'Currently', 'this', 'functions', 'hooks', 'into', 'commands/play', 'Determines', 'how', 'many', 'views', 'can', 'be', 'per', 'page', '\"\"\"', 'return', 'util.getxy().max_results']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/listview/base.py",
        "vector": "['class', 'ListViewItem:', 'data', '=', 'None', 'def', '__init__(self,', 'data):', 'self.data', '=', 'data', 'def', '__getattr__(self,', 'key):', 'return', 'self.data[key]', 'if', 'key', 'in', 'self.data.keys()', 'else', 'None', 'def', 'length(self,', '_=0):', 'return', '0']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/listview/livestream.py",
        "vector": "['from', '.base', 'import', 'ListViewItem', 'from', '..', 'import', 'util', 'class', 'ListLiveStream(ListViewItem):', 'def', 'ytid(self,', 'lngt=10):', 'return', 'self.data.get(\"id\").get(\"videoId\")', 'def', 'ret(self):', 'return', '(self.ytid(),', 'self.title(),', 'self.length())', 'def', 'title(self,', 'lngt=10):', 'return', 'util.uea_pad(lngt,', 'self.data.get(\"snippet\").get(\"title\"))', 'def', 'description(self,', 'lngt=10):', 'return', 'util.uea_pad(lngt,', 'self.data.get(\"snippet\").get(\"description\"))', '@staticmethod', 'def', 'return_field():', 'return', '\"ret\"']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/listview/songtitle.py",
        "vector": "['from', '.base', 'import', 'ListViewItem', 'from', '..', 'import', 'util', 'as', 'u', 'class', 'ListSongtitle(ListViewItem):', '_checked', '=', 'False', '_certainty', '=', '1.0', 'def', '__init__(self,', 'data,', 'certainty=1.0):', 'self._checked', '=', 'True', 'self._certainty', '=', 'certainty', 'super(ListSongtitle,', 'self).__init__(data)', 'def', 'artist(self,', 'l=10):', 'return', 'u.uea_pad(l,', 'self.data[0])', 'def', 'title(self,', 'l=10):', 'return', 'u.uea_pad(l,', 'self.data[1])', 'def', 'checked(self,', 'l=10):', 'return', '\"', 'X', '\"', 'if', 'self._checked', 'else', '\"', '\"', 'def', 'certainty(self):', 'return', 'self._certainty', 'def', 'is_checked(self):', 'return', 'self._checked', 'def', 'toggle(self):', 'self._checked', '=', 'not', 'self._checked', 'def', 'ret(self):', 'return', '\"%s', '-', '%s\"', '%', '(self.artist().strip(),', 'self.title().strip())', '@staticmethod', 'def', 'return_field():', 'return', '\"ret\"']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/listview/user.py",
        "vector": "['from', '.base', 'import', 'ListViewItem', 'from', '..', 'import', 'util', 'as', 'u', 'class', 'ListUser(ListViewItem):', 'def', 'id(self,', 'length=0):', 'return', 'self.data.get(\"id\")', 'def', 'name(self,', 'length=10):', 'return', 'u.uea_pad(length,', 'self.data.get(\"title\"))', 'def', 'description(self,', 'length=10):', 'return', 'u.uea_pad(length,', 'self.data[\"descriptionSnippet\"][0][\\'text\\']', 'if', \"self.data['descriptionSnippet']\", 'is', 'not', 'None', 'else', \"'No\", 'description', \"found')\", 'def', 'kind(self,', 'length=10):', 'return', 'self.data.get(\"type\")', 'def', 'ret(self):', 'return', '(self.name(),', 'self.id(),', '\"\")', '@staticmethod', 'def', 'return_field():', 'return', '\"ret\"']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/main.py",
        "vector": "['import', 'locale', 'import', 'logging', 'import', 'os', 'import', 'sys', 'import', 'traceback', 'as', 'traceback_py', 'from', '.', 'import', 'util', 'completer', '=', 'None', 'try:', 'import', 'readline', 'readline.set_history_length(2000)', 'has_readline', '=', 'True', 'completer', '=', 'util.CommandCompleter()', \"readline.parse_and_bind('tab:\", \"complete')\", 'readline.set_completer(completer.complete_command)', \"readline.set_completer_delims('')\", 'except', 'ImportError:', 'has_readline', '=', 'False', 'from', '.', 'import', 'g,', 'c,', 'commands,', 'screen,', 'history,', 'init', 'from', '.', 'import', '__version__,', 'playlists,', 'content,', 'listview', 'from', '.', 'import', 'config', 'mswin', '=', 'os.name', '==', '\"nt\"', 'try:', 'locale.setlocale(locale.LC_ALL,', '\"\")', 'except', 'Exception', 'as', 'err:', 'logging.debug(f\"locale', 'not', 'set:', '{err}\")', 'def', 'matchfunction(func,', 'regex,', 'userinput):', 'match', '=', 'regex.match(userinput)', 'if', 'match', 'and', 'match.group(0)', '==', 'userinput:', 'matches', '=', 'match.groups()', 'util.dbg(\"input:', '%s\",', 'userinput)', 'util.dbg(\"function', 'call:', '%s\",', 'func.__name__)', 'util.dbg(\"regx', 'matches:', '%s\",', 'matches)', 'try:', 'func(*matches)', 'except', 'IndexError:', 'if', 'g.debug_mode:', 'g.content', '=', \"''.join(traceback_py.format_exception(\", '*sys.exc_info()))', 'g.message', '=', \"util.F('invalid\", \"range')\", 'g.content', '=', 'g.content', 'or', 'content.generate_songlist_display()', 'except', '(ValueError,', 'IOError)', 'as', 'e:', 'if', 'g.debug_mode:', 'g.content', '=', \"''.join(traceback_py.format_exception(\", '*sys.exc_info()))', 'g.message', '=', \"util.F('cant\", 'get', \"track')\", '%', 'str(e)', 'g.content', '=', 'g.content', 'or\\\\', 'content.generate_songlist_display(zeromsg=g.message)', 'except', 'Exception', 'as', 'e:', 'import', 'traceback', 'traceback.print_exception(type(e),', 'e,', 'e.__traceback__)', 'if', 'g.debug_mode:', 'g.content', '=', \"''.join(traceback.format_exception(\", '*sys.exc_info()))', 'g.message', '=', \"util.F('no\", \"data')\", '%', 'e', 'g.content', '=', 'g.content', 'return', 'True', 'def', 'prompt_for_exit():', 'g.message', '=', 'c.r', '+', '\"Press', 'ctrl-c', 'again', 'to', 'exit\"', '+', 'c.w', 'g.content', '=', 'content.generate_songlist_display()', 'screen.update()', 'try:', 'userinput', '=', 'input(c.r', '+', '\"', '>', '\"', '+', 'c.w)', 'except', '(KeyboardInterrupt,', 'EOFError):', 'commands.misc.quits(showlogo=False)', 'return', 'userinput', 'def', 'main():', 'init.init()', 'if', 'config.SET_TITLE.get:', 'util.set_window_title(\"yewtube\")', 'if', 'not', 'g.command_line:', 'g.content', '=', 'content.logo(col=c.g,', 'version=__version__)', '+', '\"\\\\n\\\\n\"', 'g.message', '=', '\"Enter', '/search-term', 'to', 'search', 'or', '[h]elp\"', 'screen.update()', 'playlists.load()', 'history.load()', 'commands.lastfm.init_network(verbose=False)', 'prev_model', '=', '[]', 'scrobble_funcs', '=', '[commands.album_search.search_album]', 'arg_inp', '=', '\"', '\".join(g.argument_commands)', 'prompt', '=', '\">', '\"', 'arg_inp', '=', 'arg_inp.replace(r\",,\",', '\"[mpsyt-comma]\")', 'arg_inp', '=', 'arg_inp.split(\",\")', 'while', 'True:', 'next_inp', '=', '\"\"', 'if', 'len(arg_inp):', 'next_inp', '=', 'arg_inp.pop(0).strip()', 'next_inp', '=', 'next_inp.replace(\"[mpsyt-comma]\",', '\",\")', 'try:', 'userinput', '=', 'next_inp', 'or', 'input(prompt).strip()', 'except', '(KeyboardInterrupt,', 'EOFError):', 'userinput', '=', 'prompt_for_exit()', 'for', 'i', 'in', 'g.commands:', 'if', 'matchfunction(i.function,', 'i.regex,', 'userinput):', 'if', 'prev_model', '!=', 'g.model', 'and', 'not', 'i.function', 'in', 'scrobble_funcs:', 'g.scrobble', '=', 'False', 'prev_model', '=', 'g.model', 'break', 'else:', 'g.content', '=', 'g.content', 'or', 'content.generate_songlist_display()', 'if', 'g.command_line:', 'g.content', '=', '\"\"', 'if', 'userinput', 'and', 'not', 'g.command_line:', 'g.message', '=', 'c.b', '+', '\"Bad', 'syntax.', 'Enter', 'h', 'for', 'help\"', '+', 'c.w', 'elif', 'userinput', 'and', 'g.command_line:', 'sys.exit(\"Bad', 'syntax\")', 'screen.update()']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/mpris.py",
        "vector": "['import', 'copy', 'import', 'json', 'import', 'os', 'import', 're', 'import', 'socket', 'import', 'time', 'import', 'typing', 'as', 'T', 'from', 'threading', 'import', 'Thread', 'import', 'dbus', 'import', 'dbus.service', 'from', 'dbus.mainloop.glib', 'import', 'DBusGMainLoop', 'IDENTITY', '=', \"'mps-youtube'\", 'BUS_NAME', '=', \"'org.mpris.MediaPlayer2.'\", '+', 'IDENTITY', '+', \"'.instance'\", '+', 'str(os.getpid())', 'ROOT_INTERFACE', '=', \"'org.mpris.MediaPlayer2'\", 'PLAYER_INTERFACE', '=', \"'org.mpris.MediaPlayer2.Player'\", 'PROPERTIES_INTERFACE', '=', \"'org.freedesktop.DBus.Properties'\", 'MPRIS_PATH', '=', \"'/org/mpris/MediaPlayer2'\", 'class', 'Mpris2Controller:', 'def', '__init__(self):', 'from', 'gi.repository', 'import', 'GLib', 'self.mpris', '=', 'None', 'self.bus', '=', 'None', 'self.main_loop', '=', 'GLib.MainLoop()', 'def', 'release(self):', 'if', 'self.mpris', 'is', 'not', 'None:', 'self.mpris.remove_from_connection()', 'self.mpris', '=', 'None', 'if', 'self.bus', 'is', 'not', 'None:', 'self.bus.get_bus().release_name(self.bus.get_name())', 'def', 'acquire(self):', 'self._acquire_bus()', 'self._add_interfaces()', 'def', 'run(self,', 'connection):', 't', '=', 'Thread(target=self._run_main_loop)', 't.daemon', '=', 'True', 't.start()', 'self.listenstatus(connection)', 'def', 'listenstatus(self,', 'conn):', 'while', 'True:', 'try:', 'data', '=', 'conn.recv()', 'if', 'isinstance(data,', 'tuple):', 'name,', 'val', '=', 'data', 'if', 'name', '==', \"'socket':\", 'Thread(target=self.mpris.bindmpv,', 'args=(val,)).start()', 'elif', 'name', '==', \"'mplayer-fifo':\", 'self.mpris.bindfifo(val)', 'elif', 'name', '==', \"'mpv-fifo':\", 'self.mpris.bindfifo(val,', 'mpv=True)', 'else:', 'self.mpris.setproperty(name,', 'val)', 'except', 'IOError:', 'break', 'except', 'KeyboardInterrupt:', 'pass', 'def', '_acquire_bus(self):', 'if', 'self.bus', 'is', 'not', 'None:', 'self.bus.get_bus().request_name(BUS_NAME)', 'else:', 'self.bus', '=', 'dbus.service.BusName(BUS_NAME,', 'bus=dbus.SessionBus(mainloop=DBusGMainLoop()))', 'def', '_add_interfaces(self):', 'self.mpris', '=', 'Mpris2MediaPlayer(self.bus)', 'def', '_run_main_loop(self):', 'while', 'True:', 'try:', 'self.main_loop.run()', 'except', 'KeyboardInterrupt:', 'pass', 'class', 'Mpris2MediaPlayer(dbus.service.Object):', 'def', '__init__(self,', 'bus):', 'dbus.service.Object.__init__(self,', 'bus,', 'MPRIS_PATH)', 'self.socket', '=', 'None', 'self.fifo', '=', 'None', 'self.mpv', '=', 'False', 'self.properties', '=', '{', 'ROOT_INTERFACE', ':', '{', \"'read_only'\", ':', '{', \"'CanQuit'\", ':', 'False,', \"'CanSetFullscreen'\", ':', 'False,', \"'CanRaise'\", ':', 'False,', \"'HasTrackList'\", ':', 'False,', \"'Identity'\", ':', 'IDENTITY,', \"'DesktopEntry'\", ':', \"'mps-youtube',\", \"'SupportedUriSchemes'\", ':', 'dbus.Array([],', \"'s',\", '1),', \"'SupportedMimeTypes'\", ':', 'dbus.Array([],', \"'s',\", '1),', '},', \"'read_write'\", ':', '{', \"'Fullscreen'\", ':', 'False,', '},', '},', 'PLAYER_INTERFACE', ':', '{', \"'read_only'\", ':', '{', \"'PlaybackStatus'\", ':', \"'Stopped',\", \"'Metadata'\", ':', '{', \"'mpris:trackid'\", ':', 'dbus.ObjectPath(', \"'/CurrentPlaylist/UnknownTrack',\", 'variant_level=1)', '},', \"'Position'\", ':', 'dbus.Int64(0),', \"'MinimumRate'\", ':', '1.0,', \"'MaximumRate'\", ':', '1.0,', \"'CanGoNext'\", ':', 'True,', \"'CanGoPrevious'\", ':', 'True,', \"'CanPlay'\", ':', 'True,', \"'CanPause'\", ':', 'True,', \"'CanSeek'\", ':', 'True,', \"'CanControl'\", ':', 'True,', '},', \"'read_write'\", ':', '{', \"'Rate'\", ':', '1.0,', \"'Volume'\", ':', '1.0,', '},', '},', '}', 'def', 'bindmpv(self,', 'sockpath):', 'self.mpv', '=', 'True', 'self.socket', '=', 'socket.socket(socket.AF_UNIX)', 'tries', '=', '0', 'while', 'tries', '<', '10:', 'time.sleep(.5)', 'try:', 'self.socket.connect(sockpath)', 'break', 'except', 'socket.error:', 'pass', 'tries', '+=', '1', 'else:', 'return', 'try:', 'observe_full', '=', 'False', 'self._sendcommand([\"observe_property\",', '1,', '\"time-pos\"])', 'for', 'line', 'in', 'self.socket.makefile():', 'resp', '=', 'json.loads(line)', 'if', \"resp.get('event')\", '==', \"'property-change'\", 'and', 'not', 'observe_full:', 'self._sendcommand([\"observe_property\",', '2,', '\"volume\"])', 'self._sendcommand([\"observe_property\",', '3,', '\"pause\"])', 'self._sendcommand([\"observe_property\",', '4,', '\"seeking\"])', 'observe_full', '=', 'True', 'if', \"resp.get('event')\", '==', \"'property-change':\", \"self.setproperty(resp['name'],\", \"resp.get('data'))\", 'except', 'socket.error:', 'self.socket', '=', 'None', 'self.mpv', '=', 'False', 'def', 'bindfifo(self,', 'fifopath,', 'mpv=False):', 'time.sleep(1)', 'try:', 'self.fifo', '=', 'open(fifopath,', \"'w')\", \"self._sendcommand(['get_property',\", \"'volume'])\", 'self.mpv', '=', 'mpv', 'except', 'IOError:', 'self.fifo', '=', 'None', 'def', 'setproperty(self,', 'name:', 'str,', 'val:', 'T.Optional[T.Any]):', 'if', 'name', '==', \"'pause':\", 'oldval', '=', \"self.properties[PLAYER_INTERFACE]['read_only']['PlaybackStatus']\", 'newval', '=', 'None', 'if', 'val:', 'newval', '=', \"'Paused'\", 'else:', 'newval', '=', \"'Playing'\", 'if', 'newval', '!=', 'oldval:', \"self.properties[PLAYER_INTERFACE]['read_only']['PlaybackStatus']\", '=', 'newval', 'self.PropertiesChanged(PLAYER_INTERFACE,', '{', \"'PlaybackStatus':\", 'newval', '},', '[])', 'elif', 'name', '==', \"'stop':\", 'oldval', '=', \"self.properties[PLAYER_INTERFACE]['read_only']['PlaybackStatus']\", 'newval', '=', 'None', 'if', 'val:', 'newval', '=', \"'Stopped'\", 'else:', 'newval', '=', \"'Playing'\", 'if', 'newval', '!=', 'oldval:', \"self.properties[PLAYER_INTERFACE]['read_only']['PlaybackStatus']\", '=', 'newval', 'self.PropertiesChanged(PLAYER_INTERFACE,', '{', \"'PlaybackStatus':\", 'newval', '},', \"['Metadata',\", \"'Position'])\", 'elif', 'name', '==', \"'volume'\", 'and', 'val', 'is', 'not', 'None:', 'oldval', '=', \"self.properties[PLAYER_INTERFACE]['read_write']['Volume']\", 'newval', '=', 'float(val)', '/', '100', 'if', 'newval', '!=', 'oldval:', \"self.properties[PLAYER_INTERFACE]['read_write']['Volume']\", '=', 'newval', 'self.PropertiesChanged(PLAYER_INTERFACE,', '{', \"'Volume':\", 'newval', '},', '[])', 'elif', 'name', '==', \"'time-pos'\", 'and', 'val:', 'oldval', '=', \"self.properties[PLAYER_INTERFACE]['read_only']['Position']\", 'newval', '=', 'dbus.Int64(val', '*', '10**6)', 'if', 'val', 'else', 'dbus.Int64(0)', 'if', 'newval', '!=', 'oldval:', \"self.properties[PLAYER_INTERFACE]['read_only']['Position']\", '=', 'newval', 'if', 'abs(newval', '-', 'oldval)', '>=', '4', '*', '10**6:', 'self.Seeked(newval)', 'elif', 'name', '==', \"'metadata'\", 'and', 'val:', 'trackid,', 'title,', 'length,', 'arturl,', 'artist,', 'album', '=', 'val', 'trackid_sanitized', '=', \"re.sub('[^a-zA-Z0-9]',\", \"'',\", 'trackid)', 'yturl', '=', \"'https://www.youtube.com/watch?v='\", '+', 'trackid', 'oldval', '=', \"self.properties[PLAYER_INTERFACE]['read_only']['Metadata']\", 'newval', '=', '{', \"'mpris:trackid'\", ':', 'dbus.ObjectPath(', \"'/CurrentPlaylist/ytid/'\", '+', 'trackid_sanitized,', 'variant_level=1),', \"'mpris:length'\", ':', 'dbus.Int64(length', '*', '10**6,', 'variant_level=1),', \"'mpris:artUrl'\", ':', 'dbus.String(arturl,', 'variant_level=1),', \"'xesam:title'\", ':', 'dbus.String(title,', 'variant_level=1),', \"'xesam:artist'\", ':', 'dbus.Array(artist,', \"'s',\", '1),', \"'xesam:album'\", ':', 'dbus.String(album,', 'variant_level=1),', \"'xesam:url'\", ':', 'dbus.String(yturl,', 'variant_level=1),', '}', 'if', 'newval', '!=', 'oldval:', \"self.properties[PLAYER_INTERFACE]['read_only']['Metadata']\", '=', 'newval', 'self.PropertiesChanged(PLAYER_INTERFACE,', '{', \"'Metadata':\", 'newval', '},', '[])', 'elif', 'name', '==', \"'seeking':\", 'if', 'not', 'val:', \"self.Seeked(self.properties[PLAYER_INTERFACE]['read_only']['Position'])\", 'def', '_sendcommand(self,', 'command):', 'if', 'self.socket:', 'self.socket.send(json.dumps({\"command\":', 'command}).encode()', '+', \"b'\\\\n')\", 'elif', 'self.fifo:', 'command', '=', 'command[:]', 'for', 'x,', 'i', 'in', 'enumerate(command):', 'if', 'i', 'is', 'True:', 'command[x]', '=', \"'yes'\", 'if', 'self.mpv', 'else', '1', 'elif', 'i', 'is', 'False:', 'command[x]', '=', \"'no'\", 'if', 'self.mpv', 'else', '0', 'cmd', '=', '\"', '\".join([str(i)', 'for', 'i', 'in', 'command])', '+', \"'\\\\n'\", 'self.fifo.write(cmd)', 'self.fifo.flush()', '@dbus.service.method(dbus_interface=ROOT_INTERFACE)', 'def', 'Raise(self):', 'pass', '@dbus.service.method(dbus_interface=ROOT_INTERFACE)', 'def', 'Quit(self):', 'pass', '@dbus.service.method(dbus_interface=PLAYER_INTERFACE)', 'def', 'Next(self):', 'self._sendcommand([\"quit\"])', '@dbus.service.method(PLAYER_INTERFACE)', 'def', 'Previous(self):', 'self._sendcommand([\"quit\",', '42])', '@dbus.service.method(PLAYER_INTERFACE)', 'def', 'Pause(self):', 'if', 'self.mpv:', 'self._sendcommand([\"set_property\",', '\"pause\",', 'True])', 'else:', 'if', \"self.properties[PLAYER_INTERFACE]['read_only']['PlaybackStatus']\", '!=', \"'Paused':\", \"self._sendcommand(['pause'])\", '@dbus.service.method(PLAYER_INTERFACE)', 'def', 'PlayPause(self):', 'if', 'self.mpv:', 'self._sendcommand([\"cycle\",', '\"pause\"])', 'else:', 'self._sendcommand([\"pause\"])', '@dbus.service.method(PLAYER_INTERFACE)', 'def', 'Stop(self):', 'self._sendcommand([\"quit\",', '43])', '@dbus.service.method(PLAYER_INTERFACE)', 'def', 'Play(self):', 'if', 'self.mpv:', 'self._sendcommand([\"set_property\",', '\"pause\",', 'False])', 'else:', 'if', \"self.properties[PLAYER_INTERFACE]['read_only']['PlaybackStatus']\", '!=', \"'Playing':\", \"self._sendcommand(['pause'])\", '@dbus.service.method(PLAYER_INTERFACE,', \"in_signature='x')\", 'def', 'Seek(self,', 'offset):', 'self._sendcommand([\"seek\",', 'offset', '/', '10**6])', '@dbus.service.method(PLAYER_INTERFACE,', \"in_signature='ox')\", 'def', 'SetPosition(self,', 'track_id,', 'position):', 'if', 'track_id', '==', \"self.properties[PLAYER_INTERFACE]['read_only']['Metadata']['mpris:trackid']:\", 'self._sendcommand([\"seek\",', 'position', '/', '10**6,', \"'absolute'\", 'if', 'self.mpv', 'else', '2])', '@dbus.service.method(PLAYER_INTERFACE,', \"in_signature='s')\", 'def', 'OpenUri(self,', 'uri):', 'pass', '@dbus.service.signal(PLAYER_INTERFACE,', \"signature='x')\", 'def', 'Seeked(self,', 'position):', 'pass', '@dbus.service.method(dbus_interface=PROPERTIES_INTERFACE,', \"in_signature='ss',\", \"out_signature='v')\", 'def', 'Get(self,', 'interface_name,', 'property_name):', 'return', 'self.GetAll(interface_name)[property_name]', '@dbus.service.method(dbus_interface=PROPERTIES_INTERFACE,', \"in_signature='s',\", \"out_signature='a{sv}')\", 'def', 'GetAll(self,', 'interface_name):', 'if', 'interface_name', 'in', 'self.properties:', 't', '=', \"copy.copy(self.properties[interface_name]['read_only'])\", \"t.update(self.properties[interface_name]['read_write'])\", 'return', 't', 'else:', 'raise', 'dbus.exceptions.DBusException(', \"'com.example.UnknownInterface',\", \"'This\", 'object', 'does', 'not', 'implement', 'the', '%s', \"interface'\", '%', 'interface_name)', '@dbus.service.method(dbus_interface=PROPERTIES_INTERFACE,', \"in_signature='ssv')\", 'def', 'Set(self,', 'interface_name,', 'property_name,', 'new_value):', 'if', 'interface_name', 'in', 'self.properties:', 'if', 'property_name', 'in', \"self.properties[interface_name]['read_write']:\", 'if', 'property_name', '==', \"'Volume':\", 'self._sendcommand([\"set_property\",', '\"volume\",', 'new_value', '*', '100])', 'if', 'self.fifo:', \"self._sendcommand(['get_property',\", \"'volume'])\", 'else:', 'raise', 'dbus.exceptions.DBusException(', \"'com.example.UnknownInterface',\", \"'This\", 'object', 'does', 'not', 'implement', 'the', '%s', \"interface'\", '%', 'interface_name)', '@dbus.service.signal(dbus_interface=PROPERTIES_INTERFACE,', \"signature='sa{sv}as')\", 'def', 'PropertiesChanged(self,', 'interface_name,', 'changed_properties,', 'invalidated_properties):', 'pass', 'class', 'MprisConnection(object):', 'def', '__init__(self,', 'connection):', 'super(MprisConnection,', 'self).__init__()', 'self.connection', '=', 'connection', 'def', 'send(self,', 'obj):', 'if', 'self.connection:', 'try:', 'self.connection.send(obj)', 'except', 'BrokenPipeError:', 'self.connection', '=', 'None', \"print('MPRIS\", 'process', 'exited', 'or', \"crashed.')\", 'def', 'main(connection):', 'try:', 'mprisctl', '=', 'Mpris2Controller()', 'except', 'ImportError:', 'print(\"could', 'not', 'load', 'MPRIS', 'interface.', 'missing', 'libraries.\")', 'return', 'try:', 'mprisctl.acquire()', 'except', 'dbus.exceptions.DBusException', 'as', 'e:', \"print('mpris\", 'interface', \"couldn\\\\'t\", 'be', 'initialized.', 'reason:', \"%s'\", '%', 'e.get_dbus_message())', 'return', 'mprisctl.run(connection)', 'mprisctl.release()']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/pafy.py",
        "vector": "['import', 'json', 'import', 'os,', 'glob', 'import', 'random', 'import', 're', 'from', 'urllib.parse', 'import', 'parse_qs,', 'urlparse', 'import', 'requests', 'import', 'yt_dlp', 'from', 'youtubesearchpython', 'import', 'VideosSearch,', 'ChannelsSearch,', 'PlaylistsSearch,', 'Suggestions,', 'Playlist,', 'playlist_from_channel_id,', 'Comments,', 'Video,', 'Channel,', 'ChannelSearch', 'class', 'MyLogger:', 'def', '__init__(self,', 'print_info=False):', 'self.print_info', '=', 'print_info', 'def', 'debug(self,', 'msg):', 'if', \"msg.startswith('[debug]\", \"'):\", 'pass', 'else:', 'self.info(msg)', 'def', 'info(self,', 'msg):', 'if', 'self.print_info:', 'print(msg)', 'def', 'warning(self,', 'msg):', 'pass', 'def', 'error(self,', 'msg):', 'print(msg)', 'def', 'get_video_streams(ytid):', 'with', \"yt_dlp.YoutubeDL({'logger':MyLogger()})\", 'as', 'ydl:', 'info_dict', '=', 'ydl.extract_info(ytid,', 'download=False)', 'return', '[i', 'for', 'i', 'in', \"info_dict['formats']\", 'if', \"i.get('format_note')\", '!=', \"'storyboard']\", 'def', 'download_video(ytid,', 'folder,', 'audio_only=False):', 'ytdl_format_options', '=', '{', \"'outtmpl':\", 'os.path.join(folder,', \"'%(title)s-%(id)s.%(ext)s')\", '}', 'if', 'audio_only:', \"ytdl_format_options['format']\", '=', \"'bestaudio/best'\", \"ytdl_format_options['postprocessors']\", '=[{', \"'key':\", \"'FFmpegExtractAudio',\", \"'preferredcodec':\", \"'mp3',\", \"'preferredquality':\", \"'192',\", '}]', 'with', 'yt_dlp.YoutubeDL(ytdl_format_options)', 'as', 'ydl:', \"ydl.download('https://www.youtube.com/watch?v=%s'\", '%', 'ytid)', 'return', 'True', 'def', 'search_videos(query,', 'pages):', 'videosSearch', '=', 'VideosSearch(query,', 'limit=50)', 'wdata', '=', \"videosSearch.result()['result']\", 'for', 'i', 'in', 'range(pages-1):', 'videosSearch.next()', \"wdata.extend(videosSearch.result()['result'])\", 'return', 'wdata', 'def', 'channel_search(query):', 'channelsSearch', '=', 'ChannelsSearch(query,', 'limit=50,', \"region='US')\", 'return', \"channelsSearch.result()['result']\", 'def', 'playlist_search(query):', 'playlistsSearch', '=', 'PlaylistsSearch(query,', 'limit=50)', 'return', \"playlistsSearch.result()['result']\", 'def', 'get_playlist(playlist_id):', 'playlist', '=', \"Playlist('https://www.youtube.com/playlist?list=%s'\", '%', 'playlist_id)', 'while', 'playlist.hasMoreVideos:', 'playlist.getNextVideos()', 'return', 'playlist', 'def', 'get_video_title_suggestions(query):', 'suggestions', '=', 'Suggestions(language', '=', \"'en',\", 'region', '=', \"'US')\", 'related_searches', '=', \"suggestions.get(query)['result']\", 'return', 'related_searches[random.randint(0,len(related_searches))]', 'def', 'channel_id_from_name(query):', 'channel_info', '=', 'channel_search(query)[0]', 'channel_id', '=', \"channel_info['id']\", 'channel_name', '=', \"channel_info['title']\", 'return', '(channel_id,', 'channel_name)', 'def', 'all_videos_from_channel(channel_id):', 'playlist', '=', 'Playlist(playlist_from_channel_id(channel_id))', 'return', 'playlist.videos', 'def', 'search_videos_from_channel(channel_id,', 'query):', 'search', '=', 'ChannelSearch(query', ',', 'channel_id)', 'return', 'search.result()', 'def', 'get_comments(video_id):', 'comments', '=', 'Comments.get(video_id)', 'return', \"comments['result']\", 'def', 'get_video_info(video_id):', 'try:', 'videoInfo', '=', 'Video.getInfo(video_id)', 'response', '=', 'return_dislikes(video_id)', \"videoInfo['likes']\", '=', \"response['likes']\", \"videoInfo['dislikes']\", '=', \"response['dislikes']\", \"videoInfo['averageRating']\", '=', \"response['rating']\", 'return', 'videoInfo', 'except:', 'raise', 'Exception(\"Can\\'t', 'get', 'video', 'info.', 'Video', 'is', 'either', 'private', 'or', 'unavailable', 'in', 'your', 'country.\")', 'def', 'return_dislikes(video_id):', 'return', \"json.loads(requests.get('https://returnyoutubedislikeapi.com/votes?videoId='\", '+', 'video_id).text)', 'def', 'extract_video_id(url:', 'str)', '->', 'str:', 'idregx', '=', \"re.compile(r'[\\\\w-]{11}$')\", 'url', '=', 'str(url).strip()', 'if', 'idregx.match(url):', 'return', 'url', 'if', \"'://'\", 'not', 'in', 'url:', 'url', '=', \"'//'\", '+', 'url', 'parsedurl', '=', 'urlparse(url)', 'if', 'parsedurl.netloc', 'in', \"('youtube.com',\", \"'www.youtube.com',\", \"'m.youtube.com',\", \"'gaming.youtube.com'):\", 'query', '=', 'parse_qs(parsedurl.query)', 'if', \"'v'\", 'in', 'query', 'and', \"idregx.match(query['v'][0]):\", 'return', \"query['v'][0]\", 'elif', 'parsedurl.netloc', 'in', \"('youtu.be',\", \"'www.youtu.be'):\", 'vidid', '=', \"parsedurl.path.split('/')[-1]\", 'if', 'parsedurl.path', 'else', \"''\", 'if', 'idregx.match(vidid):', 'return', 'vidid', 'err', '=', '\"Need', '11', 'character', 'video', 'id', 'or', 'the', 'URL', 'of', 'the', 'video.', 'Got', '%s\"', 'raise', 'ValueError(err', '%', 'url)', 'def', 'all_playlists_from_channel(channel_id):', 'channel', '=', 'Channel(channel_id)', 'playlists', '=', \"channel.result['playlists']\", 'while', 'channel.has_more_playlists():', 'channel.next()', 'playlists.extend(channel.result[\"playlists\"])', 'return', 'playlists', 'def', 'get_subtitles(ytid,', 'output_dir):', 'if', \"output_dir.endswith('/'):\", 'output_dir', '=', 'output_dir[:-1]', 'outtmpl', '=', \"f'{output_dir}/subtitles/{ytid}'\", 'existing_subtitles', '=', \"glob.glob(os.path.join(outtmpl+'*.vtt'))\", 'if', 'existing_subtitles:', 'return', 'existing_subtitles[0]', 'url', '=', \"f'https://www.youtube.com/watch?v={ytid}'\", 'ydl_opts', '=', '{', \"'skip_download':\", 'True,', \"'writesubtitles':\", 'True,', \"'writeautomaticsub':\", 'True,', \"'subtitlesformat':\", \"'vtt',\", \"'outtmpl':\", 'outtmpl,', \"'logger':\", 'MyLogger(print_info=False),', '}', 'with', 'yt_dlp.YoutubeDL(ydl_opts)', 'as', 'ydl:', 'info_dict', '=', 'ydl.extract_info(url,', 'download=False)', 'subtitles', '=', \"info_dict.get('subtitles',\", '{})', 'available_formats', '=', 'list(subtitles.keys())', 'if', 'available_formats:', 'lang', '=', 'available_formats[0]', 'else:', 'lang', '=', \"'en'\", \"ydl.params['subtitleslangs']\", '=', '[lang]', 'ydl.add_default_info_extractors()', 'ydl', '=', 'yt_dlp.YoutubeDL(ydl_opts)', 'ydl.download([url])', 'path', '=', \"f'{outtmpl}.{lang}.vtt'\", 'return', 'path', 'if', 'os.path.isfile(path)', 'else', 'None']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/paths.py",
        "vector": "['import', 'os', 'mswin', '=', 'os.name', '==', '\"nt\"', 'def', 'get_default_ddir():', 'user_home', '=', 'os.path.expanduser(\"~\")', 'join,', 'exists', '=', 'os.path.join,', 'os.path.exists', 'if', 'mswin:', 'return', 'join(user_home,', '\"Downloads\",', '\"yewtube\")', 'USER_DIRS', '=', 'join(user_home,', '\".config\",', '\"user-dirs.dirs\")', 'DOWNLOAD_HOME', '=', 'join(user_home,', '\"Downloads\")', 'if', \"'XDG_DOWNLOAD_DIR'\", 'in', 'os.environ:', 'ddir', '=', \"os.environ['XDG_DOWNLOAD_DIR']\", 'elif', 'exists(USER_DIRS):', 'lines', '=', 'open(USER_DIRS).readlines()', 'defn', '=', '[x', 'for', 'x', 'in', 'lines', 'if', 'x.startswith(\"XDG_DOWNLOAD_DIR\")]', 'if', 'len(defn)', '==', '1:', 'ddir', '=', 'defn[0].split(\"=\")[1].replace(\\'\"\\',', \"'')\", 'ddir', '=', 'ddir.replace(\"$HOME\",', 'user_home).strip()', 'else:', 'ddir', '=', 'DOWNLOAD_HOME', 'if', 'exists(DOWNLOAD_HOME)', 'else', 'user_home', 'else:', 'ddir', '=', 'DOWNLOAD_HOME', 'if', 'exists(DOWNLOAD_HOME)', 'else', 'user_home', 'ddir', '=', 'ddir', 'return', 'os.path.join(ddir,', '\"mps\")', 'def', 'get_config_dir():', 'if', 'mswin:', 'confdir', '=', 'os.environ[\"APPDATA\"]', 'elif', \"'XDG_CONFIG_HOME'\", 'in', 'os.environ:', 'confdir', '=', \"os.environ['XDG_CONFIG_HOME']\", 'else:', 'confdir', '=', 'os.path.join(os.path.expanduser(\"~\"),', \"'.config')\", 'mps_confdir', '=', 'os.path.join(confdir,', '\"mps-youtube\")', 'os.makedirs(mps_confdir,', 'exist_ok=True)', 'return', 'mps_confdir']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/player.py",
        "vector": "['import', 'logging', 'import', 'math', 'import', 'os', 'import', 'random', 'import', 'shlex', 'import', 'socket', 'import', 'subprocess', 'import', 'sys', 'import', 'time', 'from', 'abc', 'import', 'ABCMeta,', 'abstractmethod', 'from', 'urllib.error', 'import', 'HTTPError,', 'URLError', 'from', '.', 'import', 'c,', 'config,', 'content,', 'g,', 'history,', 'screen,', 'streams,', 'util', 'from', '.commands', 'import', 'lastfm', 'from', '.util', 'import', 'not_utf8_environment', 'from', '.', 'import', 'pafy', 'mswin', '=', 'os.name', '==', '\"nt\"', 'class', 'BasePlayer:', '_playbackStatus', '=', '\"Paused\"', '_last_displayed_line', '=', 'None', '@property', 'def', 'PlaybackStatus(self):', 'return', 'self._playbackStatus', '@PlaybackStatus.setter', 'def', 'PlaybackStatus(self,', 'value):', 'self._playbackStatus', '=', 'value', 'if', 'value', '==', \"'Playing':\", 'paused', '=', 'False', 'else:', 'paused', '=', 'True', \"g.mprisctl.send(('pause',\", 'paused))', 'def', 'play(self,', 'songlist,', 'shuffle=False,', 'repeat=False,', 'override=False):', 'if', 'config.ALWAYS_REPEAT.get:', 'repeat', '=', 'True', 'self.songlist', '=', 'songlist', 'self.shuffle', '=', 'shuffle', 'self.repeat', '=', 'repeat', 'self.override', '=', 'override', 'if', 'shuffle:', 'random.shuffle(self.songlist)', 'self.song_no', '=', '0', 'while', '0', '<=', 'self.song_no', '<=', 'len(self.songlist)-1:', 'self.song', '=', 'self.songlist[self.song_no]', 'g.content', '=', 'self._playback_progress(self.song_no,', 'self.songlist,', 'repeat=repeat)', 'if', 'not', 'g.command_line:', 'screen.update(fill_blank=False)', 'hasnext', '=', 'len(self.songlist)', '>', 'self.song_no', '+', '1', 'if', 'hasnext:', 'streams.preload(self.songlist[self.song_no', '+', '1],', 'override=self.override)', 'if', 'config.SET_TITLE.get:', 'util.set_window_title(self.song.title', '+', '\"', '-', 'yewtube\")', 'self.softrepeat', '=', 'repeat', 'and', 'len(self.songlist)', '==', '1', 'if', 'g.scrobble:', 'lastfm.set_now_playing(g.artist,', 'g.scrobble_queue[self.song_no])', 'try:', 'if', 'config.SHOW_VIDEO', 'and', 'config.SHOW_SUBTITLES:', 'self.subtitle_path', '=', 'pafy.get_subtitles(self.song.ytid,', 'config.DDIR.get)', 'self.video,', 'self.stream,', 'self.override', '=', 'stream_details(', 'self.song,', 'override=self.override,', 'softrepeat=self.softrepeat)', 'self._playsong()', 'except', 'KeyboardInterrupt:', 'logging.info(\"Keyboard', 'Interrupt\")', 'util.xprint(c.w', '+', '\"Stopping...', '\")', 'screen.reset_terminal()', 'g.message', '=', 'c.y', '+', '\"Playback', 'halted\"', '+', 'c.w', 'raise', 'KeyboardInterrupt', 'break', 'except', '(TypeError,', 'Exception)', 'as', 'e:', 'import', 'traceback', 'traceback.print_exception(type(e),', 'e,', 'e.__traceback__)', 'self.song_no', '+=', '1', 'pass', 'if', 'config.SET_TITLE.get:', 'util.set_window_title(\"yewtube\")', 'if', 'self.song_no', '==', '-1:', 'self.song_no', '=', 'len(songlist)', '-', '1', 'if', 'repeat', 'else', '0', 'elif', 'self.song_no', '==', 'len(self.songlist)', 'and', 'repeat:', 'self.song_no', '=', '0', 'def', 'next(self):', 'pass', 'def', 'previous(self):', 'pass', 'def', 'stop(self):', 'pass', 'def', 'seek(self):', 'pass', 'def', '_playsong(self,', 'failcount=0,', 'softrepeat=False):', 'if', 'not', 'config.PLAYER.get', 'or', 'not', 'util.has_exefile(config.PLAYER.get):', 'g.message', '=', '\"Player', 'not', 'configured!', 'Enter', '%sset', 'player', '<player_app>', '\"\\\\', '\"%s', 'to', 'set', 'a', 'player\"', '%', '(c.g,', 'c.w)', 'return', 'if', 'config.NOTIFIER.get:', 'subprocess.Popen(shlex.split(config.NOTIFIER.get)', '+', '[self.song.title])', 'size', '=', 'streams.get_size(self.song.ytid,', \"self.stream['url'])\", 'songdata', '=', '(self.song.ytid,', \"''\", 'if', \"self.stream.get('ext')\", 'is', 'None', 'else', \"self.stream.get('ext')\", '+', '\"', '\"', '+', \"self.stream['quality'],\", 'int(size', '/', '(1024', '**', '2)))', 'self.songdata', '=', '\"%s;', '%s;', '%s', 'Mb\"', '%', 'songdata', 'screen.writestatus(self.songdata)', 'self._launch_player()', 'if', 'config.HISTORY.get:', 'history.add(self.song)', 'def', '_launch_player(self):', 'pass', 'def', 'send_metadata_mpris(self):', 'metadata', '=', 'util._get_metadata(self.song.title)', 'if', 'config.LOOKUP_METADATA.get', 'else', 'None', 'if', 'metadata', 'is', 'None:', 'arturl', '=', '\"https://i.ytimg.com/vi/%s/default.jpg\"', '%', 'self.song.ytid', 'metadata', '=', '(self.song.ytid,', 'self.song.title,', 'self.song.length,', 'arturl,', \"[''],\", \"'')\", 'else:', 'arturl', '=', \"metadata['album_art_url']\", 'metadata', '=', '(self.song.ytid,', \"metadata['track_title'],\", 'self.song.length,', 'arturl,', \"[metadata['artist']],\", \"metadata['album'])\", 'if', 'g.mprisctl:', \"g.mprisctl.send(('metadata',\", 'metadata))', 'def', '_playback_progress(self,', 'idx,', 'allsongs,', 'repeat=False):', 'cw', '=', 'util.getxy().width', 'out', '=', '\"', '%s%-XXs%s%s\\\\n\".replace(\"XX\",', 'str(cw', '-', '9))', 'out', '=', 'out', '%', '(c.ul,', '\"Title\",', '\"Time\",', 'c.w)', 'multi', '=', 'len(allsongs)', '>', '1', 'for', 'n,', 'song', 'in', 'enumerate(allsongs):', 'length_orig', '=', 'util.fmt_time(song.length)', 'length', '=', '\"', '\"', '*', '(8', '-', 'len(length_orig))', '+', 'length_orig', 'i', '=', 'util.uea_pad(cw', '-', '14,', 'song.title),', 'length,', 'length_orig', 'fmt', '=', '(c.w,', '\"', '\",', 'c.b,', 'i[0],', 'c.w,', 'c.y,', 'i[1],', 'c.w)', 'if', 'n', '==', 'idx:', 'fmt', '=', '(c.y,', '\">', '\",', 'c.p,', 'i[0],', 'c.w,', 'c.p,', 'i[1],', 'c.w)', 'cur', '=', 'i', 'out', '+=', '\"%s%s%s%s%s', '%s%s%s\\\\n\"', '%', 'fmt', 'out', '+=', '\"\\\\n\"', '*', '(3', '-', 'len(allsongs))', 'pos', '=', '8', '*', '\"', '\",', 'c.y,', 'idx', '+', '1,', 'c.w,', 'c.y,', 'len(allsongs),', 'c.w', 'playing', '=', '\"{}{}{}{}', 'of', '{}{}{}\\\\n\\\\n\".format(*pos)', 'if', 'multi', 'else', '\"\\\\n\\\\n\"', 'keys', '=', 'self._help(short=(not', 'multi', 'and', 'not', 'repeat))', 'out', '=', 'out', 'if', 'multi', 'else', 'content.generate_songlist_display(song=allsongs[0])', 'if', 'config.SHOW_PLAYER_KEYS.get', 'and', 'keys', 'is', 'not', 'None:', 'out', '+=', '\"\\\\n\"', '+', 'keys', 'else:', 'playing', '=', '\"{}{}{}{}', 'of', '{}{}{}\\\\n\".format(*pos)', 'if', 'multi', 'else', '\"\\\\n\"', 'out', '+=', '\"\\\\n\"', '+', '\"', '\"', '*', '(cw', '-', '19)', 'if', 'multi', 'else', '\"\"', 'fmt', '=', 'playing,', 'c.r,', 'cur[0].strip()[:cw', '-', '19],', 'c.w,', 'c.w,', 'cur[2],', 'c.w', 'out', '+=', '\"%s', '%s%s%s', '%s[%s]%s\"', '%', 'fmt', 'out', '+=', '\"', 'REPEAT', 'MODE\"', 'if', 'repeat', 'else', '\"\"', 'return', 'out', 'def', 'make_status_line(self,', 'elapsed_s,', 'prefix,', 'songlength=0,', 'volume=None):', 'self._line', '=', 'self._make_status_line(elapsed_s,', 'prefix,', 'songlength,', 'volume=volume)', 'if', 'self._line', '!=', 'self._last_displayed_line:', 'screen.writestatus(self._line)', 'self._last_displayed_line', '=', 'self._line', 'def', '_make_status_line(self,', 'elapsed_s,', 'prefix,', 'songlength=0,', 'volume=None):', 'display_s', '=', 'elapsed_s', 'display_h', '=', 'display_m', '=', '0', 'if', 'elapsed_s', '>=', '60:', 'display_m', '=', 'display_s', '//', '60', 'display_s', '%=', '60', 'if', 'display_m', '>=', '60:', 'display_h', '=', 'display_m', '//', '60', 'display_m', '%=', '60', 'pct', '=', '(float(elapsed_s)', '/', 'songlength', '*', '100)', 'if', 'songlength', 'else', '0', 'status_line', '=', '\"%02i:%02i:%02i', '%s\"', '%', '(', 'display_h,', 'display_m,', 'display_s,', '(\"[%.0f%%]\"', '%', 'pct).ljust(6)', ')', 'if', 'volume:', 'vol_suffix', '=', '\"', 'vol:', '%d%%\"', '%', 'volume', 'else:', 'vol_suffix', '=', '\"\"', 'cw', '=', 'util.getxy().width', 'prog_bar_size', '=', 'cw', '-', 'len(prefix)', '-', 'len(status_line)', '-', 'len(vol_suffix)', '-', '7', 'progress', '=', 'int(math.ceil(pct', '/', '100', '*', 'prog_bar_size))', 'status_line', '+=', '\"', '[%s]\"', '%', '(\"=\"', '*', '(progress', '-', '1)', '+', '\">\").ljust(prog_bar_size,', \"'\", \"')\", 'return', 'prefix', '+', 'status_line', '+', 'vol_suffix', 'class', 'CmdPlayer(BasePlayer):', 'def', 'next(self):', 'if', 'g.scrobble:', 'lastfm.scrobble_track(g.artist,', 'g.album,', 'g.scrobble_queue[self.song_no])', 'self.terminate_process()', 'self.song_no', '+=', '1', 'def', 'previous(self):', 'if', 'g.scrobble:', 'lastfm.scrobble_track(g.artist,', 'g.album,', 'g.scrobble_queue[self.song_no])', 'self.terminate_process()', 'self.song_no', '-=', '1', 'def', 'stop(self):', 'self.terminate_process()', 'raise', 'KeyboardInterrupt', 'def', 'terminate_process(self):', 'self.p.terminate()', 'def', '_generate_real_playerargs(self):', 'pass', 'def', 'clean_up(self):', 'pass', 'def', 'launch_player(self,', 'cmd):', 'pass', 'def', '_help(self,', 'short=True):', 'pass', 'def', '_launch_player(self):', 'cmd', '=', 'self._generate_real_playerargs()', 'util.dbg(\"playing', '%s\",', 'self.song.title)', 'util.dbg(\"calling', '%s\",', '\"', '\".join(cmd))', 'cmd', '=', '[util.xenc(i)', 'for', 'i', 'in', 'cmd]', 'self.send_metadata_mpris()', 'try:', 'self.launch_player(cmd)', 'except', 'OSError:', 'g.message', '=', \"util.F('no\", \"player')\", '%', 'config.PLAYER.get', 'return', 'None', 'finally:', 'if', 'g.mprisctl:', \"g.mprisctl.send(('stop',\", 'True))', 'if', 'self.p', 'and', 'self.p.poll()', 'is', 'None:', 'self.p.terminate()', 'self.clean_up()', 'def', 'stream_details(song,', 'failcount=0,', 'override=False,', 'softrepeat=False):', 'while', 'song.ytid', 'in', 'g.preloading:', 'screen.writestatus(\"fetching', 'item..\")', 'time.sleep(0.1)', 'try:', 'streams.get(song,', 'force=failcount,', 'callback=screen.writestatus)', 'except', '(IOError,', 'URLError,', 'HTTPError,', 'socket.timeout)', 'as', 'e:', 'util.dbg(\"--ioerror', 'in', 'stream_details', 'call', 'to', 'streams.get', '%s\",', 'str(e))', 'if', '\"Youtube', 'says\"', 'in', 'str(e):', 'g.message', '=', \"util.F('cant\", 'get', \"track')\", '%', '(song.title', '+', '\"', '\"', '+', 'str(e))', 'return', 'elif', 'failcount', '<', 'g.max_retries:', 'util.dbg(\"--ioerror', '-', 'trying', 'next', 'stream\")', 'failcount', '+=', '1', 'return', 'stream_details(song,', 'failcount=failcount,', 'override=override,', 'softrepeat=softrepeat)', 'elif', '\"pafy\"', 'in', 'str(e):', 'g.message', '=', 'str(e)', '+', '\"', '-', '\"', '+', 'song.ytid', 'return', 'except', 'ValueError:', 'g.message', '=', \"util.F('track\", \"unresolved')\", 'util.dbg(\"----valueerror', 'in', 'stream_details', 'call', 'to', 'streams.get\")', 'return', 'if', 'failcount', '==', 'g.max_retries:', 'raise', 'TypeError()', 'try:', 'video', '=', '((config.SHOW_VIDEO.get', 'and', 'override', '!=', '\"audio\")', 'or', '(override', 'in', '(\"fullscreen\",', '\"window\",', '\"forcevid\")))', 'm4a', '=', '\"mplayer\"', 'not', 'in', 'config.PLAYER.get', 'cached', '=', 'g.streams[song.ytid]', 'stream', '=', 'streams.select(cached,', 'q=failcount,', 'audio=(not', 'video),', 'm4a_ok=m4a)', 'if', '(not', 'stream', 'or', 'failcount)', 'and', 'not', 'video:', 'util.dbg(c.r', '+', '\"no', 'audio', 'or', 'mplayer', 'm4a,', 'using', 'video', 'stream\"', '+', 'c.w)', 'override', '=', '\"a-v\"', 'video', '=', 'True', 'stream', '=', 'streams.select(cached,', 'q=failcount,', 'audio=False,', 'maxres=1600)', 'if', 'not', 'stream:', 'raise', 'IOError(\"No', 'streams', 'available\")', 'return', '(video,', 'stream,', 'override)', 'except', '(HTTPError)', 'as', 'e:', 'util.dbg(\"----htterror', 'in', 'stream_details', 'call', 'to', 'gen_real_args', '%s\",', 'str(e))', 'if', 'failcount', '<', 'g.max_retries:', 'failcount', '+=', '1', 'return', 'stream_details(song,', 'failcount=failcount,', 'override=override,', 'softrepeat=softrepeat)', 'else:', 'g.message', '=', 'str(e)', 'return', 'except', 'IOError', 'as', 'e:', 'errmsg', '=', 'e.message', 'if', 'hasattr(e,', '\"message\")', 'else', 'str(e)', 'g.message', '=', 'c.r', '+', 'str(errmsg)', '+', 'c.w', 'return']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/players/GenericPlayer.py",
        "vector": "['import', 'os', 'import', 'subprocess', 'from', '..', 'import', 'config', 'from', '..player', 'import', 'CmdPlayer', 'class', 'GenericPlayer(CmdPlayer):', 'def', '__init__(self,', 'player):', 'self.player', '=', 'player', 'def', '_generate_real_playerargs(self):', 'args', '=', 'config.PLAYERARGS.get.strip().split()', 'return', '[self.player]', '+', 'args', '+', \"[self.stream['url']]\", 'def', 'clean_up(self):', 'pass', 'def', 'launch_player(self,', 'cmd):', 'with', 'open(os.devnull,', '\"w\")', 'as', 'devnull:', 'self.p', '=', 'subprocess.Popen(cmd,', 'shell=False,', 'stderr=devnull)', 'self.p.wait()', 'self.next()', 'def', '_help(self,', 'short=True):', 'pass']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/players/__init__.py",
        "vector": "[]"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/players/mplayer.py",
        "vector": "['import', 'os', 'import', 're', 'import', 'subprocess', 'import', 'sys', 'import', 'tempfile', 'import', 'typing', 'as', 'T', 'from', '..', 'import', 'c,', 'config,', 'g,', 'paths,', 'screen,', 'util', 'from', '..player', 'import', 'CmdPlayer', 'from', '..util', 'import', 'not_utf8_environment', 'mswin', '=', 'os.name', '==', '\"nt\"', 'class', 'mplayer(CmdPlayer):', 'def', '__init__(self,', 'player):', 'self.player', '=', 'player', 'self.mplayer_version', '=', '_get_mplayer_version(player)', 'def', '_generate_real_playerargs(self):', 'if', '\"uiressl=yes\"', 'in', \"self.stream['url']:\", 'ver', '=', 'self.mplayer_version', 'if', 'not', '(ver', '>', '(1,', '1)', 'if', 'isinstance(ver,', 'tuple)', 'else', 'ver', '>=', '37294):', 'raise', 'IOError(\"%s', ':', 'Sorry', 'mplayer', \"doesn't\", 'support', 'this', 'stream.', '\"', '\"Use', 'mpv', 'or', 'update', 'mplayer', 'to', 'a', 'newer', 'version\"', '%', 'self.song.title)', 'args', '=', 'config.PLAYERARGS.get.strip().split()', 'pd', '=', \"g.playerargs_defaults['mplayer']\", 'args.extend((pd[\"title\"],', '\\'\"{0}\"\\'.format(self.song.title)))', 'if', \"pd['geo']\", 'not', 'in', 'args:', 'geometry', '=', 'config.WINDOW_SIZE.get', 'or', '\"\"', 'if', 'config.WINDOW_POS.get:', 'wp', '=', 'config.WINDOW_POS.get', 'xx', '=', '\"+1\"', 'if', '\"left\"', 'in', 'wp', 'else', '\"-1\"', 'yy', '=', '\"+1\"', 'if', '\"top\"', 'in', 'wp', 'else', '\"-1\"', 'geometry', '+=', 'xx', '+', 'yy', 'if', 'geometry:', \"args.extend((pd['geo'],\", 'geometry))', 'if', 'self.override', '==', '\"a-v\":', 'util.list_update(pd[\"novid\"],', 'args)', 'elif', '((config.FULLSCREEN.get', 'and', 'self.override', '!=', '\"window\")', 'or', 'self.override', '==', '\"fullscreen\"):', 'util.list_update(pd[\"fs\"],', 'args)', 'if', 'not', 'self.video', 'and', \"self.stream['ext']\", '==', '\"m4a\":', 'util.dbg(\"%susing', 'ignidx', 'flag%s\")', 'util.list_update(pd[\"ignidx\"],', 'args)', 'if', 'g.volume:', 'util.list_update(\"-volume\",', 'args)', 'util.list_update(str(g.volume),', 'args)', 'util.list_update(\"-really-quiet\",', 'args,', 'remove=True)', 'util.list_update(\"-noquiet\",', 'args)', 'util.list_update(\"-prefer-ipv4\",', 'args)', 'util.list_update(\"-cache\",', 'args)', 'util.list_update(\"4096\",', 'args)', 'return', '[self.player]', '+', 'args', '+', \"[self.stream['url']]\", 'def', 'clean_up(self):', 'if', 'self.fifopath:', 'os.unlink(self.fifopath)', 'def', 'launch_player(self,', 'cmd):', 'self.input_file', '=', '_get_input_file()', 'self.sockpath', '=', 'None', 'self.fifopath', '=', 'None', \"cmd.append('-input')\", 'if', 'mswin:', 'self.input_file', '=', \"self.input_file[2:].replace('\\\\\\\\',\", \"'/')\", \"cmd.append('conf='\", '+', 'self.input_file)', 'if', 'g.mprisctl:', 'self.fifopath', '=', \"tempfile.mktemp('.fifo',\", \"'mpsyt-mplayer')\", 'os.mkfifo(self.fifopath)', \"cmd.extend(['-input',\", \"'file='\", '+', 'self.fifopath])', \"g.mprisctl.send(('mplayer-fifo',\", 'self.fifopath))', 'self.p', '=', 'subprocess.Popen(cmd,', 'shell=False,', 'stdout=subprocess.PIPE,', 'stderr=subprocess.STDOUT,', 'bufsize=0)', 'self._player_status(self.songdata', '+', '\";', '\",', 'self.song.length)', 'returncode', '=', 'self.p.wait()', 'print(returncode)', 'if', 'returncode', '==', '42:', 'self.previous()', 'elif', 'returncode', '==', '43:', 'self.stop()', 'else:', 'self.next()', 'def', '_player_status(self,', 'prefix,', 'songlength=0):', 're_player', '=', 're.compile(r\"A:\\\\s*(?P<elapsed_s>\\\\d+)\\\\.\\\\d\\\\s*\")', 're_volume', '=', 're.compile(r\"Volume:\\\\s*(?P<volume>\\\\d+)\\\\s*%\")', 'last_displayed_line', '=', 'None', 'buff', '=', \"''\", 'volume_level', '=', 'None', 'last_pos', '=', 'None', 'elapsed_s', '=', '0', 'while', 'self.p.poll()', 'is', 'None:', 'stdstream', '=', 'self.p.stdout', 'char', '=', 'stdstream.read(1).decode(\"utf-8\",', 'errors=\"ignore\")', 'if', 'char', 'in', \"'\\\\r\\\\n':\", 'mv', '=', 're_volume.search(buff)', 'if', 'mv:', 'volume_level', '=', 'int(mv.group(\"volume\"))', 'match_object', '=', 're_player.match(buff)', 'if', 'match_object:', 'try:', 'h,', 'm,', 's', '=', 'map(int,', 'match_object.groups())', 'elapsed_s', '=', 'h', '*', '3600', '+', 'm', '*', '60', '+', 's', 'except', 'ValueError:', 'try:', 'elapsed_s', '=', \"int(match_object.group('elapsed_s')\", 'or', \"'0')\", 'except', 'ValueError:', 'continue', 'if', 'volume_level', 'and', 'volume_level', '!=', 'g.volume:', 'g.volume', '=', 'volume_level', 'self.make_status_line(elapsed_s,', 'prefix,', 'songlength,', 'volume=volume_level)', 'if', \"buff.startswith('ANS_volume='):\", 'volume_level', '=', \"round(float(buff.split('=')[1]))\", 'paused', '=', '(\"PAUSE\"', 'in', 'buff)', 'or', '(\"Paused\"', 'in', 'buff)', 'if', '(elapsed_s', '!=', 'last_pos', 'or', 'paused)', 'and', 'g.mprisctl:', 'last_pos', '=', 'elapsed_s', \"g.mprisctl.send(('pause',\", 'paused))', \"g.mprisctl.send(('volume',\", 'volume_level))', \"g.mprisctl.send(('time-pos',\", 'elapsed_s))', 'buff', '=', \"''\", 'else:', 'buff', '+=', 'char', 'def', '_help(self,', 'short=True):', 'volume', '=', '\"[{0}9{1}]', 'volume', '[{0}0{1}]', '[{0}CTRL-C{1}]', 'return\"', 'seek', '=', '\"[{0}\\\\u2190{1}]', 'seek', '[{0}\\\\u2192{1}]\"', 'pause', '=', '\"[{0}\\\\u2193{1}]', 'SEEK', '[{0}\\\\u2191{1}]', '[{0}space{1}]', 'pause\"', 'if', 'not_utf8_environment:', 'seek', '=', '\"[{0}<-{1}]', 'seek', '[{0}->{1}]\"', 'pause', '=', '\"[{0}DN{1}]', 'SEEK', '[{0}UP{1}]', '[{0}space{1}]', 'pause\"', 'single', '=', '\"[{0}q{1}]', 'next\"', 'next_prev', '=', '\"[{0}>{1}]', 'next/prev', '[{0}<{1}]\"', 'ret', '=', 'single', 'if', 'short', 'and', 'config.AUTOPLAY.get', 'else', '\"\"', 'ret', '=', 'next_prev', 'if', 'not', 'short', 'else', 'ret', 'fmt', '=', '\"', '%-20s', '%-20s\"', 'lines', '=', 'fmt', '%', '(seek,', 'volume)', '+', '\"\\\\n\"', '+', 'fmt', '%', '(pause,', 'ret)', 'return', 'lines.format(c.g,', 'c.w)', 'def', '_get_input_file():', 'confpath', '=', 'conf', '=', \"''\", 'confpath', '=', 'os.path.join(paths.get_config_dir(),', '\"mplayer-input.conf\")', 'if', 'os.path.isfile(confpath):', 'util.dbg(\"using', '%s', 'for', 'input', 'key', 'file\",', 'confpath)', 'with', 'open(confpath)', 'as', 'conffile:', 'conf', '=', 'conffile.read()', '+', \"'\\\\n'\", 'conf', '=', 'conf.replace(\"quit\",', '\"quit', '43\")', 'conf', '=', 'conf.replace(\"playlist_prev\",', '\"quit', '42\")', 'conf', '=', 'conf.replace(\"pt_step', '-1\",', '\"quit', '42\")', 'conf', '=', 'conf.replace(\"playlist_next\",', '\"quit\")', 'conf', '=', 'conf.replace(\"pt_step', '1\",', '\"quit\")', 'standard_cmds', '=', \"['q\", 'quit', \"43\\\\n',\", \"'>\", \"quit\\\\n',\", \"'<\", 'quit', \"42\\\\n',\", \"'NEXT\", \"quit\\\\n',\", \"'PREV\", 'quit', \"42\\\\n',\", \"'ENTER\", \"quit\\\\n']\", 'bound_keys', '=', '[i.split()[0]', 'for', 'i', 'in', 'conf.splitlines()', 'if', 'i.split()]', 'for', 'i', 'in', 'standard_cmds:', 'key', '=', 'i.split()[0]', 'if', 'key', 'not', 'in', 'bound_keys:', 'conf', '+=', 'i', 'with', \"tempfile.NamedTemporaryFile('w',\", \"prefix='mpsyt-input',\", 'delete=False)', 'as', 'tmpfile:', 'tmpfile.write(conf)', 'return', 'tmpfile.name', 'def', '_get_mplayer_version(exename:', 'str)', '->', 'T.Union[int,', 'T.Tuple[int,', '...]]:', 'try:', 'o', '=', 'subprocess.check_output([exename]).decode()', 'except', 'FileNotFoundError:', 'raise', 'm', '=', 're.search(r\"MPlayer', '\\\\S*?SVN[\\\\s-]r([0-9]+)\",', 'o,', 're.MULTILINE', '|', 're.IGNORECASE)', 'ver', '=', '0', 'if', 'm:', 'ver', '=', 'int(m.groups()[0])', 'else:', 'm', '=', \"re.search('MPlayer\", \"([0-9])+.([0-9]+)',\", 'o,', 're.MULTILINE)', 'if', 'm:', 'ver', '=', 'tuple(int(i)', 'for', 'i', 'in', 'm.groups())', 'else:', 'util.dbg(\"%sFailed', 'to', 'detect', 'mplayer', 'version%s\",', 'c.r,', 'c.w)', 'return', 'ver']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/players/mpv.py",
        "vector": "['import', 'json', 'import', 'os', 'import', 're', 'import', 'socket', 'import', 'subprocess', 'import', 'sys', 'import', 'tempfile', 'import', 'time', 'from', '..', 'import', 'c,', 'config,', 'g,', 'paths,', 'screen,', 'util', 'from', '..player', 'import', 'CmdPlayer', 'from', '..util', 'import', 'not_utf8_environment', 'mswin', '=', 'os.name', '==', '\"nt\"', 'class', 'mpv(CmdPlayer):', 'def', '__init__(self,', 'player):', 'self.player', '=', 'player', 'self.mpv_version', '=', '_get_mpv_version(player)', 'self.mpv_options', '=', 'subprocess.check_output(', '[player,', '\"--list-options\"]).decode()', 'self.mpv_usesock', '=', '\"\"', 'if', 'not', 'mswin:', 'if', '\"--input-unix-socket\"', 'in', 'self.mpv_options:', 'self.mpv_usesock', '=', '\"--input-unix-socket\"', 'util.dbg(c.g', '+', '\"mpv', 'supports', '--input-unix-socket\"', '+', 'c.w)', 'elif', '\"--input-ipc-server\"', 'in', 'self.mpv_options:', 'self.mpv_usesock', '=', '\"--input-ipc-server\"', 'util.dbg(c.g', '+', '\"mpv', 'supports', '--input-ipc-server\"', '+', 'c.w)', 'def', '_generate_real_playerargs(self):', 'args', '=', 'config.PLAYERARGS.get.strip().split()', 'pd', '=', \"g.playerargs_defaults['mpv']\", 'completetitle', '=', '\\'=\\'.join((pd[\"title\"],', '\\'\"{0}\"\\'.format(self.song.title)))', 'util.list_update(completetitle,', 'args)', 'if', \"pd['geo']\", 'not', 'in', 'args:', 'geometry', '=', 'config.WINDOW_SIZE.get', 'or', '\"\"', 'if', 'config.WINDOW_POS.get:', 'wp', '=', 'config.WINDOW_POS.get', 'xx', '=', '\"+1\"', 'if', '\"left\"', 'in', 'wp', 'else', '\"-1\"', 'yy', '=', '\"+1\"', 'if', '\"top\"', 'in', 'wp', 'else', '\"-1\"', 'geometry', '+=', 'xx', '+', 'yy', 'if', 'geometry:', 'newgeometry', '=', \"'='.join((pd['geo'],\", 'geometry))', 'util.list_update(newgeometry,', 'args)', 'if', 'self.override', '==', '\"a-v\":', 'util.list_update(pd[\"novid\"],', 'args)', 'elif', '((config.FULLSCREEN.get', 'and', 'self.override', '!=', '\"window\")', 'or', 'self.override', '==', '\"fullscreen\"):', 'util.list_update(pd[\"fs\"],', 'args)', 'if', 'not', 'self.video', 'and', \"self.stream['ext']\", '==', '\"m4a\":', 'util.dbg(\"%susing', 'ignidx', 'flag%s\")', 'util.list_update(pd[\"ignidx\"],', 'args)', 'if', '\"--ytdl\"', 'in', 'self.mpv_options:', 'util.list_update(\"--no-ytdl\",', 'args)', 'msglevel', '=', 'pd[\"msglevel\"][\"<0.4\"]', 'if', 'self.mpv_version[0:2]', '<', '(0,', '0)', 'or', 'self.mpv_version[0:2]', '>=', '(0,', '4):', 'msglevel', '=', 'pd[\"msglevel\"][\">=0.4\"]', 'if', 'not', 'g.debug_mode:', 'if', 'self.mpv_usesock:', 'util.list_update(\"--really-quiet\",', 'args)', 'else:', 'util.list_update(\"--really-quiet\",', 'args,', 'remove=True)', 'util.list_update(msglevel,', 'args)', 'if', 'g.volume:', 'util.list_update(\"--volume=\"', '+', 'str(g.volume),', 'args)', 'if', 'self.softrepeat:', 'util.list_update(\"--loop-file\",', 'args)', 'if', 'not', 'config.SHOW_VIDEO.get:', \"util.list_update('--no-video',\", 'args)', \"util.list_update('--vid=no',\", 'args)', 'return', '[self.player]', '+', 'args', '+', \"[self.stream['url']]\", 'def', 'clean_up(self):', 'if', 'self.input_file:', 'os.unlink(self.input_file)', 'if', 'self.sockpath', 'and', 'os.path.exists(self.sockpath):', 'os.unlink(self.sockpath)', 'if', 'self.fifopath', 'and', 'os.path.exists(self.fifopath):', 'os.unlink(self.fifopath)', 'def', 'launch_player(self,', 'cmd):', 'self.input_file', '=', '_get_input_file()', \"cmd.append('--input-conf='\", '+', 'self.input_file)', 'self.conf_dir', '=', '_get_conf_dir()', 'if', 'self.conf_dir', 'is', 'not', 'None:', \"cmd.append('--config-dir='\", '+', 'self.conf_dir)', 'self.sockpath', '=', 'None', 'self.fifopath', '=', 'None', 'if', 'self.mpv_usesock:', 'self.sockpath', '=', \"tempfile.mktemp('.sock',\", \"'mpsyt-mpv')\", 'cmd.append(self.mpv_usesock', '+', \"'='\", '+', 'self.sockpath)', 'with', 'open(os.devnull,', '\"w\")', 'as', 'devnull:', 'self.p', '=', 'subprocess.Popen(cmd,', 'shell=False,', 'stderr=devnull)', 'if', 'g.mprisctl:', \"g.mprisctl.send(('socket',\", 'self.sockpath))', 'else:', 'if', 'g.mprisctl:', 'self.fifopath', '=', \"tempfile.mktemp('.fifo',\", \"'mpsyt-mpv')\", 'os.mkfifo(self.fifopath)', \"cmd.append('--input-file='\", '+', 'self.fifopath)', \"g.mprisctl.send(('mpv-fifo',\", 'self.fifopath))', 'self.p', '=', 'subprocess.Popen(cmd,', 'shell=False,', 'stderr=subprocess.PIPE,', 'bufsize=0)', 'self._player_status(self.songdata', '+', '\";', '\",', 'self.song.length)', 'returncode', '=', 'self.p.wait()', 'if', 'returncode', '==', '42:', 'self.previous()', 'elif', 'returncode', '==', '43:', 'self.stop()', 'else:', 'self.next()', 'def', '_player_status(self,', 'prefix,', 'songlength=0):', 're_player', '=', 're.compile(r\".{,15}AV?:\\\\s*(\\\\d\\\\d):(\\\\d\\\\d):(\\\\d\\\\d)\")', 're_volume', '=', 're.compile(r\"Volume:\\\\s*(?P<volume>\\\\d+)\\\\s*%\")', 'last_displayed_line', '=', 'None', 'buff', '=', \"''\", 'volume_level', '=', 'None', 'last_pos', '=', 'None', 'if', 'self.sockpath:', 's', '=', 'socket.socket(socket.AF_UNIX)', 'tries', '=', '0', 'while', 'tries', '<', '10', 'and', 'self.p.poll()', 'is', 'None:', 'time.sleep(.5)', 'try:', 's.connect(self.sockpath)', 'break', 'except', 'socket.error:', 'pass', 'tries', '+=', '1', 'else:', 'return', 'try:', 'observe_full', '=', 'False', 'cmd', '=', '{\"command\":', '[\"observe_property\",', '1,', '\"time-pos\"]}', 's.send(json.dumps(cmd).encode()', '+', \"b'\\\\n')\", 'volume_level', '=', 'elapsed_s', '=', 'None', 'for', 'line', 'in', 's.makefile():', 'resp', '=', 'json.loads(line)', 'if', \"resp.get('event')\", '==', \"'property-change'\", 'and', 'not', 'observe_full:', 'cmd', '=', '{\"command\":', '[\"observe_property\",', '2,', '\"volume\"]}', 's.send(json.dumps(cmd).encode()', '+', \"b'\\\\n')\", 'observe_full', '=', 'True', 'if', \"resp.get('event')\", '==', \"'property-change'\", 'and', \"resp['id']\", '==', '1:', 'if', \"resp.get('data')\", 'is', 'not', 'None:', 'elapsed_s', '=', \"int(resp['data'])\", 'elif', \"resp.get('event')\", '==', \"'property-change'\", 'and', \"resp['id']\", '==', '2:', 'volume_level', '=', \"int(resp['data'])\", 'if(volume_level', 'and', 'volume_level', '!=', 'g.volume):', 'g.volume', '=', 'volume_level', 'if', 'elapsed_s:', 'self.make_status_line(elapsed_s,', 'prefix,', 'songlength,', 'volume=volume_level)', 'except', 'socket.error:', 'pass', 'else:', 'elapsed_s', '=', '0', 'while', 'self.p.poll()', 'is', 'None:', 'stdstream', '=', 'self.p.stderr', 'char', '=', 'stdstream.read(1).decode(\"utf-8\",', 'errors=\"ignore\")', 'if', 'char', 'in', \"'\\\\r\\\\n':\", 'mv', '=', 're_volume.search(buff)', 'if', 'mv:', 'volume_level', '=', 'int(mv.group(\"volume\"))', 'match_object', '=', 're_player.match(buff)', 'if', 'match_object:', 'try:', 'h,', 'm,', 's', '=', 'map(int,', 'match_object.groups())', 'elapsed_s', '=', 'h', '*', '3600', '+', 'm', '*', '60', '+', 's', 'except', 'ValueError:', 'try:', 'elapsed_s', '=', \"int(match_object.group('elapsed_s')\", 'or', \"'0')\", 'except', 'ValueError:', 'continue', 'if', 'volume_level', 'and', 'volume_level', '!=', 'g.volume:', 'g.volume', '=', 'volume_level', 'self.make_status_line(elapsed_s,', 'prefix,', 'songlength,', 'volume=volume_level)', 'if', \"buff.startswith('ANS_volume='):\", 'volume_level', '=', \"round(float(buff.split('=')[1]))\", 'paused', '=', '(\"PAUSE\"', 'in', 'buff)', 'or', '(\"Paused\"', 'in', 'buff)', 'if', '(elapsed_s', '!=', 'last_pos', 'or', 'paused)', 'and', 'g.mprisctl:', 'last_pos', '=', 'elapsed_s', \"g.mprisctl.send(('pause',\", 'paused))', \"g.mprisctl.send(('volume',\", 'volume_level))', \"g.mprisctl.send(('time-pos',\", 'elapsed_s))', 'buff', '=', \"''\", 'else:', 'buff', '+=', 'char', 'def', '_help(self,', 'short=True):', 'volume', '=', '\"[{0}9{1}]', 'volume', '[{0}0{1}]', '[{0}CTRL-C{1}]', 'return\"', 'seek', '=', '\"[{0}\\\\u2190{1}]', 'seek', '[{0}\\\\u2192{1}]\"', 'pause', '=', '\"[{0}\\\\u2193{1}]', 'SEEK', '[{0}\\\\u2191{1}]', '[{0}space{1}]', 'pause\"', 'if', 'not_utf8_environment:', 'seek', '=', '\"[{0}<-{1}]', 'seek', '[{0}->{1}]\"', 'pause', '=', '\"[{0}DN{1}]', 'SEEK', '[{0}UP{1}]', '[{0}space{1}]', 'pause\"', 'single', '=', '\"[{0}q{1}]', 'next\"', 'next_prev', '=', '\"[{0}>{1}]', 'next/prev', '[{0}<{1}]\"', 'ret', '=', 'single', 'if', 'short', 'and', 'config.AUTOPLAY.get', 'else', '\"\"', 'ret', '=', 'next_prev', 'if', 'not', 'short', 'else', 'ret', 'fmt', '=', '\"', '%-20s', '%-20s\"', 'lines', '=', 'fmt', '%', '(seek,', 'volume)', '+', '\"\\\\n\"', '+', 'fmt', '%', '(pause,', 'ret)', 'return', 'lines.format(c.g,', 'c.w)', 'def', '_get_input_file():', 'confpath', '=', 'conf', '=', \"''\", 'confpath', '=', 'os.path.join(paths.get_config_dir(),', '\"mpv-input.conf\")', 'if', 'os.path.isfile(confpath):', 'util.dbg(\"using', '%s', 'for', 'input', 'key', 'file\",', 'confpath)', 'with', 'open(confpath)', 'as', 'conffile:', 'conf', '=', 'conffile.read()', '+', \"'\\\\n'\", 'conf', '=', 'conf.replace(\"quit\",', '\"quit', '43\")', 'conf', '=', 'conf.replace(\"playlist_prev\",', '\"quit', '42\")', 'conf', '=', 'conf.replace(\"pt_step', '-1\",', '\"quit', '42\")', 'conf', '=', 'conf.replace(\"playlist_next\",', '\"quit\")', 'conf', '=', 'conf.replace(\"pt_step', '1\",', '\"quit\")', 'standard_cmds', '=', \"['q\", 'quit', \"43\\\\n',\", \"'>\", \"quit\\\\n',\", \"'<\", 'quit', \"42\\\\n',\", \"'NEXT\", \"quit\\\\n',\", \"'PREV\", 'quit', \"42\\\\n',\", \"'ENTER\", \"quit\\\\n',\", \"'Q\", \"quit-watch-later']\", 'bound_keys', '=', '[i.split()[0]', 'for', 'i', 'in', 'conf.splitlines()', 'if', 'i.split()]', 'for', 'i', 'in', 'standard_cmds:', 'key', '=', 'i.split()[0]', 'if', 'key', 'not', 'in', 'bound_keys:', 'conf', '+=', 'i', 'with', \"tempfile.NamedTemporaryFile('w',\", \"prefix='mpsyt-input',\", 'delete=False)', 'as', 'tmpfile:', 'tmpfile.write(conf)', 'return', 'tmpfile.name', 'def', '_get_conf_dir():', 'confpath', '=', 'os.path.join(paths.get_config_dir(),', '\"mpv\")', 'if', 'os.path.isdir(confpath):', 'util.dbg(\"using', '%s', 'for', 'configuration', 'directory\",', 'confpath)', 'return', 'confpath', 'return', 'None', 'def', '_get_mpv_version(exename):', 'o', '=', 'subprocess.check_output([exename,', '\"--version\"]).decode()', 're_ver', '=', 're.compile(r\"mpv', '(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\")', 'for', 'line', 'in', 'o.split(\"\\\\n\"):', 'm', '=', 're_ver.match(line)', 'if', 'm:', 'v', '=', 'tuple(map(int,', 'm.groups()))', 'util.dbg(\"%s', 'version', '%s.%s.%s', 'detected\",', 'exename,', '*v)', 'return', 'v', 'util.dbg(\"%sFailed', 'to', 'detect', 'mpv', 'version%s\",', 'c.r,', 'c.w)', 'return', '-1,', '0,', '0']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/players/vlc.py",
        "vector": "['import', 'os', 'import', 'subprocess', 'from', '..', 'import', 'config,', 'g,', 'util', 'from', '..player', 'import', 'CmdPlayer', 'class', 'vlc(CmdPlayer):', 'def', '__init__(self,', 'player):', 'self.player', '=', 'player', 'def', '_generate_real_playerargs(self):', 'args', '=', 'config.PLAYERARGS.get.strip().split()', 'pd', '=', \"g.playerargs_defaults['vlc']\", 'args.extend((pd[\"title\"],', '\\'\"{0}\"\\'.format(self.song.title)))', 'if', 'config.VLC_DUMMY_INTERFACE.get:', \"print('[VLC\", 'DUMMY', 'INTERFACE]', 'Playing', '\"{0}\"', \"...'.format(self.song.title))\", \"args.extend(('-I',\", \"'dummy'))\", 'if', 'not', 'config.SHOW_VIDEO.get:', 'args.extend((\"--no-video\",))', 'if', 'self.subtitle_path:', \"args.extend(('--sub-file',\", 'self.subtitle_path))', 'util.list_update(\"--play-and-exit\",', 'args)', 'return', '[self.player]', '+', 'args', '+', \"[self.stream['url']]\", 'def', 'clean_up(self):', 'self._kill_instance()', 'def', 'launch_player(self,', 'cmd):', 'with', 'open(os.devnull,', '\"w\")', 'as', 'devnull:', 'self.p', '=', 'subprocess.Popen(cmd,', 'shell=False,', 'stderr=devnull)', 'self.p.wait()', 'self.next()', 'def', '_help(self,', 'short=True):', 'pass', 'def', '_kill_instance(self):', 'import', 'os', 'from', 'sys', 'import', 'platform', 'if', 'platform', '==', '\"linux\"', 'or', 'platform', '==', '\"linux2\":', \"os.system('pkill\", '-f', \"vlc')\", 'elif', 'platform', '==', '\"darwin\":', \"os.system('killall\", \"vlc')\", 'elif', 'platform', '==', '\"win32\":', \"os.system('taskkill\", '/im', 'vlc.exe', \"/f')\"]"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/playlist.py",
        "vector": "['class', 'Playlist:', 'def', '__init__(self,', 'name=None,', 'songs=None):', 'self.name', '=', 'name', 'self.songs', '=', 'songs', 'or', '[]', 'def', '__len__(self):', 'return', 'len(self.songs)', 'def', '__getitem__(self,', 'sliced):', 'return', 'self.songs[sliced]', 'def', '__setitem__(self,', 'position,', 'item):', 'self.songs[position]', '=', 'item', 'def', '__iter__(self):', 'for', 'i', 'in', 'self.songs:', 'yield', 'i', '@property', 'def', 'duration(self):', 'duration', '=', 'sum(s.length', 'for', 's', 'in', 'self.songs)', 'mins,', 'secs', '=', 'divmod(duration,', '60)', 'hours,', 'mins', '=', 'divmod(mins,', '60)', 'duration', '=', \"'{H:02}:{M:02}:{S:02}'.format(H=hours,\", 'M=mins,', 'S=secs)', 'return', 'duration', 'class', 'Video:', 'description', '=', '\"\"', 'def', '__init__(self,', 'ytid,', 'title,', 'length):', 'self.ytid', '=', 'ytid', 'self.title', '=', 'title', 'self.length', '=', 'int(length)']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/playlists.py",
        "vector": "['import', 'os', 'import', 'sys', 'import', 'pickle', 'from', '.', 'import', 'g,', 'c,', 'screen,', 'util,', 'pafy', 'from', '.playlist', 'import', 'Playlist,', 'Video', 'def', 'save():', 'for', 'pl', 'in', 'g.userpl:', 'with', 'open(os.path.join(g.PLFOLDER,', \"pl+'.m3u'),\", \"'w')\", 'as', 'plf:', \"plf.write('\", 'for', 'song', 'in', 'g.userpl[pl].songs:', \"plf.write('\", \"plf.write('https://www.youtube.com/watch?v=%s\\\\n'\", '%', 'song.ytid)', 'util.dbg(c.r', '+', '\"Playlist', 'saved\\\\n---\"', '+', 'c.w)', 'def', 'load():', '_convert_playlist_to_v2()', '_convert_playlist_to_m3u()', 'try:', 'for', 'm3u', 'in', '[m3u', 'for', 'm3u', 'in', 'os.listdir(g.PLFOLDER)', 'if', 'm3u[-4:]', '==', \"'.m3u']:\", 'g.userpl[m3u[:-4]]', '=', 'read_m3u(os.path.join(g.PLFOLDER,', 'm3u))', 'except', 'FileNotFoundError:', 'if', 'not', 'os.path.isdir(g.PLFOLDER):', 'g.userpl', '=', '{}', 'os.mkdir(g.PLFOLDER)', 'save()', 'do_save', '=', 'False', 'for', 'k,', 'v', 'in', 'g.userpl.items():', 'for', 'song', 'in', 'v.songs:', 'if', 'hasattr(song,', '\"urls\"):', 'util.dbg(\"remove', '%s:', '%s\",', 'k,', 'song.urls)', 'del', 'song.urls', 'do_save', '=', 'True', 'if', 'do_save:', 'save()', 'def', 'delete(name):', 'del', 'g.userpl[name]', 'os.remove(os.path.join(g.PLFOLDER,', 'name', '+', \"'.m3u'))\", 'def', 'read_m3u(m3u):', 'name', '=', 'os.path.basename(m3u)[:-4]', 'songs', '=', '[]', 'expect_ytid', '=', 'False', 'with', 'open(m3u,', \"'r')\", 'as', 'plf:', 'if', \"plf.readline().startswith('\", 'for', 'line', 'in', 'plf:', 'if', \"line.startswith('\", 'duration,', 'title', '=', \"line.replace('\", 'expect_ytid', '=', 'True', 'elif', 'not', \"line.startswith('\\\\n')\", 'and', 'not', \"line.startswith('\", 'try:', 'expect_ytid', '=', 'False', 'ytid', '=', 'pafy.extract_video_id(line).strip()', 'songs.append(Video(ytid,', 'title,', 'int(duration)))', 'except', 'ValueError', 'as', 'ex:', 'util.dbg(c.r', '+', 'str(ex)', '+', 'c.w)', 'else:', 'plf.seek(0)', 'for', 'line', 'in', 'plf:', 'if', 'not', \"line.startswith('\", 'try:', 'p', '=', 'util.get_pafy(line)', 'songs.append(Video(p.videoid,', 'p.title,', 'p.length))', 'except', '(IOError,', 'ValueError)', 'as', 'e:', 'util.dbg(c.r', '+', '\"Error', 'loading', 'video:', '\"', '+', 'str(e)', '+', 'c.w)', 'return', 'Playlist(name,', 'songs)', 'def', '_convert_playlist_to_v2():', 'if', 'os.path.isfile(g.PLFILE):', 'return', 'elif', 'not', 'os.path.isfile(g.OLD_PLFILE):', 'return', 'try:', 'with', 'open(g.OLD_PLFILE,', '\"rb\")', 'as', 'plf:', 'old_playlists', '=', 'pickle.load(plf)', 'except', 'IOError:', 'sys.exit(\"Couldn\\'t', 'open', 'old', 'playlist', 'file\")', 'backup', '=', 'g.OLD_PLFILE', '+', '\"_v1_backup\"', 'if', 'os.path.isfile(backup):', 'sys.exit(\"Error,', 'backup', 'exists', 'but', 'new', 'playlist', 'exists', 'not!\")', 'os.rename(g.OLD_PLFILE,', 'backup)', 'for', 'plname,', 'plitem', 'in', 'old_playlists.items():', 'songs', '=', '[]', 'for', 'video', 'in', 'plitem.songs:', 'v', '=', \"Video(video['link'],\", \"video['title'],\", \"video['duration'])\", 'songs.append(v)', 'g.userpl[plname]', '=', 'Playlist(plname,', 'songs)', 'os.mkdir(g.PLFOLDER)', 'save()', 'def', '_convert_playlist_to_m3u():', 'if', 'os.path.isdir(g.PLFOLDER):', 'return', 'elif', 'not', 'os.path.isfile(g.PLFILE):', 'return', 'try:', 'with', 'open(g.PLFILE,', \"'rb')\", 'as', 'plf:', 'old_playlists', '=', 'pickle.load(plf)', 'except', 'AttributeError:', 'import', '__main__', '__main__.Playlist', '=', 'Playlist', '__main__.Video', '=', 'Video', 'from', '.', 'import', 'main', 'main.Playlist', '=', 'Playlist', 'main.Video', '=', 'Video', 'with', 'open(g.PLFILE,', '\"rb\")', 'as', 'plf:', 'g.userpl', '=', 'pickle.load(plf)', 'os.mkdir(g.PLFOLDER)', 'save()', 'screen.msgexit(\"Updated', 'playlist', 'file.', 'Please', 'restart', 'yewtube\",', '1)', 'except', 'EOFError:', 'screen.msgexit(\"Error', 'opening', 'playlists', 'from', '%s\"', '%', 'g.PLFILE,', '1)', 'except', 'IOError:', 'sys.exit(\"Couldn\\'t', 'open', 'old', 'playlist', 'file\")', 'for', 'pl', 'in', 'old_playlists:', 'songs', '=', '[]', 'for', 'song', 'in', 'old_playlists[pl]:', 'songs.append(song)', 'g.userpl[pl]', '=', 'Playlist(pl,', 'songs)', 'os.mkdir(g.PLFOLDER)', 'save()']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/screen.py",
        "vector": "['import', 'subprocess', 'import', 'os', 'import', 'sys', 'from', '.', 'import', 'g,', 'content,', 'config,', 'util', 'mswin', '=', 'os.name', '==', '\"nt\"', 'def', 'update(fill_blank=True):', 'clear()', 'if', 'isinstance(g.content,', 'content.PaginatedContent):', 'util.xprint(g.content.getPage(g.current_page))', 'g.rprompt', '=', 'content.page_msg(g.current_page)', 'elif', 'g.content:', 'util.xprint(g.content)', 'g.content', '=', 'False', 'if', 'g.message', 'or', 'g.rprompt:', 'out', '=', 'g.message', 'or', \"''\", 'blanks', '=', 'util.getxy().width', '-', 'len(out)', '-', 'len(g.rprompt', 'or', \"'')\", 'out', '+=', \"'\", \"'\", '*', 'blanks', '+', '(g.rprompt', 'or', \"'')\", 'util.xprint(out)', 'elif', 'fill_blank:', 'util.xprint(\"\")', 'g.message', '=', 'g.rprompt', '=', 'False', 'def', 'clear():', 'if', 'g.no_clear_screen:', \"util.xprint('--\\\\n')\", 'else:', \"util.xprint('\\\\n'\", '*', '200)', 'def', 'reset_terminal():', 'if', 'not', 'mswin:', 'subprocess.call([\"tset\",', '\"-c\"])', 'def', 'writestatus(text,', 'mute=False):', 'if', 'not', 'mute', 'and', 'config.SHOW_STATUS.get:', '_writeline(text)', 'def', '_writeline(text):', 'width', '=', 'util.getxy().width', 'spaces', '=', 'width', '-', 'len(text)', '-', '1', 'if', 'mswin:', 'spaces', '=-', '1', 'text', '=', 'text[:width', '-', '3]', 'sys.stdout.write(\"', '\"', '+', 'text', '+', '(\"', '\"', '*', 'spaces)', '+', '\"\\\\r\")', 'sys.stdout.flush()', 'def', 'msgexit(msg,', 'code=0):', 'util.xprint(msg)', 'sys.exit(code)']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/streams.py",
        "vector": "['import', 'time', 'import', 'threading', 'from', 'urllib.request', 'import', 'urlopen', 'from', '.', 'import', 'pafy', 'from', '.', 'import', 'g,', 'c,', 'screen,', 'config,', 'util', 'def', 'prune():', 'while', 'len(g.pafs)', '>', 'g.max_cached_streams:', 'g.pafs.popitem(last=False)', 'while', 'len(g.streams)', '>', 'g.max_cached_streams:', 'g.streams.popitem(last=False)', 'now', '=', 'time.time()', 'oldpafs', '=', '[k', 'for', 'k', 'in', 'g.pafs', 'if', 'g.pafs[k]', 'is', 'not', 'None', 'and', 'g.pafs[k].expiry', '<', 'now]', 'if', 'len(oldpafs):', 'util.dbg(c.r', '+', '\"%s', 'old', 'pafy', 'items', 'pruned%s\",', 'len(oldpafs),', 'c.w)', 'for', 'oldpaf', 'in', 'oldpafs:', 'g.pafs.pop(oldpaf,', '0)', 'oldstreams', '=', '[k', 'for', 'k', 'in', 'g.streams', 'if', \"g.streams[k]['expiry']\", 'is', 'None', 'or', \"g.streams[k]['expiry']\", '<', 'now]', 'if', 'len(oldstreams):', 'util.dbg(c.r', '+', '\"%s', 'old', 'stream', 'items', 'pruned%s\",', 'len(oldstreams),', 'c.w)', 'for', 'oldstream', 'in', 'oldstreams:', 'g.streams.pop(oldstream,', '0)', 'util.dbg(c.b', '+', '\"paf:', '%s,', 'streams:', '%s%s\",', 'len(g.pafs),', 'len(g.streams),', 'c.w)', 'def', 'get(vid,', 'force=False,', 'callback=None,', 'threeD=False):', 'now', '=', 'time.time()', 'ytid', '=', 'vid.ytid', 'have_stream', '=', 'g.streams.get(ytid)', 'and', \"(g.streams[ytid]['expiry']\", '>', 'now', 'if', \"g.streams[ytid]['expiry']\", 'is', 'not', 'None', 'else', 'False)', 'prfx', '=', '\"preload:', '\"', 'if', 'not', 'callback', 'else', '\"\"', 'if', 'not', 'force', 'and', 'have_stream:', 'ss', '=', \"str(int(g.streams[ytid]['expiry']\", '-', 'now)', '//', '60)', 'util.dbg(\"%s%sGot', 'streams', 'from', 'cache', '(%s', 'mins', 'left)%s\",', 'c.g,', 'prfx,', 'ss,', 'c.w)', 'return', \"g.streams.get(ytid)['meta']\", 'ps', '=', 'pafy.get_video_streams(ytid)', 'try:', \"[x['url']\", 'for', 'x', 'in', 'ps]', 'except', 'TypeError:', 'util.dbg(\"%s****Type', 'Error', 'in', 'get_streams.', 'Retrying%s\",', 'c.r,', 'c.w)', 'p', '=', 'util.get_pafy(vid,', 'force=True,', 'callback=callback)', 'ps', '=', 'p.allstreams', 'if', 'threeD', 'else', '[x', 'for', 'x', 'in', 'p.allstreams', 'if', 'not', 'x.threed]', 'streams', '=', '[{\"url\":', \"s['url'],\", '\"ext\":', \"s['ext'],\", '\"quality\":', \"s['resolution'],\", '\"rawbitrate\":', \"s.get('bitrate',-1),\", '\"mtype\":', \"'audio'\", 'if', \"'audio'\", 'in', \"s['resolution']\", 'else', \"('video'\", 'if', \"s['acodec']\", '!=', \"'none'\", 'else', \"'?'),\", '\"size\":', \"int(s.get('filesize')\", 'if', \"s.get('filesize')\", 'is', 'not', 'None', 'else', \"s.get('filesize_approx',\", '-1))}', 'for', 's', 'in', 'ps]', 'if', \"'manifest'\", 'in', \"streams[0]['url']:\", 'expiry', '=', \"float(streams[0]['url'].split('/expire/')[1].split('/')[0])\", 'else:', 'temp', '=', \"streams[0]['url'].split('expire=')[1]\", 'expiry', '=', \"float(temp[:temp.find('&')])\", 'g.streams[ytid]', '=', 'dict(expiry=expiry,', 'meta=streams)', 'prune()', 'return', 'streams', 'def', 'select(slist,', 'q=0,', 'audio=False,', 'm4a_ok=True,', 'maxres=None):', 'maxres', '=', 'maxres', 'or', 'config.MAX_RES.get', 'slist', '=', \"slist['meta']\", 'if', 'isinstance(slist,', 'dict)', 'else', 'slist', 'def', 'okres(x):', 'return', 'int(x[\\'quality\\'].split(\"x\")[1])', '<=', 'maxres', 'def', 'getq(x):', 'return', 'int(x[\\'quality\\'].split(\"x\")[1])', 'def', 'getbitrate(x):', 'return', \"x['rawbitrate']\", 'if', 'audio:', 'streams', '=', '[x', 'for', 'x', 'in', 'slist', 'if', \"x['mtype']\", '==', '\"audio\"]', 'if', 'not', 'm4a_ok:', 'streams', '=', '[x', 'for', 'x', 'in', 'streams', 'if', 'not', \"x['ext']\", '==', '\"m4a\"]', 'if', 'not', 'config.AUDIO_FORMAT.get', '==', '\"auto\":', 'if', 'm4a_ok', 'and', 'config.AUDIO_FORMAT.get', '==', '\"m4a\":', 'streams', '=', '[x', 'for', 'x', 'in', 'streams', 'if', \"x['ext']\", '==', '\"m4a\"]', 'if', 'config.AUDIO_FORMAT.get', '==', '\"webm\":', 'streams', '=', '[x', 'for', 'x', 'in', 'streams', 'if', \"x['ext']\", '==', '\"webm\"]', 'if', 'not', 'streams:', 'streams', '=', '[x', 'for', 'x', 'in', 'slist', 'if', \"x['mtype']\", '==', '\"audio\"]', 'streams', '=', 'sorted(streams,', 'key=getbitrate,', 'reverse=True)', 'else:', 'streams', '=', '[x', 'for', 'x', 'in', 'slist', 'if', \"x['mtype']\", '==', '\"video\"', 'and', 'okres(x)]', 'if', 'not', 'config.VIDEO_FORMAT.get', '==', '\"auto\":', 'if', 'config.VIDEO_FORMAT.get', '==', '\"mp4\":', 'streams', '=', '[x', 'for', 'x', 'in', 'streams', 'if', \"x['ext']\", '==', '\"mp4\"]', 'if', 'config.VIDEO_FORMAT.get', '==', '\"webm\":', 'streams', '=', '[x', 'for', 'x', 'in', 'streams', 'if', \"x['ext']\", '==', '\"webm\"]', 'if', 'config.VIDEO_FORMAT.get', '==', '\"3gp\":', 'streams', '=', '[x', 'for', 'x', 'in', 'streams', 'if', \"x['ext']\", '==', '\"3gp\"]', 'if', 'not', 'streams:', 'streams', '=', '[x', 'for', 'x', 'in', 'slist', 'if', \"x['mtype']\", '==', '\"video\"', 'and', 'okres(x)]', 'streams', '=', 'sorted(streams,', 'key=getq,', 'reverse=True)', 'util.dbg(\"select', 'stream,', 'q:', '%s,', 'audio:', '%s,', 'len:', '%s\",', 'q,', 'audio,', 'len(streams))', 'try:', 'ret', '=', 'streams[q]', 'except', 'IndexError:', 'ret', '=', 'streams[0]', 'if', 'q', 'and', 'len(streams)', 'else', 'None', 'return', 'ret', 'def', 'get_size(ytid,', 'url,', 'preloading=False):', 'stream', '=', '[x', 'for', 'x', 'in', \"g.streams[ytid]['meta']\", 'if', \"x['url']\", '==', 'url][0]', 'size', '=', \"stream['size']\", 'prefix', '=', '\"preload:', '\"', 'if', 'preloading', 'else', '\"\"', 'if', 'not', 'size', '==', '-1:', 'util.dbg(\"%s%susing', 'cached', 'size:', '%s%s\",', 'c.g,', 'prefix,', 'size,', 'c.w)', 'else:', 'screen.writestatus(\"Getting', 'content', 'length\",', 'mute=preloading)', \"stream['size']\", '=', '_get_content_length(url,', 'preloading=preloading)', 'util.dbg(\"%s%s', '-', 'content-length:', '%s%s\",', 'c.y,', 'prefix,', \"stream['size'],\", 'c.w)', 'return', \"stream['size']\", 'def', '_get_content_length(url,', 'preloading=False):', 'prefix', '=', '\"preload:', '\"', 'if', 'preloading', 'else', '\"\"', 'util.dbg(c.y', '+', 'prefix', '+', '\"getting', 'content-length', 'header\"', '+', 'c.w)', 'response', '=', 'urlopen(url)', 'headers', '=', 'response.headers', 'cl', '=', \"headers['content-length']\", 'return', 'int(cl)', 'def', 'preload(song,', 'delay=2,', 'override=False):', 'args', '=', '(song,', 'delay,', 'override)', 't', '=', 'threading.Thread(target=_preload,', 'args=args)', 't.daemon', '=', 'True', 't.start()', 'def', '_preload(song,', 'delay,', 'override):', 'if', 'g.preload_disabled:', 'return', 'ytid', '=', 'song.ytid', 'g.preloading.append(ytid)', 'time.sleep(delay)', 'video', '=', 'config.SHOW_VIDEO.get', 'video', '=', 'True', 'if', 'override', 'in', '(\"fullscreen\",', '\"window\",', '\"forcevid\")', 'else', 'video', 'video', '=', 'False', 'if', 'override', '==', '\"audio\"', 'else', 'video', 'try:', 'm4a', '=', '\"mplayer\"', 'not', 'in', 'config.PLAYER.get', 'streamlist', '=', 'get(song)', 'stream', '=', 'select(streamlist,', 'audio=not', 'video,', 'm4a_ok=m4a)', 'if', 'not', 'stream', 'and', 'not', 'video:', 'stream', '=', 'select(streamlist,', 'audio=False)', 'get_size(ytid,', \"stream['url'],\", 'preloading=True)', 'except', '(ValueError,', 'AttributeError,', 'IOError)', 'as', 'e:', 'import', 'traceback', 'traceback.print_exception(type(e),', 'e,', 'e.__traceback__)', 'input(\"Press', 'any', 'key', 'to', 'continue...\")', 'util.dbg(e)', 'finally:', 'g.preloading.remove(song.ytid)']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/terminalsize.py",
        "vector": "['import', 'os', 'import', 'sys', 'import', 'shlex', 'import', 'shutil', 'import', 'struct', 'import', 'platform', 'import', 'subprocess', 'def', 'get_terminal_size():', 'if', 'sys.version_info', '>=', '(3,3):', 'return', 'shutil.get_terminal_size()', 'current_os', '=', 'platform.system()', 'tuple_xy', '=', 'None', 'if', 'current_os', '==', \"'Windows':\", 'tuple_xy', '=', '_get_terminal_size_windows()', 'if', 'tuple_xy', 'is', 'None:', 'tuple_xy', '=', '_get_terminal_size_tput()', 'else:', 'tuple_xy', '=', '_get_terminal_size_linux()', 'if', 'tuple_xy', 'is', 'None:', 'tuple_xy', '=', '(80,', '25)', 'return', 'tuple_xy', 'def', '_get_terminal_size_windows():', 'try:', 'from', 'ctypes', 'import', 'windll,', 'create_string_buffer', 'h', '=', 'windll.kernel32.GetStdHandle(-12)', 'csbi', '=', 'create_string_buffer(22)', 'res', '=', 'windll.kernel32.GetConsoleScreenBufferInfo(h,', 'csbi)', 'if', 'res:', '(bufx,', 'bufy,', 'curx,', 'cury,', 'wattr,', 'left,', 'top,', 'right,', 'bottom,', 'maxx,', 'maxy)', '=', 'struct.unpack(\"hhhhHhhhhhh\",', 'csbi.raw)', 'sizex', '=', 'right', '-', 'left', '+', '1', 'sizey', '=', 'bottom', '-', 'top', '+', '1', 'return', 'sizex,', 'sizey', 'except:', 'pass', 'def', '_get_terminal_size_tput():', 'try:', 'cols', '=', \"int(subprocess.check_call(shlex.split('tput\", \"cols')))\", 'rows', '=', \"int(subprocess.check_call(shlex.split('tput\", \"lines')))\", 'return', '(cols,', 'rows)', 'except:', 'pass', 'def', '_get_terminal_size_linux():', 'def', 'ioctl_GWINSZ(fd):', 'try:', 'import', 'fcntl', 'import', 'termios', 'cr', '=', \"struct.unpack('hh',\", 'fcntl.ioctl(fd,', 'termios.TIOCGWINSZ,', \"'1234'))\", 'return', 'cr', 'except:', 'pass', 'cr', '=', 'ioctl_GWINSZ(0)', 'or', 'ioctl_GWINSZ(1)', 'or', 'ioctl_GWINSZ(2)', 'if', 'not', 'cr', 'or', 'cr', '==', '(0,', '0):', 'try:', 'fd', '=', 'os.open(os.ctermid(),', 'os.O_RDONLY)', 'cr', '=', 'ioctl_GWINSZ(fd)', 'os.close(fd)', 'except:', 'pass', 'if', 'not', 'cr', 'or', 'cr', '==', '(0,', '0):', 'try:', 'cr', '=', \"(os.environ['LINES'],\", \"os.environ['COLUMNS'])\", 'except:', 'return', 'return', 'int(cr[1]),', 'int(cr[0])']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/test/test_main.py",
        "vector": "['import', 'unittest', 'import', 'pytest', 'import', 'mps_youtube.main', 'as', 'mps', 'class', 'TestMain(unittest.TestCase):', 'def', 'test_fmt_time(self):', \"pytest.skip('main\", 'not', 'have', 'tested', \"attribute')\", 'self.assertEqual(mps.fmt_time(0),', \"'00:00')\", 'self.assertEqual(mps.fmt_time(59),', \"'00:59')\", 'self.assertEqual(mps.fmt_time(100),', \"'01:40')\", 'self.assertEqual(mps.fmt_time(1000),', \"'16:40')\", 'self.assertEqual(mps.fmt_time(5000),', \"'83:20')\", 'self.assertEqual(mps.fmt_time(6500),', \"'1:48:20')\", 'def', 'test_num_repr(self):', \"pytest.skip('main\", 'not', 'have', 'tested', \"attribute')\", 'self.assertEqual(mps.num_repr(0),', \"'0')\", 'self.assertEqual(mps.num_repr(1001),', \"'1001')\", 'self.assertEqual(mps.num_repr(10001),', \"'10k')\", 'self.assertEqual(mps.num_repr(100001),', \"'100k')\", 'self.assertEqual(mps.num_repr(1000001),', \"'1.0m')\", 'self.assertEqual(mps.num_repr(10000001),', \"'10m')\", 'self.assertEqual(mps.num_repr(100000001),', \"'100m')\", 'self.assertEqual(mps.num_repr(1000000001),', \"'1.0B')\", 'if', '__name__', '==', \"'__main__':\", 'unittest.main()']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/test/test_mpris.py",
        "vector": "['from', 'unittest.mock', 'import', 'MagicMock', 'import', 'dbus', 'import', 'pytest', 'from', 'mps_youtube', 'import', 'mpris', 'def', 'test_mprsi2controller_init():', 'assert', 'mpris.Mpris2Controller()', 'def', 'test_mpris2mediaplayer_init():', 'bus', '=', 'MagicMock()', 'obj', '=', 'mpris.Mpris2MediaPlayer(bus)', 'assert', 'obj', 'v_obj', '=', 'vars(obj)', 'v_obj.pop(\"_locations_lock\")', 'assert', 'vars(obj)', '==', '{', '\"_connection\":', 'bus,', '\"_fallback\":', 'False,', '\"_locations\":', '[(bus,', '\"/org/mpris/MediaPlayer2\",', 'False)],', '\"_name\":', 'None,', '\"_object_path\":', '\"/org/mpris/MediaPlayer2\",', '\"fifo\":', 'None,', '\"mpv\":', 'False,', '\"properties\":', '{', '\"org.mpris.MediaPlayer2\":', '{', '\"read_only\":', '{', '\"CanQuit\":', 'False,', '\"CanRaise\":', 'False,', '\"CanSetFullscreen\":', 'False,', '\"DesktopEntry\":', '\"mps-youtube\",', '\"HasTrackList\":', 'False,', '\"Identity\":', '\"mps-youtube\",', '\"SupportedMimeTypes\":', 'dbus.Array([],', 'signature=dbus.Signature(\"s\")),', '\"SupportedUriSchemes\":', 'dbus.Array(', '[],', 'signature=dbus.Signature(\"s\")', '),', '},', '\"read_write\":', '{\"Fullscreen\":', 'False},', '},', '\"org.mpris.MediaPlayer2.Player\":', '{', '\"read_only\":', '{', '\"CanControl\":', 'True,', '\"CanGoNext\":', 'True,', '\"CanGoPrevious\":', 'True,', '\"CanPause\":', 'True,', '\"CanPlay\":', 'True,', '\"CanSeek\":', 'True,', '\"MaximumRate\":', '1.0,', '\"Metadata\":', '{', '\"mpris:trackid\":', 'dbus.ObjectPath(', '\"/CurrentPlaylist/UnknownTrack\",', 'variant_level=1', ')', '},', '\"MinimumRate\":', '1.0,', '\"PlaybackStatus\":', '\"Stopped\",', '\"Position\":', 'dbus.Int64(0),', '},', '\"read_write\":', '{\"Rate\":', '1.0,', '\"Volume\":', '1.0},', '},', '},', '\"socket\":', 'None,', '}', '@pytest.mark.parametrize(\"val\",', '(None,', '0,', '3,', '5))', 'def', 'test_mpris2mediaplayer_set_property_time_pos(val):', 'obj', '=', 'mpris.Mpris2MediaPlayer(MagicMock())', 'obj.Seeked', '=', 'MagicMock()', 'obj.setproperty(\"time-pos\",', 'val)', 'exp_res', '=', 'dbus.Int64(val', '*', '10**6)', 'if', 'val', 'else', 'dbus.Int64(0)', 'assert', 'obj.properties[mpris.PLAYER_INTERFACE][\"read_only\"][\"Position\"]', '==', 'exp_res', 'seeked_call_args', '=', 'None', 'try:', 'seeked_call_args', '=', 'obj.Seeked.mock_calls[0].args', 'except', 'IndexError:', 'pass', 'if', 'val', 'and', 'val', '>=', '4:', 'assert', 'seeked_call_args', '==', '(exp_res,)', 'else:', 'assert', 'seeked_call_args', 'is', 'None', '@pytest.mark.parametrize(', '\"val1,', 'val2\",', '(', '(0,', '2),', '(2,', '6),', '(2,', '5),', '(2,', '7),', '),', ')', 'def', 'test_mpris2mediaplayer_set_property_time_pos_seeked(val1,', 'val2):', 'obj', '=', 'mpris.Mpris2MediaPlayer(MagicMock())', 'obj.Seeked', '=', 'MagicMock()', 'obj.setproperty(\"time-pos\",', 'val1)', 'obj.setproperty(\"time-pos\",', 'val2)', 'seeked_call_args', '=', 'None', 'try:', 'seeked_call_args', '=', 'obj.Seeked.mock_calls[0].args', 'except', 'IndexError:', 'pass', 'd2', '=', 'dbus.Int64(val2', '*', '10**6)', 'if', 'abs(d2', '-', 'dbus.Int64(val1', '*', '10**6))', '>=', '4', '*', '10**6:', 'assert', 'seeked_call_args', '==', '(d2,)', 'else:', 'assert', 'seeked_call_args', 'is', 'None']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/test/test_players_mplayer.py",
        "vector": "['from', 'unittest', 'import', 'mock', 'import', 'pytest', 'from', 'mps_youtube.players', 'import', 'mplayer', '@pytest.mark.parametrize(', '\"exename,', 'exp_err\",', '[', '(\"\",', '(OSError,', 'PermissionError)),', '(\"mplayersomething\",', 'FileNotFoundError),', '],', ')', 'def', 'test_get_mplayer_version_no_mplayer(exename,', 'exp_err):', 'with', 'pytest.raises(exp_err):', 'mplayer._get_mplayer_version(exename)', 'def', 'test_get_mplayer_version_invalid_input():', 'with', 'mock.patch(\"mps_youtube.players.mplayer.subprocess\"),', 'pytest.raises(TypeError):', 'mplayer._get_mplayer_version(mock.MagicMock())', '@pytest.mark.parametrize(', '\"output,', 'exp_res\",', '[', '(', '\"MPlayer', 'Redxii-SVN-r38151-6.2.0', '(x86_64)', '(C)', '2000-2019', 'MPlayer', 'Team...\",', '38151,', '),', '(\"MPlayer', 'SVN-r38151-6.2.0', '(x86_64)', '(C)', '2000-2019', 'MPlayer', 'Team...\",', '38151),', '(\"MPlayer', '1.4', '(Debian),', 'built', 'with', 'gcc-10', '(C)', '2000-2019', 'MPlayer', 'Team\",', '(1,', '4)),', '],', ')', 'def', 'test_get_mplayer_version(output,', 'exp_res):', 'with', 'mock.patch(\"mps_youtube.players.mplayer.subprocess\")', 'as', 'm_subprocess:', 'm_subprocess.check_output.return_value.decode.return_value', '=', 'output', 'assert', 'mplayer._get_mplayer_version(mock.MagicMock())', '==', 'exp_res']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/test/test_util.py",
        "vector": "['import', 'pytest', 'import', 'mps_youtube.util', 'as', 'util', '@pytest.mark.parametrize(', '\"num,t,exp_res\",', '(', '(0,', '\"\",', '\"\"),', '(0,', 'None,', '\"\"),', '),', ')', 'def', 'test_uea_pad(num,', 't,', 'exp_res):', 'res', '=', 'util.uea_pad(num,', 't)', 'assert', 'res', '==', 'exp_res']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/mps_youtube/util.py",
        "vector": "['import', 'collections', 'import', 'ctypes', 'import', 'json', 'import', 'logging', 'import', 'os', 'import', 'platform', 'import', 're', 'import', 'subprocess', 'import', 'sys', 'import', 'time', 'import', 'unicodedata', 'import', 'urllib', 'from', 'datetime', 'import', 'datetime,', 'timezone', 'from', 'importlib', 'import', 'import_module', 'from', '.', 'import', 'c,', 'description_parser,', 'g,', 'terminalsize', 'from', '.playlist', 'import', 'Video', 'macos', '=', 'platform.system()', '==', '\"Darwin\"', 'mswin', '=', 'os.name', '==', '\"nt\"', 'not_utf8_environment', '=', 'mswin', 'or', '(', '\"UTF-8\"', 'not', 'in', 'sys.stdout.encoding', 'if', 'sys.stdout.encoding', 'else', 'False', ')', 'XYTuple', '=', \"collections.namedtuple('XYTuple',\", \"'width\", 'height', \"max_results')\", 'class', 'IterSlicer():', 'def', '__init__(self,', 'iterable,', 'length=None):', 'self.ilist', '=', '[]', 'self.iterable', '=', 'iter(iterable)', 'self.length', '=', 'length', 'if', 'length', 'is', 'None:', 'try:', 'self.length', '=', 'len(iterable)', 'except', 'TypeError:', 'pass', 'def', '__getitem__(self,', 'sliced):', 'if', 'isinstance(sliced,', 'slice):', 'stop', '=', 'sliced.stop', 'else:', 'stop', '=', 'sliced', 'if', '(stop', 'is', 'None)', 'or', '(stop', '<', '0):', 'stop', '=', 'None', 'while', '(stop', 'is', 'None)', 'or', '(stop', '>', 'len(self.ilist)', '-', '1):', 'try:', 'self.ilist.append(next(self.iterable))', 'except', 'StopIteration:', 'break', 'return', 'self.ilist[sliced]', 'def', '__len__(self):', 'if', 'self.length', 'is', 'None:', 'self.length', '=', 'len(self[:])', 'return', 'self.length', 'def', 'has_exefile(filename):', 'paths', '=', '[os.getcwd()]', '+', 'os.environ.get(\"PATH\",', \"'').split(os.pathsep)\", 'paths', '=', '[i', 'for', 'i', 'in', 'paths', 'if', 'i]', 'dbg(\"searching', 'path', 'for', '%s\",', 'filename)', 'for', 'path', 'in', 'paths:', 'exepath', '=', 'os.path.join(path,', 'filename)', 'if', 'os.path.isfile(exepath):', 'if', 'os.access(exepath,', 'os.X_OK):', 'dbg(\"found', 'at', '%s\",', 'exepath)', 'return', 'exepath', 'return', 'False', 'def', 'dbg(*args):', 'logging.debug(*(xenc(i)', 'for', 'i', 'in', 'args))', 'def', 'utf8_replace(txt):', 'sse', '=', 'sys.stdout.encoding', 'txt', '=', 'str(txt)', 'txt', '=', 'txt.encode(sse,', '\"replace\").decode(sse)', 'return', 'txt', 'def', 'xenc(stuff):', 'return', 'utf8_replace(stuff)', 'if', 'not_utf8_environment', 'else', 'stuff', 'def', 'xprint(stuff,', 'end=None):', 'print(xenc(stuff),', 'end=end)', 'def', 'mswinfn(filename):', 'if', 'mswin:', 'filename', '=', 'utf8_replace(filename)', 'if', 'not_utf8_environment', 'else', 'filename', 'allowed', '=', 're.compile(r\\'[^\\\\\\\\/?*$\\\\\\'\"%&:<>|]\\')', 'filename', '=', '\"\".join(x', 'if', 'allowed.match(x)', 'else', '\"_\"', 'for', 'x', 'in', 'filename)', 'return', 'filename', 'def', 'sanitize_filename(filename,', 'ignore_slashes=False):', 'if', 'not', 'ignore_slashes:', 'filename', '=', \"filename.replace('/',\", \"'-')\", 'if', 'macos:', 'filename', '=', \"filename.replace(':',\", \"'_')\", 'if', 'mswin:', 'filename', '=', 'utf8_replace(filename)', 'if', 'not_utf8_environment', 'else', 'filename', 'allowed', '=', 're.compile(r\\'[^\\\\\\\\?*$\\\\\\'\"%&:<>|]\\')', 'filename', '=', '\"\".join(x', 'if', 'allowed.match(x)', 'else', '\"_\"', 'for', 'x', 'in', 'filename)', 'return', 'filename', 'def', 'set_window_title(title):', 'if', 'mswin:', 'ctypes.windll.kernel32.SetConsoleTitleW(xenc(title))', 'else:', \"sys.stdout.write(xenc('\\\\x1b]2;'\", '+', 'title', '+', \"'\\\\x07'))\", 'def', 'list_update(item,', 'lst,', 'remove=False):', 'if', 'not', 'remove', 'and', 'item', 'not', 'in', 'lst:', 'lst.append(item)', 'elif', 'remove', 'and', 'item', 'in', 'lst:', 'lst.remove(item)', 'def', 'get_near_name(begin,', 'items):', 'for', 'name', 'in', 'sorted(items):', 'if', 'name.lower().startswith(begin.lower()):', 'return', 'name', 'return', 'begin', 'def', 'F(key,', 'nb=0,', 'na=0,', 'textlib=None):', 'textlib', '=', 'textlib', 'or', 'g.text', 'assert', 'key', 'in', 'textlib', 'text', '=', 'textlib[key]', 'percent_fmt', '=', 'textlib.get(key', '+', '\"_\")', 'if', 'percent_fmt:', 'text', '=', 're.sub(r\"\\\\*\",', 'r\"%s\",', 'text)', '%', 'percent_fmt', 'text', '=', 'text.replace(\"&&\",', '\"%s\")', 'return', '\"\\\\n\"', '*', 'nb', '+', 'text', '+', 'c.w', '+', '\"\\\\n\"', '*', 'na', 'def', 'get_pafy(item,', 'force=False,', 'callback=None):', 'if', 'isinstance(item,', 'Video):', 'ytid', '=', 'item.ytid', 'else:', 'ytid', '=', 'item', 'callback_fn', '=', 'callback', 'or', '(lambda', 'x:', 'None)', 'cached', '=', 'g.pafs.get(ytid)', 'if', 'not', 'force', 'and', 'cached', 'and', 'cached.expiry', '>', 'time.time():', 'dbg(\"get', 'pafy', 'cache', 'hit', 'for', '%s\",', 'cached.title)', 'cached.fresh', '=', 'False', 'return', 'cached', 'else:', 'try:', 'p', '=', 'None', 'except', 'IOError', 'as', 'e:', 'if', '\"pafy\"', 'in', 'str(e):', 'dbg(c.p', '+', '\"retrying', 'failed', 'pafy', 'get:', '\"', '+', 'ytid', '+', 'c.w)', 'p', '=', 'None', 'else:', 'raise', 'g.pafs[ytid]', '=', 'p', 'p.fresh', '=', 'True', 'thread', '=', '\"preload:', '\"', 'if', 'not', 'callback', 'else', '\"\"', 'dbg(\"%s%sgot', 'new', 'pafy', 'object:', '%s%s\"', '%', '(c.y,', 'thread,', 'p.title[:26],', 'c.w))', 'dbg(\"%s%sgot', 'new', 'pafy', 'object:', '%s%s\"', '%', '(c.y,', 'thread,', 'p.videoid,', 'c.w))', 'return', 'p', 'def', 'getxy():', 'from', '.', 'import', 'config', 'if', 'g.detectable_size:', 'x,', 'y', '=', 'terminalsize.get_terminal_size()', 'max_results', '=', 'y', '-', '4', 'if', 'y', '<', '54', 'else', '50', 'max_results', '=', '1', 'if', 'y', '<=', '5', 'else', 'max_results', 'else:', 'x,', 'max_results', '=', 'config.CONSOLE_WIDTH.get,', 'config.MAX_RESULTS.get', 'y', '=', 'max_results', '+', '4', 'return', 'XYTuple(x,', 'y,', 'max_results)', 'def', 'fmt_time(seconds):', 'hms', '=', \"time.strftime('%H:%M:%S',\", 'time.gmtime(int(seconds)))', 'H,', 'M,', 'S', '=', 'hms.split(\":\")', 'if', 'H', '==', '\"00\":', 'hms', '=', 'M', '+', '\":\"', '+', 'S', 'elif', 'H', '==', '\"01\"', 'and', 'int(M)', '<', '40:', 'hms', '=', 'str(int(M)', '+', '60)', '+', '\":\"', '+', 'S', 'elif', 'H.startswith(\"0\"):', 'hms', '=', '\":\".join([H[1],', 'M,', 'S])', 'return', 'hms', 'def', 'correct_truncate(text,', 'max_len):', 'str_len,', 'out', '=', '0,', \"''\", 'for', 'c', 'in', 'text:', 'str_len', '+=', 'real_len(c)', 'if', 'str_len', '<=', 'max_len:', 'out', '+=', 'c', 'else:', 'break', 'return', 'out', 'def', 'uea_pad(num,', 't,', 'direction=\"<\",', 'notrunc=False):', 'direction', '=', 'direction.strip()', 'or', '\"<\"', 't', '=', \"'\", \"'.join(str(t).split('\\\\n'))\", 'if', 'num', '<=', '0:', 'return', \"''\", 'if', 'not', 'notrunc:', 't', '=', 'correct_truncate(t,', 'num)', 'if', 'real_len(t)', '<', 'num:', 'spaces', '=', 'num', '-', 'real_len(t)', 'if', 'direction', '==', '\"<\":', 't', '=', 't', '+', '(\"', '\"', '*', 'spaces)', 'elif', 'direction', '==', '\">\":', 't', '=', '(\"', '\"', '*', 'spaces)', '+', 't', 'elif', 'direction', '==', '\"^\":', 'right', '=', 'False', 'while', 'real_len(t)', '<', 'num:', 't', '=', 't', '+', '\"', '\"', 'if', 'right', 'else', '\"', '\"', '+', 't', 'right', '=', 'not', 'right', 'return', 't', 'def', 'real_len(u,', 'alt=False):', 'if', 'not', 'isinstance(u,', 'str):', 'u', '=', 'u.decode(\"utf8\")', 'u', '=', 'xenc(u)', 'ueaw', '=', 'unicodedata.east_asian_width', 'if', 'alt:', 'widths', '=', 'dict(N=.75,', 'Na=1,', 'W=2,', 'F=2,', 'A=1)', 'else:', 'widths', '=', 'dict(W=2,', 'F=2,', 'A=1,', 'N=1,', 'H=0.5)', 'return', 'int(round(sum(widths.get(ueaw(char),', '1)', 'for', 'char', 'in', 'u)))', 'def', 'yt_datetime(yt_date_time):', 'if', 'yt_date_time', 'is', 'None:', 'return', \"['Unknown',\", \"'Unknown',\", \"'Unknown']\", 'time_obj', '=', 'time.strptime(yt_date_time,', '\"%Y-%m-%dT%H:%M:%SZ\")', 'locale_date', '=', 'time.strftime(\"%x\",', 'time_obj)', 'locale_time', '=', 'time.strftime(\"%X\",', 'time_obj)', 'short_date', '=', 're.sub(r\"(\\\\d\\\\d\\\\D\\\\d\\\\d\\\\D)20(\\\\d\\\\d)$\",', 'r\"\\\\1\\\\2\",', 'locale_date)', 'return', 'time_obj,', 'short_date,', 'locale_time', 'def', 'yt_datetime_local(yt_date_time):', 'datetime_obj', '=', 'datetime.strptime(yt_date_time,', '\"%Y-%m-%dT%H:%M:%SZ\")', 'datetime_obj', '=', 'utc2local(datetime_obj)', 'locale_date', '=', 'datetime_obj.strftime(\"%x\")', 'locale_time', '=', 'datetime_obj.strftime(\"%X\")', 'short_date', '=', 're.sub(r\"(\\\\d\\\\d\\\\D\\\\d\\\\d\\\\D)20(\\\\d\\\\d)$\",', 'r\"\\\\1\\\\2\",', 'locale_date)', 'return', 'datetime_obj,', 'short_date,', 'locale_time', 'def', 'utc2local(utc):', 'return', 'utc.replace(tzinfo=timezone.utc).astimezone(tz=None)', 'def', 'parse_multi(choice,', 'end=None):', 'end', '=', 'end', 'or', 'str(len(g.model))', 'pattern', '=', \"r'(?<![-\\\\d\\\\[\\\\]])(\\\\d+-\\\\d+|-\\\\d+|\\\\d+-|\\\\d+)(?:\\\\[(\\\\d+)\\\\])?(?![-\\\\d\\\\[\\\\]])'\", 'items', '=', 're.findall(pattern,', 'choice)', 'alltracks', '=', '[]', 'for', 'x,', 'nreps', 'in', 'items:', 'nreps', '=', 'min(int(nreps),', '100)', 'if', 'nreps', 'else', '1', 'for', '_', 'in', 'range(nreps):', 'if', 'x.startswith(\"-\"):', 'x', '=', '\"1\"', '+', 'x', 'elif', 'x.endswith(\"-\"):', 'x', '=', 'x', '+', 'str(end)', 'if', '\"-\"', 'in', 'x:', 'nrange', '=', 'x.split(\"-\")', 'startend', '=', 'map(int,', 'nrange)', 'alltracks', '+=', '_bi_range(*startend)', 'else:', 'alltracks.append(int(x))', 'return', 'alltracks', 'def', '_bi_range(start,', 'end):', 'if', 'start', '==', 'end:', 'return', '(start,)', 'elif', 'end', '<', 'start:', 'return', 'reversed(range(end,', 'start', '+', '1))', 'else:', 'return', 'range(start,', 'end', '+', '1)', 'def', 'is_known_player(player):', 'for', 'allowed_player', 'in', 'g.playerargs_defaults:', 'regex', '=', \"r'(?:\\\\b%s($|\\\\.[a-zA-Z0-9]+$))'\", '%', 're.escape(allowed_player)', 'match', '=', 're.search(regex,', 'player)', 'if', 'mswin:', 'match', '=', 're.search(regex,', 'player,', 're.IGNORECASE)', 'if', 'match:', 'return', 'allowed_player', 'return', 'None', 'def', 'load_player_info(player):', 'if', '\"mpv\"', 'in', 'player:', 'g.mpv_version', '=', '_get_mpv_version(player)', 'g.mpv_options', '=', 'subprocess.check_output(', '[player,', '\"--list-options\"]).decode()', 'if', 'not', 'mswin:', 'if', '\"--input-unix-socket\"', 'in', 'g.mpv_options:', 'g.mpv_usesock', '=', '\"--input-unix-socket\"', 'dbg(c.g', '+', '\"mpv', 'supports', '--input-unix-socket\"', '+', 'c.w)', 'elif', '\"--input-ipc-server\"', 'in', 'g.mpv_options:', 'g.mpv_usesock', '=', '\"--input-ipc-server\"', 'dbg(c.g', '+', '\"mpv', 'supports', '--input-ipc-server\"', '+', 'c.w)', 'elif', '\"mplayer\"', 'in', 'player:', 'g.mplayer_version', '=', '_get_mplayer_version(player)', 'def', 'fetch_songs(text,', 'title=\"Unknown\"):', 'return', 'description_parser.parse(text,', 'title)', 'def', 'number_string_to_list(text):', 'text', '=', '[x.strip()', 'for', 'x', 'in', 'text.split(\",\")]', 'vals', '=', '[]', 'for', 'line', 'in', 'text:', 'k', '=', 'line', 'if', '\"-\"', 'in', 'line:', 'separated', '=', '[int(x.strip())', 'for', 'x', 'in', 'k.split(\"-\")]', 'for', 'number', 'in', 'list(range(separated[0]-1,', 'separated[1])):', 'vals.append(number)', 'else:', 'vals.append(k)', 'return', '[int(x)', '-', '1', 'for', 'x', 'in', 'vals]', 'def', '_get_mpv_version(exename):', 'o', '=', 'subprocess.check_output([exename,', '\"--version\"]).decode()', 're_ver', '=', 're.compile(r\"mpv', '(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\")', 'for', 'line', 'in', 'o.split(\"\\\\n\"):', 'm', '=', 're_ver.match(line)', 'if', 'm:', 'v', '=', 'tuple(map(int,', 'm.groups()))', 'dbg(\"%s', 'version', '%s.%s.%s', 'detected\",', 'exename,', '*v)', 'return', 'v', 'dbg(\"%sFailed', 'to', 'detect', 'mpv', 'version%s\",', 'c.r,', 'c.w)', 'return', '-1,', '0,', '0', 'def', '_get_mplayer_version(exename):', 'o', '=', 'subprocess.check_output([exename]).decode()', 'm', '=', \"re.search('MPlayer\", \"SVN[\\\\s-]r([0-9]+)',\", 'o,', 're.MULTILINE|re.IGNORECASE)', 'ver', '=', '0', 'if', 'm:', 'ver', '=', 'int(m.groups()[0])', 'else:', 'm', '=', \"re.search('MPlayer\", \"([0-9])+.([0-9]+)',\", 'o,', 're.MULTILINE)', 'if', 'm:', 'ver', '=', 'tuple(int(i)', 'for', 'i', 'in', 'm.groups())', 'else:', 'dbg(\"%sFailed', 'to', 'detect', 'mplayer', 'version%s\",', 'c.r,', 'c.w)', 'return', 'ver', 'def', '_get_metadata(song_title):', 't', '=', 're.sub(\"[\\\\(\\\\[].*?[\\\\)\\\\]]\",', '\"\",', 'song_title.lower())', 't', '=', \"t.split('-')\", 'if', 'len(t)', '!=', '2:', 't', '=', 't[0]', 't', '=', \"t.split(':')\", 'if', 'len(t)', '!=', '2:', 't', '=', 't[0]', 't', '=', \"t.split('|')\", 'if', 'len(t)', '!=', '2:', 'return', 'None', 't[0]', '=', 're.sub(\"(ft', '|ft.|feat', '|feat.).*.\",', '\"\",', 't[0])', 't[1]', '=', 're.sub(\"(ft', '|ft.|feat', '|feat.).*.\",', '\"\",', 't[1])', 't[0]', '=', 't[0].strip()', 't[1]', '=', 't[1].strip()', 'metadata', '=', '_get_metadata_from_lastfm(t[0],', 't[1])', 'if', 'metadata', 'is', 'not', 'None:', 'return', 'metadata', 'metadata', '=', '_get_metadata_from_lastfm(t[1],', 't[0])', 'return', 'metadata', 'def', '_get_metadata_from_lastfm(artist,', 'track):', 'url', '=', \"'https://ws.audioscrobbler.com/2.0/?method=track.getInfo&api_key=12dec50313f885d407cf8132697b8712&'\", 'url', '+=', 'urllib.parse.urlencode({\"artist\":', 'artist})', '+', \"'&'\", 'url', '+=', 'urllib.parse.urlencode({\"track\":', 'track})', '+', \"'&'\", 'url', '+=', \"'&format=json'\", 'try:', 'resp', '=', 'urllib.request.urlopen(url)', 'metadata', '=', 'dict()', 'data', '=', \"json.loads(resp.read().decode('utf-8'))\", \"metadata['track_title']\", '=', \"data['track']['name']\", \"metadata['artist']\", '=', \"data['track']['artist']['name']\", \"metadata['album']\", '=', \"data['track']['album']['title']\", \"metadata['album_art_url']\", '=', \"data['track']['album']['image'][-1]['\", 'except', '(KeyError,', 'IndexError):', 'return', 'None', 'except', '(urllib.error.HTTPError,', 'urllib.error.URLError):', 'return', 'None', 'return', 'metadata', 'def', 'assign_player(player):', 'module_name', '=', 'player', 'if', \"'/'\", 'in', 'module_name:', 'module_name', '=', \"module_name.split('/')[-1]\", 'if', \"module_name.endswith('.com')\", 'or', \"module_name.endswith('.exe'):\", 'module_name', '=', \"module_name.split('.')[0]\", 'try:', 'module', '=', \"import_module('mps_youtube.players.{0}'.format(module_name))\", 'pl', '=', 'getattr(module,', 'module_name)', 'g.PLAYER_OBJ', '=', 'pl(player)', 'except', 'ImportError:', 'from', 'mps_youtube.players', 'import', 'GenericPlayer', 'g.PLAYER_OBJ', '=', 'GenericPlayer.GenericPlayer(player)', 'class', 'CommandCompleter:', 'COMMANDS', '=', '[]', 'def', '__init__(self):', 'from', '.', 'import', 'config', 'self.SET_COMMANDS', '=', \"['set\", \"'\", '+', 'i.lower()', 'for', 'i', 'in', 'config]', 'def', 'complete_command(self,', 'text,', 'state):', 'if', \"text.startswith('set'):\", 'results', '=', '[x', 'for', 'x', 'in', 'self.SET_COMMANDS', 'if', 'x.startswith(text)]', '+', '[None]', 'else:', 'results', '=', '[x', 'for', 'x', 'in', 'self.COMMANDS', 'if', 'x.startswith(text)]', '+', '[None]', 'return', 'results[state]', 'def', 'add_cmd(self,', 'val):', 'if(not', 'val', 'in', 'self.COMMANDS):', 'self.COMMANDS.append(val)', 'def', 'parse_video_length(duration):', 'if', 'duration:', 'duration_tokens', '=', 'duration.split(\":\")', 'if', 'len(duration_tokens)', '==', '2:', 'return', 'int(duration_tokens[0])', '*', '60', '+', 'int(duration_tokens[1])', 'else:', 'return', 'int(duration_tokens[0])', '*', '3600', '+', 'int(duration_tokens[1])', '*', '60', '+', 'int(duration_tokens[2])', 'else:', 'return', '10']"
    },
    {
        "link": "https://raw.githubusercontent.com/mps-youtube/yewtube/master/setup.py",
        "vector": "['import', 'os', 'import', 'sys', 'if', 'sys.version_info', '<', '(3,', '6):', 'sys.exit(\"yewtube', 'requires', 'minimum', 'python', '3.6\")', 'from', 'setuptools', 'import', 'setup', 'with', 'open(\"README.md\",', '\"r\",', 'encoding=\"utf-8\")', 'as', 'fh:', 'long_description', '=', 'fh.read()', 'with', \"open('requirements.txt',\", \"'r')\", 'as', 'fh:', 'requirements', '=', 'fh.readlines()', '__version__', '=', '\"2.10.4\"', 'options', '=', 'dict(', 'name=\"yewtube\",', 'version=__version__,', 'description=\"A', 'Terminal', 'based', 'YouTube', 'player', 'and', 'downloader.', 'No', 'Youtube', 'API', 'key', 'required.', 'Forked', 'from', 'mps-youtube\",', 'keywords=[\"video\",', '\"music\",', '\"audio\",', '\"youtube\",', '\"stream\",', '\"download\"],', 'author=\"talha_programmer\",', 'author_email=\"talhaasghar.contact@simplelogin.fr\",', 'url=\"https://github.com/iamtalhaasghar/yewtube\",', 'download_url=\"https://github.com/iamtalhaasghar/yewtube/releases\",', \"packages=['mps_youtube',\", \"'mps_youtube.commands',\", \"'mps_youtube.listview',\", \"'mps_youtube.players'],\", \"entry_points={'console_scripts':\", \"['yt\", '=', \"mps_youtube:main.main']},\", \"python_requires='>=3.6',\", 'install_requires=requirements,', 'extras_require={', '\"mpris\":', '[', '\"dbus-python>=1.2.18\",', '\"PyGObject>=3.42.0\",', '],', '\"docs\":', '[', '\"mkdocs-gen-files>=0.3.4\",', '\"mkdocs-literate-nav>=0.4.1\",', '\"mkdocs-macros-plugin>=0.6.4\",', '\"mkdocs-material>=8.2.1\",', '\"mkdocstrings-python-legacy>=0.2.2\",', '\"mkdocstrings>=0.18.0\",', '],', '},', 'classifiers=[', '\"Topic', '::', 'Utilities\",', '\"Topic', '::', 'Internet', '::', 'WWW/HTTP\",', '\"Topic', '::', 'Multimedia', '::', 'Sound/Audio', '::', 'Players\",', '\"Topic', '::', 'Multimedia', '::', 'Video\",', '\"Environment', '::', 'Console\",', '\"Environment', '::', 'Win32', '(MS', 'Windows)\",', '\"Environment', '::', 'MacOS', 'X\",', '\"Operating', 'System', '::', 'POSIX', '::', 'Linux\",', '\"Operating', 'System', '::', 'MacOS\",', '\"Operating', 'System', '::', 'MacOS', '::', 'MacOS', '9\",', '\"Operating', 'System', '::', 'MacOS', '::', 'MacOS', 'X\",', '\"Operating', 'System', '::', 'Microsoft\",', '\"Operating', 'System', '::', 'Microsoft', '::', 'Windows', '::', 'Windows', '7\",', '\"Operating', 'System', '::', 'Microsoft', '::', 'Windows', '::', 'Windows', 'XP\",', '\"Operating', 'System', '::', 'Microsoft', '::', 'Windows', '::', 'Windows', 'Vista\",', '\"Intended', 'Audience', '::', 'End', 'Users/Desktop\",', '\"Programming', 'Language', '::', 'Python\",', '\"Programming', 'Language', '::', 'Python', '::', '3\",', '\"Programming', 'Language', '::', 'Python', '::', '3.3\",', '\"Programming', 'Language', '::', 'Python', '::', '3.4\",', '\"Programming', 'Language', '::', 'Python', '::', '3', '::', 'Only\",', '\"Development', 'Status', '::', '5', '-', 'Production/Stable\",', '\"License', '::', 'OSI', 'Approved', '::', 'GNU', 'General', 'Public', 'License', 'v3', '(GPLv3)\"', '],', 'options={', '\"py2exe\":', '{', '\"excludes\":', '(\"readline,', 'win32api,', 'win32con,', 'dbus,', 'gi,\"', '\"', 'urllib.unquote_plus,', 'urllib.urlencode,\"', '\"', 'PyQt4,', 'gtk\"),', '\"bundle_files\":', '1', '}', '},', 'package_data={\"\":', '[\"LICENSE\",', '\"README.md\",', '\"CHANGELOG.md\"]},', \"long_description_content_type='text/markdown',\", 'long_description=long_description', ')', 'if', \"sys.platform.startswith('linux'):\", \"options['data_files']\", '=', \"[('share/applications/',\", \"['yewtube.desktop'])]\", 'if', 'os.name', '==', '\"nt\":', 'try:', 'import', 'py2exe', \"options['console']\", '=', \"['yt']\", \"options['zipfile']\", '=', 'None', 'except', 'ImportError:', 'pass', 'setup(**options)']"
    }
]